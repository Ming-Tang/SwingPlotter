/**
 * gpu.js
 * http://gpu.rocks/
 *
 * GPU Accelerated JavaScript
 *
 * @version 1.0.0-rc.1
 * @date Tue Oct 17 2017 23:41:29 GMT-0700 (PDT)
 *
 * @license MIT
 * The MIT License
 *
 * Copyright (c) 2017 gpu.js Team
 */
"use strict";
(function e(t, n, r) {
	function s(o, u) {
		if (!n[o]) {
			if (!t[o]) {
				var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
			}var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
				var n = t[o][1][e];return s(n ? n : e);
			}, l, l.exports, e, t, n, r);
		}return n[o].exports;
	}var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) s(r[o]);return s;
})({ 1: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var FunctionBuilderBase = require('../function-builder-base');
		var CPUFunctionNode = require('./function-node');

		module.exports = function (_FunctionBuilderBase) {
			_inherits(CPUFunctionBuilder, _FunctionBuilderBase);

			function CPUFunctionBuilder() {
				_classCallCheck(this, CPUFunctionBuilder);

				var _this = _possibleConstructorReturn(this, (CPUFunctionBuilder.__proto__ || Object.getPrototypeOf(CPUFunctionBuilder)).call(this));

				_this.Node = CPUFunctionNode;
				return _this;
			}

			_createClass(CPUFunctionBuilder, [{
				key: 'polyfillStandardFunctions',
				value: function polyfillStandardFunctions() {}
			}]);

			return CPUFunctionBuilder;
		}(FunctionBuilderBase);
	}, { "../function-builder-base": 6, "./function-node": 2 }], 2: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var BaseFunctionNode = require('../function-node-base');
		var utils = require('../../core/utils');

		module.exports = function (_BaseFunctionNode) {
			_inherits(CPUFunctionNode, _BaseFunctionNode);

			function CPUFunctionNode() {
				_classCallCheck(this, CPUFunctionNode);

				return _possibleConstructorReturn(this, (CPUFunctionNode.__proto__ || Object.getPrototypeOf(CPUFunctionNode)).apply(this, arguments));
			}

			_createClass(CPUFunctionNode, [{
				key: 'generate',
				value: function generate() {
					if (this.debug) {
						console.log(this);
					}
					this.functionStringArray = this.astGeneric(this.getJsAST(), [], this);
					this.functionString = this.functionStringArray.join('').trim();
					return this.functionString;
				}

			}, {
				key: 'getFunctionPrototypeString',
				value: function getFunctionPrototypeString() {
					if (this.webGlFunctionPrototypeString) {
						return this.webGlFunctionPrototypeString;
					}
					return this.webGlFunctionPrototypeString = this.generate();
				}

			}, {
				key: 'astGeneric',
				value: function astGeneric(ast, retArr, funcParam) {
					if (ast === null) {
						throw this.astErrorOutput('NULL ast', ast, funcParam);
					} else {
						if (Array.isArray(ast)) {
							for (var i = 0; i < ast.length; i++) {
								this.astGeneric(ast[i], retArr, funcParam);
							}
							return retArr;
						}

						switch (ast.type) {
							case 'FunctionDeclaration':
								return this.astFunctionDeclaration(ast, retArr, funcParam);
							case 'FunctionExpression':
								return this.astFunctionExpression(ast, retArr, funcParam);
							case 'ReturnStatement':
								return this.astReturnStatement(ast, retArr, funcParam);
							case 'Literal':
								return this.astLiteral(ast, retArr, funcParam);
							case 'BinaryExpression':
								return this.astBinaryExpression(ast, retArr, funcParam);
							case 'Identifier':
								return this.astIdentifierExpression(ast, retArr, funcParam);
							case 'AssignmentExpression':
								return this.astAssignmentExpression(ast, retArr, funcParam);
							case 'ExpressionStatement':
								return this.astExpressionStatement(ast, retArr, funcParam);
							case 'EmptyStatement':
								return this.astEmptyStatement(ast, retArr, funcParam);
							case 'BlockStatement':
								return this.astBlockStatement(ast, retArr, funcParam);
							case 'IfStatement':
								return this.astIfStatement(ast, retArr, funcParam);
							case 'BreakStatement':
								return this.astBreakStatement(ast, retArr, funcParam);
							case 'ContinueStatement':
								return this.astContinueStatement(ast, retArr, funcParam);
							case 'ForStatement':
								return this.astForStatement(ast, retArr, funcParam);
							case 'WhileStatement':
								return this.astWhileStatement(ast, retArr, funcParam);
							case 'VariableDeclaration':
								return this.astVariableDeclaration(ast, retArr, funcParam);
							case 'VariableDeclarator':
								return this.astVariableDeclarator(ast, retArr, funcParam);
							case 'ThisExpression':
								return this.astThisExpression(ast, retArr, funcParam);
							case 'SequenceExpression':
								return this.astSequenceExpression(ast, retArr, funcParam);
							case 'UnaryExpression':
								return this.astUnaryExpression(ast, retArr, funcParam);
							case 'UpdateExpression':
								return this.astUpdateExpression(ast, retArr, funcParam);
							case 'LogicalExpression':
								return this.astLogicalExpression(ast, retArr, funcParam);
							case 'MemberExpression':
								return this.astMemberExpression(ast, retArr, funcParam);
							case 'CallExpression':
								return this.astCallExpression(ast, retArr, funcParam);
							case 'ArrayExpression':
								return this.astArrayExpression(ast, retArr, funcParam);
						}

						throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast, funcParam);
					}
				}

			}, {
				key: 'astFunctionDeclaration',
				value: function astFunctionDeclaration(ast, retArr, funcParam) {
					if (this.addFunction) {
						this.addFunction(null, utils.getAstString(this.jsFunctionString, ast));
					}
					return retArr;
				}

			}, {
				key: 'astFunctionExpression',

				value: function astFunctionExpression(ast, retArr, funcParam) {

					if (!funcParam.isRootKernel) {
						retArr.push('function');
						funcParam.kernalAst = ast;
						retArr.push(' ');
						retArr.push(funcParam.functionName);
						retArr.push('(');

						for (var i = 0; i < funcParam.paramNames.length; ++i) {
							var paramName = funcParam.paramNames[i];

							if (i > 0) {
								retArr.push(', ');
							}

							retArr.push(' ');
							retArr.push('user_');
							retArr.push(paramName);
						}

						retArr.push(') {\n');
					}

					for (var _i = 0; _i < ast.body.body.length; ++_i) {
						this.astGeneric(ast.body.body[_i], retArr, funcParam);
						retArr.push('\n');
					}

					if (!funcParam.isRootKernel) {
						retArr.push('}\n');
					}
					return retArr;
				}

			}, {
				key: 'astReturnStatement',
				value: function astReturnStatement(ast, retArr, funcParam) {
					if (funcParam.isRootKernel) {
						retArr.push('kernelResult = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
					} else if (funcParam.isSubKernel) {
						retArr.push(funcParam.functionName + 'Result = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
						retArr.push('return ' + funcParam.functionName + 'Result;');
					} else {
						retArr.push('return ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
					}

					return retArr;
				}

			}, {
				key: 'astLiteral',
				value: function astLiteral(ast, retArr, funcParam) {

					if (isNaN(ast.value)) {
						throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast, funcParam);
					}

					retArr.push(ast.value);

					return retArr;
				}

			}, {
				key: 'astBinaryExpression',
				value: function astBinaryExpression(ast, retArr, funcParam) {
					retArr.push('(');
					this.astGeneric(ast.left, retArr, funcParam);
					retArr.push(ast.operator);
					this.astGeneric(ast.right, retArr, funcParam);
					retArr.push(')');
					return retArr;
				}

			}, {
				key: 'astIdentifierExpression',
				value: function astIdentifierExpression(idtNode, retArr, funcParam) {
					if (idtNode.type !== 'Identifier') {
						throw this.astErrorOutput('IdentifierExpression - not an Identifier', ast, funcParam);
					}

					switch (idtNode.name) {
						case 'gpu_threadX':
							retArr.push('threadId.x');
							break;
						case 'gpu_threadY':
							retArr.push('threadId.y');
							break;
						case 'gpu_threadZ':
							retArr.push('threadId.z');
							break;
						case 'gpu_outputX':
							retArr.push('uOutputDim.x');
							break;
						case 'gpu_outputY':
							retArr.push('uOutputDim.y');
							break;
						case 'gpu_outputZ':
							retArr.push('uOutputDim.z');
							break;
						default:
							if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
								retArr.push('constants_' + idtNode.name);
							} else {
								var userParamName = funcParam.getUserParamName(idtNode.name);
								if (userParamName !== null) {
									retArr.push('user_' + userParamName);
								} else {
									retArr.push('user_' + idtNode.name);
								}
							}
					}

					return retArr;
				}

			}, {
				key: 'astForStatement',
				value: function astForStatement(forNode, retArr, funcParam) {
					if (forNode.type !== 'ForStatement') {
						throw this.astErrorOutput('Invalid for statment', ast, funcParam);
					}

					if (forNode.test && forNode.test.type === 'BinaryExpression') {
						if ((forNode.test.right.type === 'Identifier' || forNode.test.right.type === 'Literal') && forNode.test.operator === '<' && this.isIdentifierConstant(forNode.test.right.name) === false) {

							if (!this.loopMaxIterations) {
								console.warn('Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.');
								console.warn('Set loopMaxIterations or use a for loop of fixed length to silence this message.');
							}

							retArr.push('for (');
							this.astGeneric(forNode.init, retArr, funcParam);
							if (retArr[retArr.length - 1] !== ';') {
								retArr.push(';');
							}
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							retArr.push('LOOP_MAX');
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');

							retArr.push('{\n');
							retArr.push('if (');
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							this.astGeneric(forNode.test.right, retArr, funcParam);
							retArr.push(') {\n');
							if (forNode.body.type === 'BlockStatement') {
								for (var i = 0; i < forNode.body.body.length; i++) {
									this.astGeneric(forNode.body.body[i], retArr, funcParam);
								}
							} else {
								this.astGeneric(forNode.body, retArr, funcParam);
							}
							retArr.push('} else {\n');
							retArr.push('break;\n');
							retArr.push('}\n');
							retArr.push('}\n');

							return retArr;
						} else if (forNode.init.declarations) {
							var declarations = JSON.parse(JSON.stringify(forNode.init.declarations));
							var updateArgument = forNode.update.argument;
							if (!Array.isArray(declarations) || declarations.length < 1) {
								console.log(this.jsFunctionString);
								throw new Error('Error: Incompatible for loop declaration');
							}

							if (declarations.length > 1) {
								var initArgument = null;
								for (var _i2 = 0; _i2 < declarations.length; _i2++) {
									var declaration = declarations[_i2];
									if (declaration.id.name === updateArgument.name) {
										initArgument = declaration;
										declarations.splice(_i2, 1);
									} else {
										retArr.push('var ');
										this.astGeneric(declaration, retArr, funcParam);
										retArr.push(';');
									}
								}

								retArr.push('for (let ');
								this.astGeneric(initArgument, retArr, funcParam);
								retArr.push(';');
							} else {
								retArr.push('for (');
								this.astGeneric(forNode.init, retArr, funcParam);
							}

							this.astGeneric(forNode.test, retArr, funcParam);
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');
							this.astGeneric(forNode.body, retArr, funcParam);
							return retArr;
						}
					}

					throw this.astErrorOutput('Invalid for statement', forNode, funcParam);
				}

			}, {
				key: 'astWhileStatement',
				value: function astWhileStatement(whileNode, retArr, funcParam) {
					if (whileNode.type !== 'WhileStatement') {
						throw this.astErrorOutput('Invalid while statment', ast, funcParam);
					}

					retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
					retArr.push('if (');
					this.astGeneric(whileNode.test, retArr, funcParam);
					retArr.push(') {\n');
					this.astGeneric(whileNode.body, retArr, funcParam);
					retArr.push('} else {\n');
					retArr.push('break;\n');
					retArr.push('}\n');
					retArr.push('}\n');

					return retArr;
				}

			}, {
				key: 'astAssignmentExpression',
				value: function astAssignmentExpression(assNode, retArr, funcParam) {
					this.astGeneric(assNode.left, retArr, funcParam);
					retArr.push(assNode.operator);
					this.astGeneric(assNode.right, retArr, funcParam);
					return retArr;
				}

			}, {
				key: 'astEmptyStatement',
				value: function astEmptyStatement(eNode, retArr, funcParam) {
					return retArr;
				}

			}, {
				key: 'astBlockStatement',
				value: function astBlockStatement(bNode, retArr, funcParam) {
					retArr.push('{\n');
					for (var i = 0; i < bNode.body.length; i++) {
						this.astGeneric(bNode.body[i], retArr, funcParam);
					}
					retArr.push('}\n');
					return retArr;
				}

			}, {
				key: 'astExpressionStatement',
				value: function astExpressionStatement(esNode, retArr, funcParam) {
					this.astGeneric(esNode.expression, retArr, funcParam);
					retArr.push(';\n');
					return retArr;
				}

			}, {
				key: 'astVariableDeclaration',
				value: function astVariableDeclaration(vardecNode, retArr, funcParam) {
					retArr.push('var ');
					for (var i = 0; i < vardecNode.declarations.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(vardecNode.declarations[i], retArr, funcParam);
					}
					retArr.push(';');
					return retArr;
				}

			}, {
				key: 'astVariableDeclarator',
				value: function astVariableDeclarator(ivardecNode, retArr, funcParam) {
					this.astGeneric(ivardecNode.id, retArr, funcParam);
					if (ivardecNode.init !== null) {
						retArr.push('=');
						this.astGeneric(ivardecNode.init, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astIfStatement',
				value: function astIfStatement(ifNode, retArr, funcParam) {
					retArr.push('if (');
					this.astGeneric(ifNode.test, retArr, funcParam);
					retArr.push(')');
					if (ifNode.consequent.type === 'BlockStatement') {
						this.astGeneric(ifNode.consequent, retArr, funcParam);
					} else {
						retArr.push(' {\n');
						this.astGeneric(ifNode.consequent, retArr, funcParam);
						retArr.push('\n}\n');
					}

					if (ifNode.alternate) {
						retArr.push('else ');
						if (ifNode.alternate.type === 'BlockStatement') {
							this.astGeneric(ifNode.alternate, retArr, funcParam);
						} else {
							retArr.push(' {\n');
							this.astGeneric(ifNode.alternate, retArr, funcParam);
							retArr.push('\n}\n');
						}
					}
					return retArr;
				}

			}, {
				key: 'astBreakStatement',
				value: function astBreakStatement(brNode, retArr, funcParam) {
					retArr.push('break;\n');
					return retArr;
				}

			}, {
				key: 'astContinueStatement',
				value: function astContinueStatement(crNode, retArr, funcParam) {
					retArr.push('continue;\n');
					return retArr;
				}

			}, {
				key: 'astLogicalExpression',
				value: function astLogicalExpression(logNode, retArr, funcParam) {
					retArr.push('(');
					this.astGeneric(logNode.left, retArr, funcParam);
					retArr.push(logNode.operator);
					this.astGeneric(logNode.right, retArr, funcParam);
					retArr.push(')');
					return retArr;
				}

			}, {
				key: 'astUpdateExpression',
				value: function astUpdateExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astUnaryExpression',
				value: function astUnaryExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astThisExpression',
				value: function astThisExpression(tNode, retArr, funcParam) {
					retArr.push('this');
					return retArr;
				}

			}, {
				key: 'astMemberExpression',
				value: function astMemberExpression(mNode, retArr, funcParam) {
					var unrolled = this.astMemberExpressionUnroll(mNode.property);
					this.astGeneric(mNode.object, retArr, funcParam);
					if (mNode.property.type === 'Identifier' && mNode.computed) {
						unrolled = 'user_' + unrolled;
					}
					if (mNode.computed) {
						retArr.push('[');
						retArr.push(unrolled);
						retArr.push(']');
					} else {
						retArr.push('.');
						retArr.push(unrolled);
					}

					return retArr;
				}
			}, {
				key: 'astSequenceExpression',
				value: function astSequenceExpression(sNode, retArr, funcParam) {
					for (var i = 0; i < sNode.expressions.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(sNode.expressions, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astMemberExpressionUnroll',
				value: function astMemberExpressionUnroll(ast, funcParam) {
					if (ast.type === 'Identifier') {
						return ast.name;
					} else if (ast.type === 'ThisExpression') {
						return 'this';
					}

					if (ast.type === 'MemberExpression') {
						if (ast.object && ast.property) {
							return this.astMemberExpressionUnroll(ast.object, funcParam) + '.' + this.astMemberExpressionUnroll(ast.property, funcParam);
						}
					}

					if (ast.type === 'Literal') {
						return ast.value;
					}

					throw this.astErrorOutput('Unknown CallExpression_unroll', ast, funcParam);
				}

			}, {
				key: 'astCallExpression',
				value: function astCallExpression(ast, retArr, funcParam) {
					if (ast.callee) {
						var funcName = this.astMemberExpressionUnroll(ast.callee);

						if (funcParam.calledFunctions.indexOf(funcName) < 0) {
							funcParam.calledFunctions.push(funcName);
						}
						if (!funcParam.hasOwnProperty('funcName')) {
							funcParam.calledFunctionsArguments[funcName] = [];
						}

						var functionArguments = [];
						funcParam.calledFunctionsArguments[funcName].push(functionArguments);

						retArr.push(funcName);

						retArr.push('(');

						for (var i = 0; i < ast.arguments.length; ++i) {
							var argument = ast.arguments[i];
							if (i > 0) {
								retArr.push(', ');
							}
							this.astGeneric(argument, retArr, funcParam);
							if (argument.type === 'Identifier') {
								var paramIndex = funcParam.paramNames.indexOf(argument.name);
								if (paramIndex === -1) {
									functionArguments.push(null);
								} else {
									functionArguments.push({
										name: argument.name,
										type: funcParam.paramTypes[paramIndex]
									});
								}
							} else {
								functionArguments.push(null);
							}
						}

						retArr.push(')');

						return retArr;
					}

					throw this.astErrorOutput('Unknown CallExpression', ast, funcParam);

					return retArr;
				}

			}, {
				key: 'astArrayExpression',
				value: function astArrayExpression(arrNode, retArr, funcParam) {
					var arrLen = arrNode.elements.length;

					retArr.push('new Float32Array(');
					for (var i = 0; i < arrLen; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}
						var subNode = arrNode.elements[i];
						this.astGeneric(subNode, retArr, funcParam);
					}
					retArr.push(')');

					return retArr;
				}
			}], [{
				key: 'astFunctionPrototype',
				value: function astFunctionPrototype(ast, retArr, funcParam) {
					if (funcParam.isRootKernel || funcParam.isSubKernel) {
						return retArr;
					}

					retArr.push(funcParam.returnType);
					retArr.push(' ');
					retArr.push(funcParam.functionName);
					retArr.push('(');

					for (var i = 0; i < funcParam.paramNames.length; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}

						retArr.push(funcParam.paramTypes[i]);
						retArr.push(' ');
						retArr.push('user_');
						retArr.push(funcParam.paramNames[i]);
					}

					retArr.push(');\n');

					return retArr;
				}
			}]);

			return CPUFunctionNode;
		}(BaseFunctionNode);
	}, { "../../core/utils": 24, "../function-node-base": 7 }], 3: [function (require, module, exports) {
		'use strict';

		var utils = require('../../core/utils');
		var kernelRunShortcut = require('../kernel-run-shortcut');

		module.exports = function (cpuKernel, name) {
			return '() => {\n    ' + kernelRunShortcut.toString() + ';\n    const utils = {\n      allPropertiesOf: function ' + utils.allPropertiesOf.toString() + ',\n      clone: function ' + utils.clone.toString() + ',\n      /*splitArray: function ' + utils.splitArray.toString() + ',\n      getArgumentType: function ' + utils.getArgumentType.toString() + ',\n      getOutput: function ' + utils.getOutput.toString() + ',\n      dimToTexSize: function ' + utils.dimToTexSize.toString() + ',\n      copyFlatten: function ' + utils.copyFlatten.toString() + ',\n      flatten: function ' + utils.flatten.toString() + ',\n      systemEndianness: \'' + utils.systemEndianness() + '\',\n      initWebGl: function ' + utils.initWebGl.toString() + ',\n      isArray: function ' + utils.isArray.toString() + '*/\n    };\n    class ' + (name || 'Kernel') + ' {\n      constructor() {        \n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = ' + JSON.stringify(cpuKernel.paramNames) + ';\n        this.paramTypes = ' + JSON.stringify(cpuKernel.paramTypes) + ';\n        this.texSize = ' + JSON.stringify(cpuKernel.texSize) + ';\n        this.output = ' + JSON.stringify(cpuKernel.output) + ';\n        this._kernelString = `' + cpuKernel._kernelString + '`;\n        this.output = ' + JSON.stringify(cpuKernel.output) + ';\n\t\t    this.run = function() {\n          this.run = null;\n          this.build();\n          return this.run.apply(this, arguments);\n        }.bind(this);\n        this.thread = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n      }\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      ' + cpuKernel.build.toString() + '\n      run () { ' + cpuKernel.kernelString + ' }\n      getKernelString() { return this._kernelString; }\n    };\n    return kernelRunShortcut(new Kernel());\n  };';
		};
	}, { "../../core/utils": 24, "../kernel-run-shortcut": 9 }], 4: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var KernelBase = require('../kernel-base');
		var utils = require('../../core/utils');
		var kernelString = require('./kernel-string');

		module.exports = function (_KernelBase) {
			_inherits(CPUKernel, _KernelBase);

			function CPUKernel(fnString, settings) {
				_classCallCheck(this, CPUKernel);

				var _this = _possibleConstructorReturn(this, (CPUKernel.__proto__ || Object.getPrototypeOf(CPUKernel)).call(this, fnString, settings));

				_this._fnBody = utils.getFunctionBodyFromString(fnString);
				_this._fn = null;
				_this.run = null;
				_this._canvasCtx = null;
				_this._imageData = null;
				_this._colorData = null;
				_this._kernelString = null;
				_this.thread = {
					x: 0,
					y: 0,
					z: 0
				};

				_this.run = function () {
					this.run = null;
					this.build();
					return this.run.apply(this, arguments);
				}.bind(_this);
				return _this;
			}

			_createClass(CPUKernel, [{
				key: 'validateOptions',
				value: function validateOptions() {
					if (!this.output || this.output.length === 0) {
						if (arguments.length !== 1) {
							throw 'Auto dimensions only supported for kernels with only one input';
						}

						var argType = utils.getArgumentType(arguments[0]);
						if (argType === 'Array') {
							this.output = utils.getDimensions(argType);
						} else if (argType === 'Texture') {
							this.output = arguments[0].output;
						} else {
							throw 'Auto dimensions not supported for input type: ' + argType;
						}
					}
				}

			}, {
				key: 'build',
				value: function build() {

					var kernelArgs = [];
					for (var i = 0; i < arguments.length; i++) {
						var argType = utils.getArgumentType(arguments[i]);
						if (argType === 'Array' || argType === 'Number') {
							kernelArgs[i] = arguments[i];
						} else if (argType === 'Texture') {
							kernelArgs[i] = arguments[i].toArray();
						} else {
							throw 'Input type not supported (CPU): ' + arguments[i];
						}
					}

					var threadDim = this.threadDim = utils.clone(this.output);

					while (threadDim.length < 3) {
						threadDim.push(1);
					}

					if (this.graphical) {
						var canvas = this.getCanvas();
						canvas.width = threadDim[0];
						canvas.height = threadDim[1];
						this._canvasCtx = canvas.getContext('2d');
						this._imageData = this._canvasCtx.createImageData(threadDim[0], threadDim[1]);
						this._colorData = new Uint8ClampedArray(threadDim[0] * threadDim[1] * 4);
					}

					var kernelString = this.getKernelString();

					if (this.debug) {
						console.log('Options:');
						console.dir(this);
						console.log('Function output:');
						console.log(kernelString);
					}

					this.kernelString = kernelString;
					this.run = new Function([], kernelString).bind(this)();
				}
			}, {
				key: 'color',
				value: function color(r, g, b, a) {
					if (typeof a === 'undefined') {
						a = 1;
					}

					r = Math.floor(r * 255);
					g = Math.floor(g * 255);
					b = Math.floor(b * 255);
					a = Math.floor(a * 255);

					var width = this.output[0];
					var height = this.output[1];

					var x = this.thread.x;
					var y = height - this.thread.y - 1;

					var index = x + y * width;

					this._colorData[index * 4 + 0] = r;
					this._colorData[index * 4 + 1] = g;
					this._colorData[index * 4 + 2] = b;
					this._colorData[index * 4 + 3] = a;
				}

			}, {
				key: 'getKernelString',
				value: function getKernelString() {
					var _this2 = this;

					if (this._kernelString !== null) return this._kernelString;

					var builder = this.functionBuilder;

					var threadDim = this.threadDim || (this.threadDim = utils.clone(this.output));
					while (threadDim.length < 3) {
						threadDim.push(1);
					}

					builder.addKernel(this.fnString, {
						prototypeOnly: false,
						constants: this.constants,
						debug: this.debug,
						loopMaxIterations: this.loopMaxIterations
					}, this.paramNames, this.paramTypes);

					builder.addFunctions(this.functions);

					if (this.subKernels !== null) {
						this.subKernelOutputTextures = [];
						this.subKernelOutputVariableNames = [];
						for (var i = 0; i < this.subKernels.length; i++) {
							var subKernel = this.subKernels[i];
							builder.addSubKernel(subKernel);
							this.subKernelOutputVariableNames.push(subKernel.name + 'Result');
						}
					} else if (this.subKernelProperties !== null) {
						this.subKernelOutputVariableNames = [];
						var _i = 0;
						for (var p in this.subKernelProperties) {
							if (!this.subKernelProperties.hasOwnProperty(p)) continue;
							var _subKernel = this.subKernelProperties[p];
							builder.addSubKernel(_subKernel);
							this.subKernelOutputVariableNames.push(_subKernel.name + 'Result');
							_i++;
						}
					}

					var prototypes = builder.getPrototypes();
					var kernel = prototypes.shift();
					var kernelString = this._kernelString = '\n\t\tvar LOOP_MAX = ' + this._getLoopMaxString() + ';\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '  var ' + name + ' = null;\n';
					}).join('')) + '\n    return function (' + this.paramNames.map(function (paramName) {
						return 'user_' + paramName;
					}).join(', ') + ') {\n    var ret = new Array(' + threadDim[2] + ');\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '  ' + name + 'Z = new Array(' + threadDim[2] + ');\n';
					}).join('')) + '\n    for (this.thread.z = 0; this.thread.z < ' + threadDim[2] + '; this.thread.z++) {\n      ret[this.thread.z] = new Array(' + threadDim[1] + ');\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '    ' + name + 'Z[this.thread.z] = new Array(' + threadDim[1] + ');\n';
					}).join('')) + '\n      for (this.thread.y = 0; this.thread.y < ' + threadDim[1] + '; this.thread.y++) {\n        ret[this.thread.z][this.thread.y] = new Array(' + threadDim[0] + ');\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '      ' + name + 'Z[this.thread.z][this.thread.y] = new Array(' + threadDim[0] + ');\n';
					}).join('')) + '\n        for (this.thread.x = 0; this.thread.x < ' + threadDim[0] + '; this.thread.x++) {\n          var kernelResult;\n          ' + kernel + '\n          ret[this.thread.z][this.thread.y][this.thread.x] = kernelResult;\n' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '        ' + name + 'Z[this.thread.z][this.thread.y][this.thread.x] = ' + name + ';\n';
					}).join('')) + '\n          }\n        }\n      }\n      \n      if (this.graphical) {\n        this._imageData.data.set(this._colorData);\n        this._canvasCtx.putImageData(this._imageData, 0, 0);\n        return;\n      }\n      \n      if (this.output.length === 1) {\n        ret = ret[0][0];\n' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '    ' + name + ' = ' + name + 'Z[0][0];\n';
					}).join('')) + '\n      \n    } else if (this.output.length === 2) {\n      ret = ret[0];\n      ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '    ' + name + ' = ' + name + 'Z[0];\n';
					}).join('')) + '\n    }\n    \n    ' + (this.subKernelOutputVariableNames === null ? 'return ret;\n' : this.subKernels !== null ? 'var result = [\n        ' + this.subKernelOutputVariableNames.map(function (name) {
						return '' + name;
					}).join(',\n') + '\n      ];\n      result.result = ret;\n      return result;\n' : 'return {\n        result: ret,\n        ' + Object.keys(this.subKernelProperties).map(function (name, i) {
						return name + ': ' + _this2.subKernelOutputVariableNames[i];
					}).join(',\n') + '\n      };') + '\n    ' + (prototypes.length > 0 ? prototypes.join('\n') : '') + '\n    }.bind(this);';
					return kernelString;
				}

			}, {
				key: 'toString',
				value: function toString() {
					return kernelString(this);
				}

			}, {
				key: 'precompileKernelObj',
				value: function precompileKernelObj(argTypes) {

					var threadDim = this.threadDim || (this.threadDim = utils.clone(this.output));

					return {
						threadDim: threadDim
					};
				}

			}, {
				key: '_getLoopMaxString',

				value: function _getLoopMaxString() {
					return this.loopMaxIterations ? ' ' + parseInt(this.loopMaxIterations) + ';\n' : ' 1000;\n';
				}
			}], [{
				key: 'compileKernel',
				value: function compileKernel(precompileObj) {

					var threadDim = precompileObj.threadDim;

					while (threadDim.length < 3) {
						threadDim.push(1);
					}
				}
			}]);

			return CPUKernel;
		}(KernelBase);
	}, { "../../core/utils": 24, "../kernel-base": 8, "./kernel-string": 3 }], 5: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var utils = require('../../core/utils');
		var RunnerBase = require('../runner-base');
		var CPUKernel = require('./kernel');
		var CPUFunctionBuilder = require('./function-builder');

		module.exports = function (_RunnerBase) {
			_inherits(CPURunner, _RunnerBase);

			function CPURunner(settings) {
				_classCallCheck(this, CPURunner);

				var _this = _possibleConstructorReturn(this, (CPURunner.__proto__ || Object.getPrototypeOf(CPURunner)).call(this, new CPUFunctionBuilder(), settings));

				_this.Kernel = CPUKernel;
				_this.kernel = null;
				return _this;
			}

			_createClass(CPURunner, [{
				key: 'getMode',
				value: function getMode() {
					return 'cpu';
				}
			}]);

			return CPURunner;
		}(RunnerBase);
	}, { "../../core/utils": 24, "../runner-base": 10, "./function-builder": 1, "./kernel": 4 }], 6: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		module.exports = function () {

			function FunctionBuilderBase(gpu) {
				_classCallCheck(this, FunctionBuilderBase);

				this.nodeMap = {};
				this.nativeFunctions = {};
				this.gpu = gpu;
				this.rootKernel = null;
				this.Node = null;
			}

			_createClass(FunctionBuilderBase, [{
				key: 'addNativeFunction',
				value: function addNativeFunction(functionName, glslFunctionString) {
					this.nativeFunctions[functionName] = glslFunctionString;
				}

			}, {
				key: 'addFunction',
				value: function addFunction(functionName, jsFunction, paramTypes, returnType) {
					this.addFunctionNode(new this.Node(functionName, jsFunction, paramTypes, returnType).setAddFunction(this.addFunction.bind(this)));
				}
			}, {
				key: 'addFunctions',
				value: function addFunctions(functions) {
					if (functions) {
						if (Array.isArray(functions)) {
							for (var i = 0; i < functions.length; i++) {
								this.addFunction(null, functions[i]);
							}
						} else {
							for (var p in functions) {
								this.addFunction(p, functions[p]);
							}
						}
					}
				}
			}, {
				key: 'addNativeFunctions',
				value: function addNativeFunctions(nativeFunctions) {
					for (var functionName in nativeFunctions) {
						if (!nativeFunctions.hasOwnProperty(functionName)) continue;
						this.addNativeFunction(functionName, nativeFunctions[functionName]);
					}
				}

			}, {
				key: 'addFunctionNode',
				value: function addFunctionNode(inNode) {
					this.nodeMap[inNode.functionName] = inNode;
					if (inNode.isRootKernel) {
						this.rootKernel = inNode;
					}
				}

			}, {
				key: 'traceFunctionCalls',
				value: function traceFunctionCalls(functionName, retList, parent) {
					functionName = functionName || 'kernel';
					retList = retList || [];

					var fNode = this.nodeMap[functionName];
					if (fNode) {
						if (retList.indexOf(functionName) >= 0) {} else {
							retList.push(functionName);
							if (parent) {
								fNode.parent = parent;
								fNode.constants = parent.constants;
							}
							fNode.getFunctionString();
							for (var i = 0; i < fNode.calledFunctions.length; ++i) {
								this.traceFunctionCalls(fNode.calledFunctions[i], retList, fNode);
							}
						}
					}

					if (this.nativeFunctions[functionName]) {
						if (retList.indexOf(functionName) >= 0) {} else {
							retList.push(functionName);
						}
					}

					return retList;
				}

			}, {
				key: 'addKernel',
				value: function addKernel(fnString, options, paramNames, paramTypes) {
					var kernelNode = new this.Node('kernel', fnString, options, paramTypes);
					kernelNode.setAddFunction(this.addFunction.bind(this));
					kernelNode.paramNames = paramNames;
					kernelNode.paramTypes = paramTypes;
					kernelNode.isRootKernel = true;
					this.addFunctionNode(kernelNode);
					return kernelNode;
				}

			}, {
				key: 'addSubKernel',
				value: function addSubKernel(jsFunction, options, paramTypes, returnType) {
					var kernelNode = new this.Node(null, jsFunction, options, paramTypes, returnType);
					kernelNode.setAddFunction(this.addFunction.bind(this));
					kernelNode.isSubKernel = true;
					this.addFunctionNode(kernelNode);
					return kernelNode;
				}

			}, {
				key: 'getPrototypeString',
				value: function getPrototypeString(functionName) {
					return this.getPrototypes(functionName).join('\n');
				}

			}, {
				key: 'getPrototypes',
				value: function getPrototypes(functionName) {
					this.rootKernel.generate();
					if (functionName) {
						return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());
					}
					return this.getPrototypesFromFunctionNames(Object.keys(this.nodeMap));
				}

			}, {
				key: 'getStringFromFunctionNames',
				value: function getStringFromFunctionNames(functionList) {
					var ret = [];
					for (var i = 0; i < functionList.length; ++i) {
						var node = this.nodeMap[functionList[i]];
						if (node) {
							ret.push(this.nodeMap[functionList[i]].getFunctionString());
						}
					}
					return ret.join('\n');
				}

			}, {
				key: 'getPrototypesFromFunctionNames',
				value: function getPrototypesFromFunctionNames(functionList, opt) {
					var ret = [];
					for (var i = 0; i < functionList.length; ++i) {
						var functionName = functionList[i];
						var node = this.nodeMap[functionName];
						if (node) {
							ret.push(node.getFunctionPrototypeString(opt));
						} else if (this.nativeFunctions[functionName]) {
							ret.push(this.nativeFunctions[functionName]);
						}
					}
					return ret;
				}

			}, {
				key: 'getPrototypeStringFromFunctionNames',
				value: function getPrototypeStringFromFunctionNames(functionList, opt) {
					return this.getPrototypesFromFunctionNames(functionList, opt).toString();
				}

			}, {
				key: 'getString',
				value: function getString(functionName, opt) {
					if (opt === undefined) {
						opt = {};
					}

					if (functionName) {
						return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName, [], opt).reverse(), opt);
					}
					return this.getStringFromFunctionNames(Object.keys(this.nodeMap), opt);
				}
			}, {
				key: 'polyfillStandardFunctions',
				value: function polyfillStandardFunctions() {
					throw new Error('polyfillStandardFunctions not defined on base function builder');
				}
			}]);

			return FunctionBuilderBase;
		}();
	}, {}], 7: [function (require, module, exports) {
		'use strict';

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
			return typeof obj;
		} : function (obj) {
			return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		};

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var utils = require('../core/utils');
		var acorn = require('acorn');

		module.exports = function () {

			function BaseFunctionNode(functionName, jsFunction, options, paramTypes, returnType) {
				_classCallCheck(this, BaseFunctionNode);

				this.calledFunctions = [];
				this.calledFunctionsArguments = {};
				this.initVariables = [];
				this.readVariables = [];
				this.writeVariables = [];
				this.addFunction = null;
				this.isRootKernel = false;
				this.isSubKernel = false;
				this.parent = null;
				this.debug = null;
				this.prototypeOnly = null;
				this.constants = null;

				if (options) {
					if (options.hasOwnProperty('debug')) {
						this.debug = options.debug;
					}
					if (options.hasOwnProperty('prototypeOnly')) {
						this.prototypeOnly = options.prototypeOnly;
					}
					if (options.hasOwnProperty('constants')) {
						this.constants = options.constants;
					}
					if (options.hasOwnProperty('loopMaxIterations')) {
						this.loopMaxIterations = options.loopMaxIterations;
					}
				}

				if (!jsFunction) {
					throw 'jsFunction, parameter is missing';
				}

				this.jsFunctionString = jsFunction.toString();
				if (!utils.isFunctionString(this.jsFunctionString)) {
					console.error('jsFunction, to string conversion check failed: not a function?', this.jsFunctionString);
					throw 'jsFunction, to string conversion check failed: not a function?';
				}

				if (!utils.isFunction(jsFunction)) {
					this.jsFunction = null;
				} else {
					this.jsFunction = jsFunction;
				}

				this.functionName = functionName || jsFunction && jsFunction.name || utils.getFunctionNameFromString(this.jsFunctionString);

				if (!this.functionName) {
					throw 'jsFunction, missing name argument or value';
				}

				this.paramNames = utils.getParamNamesFromString(this.jsFunctionString);
				if (paramTypes) {
					if (Array.isArray(paramTypes)) {
						if (paramTypes.length !== this.paramNames.length) {
							throw 'Invalid argument type array length, against function length -> (' + paramTypes.length + ',' + this.paramNames.length + ')';
						}
						this.paramTypes = paramTypes;
					} else if ((typeof paramTypes === 'undefined' ? 'undefined' : _typeof(paramTypes)) === 'object') {
						var paramVariableNames = Object.keys(paramTypes);
						if (paramTypes.hasOwnProperty('returns')) {
							this.returnType = paramTypes.returns;
							paramVariableNames.splice(paramVariableNames.indexOf('returns'), 1);
						}
						if (paramVariableNames.length > 0 && paramVariableNames.length !== this.paramNames.length) {
							throw 'Invalid argument type array length, against function length -> (' + paramVariableNames.length + ',' + this.paramNames.length + ')';
						} else {
							this.paramTypes = this.paramNames.map(function (key) {
								if (paramTypes.hasOwnProperty(key)) {
									return paramTypes[key];
								} else {
									return 'float';
								}
							});
						}
					}
				} else {
					this.paramTypes = [];
				}

				if (!this.returnType) {
					this.returnType = returnType || 'float';
				}
			}

			_createClass(BaseFunctionNode, [{
				key: 'isIdentifierConstant',
				value: function isIdentifierConstant(paramName) {
					if (!this.constants) return false;
					return this.constants.hasOwnProperty(paramName);
				}
			}, {
				key: 'setAddFunction',
				value: function setAddFunction(fn) {
					this.addFunction = fn;
					return this;
				}

			}, {
				key: 'getJsFunction',
				value: function getJsFunction() {
					if (this.jsFunction) {
						return this.jsFunction;
					}

					if (this.jsFunctionString) {
						this.jsFunction = eval(this.jsFunctionString);
						return this.jsFunction;
					}

					throw 'Missing jsFunction, and jsFunctionString parameter';
				}

			}, {
				key: 'getJsAST',
				value: function getJsAST(inParser) {
					if (this.jsFunctionAST) {
						return this.jsFunctionAST;
					}

					inParser = inParser || acorn;
					if (inParser === null) {
						throw 'Missing JS to AST parser';
					}

					var ast = inParser.parse('var ' + this.functionName + ' = ' + this.jsFunctionString + ';', {
						locations: true
					});
					if (ast === null) {
						throw 'Failed to parse JS code';
					}

					var funcAST = ast.body[0].declarations[0].init;
					this.jsFunctionAST = funcAST;

					return funcAST;
				}

			}, {
				key: 'getFunctionString',
				value: function getFunctionString() {
					this.generate();
					return this.functionString;
				}

			}, {
				key: 'setFunctionString',
				value: function setFunctionString(functionString) {
					this.functionString = functionString;
				}

			}, {
				key: 'getParamType',
				value: function getParamType(paramName) {
					var paramIndex = this.paramNames.indexOf(paramName);
					if (paramIndex === -1) return null;
					if (!this.parent) return null;
					if (this.paramTypes[paramIndex]) return this.paramTypes[paramIndex];
					var calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];
					for (var i = 0; i < calledFunctionArguments.length; i++) {
						var calledFunctionArgument = calledFunctionArguments[i];
						if (calledFunctionArgument[paramIndex] !== null) {
							return this.paramTypes[paramIndex] = calledFunctionArgument[paramIndex].type;
						}
					}
					return null;
				}

			}, {
				key: 'getUserParamName',
				value: function getUserParamName(paramName) {
					var paramIndex = this.paramNames.indexOf(paramName);
					if (paramIndex === -1) return null;
					if (!this.parent) return null;
					var calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];
					for (var i = 0; i < calledFunctionArguments.length; i++) {
						var calledFunctionArgument = calledFunctionArguments[i];
						if (calledFunctionArgument[paramIndex] !== null) {
							return calledFunctionArgument[paramIndex].name;
						}
					}
					return null;
				}
			}, {
				key: 'generate',
				value: function generate(options) {
					throw new Error('generate not defined on BaseFunctionNode');
				}

			}, {
				key: 'astErrorOutput',
				value: function astErrorOutput(error, ast, funcParam) {
					console.error(utils.getAstString(this.jsFunctionString, ast));
					console.error(error, ast, funcParam);
					return error;
				}
			}]);

			return BaseFunctionNode;
		}();
	}, { "../core/utils": 24, "acorn": 26 }], 8: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var utils = require('../core/utils');

		module.exports = function () {

			function BaseKernel(fnString, settings) {
				_classCallCheck(this, BaseKernel);

				this.paramNames = utils.getParamNamesFromString(fnString);
				this.fnString = fnString;
				this.output = null;
				this.debug = false;
				this.graphical = false;
				this.loopMaxIterations = 0;
				this.constants = null;
				this.wraparound = null;
				this.hardcodeConstants = null;
				this.outputToTexture = null;
				this.texSize = null;
				this._canvas = null;
				this._webGl = null;
				this.threadDim = null;
				this.floatTextures = null;
				this.floatOutput = null;
				this.floatOutputForce = null;
				this.addFunction = null;
				this.functions = null;
				this.nativeFunctions = null;
				this.copyData = true;
				this.subKernels = null;
				this.subKernelProperties = null;
				this.subKernelNames = null;
				this.subKernelOutputVariableNames = null;
				this.functionBuilder = null;

				for (var p in settings) {
					if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;
					this[p] = settings[p];
				}
				if (settings.hasOwnProperty('canvas')) {
					this._canvas = settings.canvas;
				}
				if (settings.hasOwnProperty('output')) {
					this.setOutput(settings.output);
				}

				if (!this._canvas) this._canvas = utils.initCanvas();
			}

			_createClass(BaseKernel, [{
				key: 'build',
				value: function build() {
					throw new Error('"build" not defined on Base');
				}
			}, {
				key: 'setAddFunction',
				value: function setAddFunction(cb) {
					this.addFunction = cb;
					return this;
				}
			}, {
				key: 'setFunctions',
				value: function setFunctions(functions) {
					this.functions = functions;
					return this;
				}

			}, {
				key: 'setOutput',
				value: function setOutput(output) {
					if (output.hasOwnProperty('x')) {
						if (output.hasOwnProperty('y')) {
							if (output.hasOwnProperty('z')) {
								this.output = [output.x, output.y, output.z];
							} else {
								this.output = [output.x, output.y];
							}
						} else {
							this.output = [output.x];
						}
					} else {
						this.output = output;
					}
					return this;
				}

			}, {
				key: 'setDebug',
				value: function setDebug(flag) {
					this.debug = flag;
					return this;
				}

			}, {
				key: 'setGraphical',
				value: function setGraphical(flag) {
					this.graphical = flag;
					return this;
				}

			}, {
				key: 'setLoopMaxIterations',
				value: function setLoopMaxIterations(max) {
					this.loopMaxIterations = max;
					return this;
				}

			}, {
				key: 'setConstants',
				value: function setConstants(constants) {
					this.constants = constants;
					return this;
				}
			}, {
				key: 'setWraparound',
				value: function setWraparound(flag) {
					console.warn('Wraparound mode is not supported and undocumented.');
					this.wraparound = flag;
					return this;
				}
			}, {
				key: 'setHardcodeConstants',
				value: function setHardcodeConstants(flag) {
					this.hardcodeConstants = flag;
					return this;
				}
			}, {
				key: 'setOutputToTexture',
				value: function setOutputToTexture(flag) {
					this.outputToTexture = flag;
					return this;
				}

			}, {
				key: 'setFloatTextures',
				value: function setFloatTextures(flag) {
					this.floatTextures = flag;
					return this;
				}

			}, {
				key: 'setFloatOutput',
				value: function setFloatOutput(flag) {
					this.floatOutput = flag;
					return this;
				}
			}, {
				key: 'setFloatOutputForce',
				value: function setFloatOutputForce(flag) {
					this.floatOutputForce = flag;
					return this;
				}

			}, {
				key: 'setCanvas',
				value: function setCanvas(canvas) {
					this._canvas = canvas;
					return this;
				}

			}, {
				key: 'setWebGl',
				value: function setWebGl(webGl) {
					this._webGl = webGl;
					return this;
				}
			}, {
				key: 'setCopyData',
				value: function setCopyData(copyData) {
					this.copyData = copyData;
					return this;
				}

			}, {
				key: 'getCanvas',
				value: function getCanvas() {
					return this._canvas;
				}

			}, {
				key: 'getWebGl',
				value: function getWebGl() {
					return this._webGl;
				}
			}, {
				key: 'validateOptions',
				value: function validateOptions() {
					throw new Error('validateOptions not defined');
				}
			}, {
				key: 'exec',
				value: function exec() {
					return this.execute.apply(this, arguments);
				}
			}, {
				key: 'execute',
				value: function execute() {
					var _this = this;

					var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);

					return utils.newPromise(function (accept, reject) {
						try {
							accept(_this.run.apply(_this, args));
						} catch (e) {
							reject(e);
						}
					});
				}

			}, {
				key: 'addSubKernel',
				value: function addSubKernel(fnString) {
					if (this.subKernels === null) {
						this.subKernels = [];
						this.subKernelNames = [];
					}
					this.subKernels.push(fnString);
					this.subKernelNames.push(utils.getFunctionNameFromString(fnString));
					return this;
				}

			}, {
				key: 'addSubKernelProperty',
				value: function addSubKernelProperty(property, fnString) {
					if (this.subKernelProperties === null) {
						this.subKernelProperties = {};
						this.subKernelNames = [];
					}
					if (this.subKernelProperties.hasOwnProperty(property)) {
						throw new Error('cannot add sub kernel ' + property + ', already defined');
					}
					this.subKernelProperties[property] = fnString;
					this.subKernelNames.push(utils.getFunctionNameFromString(fnString));
					return this;
				}
			}, {
				key: 'addNativeFunction',
				value: function addNativeFunction(name, source) {
					this.functionBuilder.addNativeFunction(name, source);
				}
			}]);

			return BaseKernel;
		}();
	}, { "../core/utils": 24 }], 9: [function (require, module, exports) {
		'use strict';

		var utils = require('../core/utils');

		module.exports = function kernelRunShortcut(kernel) {
			var shortcut = function shortcut() {
				return kernel.run.apply(kernel, arguments);
			};

			utils.allPropertiesOf(kernel).forEach(function (key) {
				if (key[0] === '_' && key[1] === '_') return;
				if (typeof kernel[key] === 'function') {
					if (key.substring(0, 3) === 'add' || key.substring(0, 3) === 'set') {
						shortcut[key] = function () {
							kernel[key].apply(kernel, arguments);
							return shortcut;
						};
					} else {
						shortcut[key] = kernel[key].bind(kernel);
					}
				} else {
					shortcut.__defineGetter__(key, function () {
						return kernel[key];
					});
					shortcut.__defineSetter__(key, function (value) {
						kernel[key] = value;
					});
				}
			});

			shortcut.kernel = kernel;

			return shortcut;
		};
	}, { "../core/utils": 24 }], 10: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var utils = require('../core/utils');
		var kernelRunShortcut = require('./kernel-run-shortcut');

		module.exports = function () {

			function BaseRunner(functionBuilder, settings) {
				_classCallCheck(this, BaseRunner);

				settings = settings || {};
				this.kernel = settings.kernel;
				this.canvas = settings.canvas;
				this.webGl = settings.webGl;
				this.fn = null;
				this.functionBuilder = functionBuilder;
				this.fnString = null;
				this.endianness = utils.systemEndianness();
				this.functionBuilder.polyfillStandardFunctions();
			}

			_createClass(BaseRunner, [{
				key: 'textureToArray',
				value: function textureToArray(texture) {
					var copy = this.createKernel(function (x) {
						return x[this.thread.z][this.thread.y][this.thread.x];
					});

					return copy(texture);
				}

			}, {
				key: 'deleteTexture',
				value: function deleteTexture(texture) {
					this.webGl.deleteTexture(texture.texture);
				}

			}, {
				key: 'buildPromiseKernel',
				value: function buildPromiseKernel() {
					throw new Error('not yet implemented');
				}
			}, {
				key: 'getMode',
				value: function getMode() {
					throw new Error('"mode" not implemented on BaseRunner');
				}

			}, {
				key: 'buildKernel',
				value: function buildKernel(fn, settings) {
					settings = Object.assign({}, settings || {});
					var fnString = fn.toString();
					if (!settings.functionBuilder) {
						settings.functionBuilder = this.functionBuilder;
					}

					if (!settings.canvas) {
						settings.canvas = this.canvas;
					}

					if (!settings.webGl) {
						settings.webGl = this.webgl;
					}

					return kernelRunShortcut(new this.Kernel(fnString, settings));
				}
			}]);

			return BaseRunner;
		}();
	}, { "../core/utils": 24, "./kernel-run-shortcut": 9 }], 11: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var FunctionBuilderBase = require('../function-builder-base');
		var WebGLFunctionNode = require('./function-node');

		module.exports = function (_FunctionBuilderBase) {
			_inherits(WebGLFunctionBuilder, _FunctionBuilderBase);

			function WebGLFunctionBuilder() {
				_classCallCheck(this, WebGLFunctionBuilder);

				var _this = _possibleConstructorReturn(this, (WebGLFunctionBuilder.__proto__ || Object.getPrototypeOf(WebGLFunctionBuilder)).call(this));

				_this.Node = WebGLFunctionNode;
				return _this;
			}

			_createClass(WebGLFunctionBuilder, [{
				key: 'polyfillStandardFunctions',

				value: function polyfillStandardFunctions() {
					this.addFunction('round', _round);
				}
			}], [{
				key: 'round',
				value: function round(a) {
					return _round(a);
				}
			}]);

			return WebGLFunctionBuilder;
		}(FunctionBuilderBase);

		function _round(a) {
			return Math.floor(a + 0.5);
		}
	}, { "../function-builder-base": 6, "./function-node": 12 }], 12: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var FunctionNodeBase = require('../function-node-base');
		var utils = require('../../core/utils');
		var jsMathPrefix = 'Math.';
		var localPrefix = 'this.';
		var constantsPrefix = 'this.constants.';

		var DECODE32_ENCODE32 = /decode32\(\s+encode32\(/g;
		var ENCODE32_DECODE32 = /encode32\(\s+decode32\(/g;

		module.exports = function (_FunctionNodeBase) {
			_inherits(WebGLFunctionNode, _FunctionNodeBase);

			function WebGLFunctionNode() {
				_classCallCheck(this, WebGLFunctionNode);

				return _possibleConstructorReturn(this, (WebGLFunctionNode.__proto__ || Object.getPrototypeOf(WebGLFunctionNode)).apply(this, arguments));
			}

			_createClass(WebGLFunctionNode, [{
				key: 'generate',
				value: function generate() {
					if (this.debug) {
						console.log(this);
					}
					if (this.prototypeOnly) {
						return WebGLFunctionNode.astFunctionPrototype(this.getJsAST(), [], this).join('').trim();
					} else {
						this.functionStringArray = this.astGeneric(this.getJsAST(), [], this);
					}
					this.functionString = webGlRegexOptimize(this.functionStringArray.join('').trim());
					return this.functionString;
				}

			}, {
				key: 'astGeneric',
				value: function astGeneric(ast, retArr, funcParam) {
					if (ast === null) {
						throw this.astErrorOutput('NULL ast', ast, funcParam);
					} else {
						if (Array.isArray(ast)) {
							for (var i = 0; i < ast.length; i++) {
								this.astGeneric(ast[i], retArr, funcParam);
							}
							return retArr;
						}

						switch (ast.type) {
							case 'FunctionDeclaration':
								return this.astFunctionDeclaration(ast, retArr, funcParam);
							case 'FunctionExpression':
								return this.astFunctionExpression(ast, retArr, funcParam);
							case 'ReturnStatement':
								return this.astReturnStatement(ast, retArr, funcParam);
							case 'Literal':
								return this.astLiteral(ast, retArr, funcParam);
							case 'BinaryExpression':
								return this.astBinaryExpression(ast, retArr, funcParam);
							case 'Identifier':
								return this.astIdentifierExpression(ast, retArr, funcParam);
							case 'AssignmentExpression':
								return this.astAssignmentExpression(ast, retArr, funcParam);
							case 'ExpressionStatement':
								return this.astExpressionStatement(ast, retArr, funcParam);
							case 'EmptyStatement':
								return this.astEmptyStatement(ast, retArr, funcParam);
							case 'BlockStatement':
								return this.astBlockStatement(ast, retArr, funcParam);
							case 'IfStatement':
								return this.astIfStatement(ast, retArr, funcParam);
							case 'BreakStatement':
								return this.astBreakStatement(ast, retArr, funcParam);
							case 'ContinueStatement':
								return this.astContinueStatement(ast, retArr, funcParam);
							case 'ForStatement':
								return this.astForStatement(ast, retArr, funcParam);
							case 'WhileStatement':
								return this.astWhileStatement(ast, retArr, funcParam);
							case 'VariableDeclaration':
								return this.astVariableDeclaration(ast, retArr, funcParam);
							case 'VariableDeclarator':
								return this.astVariableDeclarator(ast, retArr, funcParam);
							case 'ThisExpression':
								return this.astThisExpression(ast, retArr, funcParam);
							case 'SequenceExpression':
								return this.astSequenceExpression(ast, retArr, funcParam);
							case 'UnaryExpression':
								return this.astUnaryExpression(ast, retArr, funcParam);
							case 'UpdateExpression':
								return this.astUpdateExpression(ast, retArr, funcParam);
							case 'LogicalExpression':
								return this.astLogicalExpression(ast, retArr, funcParam);
							case 'MemberExpression':
								return this.astMemberExpression(ast, retArr, funcParam);
							case 'CallExpression':
								return this.astCallExpression(ast, retArr, funcParam);
							case 'ArrayExpression':
								return this.astArrayExpression(ast, retArr, funcParam);
						}

						throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast, funcParam);
					}
				}

			}, {
				key: 'astFunctionDeclaration',
				value: function astFunctionDeclaration(ast, retArr, funcParam) {
					if (this.addFunction) {
						this.addFunction(null, utils.getAstString(this.jsFunctionString, ast));
					}
					return retArr;
				}

			}, {
				key: 'astFunctionExpression',

				value: function astFunctionExpression(ast, retArr, funcParam) {

					if (funcParam.isRootKernel) {
						retArr.push('void');
						funcParam.kernalAst = ast;
					} else {
						retArr.push(funcParam.returnType);
					}
					retArr.push(' ');
					retArr.push(funcParam.functionName);
					retArr.push('(');

					if (!funcParam.isRootKernel) {
						for (var i = 0; i < funcParam.paramNames.length; ++i) {
							var paramName = funcParam.paramNames[i];

							if (i > 0) {
								retArr.push(', ');
							}
							var type = funcParam.getParamType(paramName);
							switch (type) {
								case 'Texture':
								case 'Array':
									retArr.push('sampler2D');
									break;
								default:
									retArr.push('float');
							}

							retArr.push(' ');
							retArr.push('user_');
							retArr.push(paramName);
						}
					}

					retArr.push(') {\n');

					for (var _i = 0; _i < ast.body.body.length; ++_i) {
						this.astGeneric(ast.body.body[_i], retArr, funcParam);
						retArr.push('\n');
					}

					retArr.push('}\n');
					return retArr;
				}

			}, {
				key: 'astReturnStatement',
				value: function astReturnStatement(ast, retArr, funcParam) {
					if (funcParam.isRootKernel) {
						retArr.push('kernelResult = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
						retArr.push('return;');
					} else if (funcParam.isSubKernel) {
						retArr.push(funcParam.functionName + 'Result = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
						retArr.push('return ' + funcParam.functionName + 'Result;');
					} else {
						retArr.push('return ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
					}

					return retArr;
				}

			}, {
				key: 'astLiteral',
				value: function astLiteral(ast, retArr, funcParam) {

					if (isNaN(ast.value)) {
						throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast, funcParam);
					}

					retArr.push(ast.value);

					if (Number.isInteger(ast.value)) {
						retArr.push('.0');
					}

					return retArr;
				}

			}, {
				key: 'astBinaryExpression',
				value: function astBinaryExpression(ast, retArr, funcParam) {
					retArr.push('(');

					if (ast.operator === '%') {
						retArr.push('mod(');
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push(',');
						this.astGeneric(ast.right, retArr, funcParam);
						retArr.push(')');
					} else if (ast.operator === '===') {
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push('==');
						this.astGeneric(ast.right, retArr, funcParam);
					} else if (ast.operator === '!==') {
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push('!=');
						this.astGeneric(ast.right, retArr, funcParam);
					} else {
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push(ast.operator);
						this.astGeneric(ast.right, retArr, funcParam);
					}

					retArr.push(')');

					return retArr;
				}

			}, {
				key: 'astIdentifierExpression',
				value: function astIdentifierExpression(idtNode, retArr, funcParam) {
					if (idtNode.type !== 'Identifier') {
						throw this.astErrorOutput('IdentifierExpression - not an Identifier', ast, funcParam);
					}

					switch (idtNode.name) {
						case 'gpu_threadX':
							retArr.push('threadId.x');
							break;
						case 'gpu_threadY':
							retArr.push('threadId.y');
							break;
						case 'gpu_threadZ':
							retArr.push('threadId.z');
							break;
						case 'gpu_outputX':
							retArr.push('uOutputDim.x');
							break;
						case 'gpu_outputY':
							retArr.push('uOutputDim.y');
							break;
						case 'gpu_outputZ':
							retArr.push('uOutputDim.z');
							break;
						default:
							if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
								retArr.push('constants_' + idtNode.name);
							} else {
								var userParamName = funcParam.getUserParamName(idtNode.name);
								if (userParamName !== null) {
									retArr.push('user_' + userParamName);
								} else {
									retArr.push('user_' + idtNode.name);
								}
							}
					}

					return retArr;
				}

			}, {
				key: 'astForStatement',
				value: function astForStatement(forNode, retArr, funcParam) {
					if (forNode.type !== 'ForStatement') {
						throw this.astErrorOutput('Invalid for statment', ast, funcParam);
					}

					if (forNode.test && forNode.test.type === 'BinaryExpression') {
						if (forNode.test.right.type === 'Identifier' && forNode.test.operator === '<' && this.isIdentifierConstant(forNode.test.right.name) === false) {

							if (!this.loopMaxIterations) {
								console.warn('Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.');
								console.warn('Set loopMaxIterations or use a for loop of fixed length to silence this message.');
							}

							retArr.push('for (');
							this.astGeneric(forNode.init, retArr, funcParam);
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							retArr.push('LOOP_MAX');
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');

							retArr.push('{\n');
							retArr.push('if (');
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							this.astGeneric(forNode.test.right, retArr, funcParam);
							retArr.push(') {\n');
							if (forNode.body.type === 'BlockStatement') {
								for (var i = 0; i < forNode.body.body.length; i++) {
									this.astGeneric(forNode.body.body[i], retArr, funcParam);
								}
							} else {
								this.astGeneric(forNode.body, retArr, funcParam);
							}
							retArr.push('} else {\n');
							retArr.push('break;\n');
							retArr.push('}\n');
							retArr.push('}\n');

							return retArr;
						} else {
							var declarations = JSON.parse(JSON.stringify(forNode.init.declarations));
							var updateArgument = forNode.update.argument;
							if (!Array.isArray(declarations) || declarations.length < 1) {
								console.log(this.jsFunctionString);
								throw new Error('Error: Incompatible for loop declaration');
							}

							if (declarations.length > 1) {
								var initArgument = null;
								for (var _i2 = 0; _i2 < declarations.length; _i2++) {
									var declaration = declarations[_i2];
									if (declaration.id.name === updateArgument.name) {
										initArgument = declaration;
										declarations.splice(_i2, 1);
									} else {
										retArr.push('float ');
										this.astGeneric(declaration, retArr, funcParam);
										retArr.push(';');
									}
								}

								retArr.push('for (float ');
								this.astGeneric(initArgument, retArr, funcParam);
								retArr.push(';');
							} else {
								retArr.push('for (');
								this.astGeneric(forNode.init, retArr, funcParam);
							}

							this.astGeneric(forNode.test, retArr, funcParam);
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');
							this.astGeneric(forNode.body, retArr, funcParam);
							return retArr;
						}
					}

					throw this.astErrorOutput('Invalid for statement', ast, funcParam);
				}

			}, {
				key: 'astWhileStatement',
				value: function astWhileStatement(whileNode, retArr, funcParam) {
					if (whileNode.type !== 'WhileStatement') {
						throw this.astErrorOutput('Invalid while statment', ast, funcParam);
					}

					retArr.push('for (float i = 0.0; i < LOOP_MAX; i++) {');
					retArr.push('if (');
					this.astGeneric(whileNode.test, retArr, funcParam);
					retArr.push(') {\n');
					this.astGeneric(whileNode.body, retArr, funcParam);
					retArr.push('} else {\n');
					retArr.push('break;\n');
					retArr.push('}\n');
					retArr.push('}\n');

					return retArr;
				}

			}, {
				key: 'astAssignmentExpression',
				value: function astAssignmentExpression(assNode, retArr, funcParam) {
					if (assNode.operator === '%=') {
						this.astGeneric(assNode.left, retArr, funcParam);
						retArr.push('=');
						retArr.push('mod(');
						this.astGeneric(assNode.left, retArr, funcParam);
						retArr.push(',');
						this.astGeneric(assNode.right, retArr, funcParam);
						retArr.push(')');
					} else {
						this.astGeneric(assNode.left, retArr, funcParam);
						retArr.push(assNode.operator);
						this.astGeneric(assNode.right, retArr, funcParam);
						return retArr;
					}
				}

			}, {
				key: 'astEmptyStatement',
				value: function astEmptyStatement(eNode, retArr, funcParam) {
					return retArr;
				}

			}, {
				key: 'astBlockStatement',
				value: function astBlockStatement(bNode, retArr, funcParam) {
					retArr.push('{\n');
					for (var i = 0; i < bNode.body.length; i++) {
						this.astGeneric(bNode.body[i], retArr, funcParam);
					}
					retArr.push('}\n');
					return retArr;
				}

			}, {
				key: 'astExpressionStatement',
				value: function astExpressionStatement(esNode, retArr, funcParam) {
					this.astGeneric(esNode.expression, retArr, funcParam);
					retArr.push(';\n');
					return retArr;
				}

			}, {
				key: 'astVariableDeclaration',
				value: function astVariableDeclaration(vardecNode, retArr, funcParam) {
					retArr.push('float ');
					for (var i = 0; i < vardecNode.declarations.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(vardecNode.declarations[i], retArr, funcParam);
					}
					retArr.push(';');
					return retArr;
				}

			}, {
				key: 'astVariableDeclarator',
				value: function astVariableDeclarator(ivardecNode, retArr, funcParam) {
					this.astGeneric(ivardecNode.id, retArr, funcParam);
					if (ivardecNode.init !== null) {
						retArr.push('=');
						this.astGeneric(ivardecNode.init, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astIfStatement',
				value: function astIfStatement(ifNode, retArr, funcParam) {
					retArr.push('if (');
					this.astGeneric(ifNode.test, retArr, funcParam);
					retArr.push(')');
					if (ifNode.consequent.type === 'BlockStatement') {
						this.astGeneric(ifNode.consequent, retArr, funcParam);
					} else {
						retArr.push(' {\n');
						this.astGeneric(ifNode.consequent, retArr, funcParam);
						retArr.push('\n}\n');
					}

					if (ifNode.alternate) {
						retArr.push('else ');
						if (ifNode.alternate.type === 'BlockStatement') {
							this.astGeneric(ifNode.alternate, retArr, funcParam);
						} else {
							retArr.push(' {\n');
							this.astGeneric(ifNode.alternate, retArr, funcParam);
							retArr.push('\n}\n');
						}
					}
					return retArr;
				}

			}, {
				key: 'astBreakStatement',
				value: function astBreakStatement(brNode, retArr, funcParam) {
					retArr.push('break;\n');
					return retArr;
				}

			}, {
				key: 'astContinueStatement',
				value: function astContinueStatement(crNode, retArr, funcParam) {
					retArr.push('continue;\n');
					return retArr;
				}

			}, {
				key: 'astLogicalExpression',
				value: function astLogicalExpression(logNode, retArr, funcParam) {
					retArr.push('(');
					this.astGeneric(logNode.left, retArr, funcParam);
					retArr.push(logNode.operator);
					this.astGeneric(logNode.right, retArr, funcParam);
					retArr.push(')');
					return retArr;
				}

			}, {
				key: 'astUpdateExpression',
				value: function astUpdateExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astUnaryExpression',
				value: function astUnaryExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astThisExpression',
				value: function astThisExpression(tNode, retArr, funcParam) {
					retArr.push('this');
					return retArr;
				}

			}, {
				key: 'astMemberExpression',
				value: function astMemberExpression(mNode, retArr, funcParam) {
					if (mNode.computed) {
						if (mNode.object.type === 'Identifier') {
							var reqName = mNode.object.name;
							var funcName = funcParam.functionName || 'kernel';
							var assumeNotTexture = false;

							if (funcParam.paramNames) {
								var idx = funcParam.paramNames.indexOf(reqName);
								if (idx >= 0 && funcParam.paramTypes[idx] === 'float') {
									assumeNotTexture = true;
								}
							}

							if (assumeNotTexture) {
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('[int(');
								this.astGeneric(mNode.property, retArr, funcParam);
								retArr.push(')]');
							} else {
								retArr.push('get(');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push(', vec2(');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Size[0],');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Size[1]), vec3(');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Dim[0],');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Dim[1],');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Dim[2]');
								retArr.push('), ');
								this.astGeneric(mNode.property, retArr, funcParam);
								retArr.push(')');
							}
						} else {
							this.astGeneric(mNode.object, retArr, funcParam);
							var last = retArr.pop();
							retArr.push(',');
							this.astGeneric(mNode.property, retArr, funcParam);
							retArr.push(last);
						}
					} else {

						var unrolled = this.astMemberExpressionUnroll(mNode);
						var unrolled_lc = unrolled.toLowerCase();

						if (unrolled.indexOf(constantsPrefix) === 0) {
							unrolled = 'constants_' + unrolled.slice(constantsPrefix.length);
						}

						if (unrolled_lc === 'this.thread.x') {
							retArr.push('threadId.x');
						} else if (unrolled_lc === 'this.thread.y') {
							retArr.push('threadId.y');
						} else if (unrolled_lc === 'this.thread.z') {
							retArr.push('threadId.z');
						} else if (unrolled_lc === 'this.output.x') {
							retArr.push('uOutputDim.x');
						} else if (unrolled_lc === 'this.output.y') {
							retArr.push('uOutputDim.y');
						} else if (unrolled_lc === 'this.output.z') {
							retArr.push('uOutputDim.z');
						} else {
							retArr.push(unrolled);
						}
					}
					return retArr;
				}
			}, {
				key: 'astSequenceExpression',
				value: function astSequenceExpression(sNode, retArr, funcParam) {
					for (var i = 0; i < sNode.expressions.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(sNode.expressions, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astMemberExpressionUnroll',
				value: function astMemberExpressionUnroll(ast, funcParam) {
					if (ast.type === 'Identifier') {
						return ast.name;
					} else if (ast.type === 'ThisExpression') {
						return 'this';
					}

					if (ast.type === 'MemberExpression') {
						if (ast.object && ast.property) {
							return this.astMemberExpressionUnroll(ast.object, funcParam) + '.' + this.astMemberExpressionUnroll(ast.property, funcParam);
						}
					}

					throw this.astErrorOutput('Unknown CallExpression_unroll', ast, funcParam);
				}

			}, {
				key: 'astCallExpression',
				value: function astCallExpression(ast, retArr, funcParam) {
					if (ast.callee) {
						var funcName = this.astMemberExpressionUnroll(ast.callee);

						if (funcName.indexOf(jsMathPrefix) === 0) {
							funcName = funcName.slice(jsMathPrefix.length);
						}

						if (funcName.indexOf(localPrefix) === 0) {
							funcName = funcName.slice(localPrefix.length);
						}

						if (funcParam.calledFunctions.indexOf(funcName) < 0) {
							funcParam.calledFunctions.push(funcName);
						}
						if (!funcParam.hasOwnProperty('funcName')) {
							funcParam.calledFunctionsArguments[funcName] = [];
						}

						var functionArguments = [];
						funcParam.calledFunctionsArguments[funcName].push(functionArguments);

						retArr.push(funcName);

						retArr.push('(');

						for (var i = 0; i < ast.arguments.length; ++i) {
							var argument = ast.arguments[i];
							if (i > 0) {
								retArr.push(', ');
							}
							this.astGeneric(argument, retArr, funcParam);
							if (argument.type === 'Identifier') {
								var paramIndex = funcParam.paramNames.indexOf(argument.name);
								if (paramIndex === -1) {
									functionArguments.push(null);
								} else {
									functionArguments.push({
										name: argument.name,
										type: funcParam.paramTypes[paramIndex]
									});
								}
							} else {
								functionArguments.push(null);
							}
						}

						retArr.push(')');

						return retArr;
					}

					throw this.astErrorOutput('Unknown CallExpression', ast, funcParam);

					return retArr;
				}

			}, {
				key: 'astArrayExpression',
				value: function astArrayExpression(arrNode, retArr, funcParam) {
					var arrLen = arrNode.elements.length;

					retArr.push('float[' + arrLen + '](');
					for (var i = 0; i < arrLen; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}
						var subNode = arrNode.elements[i];
						this.astGeneric(subNode, retArr, funcParam);
					}
					retArr.push(')');

					return retArr;
				}

			}, {
				key: 'getFunctionPrototypeString',
				value: function getFunctionPrototypeString() {
					if (this.webGlFunctionPrototypeString) {
						return this.webGlFunctionPrototypeString;
					}
					return this.webGlFunctionPrototypeString = this.generate();
				}
			}, {
				key: 'build',
				value: function build() {
					return this.getFunctionPrototypeString().length > 0;
				}
			}], [{
				key: 'astFunctionPrototype',
				value: function astFunctionPrototype(ast, retArr, funcParam) {
					if (funcParam.isRootKernel || funcParam.isSubKernel) {
						return retArr;
					}

					retArr.push(funcParam.returnType);
					retArr.push(' ');
					retArr.push(funcParam.functionName);
					retArr.push('(');

					for (var i = 0; i < funcParam.paramNames.length; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}

						retArr.push(funcParam.paramTypes[i]);
						retArr.push(' ');
						retArr.push('user_');
						retArr.push(funcParam.paramNames[i]);
					}

					retArr.push(');\n');

					return retArr;
				}
			}]);

			return WebGLFunctionNode;
		}(FunctionNodeBase);

		function isIdentifierKernelParam(paramName, ast, funcParam) {
			return funcParam.paramNames.indexOf(paramName) !== -1;
		}

		function ensureIndentifierType(paramName, expectedType, ast, funcParam) {
			var start = ast.loc.start;

			if (!isIdentifierKernelParam(paramName, funcParam) && expectedType !== 'float') {
				throw 'Error unexpected identifier ' + paramName + ' on line ' + start.line;
			} else {
				var actualType = funcParam.paramTypes[funcParam.paramNames.indexOf(paramName)];
				if (actualType !== expectedType) {
					throw 'Error unexpected identifier ' + paramName + ' on line ' + start.line;
				}
			}
		}

		function webGlRegexOptimize(inStr) {
			return inStr.replace(DECODE32_ENCODE32, '((').replace(ENCODE32_DECODE32, '((');
		}
	}, { "../../core/utils": 24, "../function-node-base": 7 }], 13: [function (require, module, exports) {
		'use strict';

		var utils = require('../../core/utils');
		var kernelRunShortcut = require('../kernel-run-shortcut');

		module.exports = function (gpuKernel, name) {
			return '() => {\n    ' + kernelRunShortcut.toString() + ';\n    const utils = {\n      allPropertiesOf: function ' + utils.allPropertiesOf.toString() + ',\n      clone: function ' + utils.clone.toString() + ',\n      splitArray: function ' + utils.splitArray.toString() + ',\n      getArgumentType: function ' + utils.getArgumentType.toString() + ',\n      getDimensions: function ' + utils.getDimensions.toString() + ',\n      dimToTexSize: function ' + utils.dimToTexSize.toString() + ',\n      copyFlatten: function ' + utils.copyFlatten.toString() + ',\n      flatten: function ' + utils.flatten.toString() + ',\n      systemEndianness: \'' + utils.systemEndianness() + '\',\n      initWebGl: function ' + utils.initWebGl.toString() + ',\n      isArray: function ' + utils.isArray.toString() + '\n    };\n    class ' + (name || 'Kernel') + ' {\n      constructor() {\n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = ' + JSON.stringify(gpuKernel.paramNames) + ';\n        this.paramTypes = ' + JSON.stringify(gpuKernel.paramTypes) + ';\n        this.texSize = ' + JSON.stringify(gpuKernel.texSize) + ';\n        this.output = ' + JSON.stringify(gpuKernel.output) + ';\n        this.compiledFragShaderString = `' + gpuKernel.compiledFragShaderString + '`;\n\t\t    this.compiledVertShaderString = `' + gpuKernel.compiledVertShaderString + '`;\n\t\t    this.programUniformLocationCache = {};\n\t\t    this.textureCache = {};\n\t\t    this.subKernelOutputTextures = null;\n      }\n      ' + gpuKernel._getFragShaderString.toString() + '\n      ' + gpuKernel._getVertShaderString.toString() + '\n      validateOptions() {}\n      setupParams() {}\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      ' + gpuKernel.getUniformLocation.toString() + '\n      ' + gpuKernel.setupParams.toString() + '\n      ' + gpuKernel.build.toString() + '\n\t\t  ' + gpuKernel.run.toString() + '\n\t\t  ' + gpuKernel._addArgument.toString() + '\n\t\t  ' + gpuKernel.getArgumentTexture.toString() + '\n\t\t  ' + gpuKernel.getTextureCache.toString() + '\n\t\t  ' + gpuKernel.getOutputTexture.toString() + '\n\t\t  ' + gpuKernel.renderOutput.toString() + '\n    };\n    return kernelRunShortcut(new Kernel());\n  };';
		};
	}, { "../../core/utils": 24, "../kernel-run-shortcut": 9 }], 14: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var fs = require('fs');
		var KernelBase = require('../kernel-base');
		var utils = require('../../core/utils');
		var Texture = require('../../core/texture');
		var fragShaderString = require('./shader-frag');
		var vertShaderString = require('./shader-vert');
		var kernelString = require('./kernel-string');
		var canvases = [];
		var maxTexSizes = {};
		module.exports = function (_KernelBase) {
			_inherits(WebGLKernel, _KernelBase);

			function WebGLKernel(fnString, settings) {
				_classCallCheck(this, WebGLKernel);

				var _this = _possibleConstructorReturn(this, (WebGLKernel.__proto__ || Object.getPrototypeOf(WebGLKernel)).call(this, fnString, settings));

				_this.textureCache = {};
				_this.threadDim = {};
				_this.programUniformLocationCache = {};
				_this.framebuffer = null;

				_this.buffer = null;
				_this.program = null;
				_this.outputToTexture = settings.outputToTexture;
				_this.endianness = utils.systemEndianness();
				_this.subKernelOutputTextures = null;
				_this.subKernelOutputVariableNames = null;
				_this.paramTypes = null;
				_this.argumentsLength = 0;
				_this.ext = null;
				_this.compiledFragShaderString = null;
				_this.compiledVertShaderString = null;
				_this.extDrawBuffersMap = null;
				_this.outputTexture = null;
				_this.maxTexSize = null;
				if (!_this._webGl) _this._webGl = utils.initWebGl(_this.getCanvas());
				return _this;
			}

			_createClass(WebGLKernel, [{
				key: 'validateOptions',
				value: function validateOptions() {
					var isReadPixel = utils.isFloatReadPixelsSupported();
					if (this.floatTextures === true && !utils.OES_texture_float) {
						throw 'Float textures are not supported on this browser';
					} else if (this.floatOutput === true && this.floatOutputForce !== true && !isReadPixel) {
						throw 'Float texture outputs are not supported on this browser';
					} else if (this.floatTextures === null && !isReadPixel && !this.graphical) {
						this.floatTextures = true;
						this.floatOutput = false;
					}

					if (!this.output || this.output.length === 0) {
						if (arguments.length !== 1) {
							throw 'Auto output only supported for kernels with only one input';
						}

						var argType = utils.getArgumentType(arguments[0]);
						if (argType === 'Array') {
							this.output = utils.getDimensions(argType);
						} else if (argType === 'Texture') {
							this.output = arguments[0].output;
						} else {
							throw 'Auto output not supported for input type: ' + argType;
						}
					}

					this.texSize = utils.dimToTexSize({
						floatTextures: this.floatTextures,
						floatOutput: this.floatOutput
					}, this.output, true);

					if (this.graphical) {
						if (this.output.length !== 2) {
							throw 'Output must have 2 dimensions on graphical mode';
						}

						if (this.floatOutput) {
							throw 'Cannot use graphical mode and float output at the same time';
						}

						this.texSize = utils.clone(this.output);
					} else if (this.floatOutput === undefined && utils.OES_texture_float) {
						this.floatOutput = true;
					}
				}
			}, {
				key: 'updateMaxTexSize',
				value: function updateMaxTexSize() {
					var texSize = this.texSize;
					var canvas = this._canvas;
					if (this.maxTexSize === null) {
						var canvasIndex = canvases.indexOf(canvas);
						if (canvasIndex === -1) {
							canvasIndex = canvases.length;
							canvases.push(canvas);
							maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];
						}
						this.maxTexSize = maxTexSizes[canvasIndex];
					}
					if (this.maxTexSize[0] < texSize[0]) {
						this.maxTexSize[0] = texSize[0];
					}
					if (this.maxTexSize[1] < texSize[1]) {
						this.maxTexSize[1] = texSize[1];
					}
				}

			}, {
				key: 'build',
				value: function build() {
					this.validateOptions();
					this.setupParams(arguments);
					this.updateMaxTexSize();
					var texSize = this.texSize;
					var gl = this._webGl;
					var canvas = this._canvas;
					gl.enable(gl.SCISSOR_TEST);
					gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
					// TODO edited to fix suspected bug
					//canvas.width = this.maxTexSize[0];
					//canvas.height = this.maxTexSize[1];
					canvas.width = this.output[0];
					canvas.height = this.output[1];
					var threadDim = this.threadDim = utils.clone(this.output);
					while (threadDim.length < 3) {
						threadDim.push(1);
					}

					if (this.functionBuilder) this._addKernels();

					var compiledVertShaderString = this._getVertShaderString(arguments);
					var vertShader = gl.createShader(gl.VERTEX_SHADER);
					gl.shaderSource(vertShader, compiledVertShaderString);
					gl.compileShader(vertShader);

					var compiledFragShaderString = this._getFragShaderString(arguments);
					var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
					gl.shaderSource(fragShader, compiledFragShaderString);
					gl.compileShader(fragShader);

					if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
						console.log(compiledVertShaderString);
						console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(vertShader));
						throw 'Error compiling vertex shader';
					}
					if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
						console.log(compiledFragShaderString);
						console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(fragShader));
						throw 'Error compiling fragment shader';
					}

					if (this.debug) {
						console.log('Options:');
						console.dir(this);
						console.log('GLSL Shader Output:');
						console.log(compiledFragShaderString);
					}

					var program = this.program = gl.createProgram();
					gl.attachShader(program, vertShader);
					gl.attachShader(program, fragShader);
					gl.linkProgram(program);
					this.framebuffer = gl.createFramebuffer();
					this.framebuffer.width = texSize[0];
					this.framebuffer.height = texSize[1];

					var vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);
					var texCoords = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);

					var texCoordOffset = vertices.byteLength;

					var buffer = this.buffer;
					if (!buffer) {
						buffer = this.buffer = gl.createBuffer();
						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
						gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);
					} else {
						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
					}

					gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
					gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);

					var aPosLoc = gl.getAttribLocation(this.program, 'aPos');
					gl.enableVertexAttribArray(aPosLoc);
					gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, gl.FALSE, 0, 0);
					var aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');
					gl.enableVertexAttribArray(aTexCoordLoc);
					gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, gl.FALSE, 0, texCoordOffset);

					this.setupOutputTexture();

					if (this.subKernelOutputTextures !== null) {
						var extDrawBuffersMap = this.extDrawBuffersMap = [gl.COLOR_ATTACHMENT0];
						for (var i = 0; i < this.subKernelOutputTextures.length; i++) {
							var subKernelOutputTexture = this.subKernelOutputTextures[i];
							extDrawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);
							gl.activeTexture(gl.TEXTURE0 + arguments.length + i);
							gl.bindTexture(gl.TEXTURE_2D, subKernelOutputTexture);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
							if (this.floatOutput) {
								gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
							} else {
								gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
							}
						}
					}
				}

			}, {
				key: 'run',
				value: function run() {
					if (this.program === null) {
						this.build.apply(this, arguments);
					}
					var paramNames = this.paramNames;
					var paramTypes = this.paramTypes;
					var texSize = this.texSize;
					var gl = this._webGl;

					gl.useProgram(this.program);
					gl.scissor(0, 0, texSize[0], texSize[1]);

					if (!this.hardcodeConstants) {
						var uOutputDimLoc = this.getUniformLocation('uOutputDim');
						gl.uniform3fv(uOutputDimLoc, this.threadDim);
						var uTexSizeLoc = this.getUniformLocation('uTexSize');
						gl.uniform2fv(uTexSizeLoc, texSize);
					}

					var ratioLoc = this.getUniformLocation('ratio');
					gl.uniform2f(ratioLoc, texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);

					this.argumentsLength = 0;
					for (var texIndex = 0; texIndex < paramNames.length; texIndex++) {
						this._addArgument(arguments[texIndex], paramTypes[texIndex], paramNames[texIndex]);
					}

					if (this.graphical) {
						gl.bindRenderbuffer(gl.RENDERBUFFER, null);
						gl.bindFramebuffer(gl.FRAMEBUFFER, null);
						gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
						return;
					}

					gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
					var outputTexture = this.outputTexture;
					gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);

					if (this.subKernelOutputTextures !== null) {
						for (var i = 0; i < this.subKernelOutputTextures.length; i++) {
							var subKernelOutputTexture = this.subKernelOutputTextures[i];
							gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, subKernelOutputTexture, 0);
						}
						this.ext.drawBuffersWEBGL(this.extDrawBuffersMap);
					}

					gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

					if (this.subKernelOutputTextures !== null) {
						if (this.subKernels !== null) {
							var output = [];
							output.result = this.renderOutput(outputTexture);
							for (var _i = 0; _i < this.subKernels.length; _i++) {
								output.push(new Texture(this.subKernelOutputTextures[_i], texSize, this.output, this._webGl));
							}
							return output;
						} else if (this.subKernelProperties !== null) {
							var _output = {
								result: this.renderOutput(outputTexture)
							};
							var _i2 = 0;
							for (var p in this.subKernelProperties) {
								if (!this.subKernelProperties.hasOwnProperty(p)) continue;
								_output[p] = new Texture(this.subKernelOutputTextures[_i2], texSize, this.output, this._webGl);
								_i2++;
							}
							return _output;
						}
					}

					return this.renderOutput(outputTexture);
				}

			}, {
				key: 'renderOutput',
				value: function renderOutput(outputTexture) {
					var texSize = this.texSize;
					var gl = this._webGl;
					var threadDim = this.threadDim;
					var output = this.output;
					if (this.outputToTexture) {
						return new Texture(outputTexture, texSize, output, this._webGl);
					} else {
						var result = void 0;
						if (this.floatOutput) {
							result = new Float32Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.FLOAT, result);
						} else {
							var bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, bytes);
							result = new Float32Array(bytes.buffer);
						}

						result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);

						if (output.length === 1) {
							return result;
						} else if (output.length === 2) {
							return utils.splitArray(result, output[0]);
						} else if (output.length === 3) {
							var cube = utils.splitArray(result, output[0] * output[1]);
							return cube.map(function (x) {
								return utils.splitArray(x, output[0]);
							});
						}
					}
				}

			}, {
				key: 'getOutputTexture',
				value: function getOutputTexture() {
					return this.getTextureCache('OUTPUT');
				}

			}, {
				key: 'detachOutputTexture',
				value: function detachOutputTexture() {
					this.detachTextureCache('OUTPUT');
				}

			}, {
				key: 'setupOutputTexture',
				value: function setupOutputTexture() {
					var gl = this._webGl;
					var texSize = this.texSize;
					this.detachOutputTexture();
					this.outputTexture = this.getOutputTexture();
					gl.activeTexture(gl.TEXTURE0 + this.paramNames.length);
					gl.bindTexture(gl.TEXTURE_2D, this.outputTexture);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
					if (this.floatOutput) {
						gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
					} else {
						gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
					}
				}

			}, {
				key: 'getArgumentTexture',
				value: function getArgumentTexture(name) {
					return this.getTextureCache('ARGUMENT_' + name);
				}

			}, {
				key: 'getSubKernelTexture',
				value: function getSubKernelTexture(name) {
					return this.getTextureCache('SUB_KERNEL_' + name);
				}

			}, {
				key: 'getTextureCache',
				value: function getTextureCache(name) {
					if (this.outputToTexture) {
						return this._webGl.createTexture();
					}
					if (this.textureCache.hasOwnProperty(name)) {
						return this.textureCache[name];
					}
					return this.textureCache[name] = this._webGl.createTexture();
				}

			}, {
				key: 'detachTextureCache',
				value: function detachTextureCache(name) {
					delete this.textureCache[name];
				}

			}, {
				key: 'setupParams',
				value: function setupParams(args) {
					var paramTypes = this.paramTypes = [];
					for (var i = 0; i < args.length; i++) {
						var param = args[i];
						var paramType = utils.getArgumentType(param);
						paramTypes.push(paramType);
					}
				}

			}, {
				key: 'getUniformLocation',
				value: function getUniformLocation(name) {
					var location = this.programUniformLocationCache[name];
					if (!location) {
						location = this._webGl.getUniformLocation(this.program, name);
						this.programUniformLocationCache[name] = location;
					}
					return location;
				}

			}, {
				key: '_getFragShaderArtifactMap',
				value: function _getFragShaderArtifactMap(args) {
					return {
						HEADER: this._getHeaderString(),
						LOOP_MAX: this._getLoopMaxString(),
						CONSTANTS: this._getConstantsString(),
						DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),
						ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),
						GET_WRAPAROUND: this._getGetWraparoundString(),
						GET_TEXTURE_CHANNEL: this._getGetTextureChannelString(),
						GET_TEXTURE_INDEX: this._getGetTextureIndexString(),
						GET_RESULT: this._getGetResultString(),
						MAIN_PARAMS: this._getMainParamsString(args),
						MAIN_CONSTANTS: this._getMainConstantsString(),
						KERNEL: this._getKernelString(),
						MAIN_RESULT: this._getMainResultString()
					};
				}

			}, {
				key: '_addArgument',
				value: function _addArgument(value, type, name) {
					var gl = this._webGl;
					var argumentTexture = this.getArgumentTexture(name);
					if (value instanceof Texture) {
						type = 'Texture';
					}
					switch (type) {
						case 'Array':
							{
								var dim = utils.getDimensions(value, true);
								var size = utils.dimToTexSize({
									floatTextures: this.floatTextures,
									floatOutput: this.floatOutput
								}, dim);
								gl.activeTexture(gl.TEXTURE0 + this.argumentsLength);
								gl.bindTexture(gl.TEXTURE_2D, argumentTexture);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

								var length = size[0] * size[1];
								if (this.floatTextures) {
									length *= 4;
								}

								var valuesFlat = new Float32Array(length);
								utils.flattenTo(value, valuesFlat);

								var buffer = void 0;
								if (this.floatTextures) {
									buffer = new Float32Array(valuesFlat);
									gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0], size[1], 0, gl.RGBA, gl.FLOAT, buffer);
								} else {
									buffer = new Uint8Array(new Float32Array(valuesFlat).buffer);
									gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0], size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);
								}

								var loc = this.getUniformLocation('user_' + name);
								var locSize = this.getUniformLocation('user_' + name + 'Size');
								var dimLoc = this.getUniformLocation('user_' + name + 'Dim');

								if (!this.hardcodeConstants) {
									gl.uniform3fv(dimLoc, dim);
									gl.uniform2fv(locSize, size);
								}
								gl.uniform1i(loc, this.argumentsLength);
								break;
							}
						case 'Number':
							{
								var _loc = this.getUniformLocation('user_' + name);
								gl.uniform1f(_loc, value);
								break;
							}
						case 'Texture':
							{
								var inputTexture = value;
								var _dim = utils.getDimensions(inputTexture, true);

								var _size = inputTexture.size;

								if (inputTexture.texture === this.outputTexture) {
									this.setupOutputTexture();
								}

								gl.activeTexture(gl.TEXTURE0 + this.argumentsLength);
								gl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);

								var _loc2 = this.getUniformLocation('user_' + name);
								var _locSize = this.getUniformLocation('user_' + name + 'Size');
								var _dimLoc = this.getUniformLocation('user_' + name + 'Dim');

								gl.uniform3fv(_dimLoc, _dim);
								gl.uniform2fv(_locSize, _size);
								gl.uniform1i(_loc2, this.argumentsLength);
								break;
							}
						default:
							throw 'Input type not supported (WebGL): ' + value;
					}
					this.argumentsLength++;
				}

			}, {
				key: '_getHeaderString',
				value: function _getHeaderString() {
					return this.subKernels !== null || this.subKernelProperties !== null ? '#extension GL_EXT_draw_buffers : require\n' : '';
				}

			}, {
				key: '_getLoopMaxString',
				value: function _getLoopMaxString() {
					return this.loopMaxIterations ? ' ' + parseInt(this.loopMaxIterations) + '.0;\n' : ' 1000.0;\n';
				}

			}, {
				key: '_getConstantsString',
				value: function _getConstantsString() {
					var result = [];
					var threadDim = this.threadDim;
					var texSize = this.texSize;
					if (this.hardcodeConstants) {
						result.push('highp vec3 uOutputDim = vec3(' + threadDim[0] + ',' + threadDim[1] + ', ' + threadDim[2] + ')', 'highp vec2 uTexSize = vec2(' + texSize[0] + ', ' + texSize[1] + ')');
					} else {
						result.push('uniform highp vec3 uOutputDim', 'uniform highp vec2 uTexSize');
					}

					return this._linesToString(result);
				}

			}, {
				key: '_getTextureCoordinate',
				value: function _getTextureCoordinate() {
					var names = this.subKernelOutputVariableNames;
					if (names === null || names.length < 1) {
						return 'varying highp vec2 vTexCoord;\n';
					} else {
						return 'out highp vec2 vTexCoord;\n';
					}
				}

			}, {
				key: '_getDecode32EndiannessString',
				value: function _getDecode32EndiannessString() {
					return this.endianness === 'LE' ? '' : '  rgba.rgba = rgba.abgr;\n';
				}

			}, {
				key: '_getEncode32EndiannessString',
				value: function _getEncode32EndiannessString() {
					return this.endianness === 'LE' ? '' : '  rgba.rgba = rgba.abgr;\n';
				}

			}, {
				key: '_getGetWraparoundString',
				value: function _getGetWraparoundString() {
					return this.wraparound ? '  xyz = mod(xyz, texDim);\n' : '';
				}

			}, {
				key: '_getGetTextureChannelString',
				value: function _getGetTextureChannelString() {
					if (!this.floatTextures) return '';

					return this._linesToString(['  int channel = int(integerMod(index, 4.0))', '  index = float(int(index) / 4)']);
				}

			}, {
				key: '_getGetTextureIndexString',
				value: function _getGetTextureIndexString() {
					return this.floatTextures ? '  index = float(int(index)/4);\n' : '';
				}

			}, {
				key: '_getGetResultString',
				value: function _getGetResultString() {
					if (!this.floatTextures) return '  return decode32(texel);\n';
					return this._linesToString(['  if (channel == 0) return texel.r', '  if (channel == 1) return texel.g', '  if (channel == 2) return texel.b', '  if (channel == 3) return texel.a']);
				}

			}, {
				key: '_getMainParamsString',
				value: function _getMainParamsString(args) {
					var result = [];
					var paramTypes = this.paramTypes;
					var paramNames = this.paramNames;
					for (var i = 0; i < paramNames.length; i++) {
						var param = args[i];
						var paramName = paramNames[i];
						var paramType = paramTypes[i];
						if (this.hardcodeConstants) {
							if (paramType === 'Array' || paramType === 'Texture') {
								var paramDim = utils.getDimensions(param, true);
								var paramSize = utils.dimToTexSize({
									floatTextures: this.floatTextures,
									floatOutput: this.floatOutput
								}, paramDim);

								result.push('uniform highp sampler2D user_' + paramName, 'highp vec2 user_' + paramName + 'Size = vec2(' + paramSize[0] + '.0, ' + paramSize[1] + '.0)', 'highp vec3 user_' + paramName + 'Dim = vec3(' + paramDim[0] + '.0, ' + paramDim[1] + '.0, ' + paramDim[2] + '.0)');
							} else if (paramType === 'Number' && Number.isInteger(param)) {
								result.push('highp float user_' + paramName + ' = ' + param + '.0');
							} else if (paramType === 'Number') {
								result.push('highp float user_' + paramName + ' = ' + param);
							}
						} else {
							if (paramType === 'Array' || paramType === 'Texture') {
								result.push('uniform highp sampler2D user_' + paramName, 'uniform highp vec2 user_' + paramName + 'Size', 'uniform highp vec3 user_' + paramName + 'Dim');
							} else if (paramType === 'Number') {
								result.push('uniform highp float user_' + paramName);
							}
						}
					}
					return this._linesToString(result);
				}

			}, {
				key: '_getMainConstantsString',
				value: function _getMainConstantsString() {
					var result = [];
					if (this.constants) {
						for (var name in this.constants) {
							if (!this.constants.hasOwnProperty(name)) continue;
							var value = parseFloat(this.constants[name]);

							if (Number.isInteger(value)) {
								result.push('const float constants_' + name + ' = ' + parseInt(value) + '.0');
							} else {
								result.push('const float constants_' + name + ' = ' + parseFloat(value));
							}
						}
					}
					return this._linesToString(result);
				}

			}, {
				key: '_getKernelString',
				value: function _getKernelString() {
					var result = [];
					var names = this.subKernelOutputVariableNames;
					if (names !== null) {
						result.push('highp float kernelResult = 0.0');
						for (var i = 0; i < names.length; i++) {
							result.push('highp float ' + names[i] + ' = 0.0');
						}
					} else {
						result.push('highp float kernelResult = 0.0');
					}

					return this._linesToString(result) + this.functionBuilder.getPrototypeString('kernel');
				}

			}, {
				key: '_getMainResultString',
				value: function _getMainResultString() {
					var names = this.subKernelOutputVariableNames;
					var result = [];
					if (this.floatOutput) {
						result.push('  index *= 4.0');
					}

					if (this.graphical) {
						result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = actualColor');
					} else if (this.floatOutput) {
						result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.r = kernelResult', '  index += 1.0', '  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.g = kernelResult', '  index += 1.0', '  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.b = kernelResult', '  index += 1.0', '  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.a = kernelResult');
					} else if (names !== null) {
						result.push('  threadId = indexTo3D(index, uOutputDim)');
						result.push('  kernel()');
						result.push('  gl_FragData[0] = encode32(kernelResult)');
						for (var i = 0; i < names.length; i++) {
							result.push('  gl_FragData[' + (i + 1) + '] = encode32(' + names[i] + ')');
						}
					} else {
						result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = encode32(kernelResult)');
					}

					return this._linesToString(result);
				}

			}, {
				key: '_linesToString',
				value: function _linesToString(lines) {
					if (lines.length > 0) {
						return lines.join(';\n') + ';\n';
					} else {
						return '\n';
					}
				}

			}, {
				key: '_replaceArtifacts',
				value: function _replaceArtifacts(src, map) {
					return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z])*)__;\n/g, function (match, artifact) {
						if (map.hasOwnProperty(artifact)) {
							return map[artifact];
						}
						throw 'unhandled artifact ' + artifact;
					});
				}

			}, {
				key: '_addKernels',
				value: function _addKernels() {
					var builder = this.functionBuilder;
					var gl = this._webGl;

					builder.addFunctions(this.functions);
					builder.addNativeFunctions(this.nativeFunctions);

					builder.addKernel(this.fnString, {
						prototypeOnly: false,
						constants: this.constants,
						debug: this.debug,
						loopMaxIterations: this.loopMaxIterations
					}, this.paramNames, this.paramTypes);

					if (this.subKernels !== null) {
						var ext = this.ext = gl.getExtension('WEBGL_draw_buffers');
						if (!ext) throw new Error('could not instantiate draw buffers extension');
						this.subKernelOutputTextures = [];
						this.subKernelOutputVariableNames = [];
						for (var i = 0; i < this.subKernels.length; i++) {
							var subKernel = this.subKernels[i];
							builder.addSubKernel(subKernel, {
								prototypeOnly: false,
								constants: this.constants,
								debug: this.debug,
								loopMaxIterations: this.loopMaxIterations
							});
							this.subKernelOutputTextures.push(this.getSubKernelTexture(i));
							this.subKernelOutputVariableNames.push(subKernel.name + 'Result');
						}
					} else if (this.subKernelProperties !== null) {
						var _ext = this.ext = gl.getExtension('WEBGL_draw_buffers');
						if (!_ext) throw new Error('could not instantiate draw buffers extension');
						this.subKernelOutputTextures = [];
						this.subKernelOutputVariableNames = [];
						var _i3 = 0;
						for (var p in this.subKernelProperties) {
							if (!this.subKernelProperties.hasOwnProperty(p)) continue;
							var _subKernel = this.subKernelProperties[p];
							builder.addSubKernel(_subKernel, {
								prototypeOnly: false,
								constants: this.constants,
								debug: this.debug,
								loopMaxIterations: this.loopMaxIterations
							});
							this.subKernelOutputTextures.push(this.getSubKernelTexture(p));
							this.subKernelOutputVariableNames.push(_subKernel.name + 'Result');
							_i3++;
						}
					}
				}

			}, {
				key: '_getFragShaderString',
				value: function _getFragShaderString(args) {
					if (this.compiledFragShaderString !== null) {
						return this.compiledFragShaderString;
					}
					return this.compiledFragShaderString = this._replaceArtifacts(fragShaderString, this._getFragShaderArtifactMap(args));
				}

			}, {
				key: '_getVertShaderString',
				value: function _getVertShaderString(args) {
					if (this.compiledVertShaderString !== null) {
						return this.compiledVertShaderString;
					}
					return this.compiledVertShaderString = vertShaderString;
				}

			}, {
				key: 'toString',
				value: function toString() {
					return kernelString(this);
				}
			}, {
				key: 'addFunction',
				value: function addFunction(fn) {
					this.functionBuilder.addFunction(null, fn);
				}
			}]);

			return WebGLKernel;
		}(KernelBase);
	}, { "../../core/texture": 22, "../../core/utils": 24, "../kernel-base": 8, "./kernel-string": 13, "./shader-frag": 16, "./shader-vert": 17, "fs": 27 }], 15: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var RunnerBase = require('../runner-base');
		var WebGLKernel = require('./kernel');
		var utils = require('../../core/utils');
		var WebGLFunctionBuilder = require('./function-builder');

		module.exports = function (_RunnerBase) {
			_inherits(WebGLRunner, _RunnerBase);

			function WebGLRunner(settings) {
				_classCallCheck(this, WebGLRunner);

				var _this = _possibleConstructorReturn(this, (WebGLRunner.__proto__ || Object.getPrototypeOf(WebGLRunner)).call(this, new WebGLFunctionBuilder(), settings));

				_this.Kernel = WebGLKernel;
				_this.kernel = null;
				return _this;
			}

			_createClass(WebGLRunner, [{
				key: 'getMode',
				value: function getMode() {
					return 'gpu';
				}
			}]);

			return WebGLRunner;
		}(RunnerBase);
	}, { "../../core/utils": 24, "../runner-base": 10, "./function-builder": 11, "./kernel": 14 }], 16: [function (require, module, exports) {
		"use strict";

		module.exports = "__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst float LOOP_MAX = __LOOP_MAX__;\n#define EPSILON 0.0000001;\n\n__CONSTANTS__;\n\nvarying highp vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nhighp float round(highp float x) {\n  return floor(x + 0.5);\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nhighp float integerMod(highp float x, highp float y) {\n  highp float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nhighp int integerMod(highp int x, highp int y) {\n  return int(integerMod(float(x), float(y)));\n}\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nhighp float decode32(highp vec4 rgba) {\n  __DECODE32_ENDIANNESS__;\n  rgba *= 255.0;\n  vec2 gte128;\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  rgba.b = rgba.b - 128.0 * gte128.x;\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nhighp vec4 encode32(highp float f) {\n  highp float F = abs(f);\n  highp float sign = f < 0.0 ? 1.0 : 0.0;\n  highp float exponent = floor(log2(F));\n  highp float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  rgba.rg = integerMod(rgba.rg, 256.0);\n  rgba.b = integerMod(rgba.b, 128.0);\n  rgba.a = exponent*0.5 + 63.5;\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  rgba = floor(rgba);\n  rgba *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return rgba;\n}\n// Dragons end here\n\nhighp float index;\nhighp vec3 threadId;\n\nhighp vec3 indexTo3D(highp float idx, highp vec3 texDim) {\n  highp float z = floor(idx / (texDim.x * texDim.y));\n  idx -= z * texDim.x * texDim.y;\n  highp float y = floor(idx / texDim.x);\n  highp float x = integerMod(idx, texDim.x);\n  return vec3(x, y, z);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float z, highp float y, highp float x) {\n  highp vec3 xyz = vec3(x, y, z);\n  xyz = floor(xyz + 0.5);\n  __GET_WRAPAROUND__;\n  highp float index = round(xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z));\n  __GET_TEXTURE_CHANNEL__;\n  highp float w = round(texSize.x);\n  vec2 st = vec2(integerMod(index, w), float(int(index) / int(w))) + 0.5;\n  __GET_TEXTURE_INDEX__;\n  highp vec4 texel = texture2D(tex, st / texSize);\n  __GET_RESULT__;\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float y, highp float x) {\n  return get(tex, texSize, texDim, 0.0, y, x);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float x) {\n  return get(tex, texSize, texDim, 0.0, 0.0, x);\n}\n\nhighp vec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_PARAMS__;\n__MAIN_CONSTANTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = floor(vTexCoord.s * float(uTexSize.x)) + floor(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}";
	}, {}], 17: [function (require, module, exports) {
		"use strict";

		module.exports = "precision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nattribute highp vec2 aPos;\nattribute highp vec2 aTexCoord;\n\nvarying highp vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
	}, {}], 18: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var WebGLKernel = require('./kernel');
		var utils = require('../../core/utils');

		module.exports = function (_WebGLKernel) {
			_inherits(WebGLValidatorKernel, _WebGLKernel);

			function WebGLValidatorKernel() {
				_classCallCheck(this, WebGLValidatorKernel);

				return _possibleConstructorReturn(this, (WebGLValidatorKernel.__proto__ || Object.getPrototypeOf(WebGLValidatorKernel)).apply(this, arguments));
			}

			_createClass(WebGLValidatorKernel, [{
				key: 'validateOptions',

				value: function validateOptions() {
					this.texSize = utils.dimToTexSize({
						floatTextures: this.floatTextures,
						floatOutput: this.floatOutput
					}, this.output, true);
				}
			}]);

			return WebGLValidatorKernel;
		}(WebGLKernel);
	}, { "../../core/utils": 24, "./kernel": 14 }], 19: [function (require, module, exports) {
		'use strict';

		var utils = require('./utils');
		module.exports = function alias(name, fn) {
			var fnString = fn.toString();
			return new Function('return function ' + name + ' (' + utils.getParamNamesFromString(fnString).join(', ') + ') {' + utils.getFunctionBodyFromString(fnString) + '}')();
		};
	}, { "./utils": 24 }], 20: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var UtilsCore = require("./utils-core");

		module.exports = function () {
			function GPUCore() {
				_classCallCheck(this, GPUCore);
			}

			_createClass(GPUCore, null, [{
				key: "validateKernelObj",

				value: function validateKernelObj(kernelObj) {

					if (kernelObj === null) {
						throw "KernelObj being validated is NULL";
					}

					if (typeof kernelObj === "string") {
						try {
							kernelObj = JSON.parse(kernelObj);
						} catch (e) {
							console.error(e);
							throw "Failed to convert KernelObj from JSON string";
						}

						if (kernelObj === null) {
							throw "Invalid (NULL) KernelObj JSON string representation";
						}
					}

					if (kernelObj.isKernelObj !== true) {
						throw "Failed missing isKernelObj flag check";
					}

					return kernelObj;
				}

			}, {
				key: "loadKernelObj",
				value: function loadKernelObj(kernelObj, inOpt) {

					kernelObj = validateKernelObj(kernelObj);
				}
			}]);

			return GPUCore;
		}();
	}, { "./utils-core": 23 }], 21: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var utils = require('./utils');
		var WebGLRunner = require('../backend/web-gl/runner');
		var CPURunner = require('../backend/cpu/runner');
		var WebGLValidatorKernel = require('../backend/web-gl/validator-kernel');
		var GPUCore = require("./gpu-core");

		var GPU = function (_GPUCore) {
			_inherits(GPU, _GPUCore);

			function GPU(settings) {
				_classCallCheck(this, GPU);

				var _this = _possibleConstructorReturn(this, (GPU.__proto__ || Object.getPrototypeOf(GPU)).call(this, settings));

				settings = settings || {};
				_this._canvas = settings.canvas || null;
				_this._webGl = settings.webGl || null;
				var mode = settings.mode || 'webgl';
				if (!utils.isWebGlSupported()) {
					console.warn('Warning: gpu not supported, falling back to cpu support');
					mode = 'cpu';
				}

				_this.kernels = [];

				var runnerSettings = {
					canvas: _this._canvas,
					webGl: _this._webGl
				};

				if (mode) {
					switch (mode.toLowerCase()) {
						case 'cpu':
							_this._runner = new CPURunner(runnerSettings);
							break;
						case 'gpu':
						case 'webgl':
							_this._runner = new WebGLRunner(runnerSettings);
							break;
						case 'webgl-validator':
							_this._runner = new WebGLRunner(runnerSettings);
							_this._runner.Kernel = WebGLValidatorKernel;
							break;
						default:
							throw new Error('"' + mode + '" mode is not defined');
					}
				}
				return _this;
			}

			_createClass(GPU, [{
				key: 'createKernel',
				value: function createKernel(fn, settings) {
					if (typeof fn === 'undefined') {
						throw 'Missing fn parameter';
					}
					if (!utils.isFunction(fn) && typeof fn !== 'string') {
						throw 'fn parameter not a function';
					}

					var kernel = this._runner.buildKernel(fn, settings || {});

					if (!this._canvas) {
						this._canvas = kernel.getCanvas();
					}
					if (!this._runner.canvas) {
						this._runner.canvas = kernel.getCanvas();
					}

					this.kernels.push(kernel);

					return kernel;
				}

			}, {
				key: 'createKernelMap',
				value: function createKernelMap() {
					var fn = void 0;
					var settings = void 0;
					if (typeof arguments[arguments.length - 2] === 'function') {
						fn = arguments[arguments.length - 2];
						settings = arguments[arguments.length - 1];
					} else {
						fn = arguments[arguments.length - 1];
					}

					if (!utils.isWebGlDrawBuffersSupported()) {
						this._runner = new CPURunner(settings);
					}

					var kernel = this.createKernel(fn, settings);
					if (Array.isArray(arguments[0])) {
						var functions = arguments[0];
						for (var i = 0; i < functions.length; i++) {
							kernel.addSubKernel(functions[i]);
						}
					} else {
						var _functions = arguments[0];
						for (var p in _functions) {
							if (!_functions.hasOwnProperty(p)) continue;
							kernel.addSubKernelProperty(p, _functions[p]);
						}
					}

					return kernel;
				}

			}, {
				key: 'combineKernels',
				value: function combineKernels() {
					var lastKernel = arguments[arguments.length - 2];
					var combinedKernel = arguments[arguments.length - 1];
					if (this.getMode() === 'cpu') return combinedKernel;

					var canvas = arguments[0].getCanvas();
					var webGl = arguments[0].getWebGl();

					for (var i = 0; i < arguments.length - 1; i++) {
						arguments[i].setCanvas(canvas).setWebGl(webGl).setOutputToTexture(true);
					}

					return function () {
						combinedKernel.apply(null, arguments);
						var texSize = lastKernel.texSize;
						var gl = lastKernel.getWebGl();
						var threadDim = lastKernel.threadDim;
						var result = void 0;
						if (lastKernel.floatOutput) {
							result = new Float32Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.FLOAT, result);
						} else {
							var bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, bytes);
							result = new Float32Array(bytes.buffer);
						}

						result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);

						if (lastKernel.output.length === 1) {
							return result;
						} else if (lastKernel.output.length === 2) {
							return utils.splitArray(result, lastKernel.output[0]);
						} else if (lastKernel.output.length === 3) {
							var cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);
							return cube.map(function (x) {
								return utils.splitArray(x, lastKernel.output[0]);
							});
						}
					};
				}

			}, {
				key: 'addFunction',
				value: function addFunction(fn, paramTypes, returnType) {
					this._runner.functionBuilder.addFunction(null, fn, paramTypes, returnType);
					return this;
				}

			}, {
				key: 'addNativeFunction',
				value: function addNativeFunction(name, nativeFunction) {
					this._runner.functionBuilder.addNativeFunction(name, nativeFunction);
					return this;
				}

			}, {
				key: 'getMode',
				value: function getMode() {
					return this._runner.getMode();
				}

			}, {
				key: 'isWebGlSupported',
				value: function isWebGlSupported() {
					return utils.isWebGlSupported();
				}

			}, {
				key: 'getCanvas',
				value: function getCanvas() {
					return this._canvas;
				}

			}, {
				key: 'getWebGl',
				value: function getWebGl() {
					return this._webGl;
				}
			}]);

			return GPU;
		}(GPUCore);

		;

		Object.assign(GPU, GPUCore);

		module.exports = GPU;
	}, { "../backend/cpu/runner": 5, "../backend/web-gl/runner": 15, "../backend/web-gl/validator-kernel": 18, "./gpu-core": 20, "./utils": 24 }], 22: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var gpu = null;

		module.exports = function () {

			function Texture(texture, size, output, webGl) {
				_classCallCheck(this, Texture);

				this.texture = texture;
				this.size = size;
				this.output = output;
				this.webGl = webGl;
				this.kernel = null;
			}

			_createClass(Texture, [{
				key: 'toArray',
				value: function toArray(gpu) {
					if (!gpu) throw new Error('You need to pass the GPU object for toArray to work.');
					if (this.kernel) return this.kernel(this);

					this.kernel = gpu.createKernel(function (x) {
						return x[this.thread.z][this.thread.y][this.thread.x];
					}).setOutput(this.output);

					return this.kernel(this);
				}

			}, {
				key: 'delete',
				value: function _delete() {
					return this.webGl.deleteTexture(this.texture);
				}
			}]);

			return Texture;
		}();
	}, {}], 23: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var UtilsCore = function () {
			function UtilsCore() {
				_classCallCheck(this, UtilsCore);
			}

			_createClass(UtilsCore, null, [{
				key: 'isCanvas',

				value: function isCanvas(canvasObj) {
					return canvasObj !== null && canvasObj.nodeName && canvasObj.getContext && canvasObj.nodeName.toUpperCase() === 'CANVAS';
				}

			}, {
				key: 'isCanvasSupported',
				value: function isCanvasSupported() {
					return _isCanvasSupported;
				}

			}, {
				key: 'initCanvas',
				value: function initCanvas() {
					if (!_isCanvasSupported) {
						return null;
					}

					var canvas = document.createElement('canvas');

					canvas.width = 2;
					canvas.height = 2;

					return canvas;
				}

			}, {
				key: 'isWebGl',
				value: function isWebGl(webGlObj) {
					return webGlObj && typeof webGlObj.getExtension === 'function';
				}

			}, {
				key: 'isWebGlSupported',
				value: function isWebGlSupported() {
					return _isWebGlSupported;
				}
			}, {
				key: 'isWebGlDrawBuffersSupported',
				value: function isWebGlDrawBuffersSupported() {
					return _isWebGlDrawBuffersSupported;
				}

			}, {
				key: 'initWebGlDefaultOptions',
				value: function initWebGlDefaultOptions() {
					return {
						alpha: false,
						depth: false,
						antialias: false
					};
				}

			}, {
				key: 'initWebGl',
				value: function initWebGl(canvasObj) {

					if (typeof _isCanvasSupported !== 'undefined' || canvasObj === null) {
						if (!_isCanvasSupported) {
							return null;
						}
					}

					if (!UtilsCore.isCanvas(canvasObj)) {
						throw new Error('Invalid canvas object - ' + canvasObj);
					}

					var webGl = canvasObj.getContext('experimental-webgl', UtilsCore.initWebGlDefaultOptions()) || canvasObj.getContext('webgl', UtilsCore.initWebGlDefaultOptions());

					if (webGl) {
						webGl.OES_texture_float = webGl.getExtension('OES_texture_float');
						webGl.OES_texture_float_linear = webGl.getExtension('OES_texture_float_linear');
						webGl.OES_element_index_uint = webGl.getExtension('OES_element_index_uint');
					}

					return webGl;
				}
			}]);

			return UtilsCore;
		}();

		var _isCanvasSupported = typeof document !== 'undefined' ? UtilsCore.isCanvas(document.createElement('canvas')) : false;
		var _testingWebGl = UtilsCore.initWebGl(UtilsCore.initCanvas());
		var _isWebGlSupported = UtilsCore.isWebGl(_testingWebGl);
		var _isWebGlDrawBuffersSupported = _isWebGlSupported && Boolean(_testingWebGl.getExtension('WEBGL_draw_buffers'));

		if (_isWebGlSupported) {
			UtilsCore.OES_texture_float = _testingWebGl.OES_texture_float;
			UtilsCore.OES_texture_float_linear = _testingWebGl.OES_texture_float_linear;
			UtilsCore.OES_element_index_uint = _testingWebGl.OES_element_index_uint;
		} else {
			UtilsCore.OES_texture_float = false;
			UtilsCore.OES_texture_float_linear = false;
			UtilsCore.OES_element_index_uint = false;
		}

		module.exports = UtilsCore;
	}, {}], 24: [function (require, module, exports) {
		'use strict';

		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
			return typeof obj;
		} : function (obj) {
			return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
		};

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && (typeof call === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var UtilsCore = require("./utils-core");
		var Texture = require('./texture');
		var FUNCTION_NAME = /function ([^(]*)/;

		var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

		var ARGUMENT_NAMES = /([^\s,]+)/g;

		var _systemEndianness = function () {
			var b = new ArrayBuffer(4);
			var a = new Uint32Array(b);
			var c = new Uint8Array(b);
			a[0] = 0xdeadbeef;
			if (c[0] === 0xef) return 'LE';
			if (c[0] === 0xde) return 'BE';
			throw new Error('unknown endianness');
		}();

		var _isFloatReadPixelsSupported = null;

		var Utils = function (_UtilsCore) {
			_inherits(Utils, _UtilsCore);

			function Utils() {
				_classCallCheck(this, Utils);

				return _possibleConstructorReturn(this, (Utils.__proto__ || Object.getPrototypeOf(Utils)).apply(this, arguments));
			}

			_createClass(Utils, null, [{
				key: 'systemEndianness',

				value: function systemEndianness() {
					return _systemEndianness;
				}

			}, {
				key: 'isFunction',
				value: function isFunction(funcObj) {
					return typeof funcObj === 'function';
				}

			}, {
				key: 'isFunctionString',
				value: function isFunctionString(funcStr) {
					if (funcStr !== null) {
						return funcStr.toString().slice(0, 'function'.length).toLowerCase() === 'function';
					}
					return false;
				}

			}, {
				key: 'getFunctionNameFromString',
				value: function getFunctionNameFromString(funcStr) {
					return FUNCTION_NAME.exec(funcStr)[1];
				}
			}, {
				key: 'getFunctionBodyFromString',
				value: function getFunctionBodyFromString(funcStr) {
					return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));
				}

			}, {
				key: 'getParamNamesFromString',
				value: function getParamNamesFromString(func) {
					var fnStr = func.toString().replace(STRIP_COMMENTS, '');
					var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
					if (result === null) result = [];
					return result;
				}

			}, {
				key: 'clone',
				value: function clone(obj) {
					if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;

					var temp = obj.constructor();

					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) {
							obj.isActiveClone = null;
							temp[key] = Utils.clone(obj[key]);
							delete obj.isActiveClone;
						}
					}

					return temp;
				}

			}, {
				key: 'newPromise',
				value: function newPromise(executor) {
					var simple = Promise || small_promise;
					if (simple === null) {
						throw TypeError('Browser is missing Promise implementation. Consider adding small_promise.js polyfill');
					}
					return new simple(executor);
				}

			}, {
				key: 'functionBinder',
				value: function functionBinder(inFunc, thisObj) {
					if (inFunc.bind) {
						return inFunc.bind(thisObj);
					}

					return function () {
						var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
						return inFunc.apply(thisObj, args);
					};
				}

			}, {
				key: 'isArray',
				value: function isArray(array) {
					if (isNaN(array.length)) {
						return false;
					}

					return true;
				}

			}, {
				key: 'getArgumentType',
				value: function getArgumentType(arg) {
					if (Utils.isArray(arg)) {
						return 'Array';
					} else if (typeof arg === 'number') {
						return 'Number';
					} else if (arg instanceof Texture) {
						return 'Texture';
					} else {
						return 'Unknown';
					}
				}

			}, {
				key: 'isFloatReadPixelsSupported',
				value: function isFloatReadPixelsSupported() {
					if (_isFloatReadPixelsSupported !== null) {
						return _isFloatReadPixelsSupported;
					}

					var GPU = require('../index');
					var x = new GPU({
						mode: 'webgl-validator'
					}).createKernel(function () {
						return 1;
					}, {
						output: [2],
						floatTextures: true,
						floatOutput: true,
						floatOutputForce: true
					})();

					_isFloatReadPixelsSupported = x[0] === 1;

					return _isFloatReadPixelsSupported;
				}
			}, {
				key: 'dimToTexSize',
				value: function dimToTexSize(opt, dimensions, output) {
					var numTexels = dimensions[0];
					for (var i = 1; i < dimensions.length; i++) {
						numTexels *= dimensions[i];
					}

					if (opt.floatTextures && (!output || opt.floatOutput)) {
						numTexels = Math.ceil(numTexels / 4);
					}

					var w = Math.ceil(Math.sqrt(numTexels));
					return [w, w];
				}

			}, {
				key: 'getDimensions',
				value: function getDimensions(x, pad) {
					var ret = void 0;
					if (Utils.isArray(x)) {
						var dim = [];
						var temp = x;
						while (Utils.isArray(temp)) {
							dim.push(temp.length);
							temp = temp[0];
						}
						ret = dim.reverse();
					} else if (x instanceof Texture) {
						ret = x.output;
					} else {
						throw 'Unknown dimensions of ' + x;
					}

					if (pad) {
						ret = Utils.clone(ret);
						while (ret.length < 3) {
							ret.push(1);
						}
					}

					return ret;
				}

			}, {
				key: 'pad',
				value: function pad(arr, padding) {
					function zeros(n) {
						return Array.apply(null, new Array(n)).map(Number.prototype.valueOf, 0);
					}

					var len = arr.length + padding * 2;

					var ret = arr.map(function (x) {
						return [].concat(zeros(padding), x, zeros(padding));
					});

					for (var i = 0; i < padding; i++) {
						ret = [].concat([zeros(len)], ret, [zeros(len)]);
					}

					return ret;
				}

			}, {
				key: 'flatten2dArrayTo',
				value: function flatten2dArrayTo(array, target) {
					var offset = 0;
					for (var y = 0; y < array.length; y++) {
						target.set(array[y], offset);
						offset += array[y].length;
					}
				}

			}, {
				key: 'flatten3dArrayTo',
				value: function flatten3dArrayTo(array, target) {
					var offset = 0;
					for (var z = 0; z < array.length; z++) {
						for (var y = 0; y < array[z].length; y++) {
							target.set(array[z][y], offset);
							offset += array[z][y].length;
						}
					}
				}

			}, {
				key: 'flattenTo',
				value: function flattenTo(array, target) {
					if (Utils.isArray(array[0])) {
						if (Utils.isArray(array[0][0])) {
							Utils.flatten3dArrayTo(array, target);
						} else {
							Utils.flatten2dArrayTo(array, target);
						}
					} else {
						target.set(array);
					}
				}

			}, {
				key: 'splitArray',
				value: function splitArray(array, part) {
					var result = [];
					for (var i = 0; i < array.length; i += part) {
						result.push(Array.prototype.slice.call(array, i, i + part));
					}
					return result;
				}
			}, {
				key: 'getAstString',
				value: function getAstString(source, ast) {
					var lines = Array.isArray(source) ? source : source.split(/\r?\n/g);
					var start = ast.loc.start;
					var end = ast.loc.end;
					var result = [];
					result.push(lines[start.line - 1].slice(start.column));
					for (var i = start.line; i < end.line - 1; i++) {
						result.push(lines[i]);
					}
					result.push(lines[end.line - 1].slice(0, end.column));
					return result.join('\n');
				}
			}, {
				key: 'allPropertiesOf',
				value: function allPropertiesOf(obj) {
					var props = [];

					do {
						props.push.apply(props, Object.getOwnPropertyNames(obj));
					} while (obj = Object.getPrototypeOf(obj));

					return props;
				}
			}]);

			return Utils;
		}(UtilsCore);

		Object.assign(Utils, UtilsCore);

		module.exports = Utils;
	}, { "../index": 25, "./texture": 22, "./utils-core": 23 }], 25: [function (require, module, exports) {
		'use strict';

		var GPU = require('./core/gpu');
		var alias = require('./core/alias');
		var utils = require('./core/utils');

		var CPUFunctionBuilder = require('./backend/cpu/function-builder');
		var CPUFunctionNode = require('./backend/cpu/function-node');
		var CPUKernel = require('./backend/cpu/kernel');
		var CPURunner = require('./backend/cpu/runner');

		var WebGLFunctionBuilder = require('./backend/web-gl/function-builder');
		var WebGLFunctionNode = require('./backend/web-gl/function-node');
		var WebGLKernel = require('./backend/web-gl/kernel');
		var WebGLRunner = require('./backend/web-gl/runner');

		GPU.alias = alias;
		GPU.utils = utils;

		GPU.CPUFunctionBuilder = CPUFunctionBuilder;
		GPU.CPUFunctionNode = CPUFunctionNode;
		GPU.CPUKernel = CPUKernel;
		GPU.CPURunner = CPURunner;

		GPU.WebGLFunctionBuilder = WebGLFunctionBuilder;
		GPU.WebGLFunctionNode = WebGLFunctionNode;
		GPU.WebGLKernel = WebGLKernel;
		GPU.WebGLRunner = WebGLRunner;

		if (typeof module !== 'undefined') {
			module.exports = GPU;
		}
		if (typeof window !== 'undefined') {
			window.GPU = GPU;
		}
	}, { "./backend/cpu/function-builder": 1, "./backend/cpu/function-node": 2, "./backend/cpu/kernel": 4, "./backend/cpu/runner": 5, "./backend/web-gl/function-builder": 11, "./backend/web-gl/function-node": 12, "./backend/web-gl/kernel": 14, "./backend/web-gl/runner": 15, "./core/alias": 19, "./core/gpu": 21, "./core/utils": 24 }], 26: [function (require, module, exports) {
		(function (global, factory) {
			typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.acorn = global.acorn || {});
		})(this, function (exports) {
			'use strict';

			var reservedWords = {
				3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
				5: "class enum extends super const export import",
				6: "enum",
				strict: "implements interface let package private protected public static yield",
				strictBind: "eval arguments"
			};

			var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

			var keywords = {
				5: ecma5AndLessKeywords,
				6: ecma5AndLessKeywords + " const class extends export import super"
			};

			var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc";
			var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d01-\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf8\u1cf9\u1dc0-\u1df5\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f";

			var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
			var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

			nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

			var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];

			var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];

			function isInAstralSet(code, set) {
				var pos = 0x10000;
				for (var i = 0; i < set.length; i += 2) {
					pos += set[i];
					if (pos > code) {
						return false;
					}
					pos += set[i + 1];
					if (pos >= code) {
						return true;
					}
				}
			}

			function isIdentifierStart(code, astral) {
				if (code < 65) {
					return code === 36;
				}
				if (code < 91) {
					return true;
				}
				if (code < 97) {
					return code === 95;
				}
				if (code < 123) {
					return true;
				}
				if (code <= 0xffff) {
					return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
				}
				if (astral === false) {
					return false;
				}
				return isInAstralSet(code, astralIdentifierStartCodes);
			}

			function isIdentifierChar(code, astral) {
				if (code < 48) {
					return code === 36;
				}
				if (code < 58) {
					return true;
				}
				if (code < 65) {
					return false;
				}
				if (code < 91) {
					return true;
				}
				if (code < 97) {
					return code === 95;
				}
				if (code < 123) {
					return true;
				}
				if (code <= 0xffff) {
					return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
				}
				if (astral === false) {
					return false;
				}
				return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
			}

			var TokenType = function TokenType(label, conf) {
				if (conf === void 0) conf = {};

				this.label = label;
				this.keyword = conf.keyword;
				this.beforeExpr = !!conf.beforeExpr;
				this.startsExpr = !!conf.startsExpr;
				this.isLoop = !!conf.isLoop;
				this.isAssign = !!conf.isAssign;
				this.prefix = !!conf.prefix;
				this.postfix = !!conf.postfix;
				this.binop = conf.binop || null;
				this.updateContext = null;
			};

			function binop(name, prec) {
				return new TokenType(name, { beforeExpr: true, binop: prec });
			}
			var beforeExpr = { beforeExpr: true };
			var startsExpr = { startsExpr: true };

			var keywords$1 = {};

			function kw(name, options) {
				if (options === void 0) options = {};

				options.keyword = name;
				return keywords$1[name] = new TokenType(name, options);
			}

			var types = {
				num: new TokenType("num", startsExpr),
				regexp: new TokenType("regexp", startsExpr),
				string: new TokenType("string", startsExpr),
				name: new TokenType("name", startsExpr),
				eof: new TokenType("eof"),

				bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
				bracketR: new TokenType("]"),
				braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
				braceR: new TokenType("}"),
				parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
				parenR: new TokenType(")"),
				comma: new TokenType(",", beforeExpr),
				semi: new TokenType(";", beforeExpr),
				colon: new TokenType(":", beforeExpr),
				dot: new TokenType("."),
				question: new TokenType("?", beforeExpr),
				arrow: new TokenType("=>", beforeExpr),
				template: new TokenType("template"),
				invalidTemplate: new TokenType("invalidTemplate"),
				ellipsis: new TokenType("...", beforeExpr),
				backQuote: new TokenType("`", startsExpr),
				dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),

				eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
				assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
				incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
				prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
				logicalOR: binop("||", 1),
				logicalAND: binop("&&", 2),
				bitwiseOR: binop("|", 3),
				bitwiseXOR: binop("^", 4),
				bitwiseAND: binop("&", 5),
				equality: binop("==/!=/===/!==", 6),
				relational: binop("</>/<=/>=", 7),
				bitShift: binop("<</>>/>>>", 8),
				plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
				modulo: binop("%", 10),
				star: binop("*", 10),
				slash: binop("/", 10),
				starstar: new TokenType("**", { beforeExpr: true }),

				_break: kw("break"),
				_case: kw("case", beforeExpr),
				_catch: kw("catch"),
				_continue: kw("continue"),
				_debugger: kw("debugger"),
				_default: kw("default", beforeExpr),
				_do: kw("do", { isLoop: true, beforeExpr: true }),
				_else: kw("else", beforeExpr),
				_finally: kw("finally"),
				_for: kw("for", { isLoop: true }),
				_function: kw("function", startsExpr),
				_if: kw("if"),
				_return: kw("return", beforeExpr),
				_switch: kw("switch"),
				_throw: kw("throw", beforeExpr),
				_try: kw("try"),
				_var: kw("var"),
				_const: kw("const"),
				_while: kw("while", { isLoop: true }),
				_with: kw("with"),
				_new: kw("new", { beforeExpr: true, startsExpr: true }),
				_this: kw("this", startsExpr),
				_super: kw("super", startsExpr),
				_class: kw("class", startsExpr),
				_extends: kw("extends", beforeExpr),
				_export: kw("export"),
				_import: kw("import"),
				_null: kw("null", startsExpr),
				_true: kw("true", startsExpr),
				_false: kw("false", startsExpr),
				_in: kw("in", { beforeExpr: true, binop: 7 }),
				_instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
				_typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
				_void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
				_delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
			};

			var lineBreak = /\r\n?|\n|\u2028|\u2029/;
			var lineBreakG = new RegExp(lineBreak.source, "g");

			function isNewLine(code) {
				return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
			}

			var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

			var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

			var ref = Object.prototype;
			var hasOwnProperty = ref.hasOwnProperty;
			var toString = ref.toString;

			function has(obj, propName) {
				return hasOwnProperty.call(obj, propName);
			}

			var isArray = Array.isArray || function (obj) {
				return toString.call(obj) === "[object Array]";
			};

			var Position = function Position(line, col) {
				this.line = line;
				this.column = col;
			};

			Position.prototype.offset = function offset(n) {
				return new Position(this.line, this.column + n);
			};

			var SourceLocation = function SourceLocation(p, start, end) {
				this.start = start;
				this.end = end;
				if (p.sourceFile !== null) {
					this.source = p.sourceFile;
				}
			};

			function getLineInfo(input, offset) {
				for (var line = 1, cur = 0;;) {
					lineBreakG.lastIndex = cur;
					var match = lineBreakG.exec(input);
					if (match && match.index < offset) {
						++line;
						cur = match.index + match[0].length;
					} else {
						return new Position(line, offset - cur);
					}
				}
			}

			var defaultOptions = {
				ecmaVersion: 7,
				sourceType: "script",
				onInsertedSemicolon: null,
				onTrailingComma: null,
				allowReserved: null,
				allowReturnOutsideFunction: false,
				allowImportExportEverywhere: false,
				allowHashBang: false,
				locations: false,
				onToken: null,
				onComment: null,
				ranges: false,
				program: null,
				sourceFile: null,
				directSourceFile: null,
				preserveParens: false,
				plugins: {}
			};

			function getOptions(opts) {
				var options = {};

				for (var opt in defaultOptions) {
					options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
				}

				if (options.ecmaVersion >= 2015) {
					options.ecmaVersion -= 2009;
				}

				if (options.allowReserved == null) {
					options.allowReserved = options.ecmaVersion < 5;
				}

				if (isArray(options.onToken)) {
					var tokens = options.onToken;
					options.onToken = function (token) {
						return tokens.push(token);
					};
				}
				if (isArray(options.onComment)) {
					options.onComment = pushComment(options, options.onComment);
				}

				return options;
			}

			function pushComment(options, array) {
				return function (block, text, start, end, startLoc, endLoc) {
					var comment = {
						type: block ? "Block" : "Line",
						value: text,
						start: start,
						end: end
					};
					if (options.locations) {
						comment.loc = new SourceLocation(this, startLoc, endLoc);
					}
					if (options.ranges) {
						comment.range = [start, end];
					}
					array.push(comment);
				};
			}

			var plugins = {};

			function keywordRegexp(words) {
				return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
			}

			var Parser = function Parser(options, input, startPos) {
				this.options = options = getOptions(options);
				this.sourceFile = options.sourceFile;
				this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);
				var reserved = "";
				if (!options.allowReserved) {
					for (var v = options.ecmaVersion;; v--) {
						if (reserved = reservedWords[v]) {
							break;
						}
					}
					if (options.sourceType == "module") {
						reserved += " await";
					}
				}
				this.reservedWords = keywordRegexp(reserved);
				var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
				this.reservedWordsStrict = keywordRegexp(reservedStrict);
				this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + reservedWords.strictBind);
				this.input = String(input);

				this.containsEsc = false;

				this.loadPlugins(options.plugins);

				if (startPos) {
					this.pos = startPos;
					this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
					this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
				} else {
					this.pos = this.lineStart = 0;
					this.curLine = 1;
				}

				this.type = types.eof;
				this.value = null;
				this.start = this.end = this.pos;
				this.startLoc = this.endLoc = this.curPosition();

				this.lastTokEndLoc = this.lastTokStartLoc = null;
				this.lastTokStart = this.lastTokEnd = this.pos;

				this.context = this.initialContext();
				this.exprAllowed = true;

				this.inModule = options.sourceType === "module";
				this.strict = this.inModule || this.strictDirective(this.pos);

				this.potentialArrowAt = -1;

				this.inFunction = this.inGenerator = this.inAsync = false;
				this.yieldPos = this.awaitPos = 0;
				this.labels = [];

				if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
					this.skipLineComment(2);
				}

				this.scopeStack = [];
				this.enterFunctionScope();
			};

			Parser.prototype.isKeyword = function isKeyword(word) {
				return this.keywords.test(word);
			};
			Parser.prototype.isReservedWord = function isReservedWord(word) {
				return this.reservedWords.test(word);
			};

			Parser.prototype.extend = function extend(name, f) {
				this[name] = f(this[name]);
			};

			Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {
				var this$1 = this;

				for (var name in pluginConfigs) {
					var plugin = plugins[name];
					if (!plugin) {
						throw new Error("Plugin '" + name + "' not found");
					}
					plugin(this$1, pluginConfigs[name]);
				}
			};

			Parser.prototype.parse = function parse() {
				var node = this.options.program || this.startNode();
				this.nextToken();
				return this.parseTopLevel(node);
			};

			var pp = Parser.prototype;

			var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;
			pp.strictDirective = function (start) {
				var this$1 = this;

				for (;;) {
					skipWhiteSpace.lastIndex = start;
					start += skipWhiteSpace.exec(this$1.input)[0].length;
					var match = literal.exec(this$1.input.slice(start));
					if (!match) {
						return false;
					}
					if ((match[1] || match[2]) == "use strict") {
						return true;
					}
					start += match[0].length;
				}
			};

			pp.eat = function (type) {
				if (this.type === type) {
					this.next();
					return true;
				} else {
					return false;
				}
			};

			pp.isContextual = function (name) {
				return this.type === types.name && this.value === name;
			};

			pp.eatContextual = function (name) {
				return this.value === name && this.eat(types.name);
			};

			pp.expectContextual = function (name) {
				if (!this.eatContextual(name)) {
					this.unexpected();
				}
			};

			pp.canInsertSemicolon = function () {
				return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			};

			pp.insertSemicolon = function () {
				if (this.canInsertSemicolon()) {
					if (this.options.onInsertedSemicolon) {
						this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
					}
					return true;
				}
			};

			pp.semicolon = function () {
				if (!this.eat(types.semi) && !this.insertSemicolon()) {
					this.unexpected();
				}
			};

			pp.afterTrailingComma = function (tokType, notNext) {
				if (this.type == tokType) {
					if (this.options.onTrailingComma) {
						this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
					}
					if (!notNext) {
						this.next();
					}
					return true;
				}
			};

			pp.expect = function (type) {
				this.eat(type) || this.unexpected();
			};

			pp.unexpected = function (pos) {
				this.raise(pos != null ? pos : this.start, "Unexpected token");
			};

			function DestructuringErrors() {
				this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1;
			}

			pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
				if (!refDestructuringErrors) {
					return;
				}
				if (refDestructuringErrors.trailingComma > -1) {
					this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
				}
				var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
				if (parens > -1) {
					this.raiseRecoverable(parens, "Parenthesized pattern");
				}
			};

			pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
				var pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1;
				if (!andThrow) {
					return pos >= 0;
				}
				if (pos > -1) {
					this.raise(pos, "Shorthand property assignments are valid only in destructuring patterns");
				}
			};

			pp.checkYieldAwaitInDefaultParams = function () {
				if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
					this.raise(this.yieldPos, "Yield expression cannot be a default value");
				}
				if (this.awaitPos) {
					this.raise(this.awaitPos, "Await expression cannot be a default value");
				}
			};

			pp.isSimpleAssignTarget = function (expr) {
				if (expr.type === "ParenthesizedExpression") {
					return this.isSimpleAssignTarget(expr.expression);
				}
				return expr.type === "Identifier" || expr.type === "MemberExpression";
			};

			var pp$1 = Parser.prototype;

			pp$1.parseTopLevel = function (node) {
				var this$1 = this;

				var exports = {};
				if (!node.body) {
					node.body = [];
				}
				while (this.type !== types.eof) {
					var stmt = this$1.parseStatement(true, true, exports);
					node.body.push(stmt);
				}
				this.next();
				if (this.options.ecmaVersion >= 6) {
					node.sourceType = this.options.sourceType;
				}
				return this.finishNode(node, "Program");
			};

			var loopLabel = { kind: "loop" };
			var switchLabel = { kind: "switch" };

			pp$1.isLet = function () {
				if (this.type !== types.name || this.options.ecmaVersion < 6 || this.value != "let") {
					return false;
				}
				skipWhiteSpace.lastIndex = this.pos;
				var skip = skipWhiteSpace.exec(this.input);
				var next = this.pos + skip[0].length,
				    nextCh = this.input.charCodeAt(next);
				if (nextCh === 91 || nextCh == 123) {
					return true;
				}
				if (isIdentifierStart(nextCh, true)) {
					var pos = next + 1;
					while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
						++pos;
					}
					var ident = this.input.slice(next, pos);
					if (!this.isKeyword(ident)) {
						return true;
					}
				}
				return false;
			};

			pp$1.isAsyncFunction = function () {
				if (this.type !== types.name || this.options.ecmaVersion < 8 || this.value != "async") {
					return false;
				}

				skipWhiteSpace.lastIndex = this.pos;
				var skip = skipWhiteSpace.exec(this.input);
				var next = this.pos + skip[0].length;
				return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
			};

			pp$1.parseStatement = function (declaration, topLevel, exports) {
				var starttype = this.type,
				    node = this.startNode(),
				    kind;

				if (this.isLet()) {
					starttype = types._var;
					kind = "let";
				}

				switch (starttype) {
					case types._break:case types._continue:
						return this.parseBreakContinueStatement(node, starttype.keyword);
					case types._debugger:
						return this.parseDebuggerStatement(node);
					case types._do:
						return this.parseDoStatement(node);
					case types._for:
						return this.parseForStatement(node);
					case types._function:
						if (!declaration && this.options.ecmaVersion >= 6) {
							this.unexpected();
						}
						return this.parseFunctionStatement(node, false);
					case types._class:
						if (!declaration) {
							this.unexpected();
						}
						return this.parseClass(node, true);
					case types._if:
						return this.parseIfStatement(node);
					case types._return:
						return this.parseReturnStatement(node);
					case types._switch:
						return this.parseSwitchStatement(node);
					case types._throw:
						return this.parseThrowStatement(node);
					case types._try:
						return this.parseTryStatement(node);
					case types._const:case types._var:
						kind = kind || this.value;
						if (!declaration && kind != "var") {
							this.unexpected();
						}
						return this.parseVarStatement(node, kind);
					case types._while:
						return this.parseWhileStatement(node);
					case types._with:
						return this.parseWithStatement(node);
					case types.braceL:
						return this.parseBlock();
					case types.semi:
						return this.parseEmptyStatement(node);
					case types._export:
					case types._import:
						if (!this.options.allowImportExportEverywhere) {
							if (!topLevel) {
								this.raise(this.start, "'import' and 'export' may only appear at the top level");
							}
							if (!this.inModule) {
								this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
							}
						}
						return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);

					default:
						if (this.isAsyncFunction() && declaration) {
							this.next();
							return this.parseFunctionStatement(node, true);
						}

						var maybeName = this.value,
						    expr = this.parseExpression();
						if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
							return this.parseLabeledStatement(node, maybeName, expr);
						} else {
							return this.parseExpressionStatement(node, expr);
						}
				}
			};

			pp$1.parseBreakContinueStatement = function (node, keyword) {
				var this$1 = this;

				var isBreak = keyword == "break";
				this.next();
				if (this.eat(types.semi) || this.insertSemicolon()) {
					node.label = null;
				} else if (this.type !== types.name) {
					this.unexpected();
				} else {
					node.label = this.parseIdent();
					this.semicolon();
				}

				var i = 0;
				for (; i < this.labels.length; ++i) {
					var lab = this$1.labels[i];
					if (node.label == null || lab.name === node.label.name) {
						if (lab.kind != null && (isBreak || lab.kind === "loop")) {
							break;
						}
						if (node.label && isBreak) {
							break;
						}
					}
				}
				if (i === this.labels.length) {
					this.raise(node.start, "Unsyntactic " + keyword);
				}
				return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
			};

			pp$1.parseDebuggerStatement = function (node) {
				this.next();
				this.semicolon();
				return this.finishNode(node, "DebuggerStatement");
			};

			pp$1.parseDoStatement = function (node) {
				this.next();
				this.labels.push(loopLabel);
				node.body = this.parseStatement(false);
				this.labels.pop();
				this.expect(types._while);
				node.test = this.parseParenExpression();
				if (this.options.ecmaVersion >= 6) {
					this.eat(types.semi);
				} else {
					this.semicolon();
				}
				return this.finishNode(node, "DoWhileStatement");
			};

			pp$1.parseForStatement = function (node) {
				this.next();
				this.labels.push(loopLabel);
				this.enterLexicalScope();
				this.expect(types.parenL);
				if (this.type === types.semi) {
					return this.parseFor(node, null);
				}
				var isLet = this.isLet();
				if (this.type === types._var || this.type === types._const || isLet) {
					var init$1 = this.startNode(),
					    kind = isLet ? "let" : this.value;
					this.next();
					this.parseVar(init$1, true, kind);
					this.finishNode(init$1, "VariableDeclaration");
					if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1 && !(kind !== "var" && init$1.declarations[0].init)) {
						return this.parseForIn(node, init$1);
					}
					return this.parseFor(node, init$1);
				}
				var refDestructuringErrors = new DestructuringErrors();
				var init = this.parseExpression(true, refDestructuringErrors);
				if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
					this.toAssignable(init);
					this.checkLVal(init);
					this.checkPatternErrors(refDestructuringErrors, true);
					return this.parseForIn(node, init);
				} else {
					this.checkExpressionErrors(refDestructuringErrors, true);
				}
				return this.parseFor(node, init);
			};

			pp$1.parseFunctionStatement = function (node, isAsync) {
				this.next();
				return this.parseFunction(node, true, false, isAsync);
			};

			pp$1.isFunction = function () {
				return this.type === types._function || this.isAsyncFunction();
			};

			pp$1.parseIfStatement = function (node) {
				this.next();
				node.test = this.parseParenExpression();
				node.consequent = this.parseStatement(!this.strict && this.isFunction());
				node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.isFunction()) : null;
				return this.finishNode(node, "IfStatement");
			};

			pp$1.parseReturnStatement = function (node) {
				if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
					this.raise(this.start, "'return' outside of function");
				}
				this.next();

				if (this.eat(types.semi) || this.insertSemicolon()) {
					node.argument = null;
				} else {
					node.argument = this.parseExpression();this.semicolon();
				}
				return this.finishNode(node, "ReturnStatement");
			};

			pp$1.parseSwitchStatement = function (node) {
				var this$1 = this;

				this.next();
				node.discriminant = this.parseParenExpression();
				node.cases = [];
				this.expect(types.braceL);
				this.labels.push(switchLabel);
				this.enterLexicalScope();

				var cur;
				for (var sawDefault = false; this.type != types.braceR;) {
					if (this$1.type === types._case || this$1.type === types._default) {
						var isCase = this$1.type === types._case;
						if (cur) {
							this$1.finishNode(cur, "SwitchCase");
						}
						node.cases.push(cur = this$1.startNode());
						cur.consequent = [];
						this$1.next();
						if (isCase) {
							cur.test = this$1.parseExpression();
						} else {
							if (sawDefault) {
								this$1.raiseRecoverable(this$1.lastTokStart, "Multiple default clauses");
							}
							sawDefault = true;
							cur.test = null;
						}
						this$1.expect(types.colon);
					} else {
						if (!cur) {
							this$1.unexpected();
						}
						cur.consequent.push(this$1.parseStatement(true));
					}
				}
				this.exitLexicalScope();
				if (cur) {
					this.finishNode(cur, "SwitchCase");
				}
				this.next();
				this.labels.pop();
				return this.finishNode(node, "SwitchStatement");
			};

			pp$1.parseThrowStatement = function (node) {
				this.next();
				if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
					this.raise(this.lastTokEnd, "Illegal newline after throw");
				}
				node.argument = this.parseExpression();
				this.semicolon();
				return this.finishNode(node, "ThrowStatement");
			};

			var empty = [];

			pp$1.parseTryStatement = function (node) {
				this.next();
				node.block = this.parseBlock();
				node.handler = null;
				if (this.type === types._catch) {
					var clause = this.startNode();
					this.next();
					this.expect(types.parenL);
					clause.param = this.parseBindingAtom();
					this.enterLexicalScope();
					this.checkLVal(clause.param, "let");
					this.expect(types.parenR);
					clause.body = this.parseBlock(false);
					this.exitLexicalScope();
					node.handler = this.finishNode(clause, "CatchClause");
				}
				node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
				if (!node.handler && !node.finalizer) {
					this.raise(node.start, "Missing catch or finally clause");
				}
				return this.finishNode(node, "TryStatement");
			};

			pp$1.parseVarStatement = function (node, kind) {
				this.next();
				this.parseVar(node, false, kind);
				this.semicolon();
				return this.finishNode(node, "VariableDeclaration");
			};

			pp$1.parseWhileStatement = function (node) {
				this.next();
				node.test = this.parseParenExpression();
				this.labels.push(loopLabel);
				node.body = this.parseStatement(false);
				this.labels.pop();
				return this.finishNode(node, "WhileStatement");
			};

			pp$1.parseWithStatement = function (node) {
				if (this.strict) {
					this.raise(this.start, "'with' in strict mode");
				}
				this.next();
				node.object = this.parseParenExpression();
				node.body = this.parseStatement(false);
				return this.finishNode(node, "WithStatement");
			};

			pp$1.parseEmptyStatement = function (node) {
				this.next();
				return this.finishNode(node, "EmptyStatement");
			};

			pp$1.parseLabeledStatement = function (node, maybeName, expr) {
				var this$1 = this;

				for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1) {
					var label = list[i$1];

					if (label.name === maybeName) {
						this$1.raise(expr.start, "Label '" + maybeName + "' is already declared");
					}
				}
				var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
				for (var i = this.labels.length - 1; i >= 0; i--) {
					var label$1 = this$1.labels[i];
					if (label$1.statementStart == node.start) {
						label$1.statementStart = this$1.start;
						label$1.kind = kind;
					} else {
						break;
					}
				}
				this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });
				node.body = this.parseStatement(true);
				if (node.body.type == "ClassDeclaration" || node.body.type == "VariableDeclaration" && node.body.kind != "var" || node.body.type == "FunctionDeclaration" && (this.strict || node.body.generator)) {
					this.raiseRecoverable(node.body.start, "Invalid labeled declaration");
				}
				this.labels.pop();
				node.label = expr;
				return this.finishNode(node, "LabeledStatement");
			};

			pp$1.parseExpressionStatement = function (node, expr) {
				node.expression = expr;
				this.semicolon();
				return this.finishNode(node, "ExpressionStatement");
			};

			pp$1.parseBlock = function (createNewLexicalScope) {
				var this$1 = this;
				if (createNewLexicalScope === void 0) createNewLexicalScope = true;

				var node = this.startNode();
				node.body = [];
				this.expect(types.braceL);
				if (createNewLexicalScope) {
					this.enterLexicalScope();
				}
				while (!this.eat(types.braceR)) {
					var stmt = this$1.parseStatement(true);
					node.body.push(stmt);
				}
				if (createNewLexicalScope) {
					this.exitLexicalScope();
				}
				return this.finishNode(node, "BlockStatement");
			};

			pp$1.parseFor = function (node, init) {
				node.init = init;
				this.expect(types.semi);
				node.test = this.type === types.semi ? null : this.parseExpression();
				this.expect(types.semi);
				node.update = this.type === types.parenR ? null : this.parseExpression();
				this.expect(types.parenR);
				this.exitLexicalScope();
				node.body = this.parseStatement(false);
				this.labels.pop();
				return this.finishNode(node, "ForStatement");
			};

			pp$1.parseForIn = function (node, init) {
				var type = this.type === types._in ? "ForInStatement" : "ForOfStatement";
				this.next();
				node.left = init;
				node.right = this.parseExpression();
				this.expect(types.parenR);
				this.exitLexicalScope();
				node.body = this.parseStatement(false);
				this.labels.pop();
				return this.finishNode(node, type);
			};

			pp$1.parseVar = function (node, isFor, kind) {
				var this$1 = this;

				node.declarations = [];
				node.kind = kind;
				for (;;) {
					var decl = this$1.startNode();
					this$1.parseVarId(decl, kind);
					if (this$1.eat(types.eq)) {
						decl.init = this$1.parseMaybeAssign(isFor);
					} else if (kind === "const" && !(this$1.type === types._in || this$1.options.ecmaVersion >= 6 && this$1.isContextual("of"))) {
						this$1.unexpected();
					} else if (decl.id.type != "Identifier" && !(isFor && (this$1.type === types._in || this$1.isContextual("of")))) {
						this$1.raise(this$1.lastTokEnd, "Complex binding patterns require an initialization value");
					} else {
						decl.init = null;
					}
					node.declarations.push(this$1.finishNode(decl, "VariableDeclarator"));
					if (!this$1.eat(types.comma)) {
						break;
					}
				}
				return node;
			};

			pp$1.parseVarId = function (decl, kind) {
				decl.id = this.parseBindingAtom(kind);
				this.checkLVal(decl.id, kind, false);
			};

			pp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {
				this.initFunction(node);
				if (this.options.ecmaVersion >= 6 && !isAsync) {
					node.generator = this.eat(types.star);
				}
				if (this.options.ecmaVersion >= 8) {
					node.async = !!isAsync;
				}

				if (isStatement) {
					node.id = isStatement === "nullableID" && this.type != types.name ? null : this.parseIdent();
					if (node.id) {
						this.checkLVal(node.id, "var");
					}
				}

				var oldInGen = this.inGenerator,
				    oldInAsync = this.inAsync,
				    oldYieldPos = this.yieldPos,
				    oldAwaitPos = this.awaitPos,
				    oldInFunc = this.inFunction;
				this.inGenerator = node.generator;
				this.inAsync = node.async;
				this.yieldPos = 0;
				this.awaitPos = 0;
				this.inFunction = true;
				this.enterFunctionScope();

				if (!isStatement) {
					node.id = this.type == types.name ? this.parseIdent() : null;
				}

				this.parseFunctionParams(node);
				this.parseFunctionBody(node, allowExpressionBody);

				this.inGenerator = oldInGen;
				this.inAsync = oldInAsync;
				this.yieldPos = oldYieldPos;
				this.awaitPos = oldAwaitPos;
				this.inFunction = oldInFunc;
				return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
			};

			pp$1.parseFunctionParams = function (node) {
				this.expect(types.parenL);
				node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
				this.checkYieldAwaitInDefaultParams();
			};

			pp$1.parseClass = function (node, isStatement) {
				var this$1 = this;

				this.next();

				this.parseClassId(node, isStatement);
				this.parseClassSuper(node);
				var classBody = this.startNode();
				var hadConstructor = false;
				classBody.body = [];
				this.expect(types.braceL);
				while (!this.eat(types.braceR)) {
					if (this$1.eat(types.semi)) {
						continue;
					}
					var method = this$1.startNode();
					var isGenerator = this$1.eat(types.star);
					var isAsync = false;
					var isMaybeStatic = this$1.type === types.name && this$1.value === "static";
					this$1.parsePropertyName(method);
					method.static = isMaybeStatic && this$1.type !== types.parenL;
					if (method.static) {
						if (isGenerator) {
							this$1.unexpected();
						}
						isGenerator = this$1.eat(types.star);
						this$1.parsePropertyName(method);
					}
					if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed && method.key.type === "Identifier" && method.key.name === "async" && this$1.type !== types.parenL && !this$1.canInsertSemicolon()) {
						isAsync = true;
						this$1.parsePropertyName(method);
					}
					method.kind = "method";
					var isGetSet = false;
					if (!method.computed) {
						var key = method.key;
						if (!isGenerator && !isAsync && key.type === "Identifier" && this$1.type !== types.parenL && (key.name === "get" || key.name === "set")) {
							isGetSet = true;
							method.kind = key.name;
							key = this$1.parsePropertyName(method);
						}
						if (!method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
							if (hadConstructor) {
								this$1.raise(key.start, "Duplicate constructor in the same class");
							}
							if (isGetSet) {
								this$1.raise(key.start, "Constructor can't have get/set modifier");
							}
							if (isGenerator) {
								this$1.raise(key.start, "Constructor can't be a generator");
							}
							if (isAsync) {
								this$1.raise(key.start, "Constructor can't be an async method");
							}
							method.kind = "constructor";
							hadConstructor = true;
						}
					}
					this$1.parseClassMethod(classBody, method, isGenerator, isAsync);
					if (isGetSet) {
						var paramCount = method.kind === "get" ? 0 : 1;
						if (method.value.params.length !== paramCount) {
							var start = method.value.start;
							if (method.kind === "get") {
								this$1.raiseRecoverable(start, "getter should have no params");
							} else {
								this$1.raiseRecoverable(start, "setter should have exactly one param");
							}
						} else {
							if (method.kind === "set" && method.value.params[0].type === "RestElement") {
								this$1.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
							}
						}
					}
				}
				node.body = this.finishNode(classBody, "ClassBody");
				return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
			};

			pp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
				method.value = this.parseMethod(isGenerator, isAsync);
				classBody.body.push(this.finishNode(method, "MethodDefinition"));
			};

			pp$1.parseClassId = function (node, isStatement) {
				node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;
			};

			pp$1.parseClassSuper = function (node) {
				node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
			};

			pp$1.parseExport = function (node, exports) {
				var this$1 = this;

				this.next();
				if (this.eat(types.star)) {
					this.expectContextual("from");
					node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
					this.semicolon();
					return this.finishNode(node, "ExportAllDeclaration");
				}
				if (this.eat(types._default)) {
					this.checkExport(exports, "default", this.lastTokStart);
					var isAsync;
					if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
						var fNode = this.startNode();
						this.next();
						if (isAsync) {
							this.next();
						}
						node.declaration = this.parseFunction(fNode, "nullableID", false, isAsync);
					} else if (this.type === types._class) {
						var cNode = this.startNode();
						node.declaration = this.parseClass(cNode, "nullableID");
					} else {
						node.declaration = this.parseMaybeAssign();
						this.semicolon();
					}
					return this.finishNode(node, "ExportDefaultDeclaration");
				}
				if (this.shouldParseExportStatement()) {
					node.declaration = this.parseStatement(true);
					if (node.declaration.type === "VariableDeclaration") {
						this.checkVariableExport(exports, node.declaration.declarations);
					} else {
						this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
					}
					node.specifiers = [];
					node.source = null;
				} else {
					node.declaration = null;
					node.specifiers = this.parseExportSpecifiers(exports);
					if (this.eatContextual("from")) {
						node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
					} else {
						for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
							var spec = list[i];

							this$1.checkUnreserved(spec.local);
						}

						node.source = null;
					}
					this.semicolon();
				}
				return this.finishNode(node, "ExportNamedDeclaration");
			};

			pp$1.checkExport = function (exports, name, pos) {
				if (!exports) {
					return;
				}
				if (has(exports, name)) {
					this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
				}
				exports[name] = true;
			};

			pp$1.checkPatternExport = function (exports, pat) {
				var this$1 = this;

				var type = pat.type;
				if (type == "Identifier") {
					this.checkExport(exports, pat.name, pat.start);
				} else if (type == "ObjectPattern") {
					for (var i = 0, list = pat.properties; i < list.length; i += 1) {
						var prop = list[i];

						this$1.checkPatternExport(exports, prop.value);
					}
				} else if (type == "ArrayPattern") {
					for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
						var elt = list$1[i$1];

						if (elt) {
							this$1.checkPatternExport(exports, elt);
						}
					}
				} else if (type == "AssignmentPattern") {
					this.checkPatternExport(exports, pat.left);
				} else if (type == "ParenthesizedExpression") {
					this.checkPatternExport(exports, pat.expression);
				}
			};

			pp$1.checkVariableExport = function (exports, decls) {
				var this$1 = this;

				if (!exports) {
					return;
				}
				for (var i = 0, list = decls; i < list.length; i += 1) {
					var decl = list[i];

					this$1.checkPatternExport(exports, decl.id);
				}
			};

			pp$1.shouldParseExportStatement = function () {
				return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
			};

			pp$1.parseExportSpecifiers = function (exports) {
				var this$1 = this;

				var nodes = [],
				    first = true;
				this.expect(types.braceL);
				while (!this.eat(types.braceR)) {
					if (!first) {
						this$1.expect(types.comma);
						if (this$1.afterTrailingComma(types.braceR)) {
							break;
						}
					} else {
						first = false;
					}

					var node = this$1.startNode();
					node.local = this$1.parseIdent(true);
					node.exported = this$1.eatContextual("as") ? this$1.parseIdent(true) : node.local;
					this$1.checkExport(exports, node.exported.name, node.exported.start);
					nodes.push(this$1.finishNode(node, "ExportSpecifier"));
				}
				return nodes;
			};

			pp$1.parseImport = function (node) {
				this.next();
				if (this.type === types.string) {
					node.specifiers = empty;
					node.source = this.parseExprAtom();
				} else {
					node.specifiers = this.parseImportSpecifiers();
					this.expectContextual("from");
					node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
				}
				this.semicolon();
				return this.finishNode(node, "ImportDeclaration");
			};

			pp$1.parseImportSpecifiers = function () {
				var this$1 = this;

				var nodes = [],
				    first = true;
				if (this.type === types.name) {
					var node = this.startNode();
					node.local = this.parseIdent();
					this.checkLVal(node.local, "let");
					nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
					if (!this.eat(types.comma)) {
						return nodes;
					}
				}
				if (this.type === types.star) {
					var node$1 = this.startNode();
					this.next();
					this.expectContextual("as");
					node$1.local = this.parseIdent();
					this.checkLVal(node$1.local, "let");
					nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
					return nodes;
				}
				this.expect(types.braceL);
				while (!this.eat(types.braceR)) {
					if (!first) {
						this$1.expect(types.comma);
						if (this$1.afterTrailingComma(types.braceR)) {
							break;
						}
					} else {
						first = false;
					}

					var node$2 = this$1.startNode();
					node$2.imported = this$1.parseIdent(true);
					if (this$1.eatContextual("as")) {
						node$2.local = this$1.parseIdent();
					} else {
						this$1.checkUnreserved(node$2.imported);
						node$2.local = node$2.imported;
					}
					this$1.checkLVal(node$2.local, "let");
					nodes.push(this$1.finishNode(node$2, "ImportSpecifier"));
				}
				return nodes;
			};

			var pp$2 = Parser.prototype;

			pp$2.toAssignable = function (node, isBinding) {
				var this$1 = this;

				if (this.options.ecmaVersion >= 6 && node) {
					switch (node.type) {
						case "Identifier":
							if (this.inAsync && node.name === "await") {
								this.raise(node.start, "Can not use 'await' as identifier inside an async function");
							}
							break;

						case "ObjectPattern":
						case "ArrayPattern":
							break;

						case "ObjectExpression":
							node.type = "ObjectPattern";
							for (var i = 0, list = node.properties; i < list.length; i += 1) {
								var prop = list[i];

								if (prop.kind !== "init") {
									this$1.raise(prop.key.start, "Object pattern can't contain getter or setter");
								}
								this$1.toAssignable(prop.value, isBinding);
							}
							break;

						case "ArrayExpression":
							node.type = "ArrayPattern";
							this.toAssignableList(node.elements, isBinding);
							break;

						case "AssignmentExpression":
							if (node.operator === "=") {
								node.type = "AssignmentPattern";
								delete node.operator;
								this.toAssignable(node.left, isBinding);
							} else {
								this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
								break;
							}

						case "AssignmentPattern":
							break;

						case "ParenthesizedExpression":
							this.toAssignable(node.expression, isBinding);
							break;

						case "MemberExpression":
							if (!isBinding) {
								break;
							}

						default:
							this.raise(node.start, "Assigning to rvalue");
					}
				}
				return node;
			};

			pp$2.toAssignableList = function (exprList, isBinding) {
				var this$1 = this;

				var end = exprList.length;
				if (end) {
					var last = exprList[end - 1];
					if (last && last.type == "RestElement") {
						--end;
					} else if (last && last.type == "SpreadElement") {
						last.type = "RestElement";
						var arg = last.argument;
						this.toAssignable(arg, isBinding);
						--end;
					}

					if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
						this.unexpected(last.argument.start);
					}
				}
				for (var i = 0; i < end; i++) {
					var elt = exprList[i];
					if (elt) {
						this$1.toAssignable(elt, isBinding);
					}
				}
				return exprList;
			};

			pp$2.parseSpread = function (refDestructuringErrors) {
				var node = this.startNode();
				this.next();
				node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
				return this.finishNode(node, "SpreadElement");
			};

			pp$2.parseRestBinding = function () {
				var node = this.startNode();
				this.next();

				if (this.options.ecmaVersion === 6 && this.type !== types.name) {
					this.unexpected();
				}

				node.argument = this.parseBindingAtom();

				return this.finishNode(node, "RestElement");
			};

			pp$2.parseBindingAtom = function () {
				if (this.options.ecmaVersion < 6) {
					return this.parseIdent();
				}
				switch (this.type) {
					case types.name:
						return this.parseIdent();

					case types.bracketL:
						var node = this.startNode();
						this.next();
						node.elements = this.parseBindingList(types.bracketR, true, true);
						return this.finishNode(node, "ArrayPattern");

					case types.braceL:
						return this.parseObj(true);

					default:
						this.unexpected();
				}
			};

			pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
				var this$1 = this;

				var elts = [],
				    first = true;
				while (!this.eat(close)) {
					if (first) {
						first = false;
					} else {
						this$1.expect(types.comma);
					}
					if (allowEmpty && this$1.type === types.comma) {
						elts.push(null);
					} else if (allowTrailingComma && this$1.afterTrailingComma(close)) {
						break;
					} else if (this$1.type === types.ellipsis) {
						var rest = this$1.parseRestBinding();
						this$1.parseBindingListItem(rest);
						elts.push(rest);
						if (this$1.type === types.comma) {
							this$1.raise(this$1.start, "Comma is not permitted after the rest element");
						}
						this$1.expect(close);
						break;
					} else {
						var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);
						this$1.parseBindingListItem(elem);
						elts.push(elem);
					}
				}
				return elts;
			};

			pp$2.parseBindingListItem = function (param) {
				return param;
			};

			pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
				left = left || this.parseBindingAtom();
				if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
					return left;
				}
				var node = this.startNodeAt(startPos, startLoc);
				node.left = left;
				node.right = this.parseMaybeAssign();
				return this.finishNode(node, "AssignmentPattern");
			};

			pp$2.checkLVal = function (expr, bindingType, checkClashes) {
				var this$1 = this;

				switch (expr.type) {
					case "Identifier":
						if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
							this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
						}
						if (checkClashes) {
							if (has(checkClashes, expr.name)) {
								this.raiseRecoverable(expr.start, "Argument name clash");
							}
							checkClashes[expr.name] = true;
						}
						if (bindingType && bindingType !== "none") {
							if (bindingType === "var" && !this.canDeclareVarName(expr.name) || bindingType !== "var" && !this.canDeclareLexicalName(expr.name)) {
								this.raiseRecoverable(expr.start, "Identifier '" + expr.name + "' has already been declared");
							}
							if (bindingType === "var") {
								this.declareVarName(expr.name);
							} else {
								this.declareLexicalName(expr.name);
							}
						}
						break;

					case "MemberExpression":
						if (bindingType) {
							this.raiseRecoverable(expr.start, (bindingType ? "Binding" : "Assigning to") + " member expression");
						}
						break;

					case "ObjectPattern":
						for (var i = 0, list = expr.properties; i < list.length; i += 1) {
							var prop = list[i];

							this$1.checkLVal(prop.value, bindingType, checkClashes);
						}
						break;

					case "ArrayPattern":
						for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
							var elem = list$1[i$1];

							if (elem) {
								this$1.checkLVal(elem, bindingType, checkClashes);
							}
						}
						break;

					case "AssignmentPattern":
						this.checkLVal(expr.left, bindingType, checkClashes);
						break;

					case "RestElement":
						this.checkLVal(expr.argument, bindingType, checkClashes);
						break;

					case "ParenthesizedExpression":
						this.checkLVal(expr.expression, bindingType, checkClashes);
						break;

					default:
						this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
				}
			};

			var pp$3 = Parser.prototype;

			pp$3.checkPropClash = function (prop, propHash) {
				if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
					return;
				}
				var key = prop.key;
				var name;
				switch (key.type) {
					case "Identifier":
						name = key.name;break;
					case "Literal":
						name = String(key.value);break;
					default:
						return;
				}
				var kind = prop.kind;
				if (this.options.ecmaVersion >= 6) {
					if (name === "__proto__" && kind === "init") {
						if (propHash.proto) {
							this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
						}
						propHash.proto = true;
					}
					return;
				}
				name = "$" + name;
				var other = propHash[name];
				if (other) {
					var redefinition;
					if (kind === "init") {
						redefinition = this.strict && other.init || other.get || other.set;
					} else {
						redefinition = other.init || other[kind];
					}
					if (redefinition) {
						this.raiseRecoverable(key.start, "Redefinition of property");
					}
				} else {
					other = propHash[name] = {
						init: false,
						get: false,
						set: false
					};
				}
				other[kind] = true;
			};

			pp$3.parseExpression = function (noIn, refDestructuringErrors) {
				var this$1 = this;

				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
				if (this.type === types.comma) {
					var node = this.startNodeAt(startPos, startLoc);
					node.expressions = [expr];
					while (this.eat(types.comma)) {
						node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors));
					}
					return this.finishNode(node, "SequenceExpression");
				}
				return expr;
			};

			pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
				if (this.inGenerator && this.isContextual("yield")) {
					return this.parseYield();
				}

				var ownDestructuringErrors = false,
				    oldParenAssign = -1,
				    oldTrailingComma = -1;
				if (refDestructuringErrors) {
					oldParenAssign = refDestructuringErrors.parenthesizedAssign;
					oldTrailingComma = refDestructuringErrors.trailingComma;
					refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
				} else {
					refDestructuringErrors = new DestructuringErrors();
					ownDestructuringErrors = true;
				}

				var startPos = this.start,
				    startLoc = this.startLoc;
				if (this.type == types.parenL || this.type == types.name) {
					this.potentialArrowAt = this.start;
				}
				var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
				if (afterLeftParse) {
					left = afterLeftParse.call(this, left, startPos, startLoc);
				}
				if (this.type.isAssign) {
					this.checkPatternErrors(refDestructuringErrors, true);
					if (!ownDestructuringErrors) {
						DestructuringErrors.call(refDestructuringErrors);
					}
					var node = this.startNodeAt(startPos, startLoc);
					node.operator = this.value;
					node.left = this.type === types.eq ? this.toAssignable(left) : left;
					refDestructuringErrors.shorthandAssign = -1;
					this.checkLVal(left);
					this.next();
					node.right = this.parseMaybeAssign(noIn);
					return this.finishNode(node, "AssignmentExpression");
				} else {
					if (ownDestructuringErrors) {
						this.checkExpressionErrors(refDestructuringErrors, true);
					}
				}
				if (oldParenAssign > -1) {
					refDestructuringErrors.parenthesizedAssign = oldParenAssign;
				}
				if (oldTrailingComma > -1) {
					refDestructuringErrors.trailingComma = oldTrailingComma;
				}
				return left;
			};

			pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseExprOps(noIn, refDestructuringErrors);
				if (this.checkExpressionErrors(refDestructuringErrors)) {
					return expr;
				}
				if (this.eat(types.question)) {
					var node = this.startNodeAt(startPos, startLoc);
					node.test = expr;
					node.consequent = this.parseMaybeAssign();
					this.expect(types.colon);
					node.alternate = this.parseMaybeAssign(noIn);
					return this.finishNode(node, "ConditionalExpression");
				}
				return expr;
			};

			pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseMaybeUnary(refDestructuringErrors, false);
				if (this.checkExpressionErrors(refDestructuringErrors)) {
					return expr;
				}
				return expr.start == startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
			};

			pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
				var prec = this.type.binop;
				if (prec != null && (!noIn || this.type !== types._in)) {
					if (prec > minPrec) {
						var logical = this.type === types.logicalOR || this.type === types.logicalAND;
						var op = this.value;
						this.next();
						var startPos = this.start,
						    startLoc = this.startLoc;
						var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
						var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
						return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
					}
				}
				return left;
			};

			pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
				var node = this.startNodeAt(startPos, startLoc);
				node.left = left;
				node.operator = op;
				node.right = right;
				return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
			};

			pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
				var this$1 = this;

				var startPos = this.start,
				    startLoc = this.startLoc,
				    expr;
				if (this.inAsync && this.isContextual("await")) {
					expr = this.parseAwait(refDestructuringErrors);
					sawUnary = true;
				} else if (this.type.prefix) {
					var node = this.startNode(),
					    update = this.type === types.incDec;
					node.operator = this.value;
					node.prefix = true;
					this.next();
					node.argument = this.parseMaybeUnary(null, true);
					this.checkExpressionErrors(refDestructuringErrors, true);
					if (update) {
						this.checkLVal(node.argument);
					} else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
						this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
					} else {
						sawUnary = true;
					}
					expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
				} else {
					expr = this.parseExprSubscripts(refDestructuringErrors);
					if (this.checkExpressionErrors(refDestructuringErrors)) {
						return expr;
					}
					while (this.type.postfix && !this.canInsertSemicolon()) {
						var node$1 = this$1.startNodeAt(startPos, startLoc);
						node$1.operator = this$1.value;
						node$1.prefix = false;
						node$1.argument = expr;
						this$1.checkLVal(expr);
						this$1.next();
						expr = this$1.finishNode(node$1, "UpdateExpression");
					}
				}

				if (!sawUnary && this.eat(types.starstar)) {
					return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
				} else {
					return expr;
				}
			};

			pp$3.parseExprSubscripts = function (refDestructuringErrors) {
				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseExprAtom(refDestructuringErrors);
				var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
				if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {
					return expr;
				}
				var result = this.parseSubscripts(expr, startPos, startLoc);
				if (refDestructuringErrors && result.type === "MemberExpression") {
					if (refDestructuringErrors.parenthesizedAssign >= result.start) {
						refDestructuringErrors.parenthesizedAssign = -1;
					}
					if (refDestructuringErrors.parenthesizedBind >= result.start) {
						refDestructuringErrors.parenthesizedBind = -1;
					}
				}
				return result;
			};

			pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
				var this$1 = this;

				var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd == base.end && !this.canInsertSemicolon();
				for (var computed = void 0;;) {
					if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {
						var node = this$1.startNodeAt(startPos, startLoc);
						node.object = base;
						node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);
						node.computed = !!computed;
						if (computed) {
							this$1.expect(types.bracketR);
						}
						base = this$1.finishNode(node, "MemberExpression");
					} else if (!noCalls && this$1.eat(types.parenL)) {
						var refDestructuringErrors = new DestructuringErrors(),
						    oldYieldPos = this$1.yieldPos,
						    oldAwaitPos = this$1.awaitPos;
						this$1.yieldPos = 0;
						this$1.awaitPos = 0;
						var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);
						if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {
							this$1.checkPatternErrors(refDestructuringErrors, false);
							this$1.checkYieldAwaitInDefaultParams();
							this$1.yieldPos = oldYieldPos;
							this$1.awaitPos = oldAwaitPos;
							return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true);
						}
						this$1.checkExpressionErrors(refDestructuringErrors, true);
						this$1.yieldPos = oldYieldPos || this$1.yieldPos;
						this$1.awaitPos = oldAwaitPos || this$1.awaitPos;
						var node$1 = this$1.startNodeAt(startPos, startLoc);
						node$1.callee = base;
						node$1.arguments = exprList;
						base = this$1.finishNode(node$1, "CallExpression");
					} else if (this$1.type === types.backQuote) {
						var node$2 = this$1.startNodeAt(startPos, startLoc);
						node$2.tag = base;
						node$2.quasi = this$1.parseTemplate({ isTagged: true });
						base = this$1.finishNode(node$2, "TaggedTemplateExpression");
					} else {
						return base;
					}
				}
			};

			pp$3.parseExprAtom = function (refDestructuringErrors) {
				var node,
				    canBeArrow = this.potentialArrowAt == this.start;
				switch (this.type) {
					case types._super:
						if (!this.inFunction) {
							this.raise(this.start, "'super' outside of function or class");
						}

					case types._this:
						var type = this.type === types._this ? "ThisExpression" : "Super";
						node = this.startNode();
						this.next();
						return this.finishNode(node, type);

					case types.name:
						var startPos = this.start,
						    startLoc = this.startLoc;
						var id = this.parseIdent(this.type !== types.name);
						if (this.options.ecmaVersion >= 8 && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
							return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true);
						}
						if (canBeArrow && !this.canInsertSemicolon()) {
							if (this.eat(types.arrow)) {
								return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
							}
							if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name) {
								id = this.parseIdent();
								if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
									this.unexpected();
								}
								return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
							}
						}
						return id;

					case types.regexp:
						var value = this.value;
						node = this.parseLiteral(value.value);
						node.regex = { pattern: value.pattern, flags: value.flags };
						return node;

					case types.num:case types.string:
						return this.parseLiteral(this.value);

					case types._null:case types._true:case types._false:
						node = this.startNode();
						node.value = this.type === types._null ? null : this.type === types._true;
						node.raw = this.type.keyword;
						this.next();
						return this.finishNode(node, "Literal");

					case types.parenL:
						var start = this.start,
						    expr = this.parseParenAndDistinguishExpression(canBeArrow);
						if (refDestructuringErrors) {
							if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
								refDestructuringErrors.parenthesizedAssign = start;
							}
							if (refDestructuringErrors.parenthesizedBind < 0) {
								refDestructuringErrors.parenthesizedBind = start;
							}
						}
						return expr;

					case types.bracketL:
						node = this.startNode();
						this.next();
						node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
						return this.finishNode(node, "ArrayExpression");

					case types.braceL:
						return this.parseObj(false, refDestructuringErrors);

					case types._function:
						node = this.startNode();
						this.next();
						return this.parseFunction(node, false);

					case types._class:
						return this.parseClass(this.startNode(), false);

					case types._new:
						return this.parseNew();

					case types.backQuote:
						return this.parseTemplate();

					default:
						this.unexpected();
				}
			};

			pp$3.parseLiteral = function (value) {
				var node = this.startNode();
				node.value = value;
				node.raw = this.input.slice(this.start, this.end);
				this.next();
				return this.finishNode(node, "Literal");
			};

			pp$3.parseParenExpression = function () {
				this.expect(types.parenL);
				var val = this.parseExpression();
				this.expect(types.parenR);
				return val;
			};

			pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
				var this$1 = this;

				var startPos = this.start,
				    startLoc = this.startLoc,
				    val,
				    allowTrailingComma = this.options.ecmaVersion >= 8;
				if (this.options.ecmaVersion >= 6) {
					this.next();

					var innerStartPos = this.start,
					    innerStartLoc = this.startLoc;
					var exprList = [],
					    first = true,
					    lastIsComma = false;
					var refDestructuringErrors = new DestructuringErrors(),
					    oldYieldPos = this.yieldPos,
					    oldAwaitPos = this.awaitPos,
					    spreadStart,
					    innerParenStart;
					this.yieldPos = 0;
					this.awaitPos = 0;
					while (this.type !== types.parenR) {
						first ? first = false : this$1.expect(types.comma);
						if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {
							lastIsComma = true;
							break;
						} else if (this$1.type === types.ellipsis) {
							spreadStart = this$1.start;
							exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));
							if (this$1.type === types.comma) {
								this$1.raise(this$1.start, "Comma is not permitted after the rest element");
							}
							break;
						} else {
							if (this$1.type === types.parenL && !innerParenStart) {
								innerParenStart = this$1.start;
							}
							exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));
						}
					}
					var innerEndPos = this.start,
					    innerEndLoc = this.startLoc;
					this.expect(types.parenR);

					if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
						this.checkPatternErrors(refDestructuringErrors, false);
						this.checkYieldAwaitInDefaultParams();
						if (innerParenStart) {
							this.unexpected(innerParenStart);
						}
						this.yieldPos = oldYieldPos;
						this.awaitPos = oldAwaitPos;
						return this.parseParenArrowList(startPos, startLoc, exprList);
					}

					if (!exprList.length || lastIsComma) {
						this.unexpected(this.lastTokStart);
					}
					if (spreadStart) {
						this.unexpected(spreadStart);
					}
					this.checkExpressionErrors(refDestructuringErrors, true);
					this.yieldPos = oldYieldPos || this.yieldPos;
					this.awaitPos = oldAwaitPos || this.awaitPos;

					if (exprList.length > 1) {
						val = this.startNodeAt(innerStartPos, innerStartLoc);
						val.expressions = exprList;
						this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
					} else {
						val = exprList[0];
					}
				} else {
					val = this.parseParenExpression();
				}

				if (this.options.preserveParens) {
					var par = this.startNodeAt(startPos, startLoc);
					par.expression = val;
					return this.finishNode(par, "ParenthesizedExpression");
				} else {
					return val;
				}
			};

			pp$3.parseParenItem = function (item) {
				return item;
			};

			pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
				return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
			};

			var empty$1 = [];

			pp$3.parseNew = function () {
				var node = this.startNode();
				var meta = this.parseIdent(true);
				if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
					node.meta = meta;
					node.property = this.parseIdent(true);
					if (node.property.name !== "target") {
						this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
					}
					if (!this.inFunction) {
						this.raiseRecoverable(node.start, "new.target can only be used in functions");
					}
					return this.finishNode(node, "MetaProperty");
				}
				var startPos = this.start,
				    startLoc = this.startLoc;
				node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
				if (this.eat(types.parenL)) {
					node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
				} else {
					node.arguments = empty$1;
				}
				return this.finishNode(node, "NewExpression");
			};

			pp$3.parseTemplateElement = function (ref) {
				var isTagged = ref.isTagged;

				var elem = this.startNode();
				if (this.type === types.invalidTemplate) {
					if (!isTagged) {
						this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
					}
					elem.value = {
						raw: this.value,
						cooked: null
					};
				} else {
					elem.value = {
						raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
						cooked: this.value
					};
				}
				this.next();
				elem.tail = this.type === types.backQuote;
				return this.finishNode(elem, "TemplateElement");
			};

			pp$3.parseTemplate = function (ref) {
				var this$1 = this;
				if (ref === void 0) ref = {};
				var isTagged = ref.isTagged;if (isTagged === void 0) isTagged = false;

				var node = this.startNode();
				this.next();
				node.expressions = [];
				var curElt = this.parseTemplateElement({ isTagged: isTagged });
				node.quasis = [curElt];
				while (!curElt.tail) {
					this$1.expect(types.dollarBraceL);
					node.expressions.push(this$1.parseExpression());
					this$1.expect(types.braceR);
					node.quasis.push(curElt = this$1.parseTemplateElement({ isTagged: isTagged }));
				}
				this.next();
				return this.finishNode(node, "TemplateLiteral");
			};

			pp$3.isAsyncProp = function (prop) {
				return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			};

			pp$3.parseObj = function (isPattern, refDestructuringErrors) {
				var this$1 = this;

				var node = this.startNode(),
				    first = true,
				    propHash = {};
				node.properties = [];
				this.next();
				while (!this.eat(types.braceR)) {
					if (!first) {
						this$1.expect(types.comma);
						if (this$1.afterTrailingComma(types.braceR)) {
							break;
						}
					} else {
						first = false;
					}

					var prop = this$1.startNode(),
					    isGenerator = void 0,
					    isAsync = void 0,
					    startPos = void 0,
					    startLoc = void 0;
					if (this$1.options.ecmaVersion >= 6) {
						prop.method = false;
						prop.shorthand = false;
						if (isPattern || refDestructuringErrors) {
							startPos = this$1.start;
							startLoc = this$1.startLoc;
						}
						if (!isPattern) {
							isGenerator = this$1.eat(types.star);
						}
					}
					this$1.parsePropertyName(prop);
					if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && this$1.isAsyncProp(prop)) {
						isAsync = true;
						this$1.parsePropertyName(prop, refDestructuringErrors);
					} else {
						isAsync = false;
					}
					this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors);
					this$1.checkPropClash(prop, propHash);
					node.properties.push(this$1.finishNode(prop, "Property"));
				}
				return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
			};

			pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {
				if ((isGenerator || isAsync) && this.type === types.colon) {
					this.unexpected();
				}

				if (this.eat(types.colon)) {
					prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
					prop.kind = "init";
				} else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
					if (isPattern) {
						this.unexpected();
					}
					prop.kind = "init";
					prop.method = true;
					prop.value = this.parseMethod(isGenerator, isAsync);
				} else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type != types.comma && this.type != types.braceR) {
					if (isGenerator || isAsync || isPattern) {
						this.unexpected();
					}
					prop.kind = prop.key.name;
					this.parsePropertyName(prop);
					prop.value = this.parseMethod(false);
					var paramCount = prop.kind === "get" ? 0 : 1;
					if (prop.value.params.length !== paramCount) {
						var start = prop.value.start;
						if (prop.kind === "get") {
							this.raiseRecoverable(start, "getter should have no params");
						} else {
							this.raiseRecoverable(start, "setter should have exactly one param");
						}
					} else {
						if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
							this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
						}
					}
				} else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
					this.checkUnreserved(prop.key);
					prop.kind = "init";
					if (isPattern) {
						prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
					} else if (this.type === types.eq && refDestructuringErrors) {
						if (refDestructuringErrors.shorthandAssign < 0) {
							refDestructuringErrors.shorthandAssign = this.start;
						}
						prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
					} else {
						prop.value = prop.key;
					}
					prop.shorthand = true;
				} else {
					this.unexpected();
				}
			};

			pp$3.parsePropertyName = function (prop) {
				if (this.options.ecmaVersion >= 6) {
					if (this.eat(types.bracketL)) {
						prop.computed = true;
						prop.key = this.parseMaybeAssign();
						this.expect(types.bracketR);
						return prop.key;
					} else {
						prop.computed = false;
					}
				}
				return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true);
			};

			pp$3.initFunction = function (node) {
				node.id = null;
				if (this.options.ecmaVersion >= 6) {
					node.generator = false;
					node.expression = false;
				}
				if (this.options.ecmaVersion >= 8) {
					node.async = false;
				}
			};

			pp$3.parseMethod = function (isGenerator, isAsync) {
				var node = this.startNode(),
				    oldInGen = this.inGenerator,
				    oldInAsync = this.inAsync,
				    oldYieldPos = this.yieldPos,
				    oldAwaitPos = this.awaitPos,
				    oldInFunc = this.inFunction;

				this.initFunction(node);
				if (this.options.ecmaVersion >= 6) {
					node.generator = isGenerator;
				}
				if (this.options.ecmaVersion >= 8) {
					node.async = !!isAsync;
				}

				this.inGenerator = node.generator;
				this.inAsync = node.async;
				this.yieldPos = 0;
				this.awaitPos = 0;
				this.inFunction = true;
				this.enterFunctionScope();

				this.expect(types.parenL);
				node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
				this.checkYieldAwaitInDefaultParams();
				this.parseFunctionBody(node, false);

				this.inGenerator = oldInGen;
				this.inAsync = oldInAsync;
				this.yieldPos = oldYieldPos;
				this.awaitPos = oldAwaitPos;
				this.inFunction = oldInFunc;
				return this.finishNode(node, "FunctionExpression");
			};

			pp$3.parseArrowExpression = function (node, params, isAsync) {
				var oldInGen = this.inGenerator,
				    oldInAsync = this.inAsync,
				    oldYieldPos = this.yieldPos,
				    oldAwaitPos = this.awaitPos,
				    oldInFunc = this.inFunction;

				this.enterFunctionScope();
				this.initFunction(node);
				if (this.options.ecmaVersion >= 8) {
					node.async = !!isAsync;
				}

				this.inGenerator = false;
				this.inAsync = node.async;
				this.yieldPos = 0;
				this.awaitPos = 0;
				this.inFunction = true;

				node.params = this.toAssignableList(params, true);
				this.parseFunctionBody(node, true);

				this.inGenerator = oldInGen;
				this.inAsync = oldInAsync;
				this.yieldPos = oldYieldPos;
				this.awaitPos = oldAwaitPos;
				this.inFunction = oldInFunc;
				return this.finishNode(node, "ArrowFunctionExpression");
			};

			pp$3.parseFunctionBody = function (node, isArrowFunction) {
				var isExpression = isArrowFunction && this.type !== types.braceL;
				var oldStrict = this.strict,
				    useStrict = false;

				if (isExpression) {
					node.body = this.parseMaybeAssign();
					node.expression = true;
					this.checkParams(node, false);
				} else {
					var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
					if (!oldStrict || nonSimple) {
						useStrict = this.strictDirective(this.end);
						if (useStrict && nonSimple) {
							this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
						}
					}
					var oldLabels = this.labels;
					this.labels = [];
					if (useStrict) {
						this.strict = true;
					}

					this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));
					node.body = this.parseBlock(false);
					node.expression = false;
					this.labels = oldLabels;
				}
				this.exitFunctionScope();

				if (this.strict && node.id) {
					this.checkLVal(node.id, "none");
				}
				this.strict = oldStrict;
			};

			pp$3.isSimpleParamList = function (params) {
				for (var i = 0, list = params; i < list.length; i += 1) {
					var param = list[i];

					if (param.type !== "Identifier") {
						return false;
					}
				}
				return true;
			};

			pp$3.checkParams = function (node, allowDuplicates) {
				var this$1 = this;

				var nameHash = {};
				for (var i = 0, list = node.params; i < list.length; i += 1) {
					var param = list[i];

					this$1.checkLVal(param, "var", allowDuplicates ? null : nameHash);
				}
			};

			pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
				var this$1 = this;

				var elts = [],
				    first = true;
				while (!this.eat(close)) {
					if (!first) {
						this$1.expect(types.comma);
						if (allowTrailingComma && this$1.afterTrailingComma(close)) {
							break;
						}
					} else {
						first = false;
					}

					var elt = void 0;
					if (allowEmpty && this$1.type === types.comma) {
						elt = null;
					} else if (this$1.type === types.ellipsis) {
						elt = this$1.parseSpread(refDestructuringErrors);
						if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0) {
							refDestructuringErrors.trailingComma = this$1.start;
						}
					} else {
						elt = this$1.parseMaybeAssign(false, refDestructuringErrors);
					}
					elts.push(elt);
				}
				return elts;
			};

			pp$3.checkUnreserved = function (ref) {
				var start = ref.start;
				var end = ref.end;
				var name = ref.name;

				if (this.inGenerator && name === "yield") {
					this.raiseRecoverable(start, "Can not use 'yield' as identifier inside a generator");
				}
				if (this.inAsync && name === "await") {
					this.raiseRecoverable(start, "Can not use 'await' as identifier inside an async function");
				}
				if (this.isKeyword(name)) {
					this.raise(start, "Unexpected keyword '" + name + "'");
				}
				if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") != -1) {
					return;
				}
				var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
				if (re.test(name)) {
					this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
				}
			};

			pp$3.parseIdent = function (liberal, isBinding) {
				var node = this.startNode();
				if (liberal && this.options.allowReserved == "never") {
					liberal = false;
				}
				if (this.type === types.name) {
					node.name = this.value;
				} else if (this.type.keyword) {
					node.name = this.type.keyword;
				} else {
					this.unexpected();
				}
				this.next();
				this.finishNode(node, "Identifier");
				if (!liberal) {
					this.checkUnreserved(node);
				}
				return node;
			};

			pp$3.parseYield = function () {
				if (!this.yieldPos) {
					this.yieldPos = this.start;
				}

				var node = this.startNode();
				this.next();
				if (this.type == types.semi || this.canInsertSemicolon() || this.type != types.star && !this.type.startsExpr) {
					node.delegate = false;
					node.argument = null;
				} else {
					node.delegate = this.eat(types.star);
					node.argument = this.parseMaybeAssign();
				}
				return this.finishNode(node, "YieldExpression");
			};

			pp$3.parseAwait = function () {
				if (!this.awaitPos) {
					this.awaitPos = this.start;
				}

				var node = this.startNode();
				this.next();
				node.argument = this.parseMaybeUnary(null, true);
				return this.finishNode(node, "AwaitExpression");
			};

			var pp$4 = Parser.prototype;

			pp$4.raise = function (pos, message) {
				var loc = getLineInfo(this.input, pos);
				message += " (" + loc.line + ":" + loc.column + ")";
				var err = new SyntaxError(message);
				err.pos = pos;err.loc = loc;err.raisedAt = this.pos;
				throw err;
			};

			pp$4.raiseRecoverable = pp$4.raise;

			pp$4.curPosition = function () {
				if (this.options.locations) {
					return new Position(this.curLine, this.pos - this.lineStart);
				}
			};

			var pp$5 = Parser.prototype;

			var assign = Object.assign || function (target) {
				var sources = [],
				    len = arguments.length - 1;
				while (len-- > 0) sources[len] = arguments[len + 1];

				for (var i = 0, list = sources; i < list.length; i += 1) {
					var source = list[i];

					for (var key in source) {
						if (has(source, key)) {
							target[key] = source[key];
						}
					}
				}
				return target;
			};

			pp$5.enterFunctionScope = function () {
				this.scopeStack.push({ var: {}, lexical: {}, childVar: {}, parentLexical: {} });
			};

			pp$5.exitFunctionScope = function () {
				this.scopeStack.pop();
			};

			pp$5.enterLexicalScope = function () {
				var parentScope = this.scopeStack[this.scopeStack.length - 1];
				var childScope = { var: {}, lexical: {}, childVar: {}, parentLexical: {} };

				this.scopeStack.push(childScope);
				assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);
			};

			pp$5.exitLexicalScope = function () {
				var childScope = this.scopeStack.pop();
				var parentScope = this.scopeStack[this.scopeStack.length - 1];

				assign(parentScope.childVar, childScope.var, childScope.childVar);
			};

			pp$5.canDeclareVarName = function (name) {
				var currentScope = this.scopeStack[this.scopeStack.length - 1];

				return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name);
			};

			pp$5.canDeclareLexicalName = function (name) {
				var currentScope = this.scopeStack[this.scopeStack.length - 1];

				return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name);
			};

			pp$5.declareVarName = function (name) {
				this.scopeStack[this.scopeStack.length - 1].var[name] = true;
			};

			pp$5.declareLexicalName = function (name) {
				this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;
			};

			var Node = function Node(parser, pos, loc) {
				this.type = "";
				this.start = pos;
				this.end = 0;
				if (parser.options.locations) {
					this.loc = new SourceLocation(parser, loc);
				}
				if (parser.options.directSourceFile) {
					this.sourceFile = parser.options.directSourceFile;
				}
				if (parser.options.ranges) {
					this.range = [pos, 0];
				}
			};

			var pp$6 = Parser.prototype;

			pp$6.startNode = function () {
				return new Node(this, this.start, this.startLoc);
			};

			pp$6.startNodeAt = function (pos, loc) {
				return new Node(this, pos, loc);
			};

			function finishNodeAt(node, type, pos, loc) {
				node.type = type;
				node.end = pos;
				if (this.options.locations) {
					node.loc.end = loc;
				}
				if (this.options.ranges) {
					node.range[1] = pos;
				}
				return node;
			}

			pp$6.finishNode = function (node, type) {
				return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
			};

			pp$6.finishNodeAt = function (node, type, pos, loc) {
				return finishNodeAt.call(this, node, type, pos, loc);
			};

			var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
				this.token = token;
				this.isExpr = !!isExpr;
				this.preserveSpace = !!preserveSpace;
				this.override = override;
				this.generator = !!generator;
			};

			var types$1 = {
				b_stat: new TokContext("{", false),
				b_expr: new TokContext("{", true),
				b_tmpl: new TokContext("${", false),
				p_stat: new TokContext("(", false),
				p_expr: new TokContext("(", true),
				q_tmpl: new TokContext("`", true, true, function (p) {
					return p.tryReadTemplateToken();
				}),
				f_stat: new TokContext("function", false),
				f_expr: new TokContext("function", true),
				f_expr_gen: new TokContext("function", true, false, null, true),
				f_gen: new TokContext("function", false, false, null, true)
			};

			var pp$7 = Parser.prototype;

			pp$7.initialContext = function () {
				return [types$1.b_stat];
			};

			pp$7.braceIsBlock = function (prevType) {
				var parent = this.curContext();
				if (parent === types$1.f_expr || parent === types$1.f_stat) {
					return true;
				}
				if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
					return !parent.isExpr;
				}

				if (prevType === types._return || prevType == types.name && this.exprAllowed) {
					return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
				}
				if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType == types.arrow) {
					return true;
				}
				if (prevType == types.braceL) {
					return parent === types$1.b_stat;
				}
				if (prevType == types._var || prevType == types.name) {
					return false;
				}
				return !this.exprAllowed;
			};

			pp$7.inGeneratorContext = function () {
				var this$1 = this;

				for (var i = this.context.length - 1; i >= 1; i--) {
					var context = this$1.context[i];
					if (context.token === "function") {
						return context.generator;
					}
				}
				return false;
			};

			pp$7.updateContext = function (prevType) {
				var update,
				    type = this.type;
				if (type.keyword && prevType == types.dot) {
					this.exprAllowed = false;
				} else if (update = type.updateContext) {
					update.call(this, prevType);
				} else {
					this.exprAllowed = type.beforeExpr;
				}
			};

			types.parenR.updateContext = types.braceR.updateContext = function () {
				if (this.context.length == 1) {
					this.exprAllowed = true;
					return;
				}
				var out = this.context.pop();
				if (out === types$1.b_stat && this.curContext().token === "function") {
					out = this.context.pop();
				}
				this.exprAllowed = !out.isExpr;
			};

			types.braceL.updateContext = function (prevType) {
				this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
				this.exprAllowed = true;
			};

			types.dollarBraceL.updateContext = function () {
				this.context.push(types$1.b_tmpl);
				this.exprAllowed = true;
			};

			types.parenL.updateContext = function (prevType) {
				var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
				this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
				this.exprAllowed = true;
			};

			types.incDec.updateContext = function () {};

			types._function.updateContext = types._class.updateContext = function (prevType) {
				if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
					this.context.push(types$1.f_expr);
				} else {
					this.context.push(types$1.f_stat);
				}
				this.exprAllowed = false;
			};

			types.backQuote.updateContext = function () {
				if (this.curContext() === types$1.q_tmpl) {
					this.context.pop();
				} else {
					this.context.push(types$1.q_tmpl);
				}
				this.exprAllowed = false;
			};

			types.star.updateContext = function (prevType) {
				if (prevType == types._function) {
					var index = this.context.length - 1;
					if (this.context[index] === types$1.f_expr) {
						this.context[index] = types$1.f_expr_gen;
					} else {
						this.context[index] = types$1.f_gen;
					}
				}
				this.exprAllowed = true;
			};

			types.name.updateContext = function (prevType) {
				var allowed = false;
				if (this.options.ecmaVersion >= 6) {
					if (this.value == "of" && !this.exprAllowed || this.value == "yield" && this.inGeneratorContext()) {
						allowed = true;
					}
				}
				this.exprAllowed = allowed;
			};

			var Token = function Token(p) {
				this.type = p.type;
				this.value = p.value;
				this.start = p.start;
				this.end = p.end;
				if (p.options.locations) {
					this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
				}
				if (p.options.ranges) {
					this.range = [p.start, p.end];
				}
			};

			var pp$8 = Parser.prototype;

			var isRhino = typeof Packages == "object" && Object.prototype.toString.call(Packages) == "[object JavaPackage]";

			pp$8.next = function () {
				if (this.options.onToken) {
					this.options.onToken(new Token(this));
				}

				this.lastTokEnd = this.end;
				this.lastTokStart = this.start;
				this.lastTokEndLoc = this.endLoc;
				this.lastTokStartLoc = this.startLoc;
				this.nextToken();
			};

			pp$8.getToken = function () {
				this.next();
				return new Token(this);
			};

			if (typeof Symbol !== "undefined") {
				pp$8[Symbol.iterator] = function () {
					var this$1 = this;

					return {
						next: function () {
							var token = this$1.getToken();
							return {
								done: token.type === types.eof,
								value: token
							};
						}
					};
				};
			}

			pp$8.curContext = function () {
				return this.context[this.context.length - 1];
			};

			pp$8.nextToken = function () {
				var curContext = this.curContext();
				if (!curContext || !curContext.preserveSpace) {
					this.skipSpace();
				}

				this.start = this.pos;
				if (this.options.locations) {
					this.startLoc = this.curPosition();
				}
				if (this.pos >= this.input.length) {
					return this.finishToken(types.eof);
				}

				if (curContext.override) {
					return curContext.override(this);
				} else {
					this.readToken(this.fullCharCodeAtPos());
				}
			};

			pp$8.readToken = function (code) {
				if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
					return this.readWord();
				}

				return this.getTokenFromCode(code);
			};

			pp$8.fullCharCodeAtPos = function () {
				var code = this.input.charCodeAt(this.pos);
				if (code <= 0xd7ff || code >= 0xe000) {
					return code;
				}
				var next = this.input.charCodeAt(this.pos + 1);
				return (code << 10) + next - 0x35fdc00;
			};

			pp$8.skipBlockComment = function () {
				var this$1 = this;

				var startLoc = this.options.onComment && this.curPosition();
				var start = this.pos,
				    end = this.input.indexOf("*/", this.pos += 2);
				if (end === -1) {
					this.raise(this.pos - 2, "Unterminated comment");
				}
				this.pos = end + 2;
				if (this.options.locations) {
					lineBreakG.lastIndex = start;
					var match;
					while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
						++this$1.curLine;
						this$1.lineStart = match.index + match[0].length;
					}
				}
				if (this.options.onComment) {
					this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
				}
			};

			pp$8.skipLineComment = function (startSkip) {
				var this$1 = this;

				var start = this.pos;
				var startLoc = this.options.onComment && this.curPosition();
				var ch = this.input.charCodeAt(this.pos += startSkip);
				while (this.pos < this.input.length && !isNewLine(ch)) {
					ch = this$1.input.charCodeAt(++this$1.pos);
				}
				if (this.options.onComment) {
					this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
				}
			};

			pp$8.skipSpace = function () {
				var this$1 = this;

				loop: while (this.pos < this.input.length) {
					var ch = this$1.input.charCodeAt(this$1.pos);
					switch (ch) {
						case 32:case 160:
							++this$1.pos;
							break;
						case 13:
							if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {
								++this$1.pos;
							}
						case 10:case 8232:case 8233:
							++this$1.pos;
							if (this$1.options.locations) {
								++this$1.curLine;
								this$1.lineStart = this$1.pos;
							}
							break;
						case 47:
							switch (this$1.input.charCodeAt(this$1.pos + 1)) {
								case 42:
									this$1.skipBlockComment();
									break;
								case 47:
									this$1.skipLineComment(2);
									break;
								default:
									break loop;
							}
							break;
						default:
							if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
								++this$1.pos;
							} else {
								break loop;
							}
					}
				}
			};

			pp$8.finishToken = function (type, val) {
				this.end = this.pos;
				if (this.options.locations) {
					this.endLoc = this.curPosition();
				}
				var prevType = this.type;
				this.type = type;
				this.value = val;

				this.updateContext(prevType);
			};

			pp$8.readToken_dot = function () {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next >= 48 && next <= 57) {
					return this.readNumber(true);
				}
				var next2 = this.input.charCodeAt(this.pos + 2);
				if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
					this.pos += 3;
					return this.finishToken(types.ellipsis);
				} else {
					++this.pos;
					return this.finishToken(types.dot);
				}
			};

			pp$8.readToken_slash = function () {
				var next = this.input.charCodeAt(this.pos + 1);
				if (this.exprAllowed) {
					++this.pos;return this.readRegexp();
				}
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(types.slash, 1);
			};

			pp$8.readToken_mult_modulo_exp = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				var size = 1;
				var tokentype = code === 42 ? types.star : types.modulo;

				if (this.options.ecmaVersion >= 7 && next === 42) {
					++size;
					tokentype = types.starstar;
					next = this.input.charCodeAt(this.pos + 2);
				}

				if (next === 61) {
					return this.finishOp(types.assign, size + 1);
				}
				return this.finishOp(tokentype, size);
			};

			pp$8.readToken_pipe_amp = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === code) {
					return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
				}
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
			};

			pp$8.readToken_caret = function () {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(types.bitwiseXOR, 1);
			};

			pp$8.readToken_plus_min = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === code) {
					if (next == 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
						this.skipLineComment(3);
						this.skipSpace();
						return this.nextToken();
					}
					return this.finishOp(types.incDec, 2);
				}
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(types.plusMin, 1);
			};

			pp$8.readToken_lt_gt = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				var size = 1;
				if (next === code) {
					size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
					if (this.input.charCodeAt(this.pos + size) === 61) {
						return this.finishOp(types.assign, size + 1);
					}
					return this.finishOp(types.bitShift, size);
				}
				if (next == 33 && code == 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {
					this.skipLineComment(4);
					this.skipSpace();
					return this.nextToken();
				}
				if (next === 61) {
					size = 2;
				}
				return this.finishOp(types.relational, size);
			};

			pp$8.readToken_eq_excl = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === 61) {
					return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
				}
				if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
					this.pos += 2;
					return this.finishToken(types.arrow);
				}
				return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
			};

			pp$8.getTokenFromCode = function (code) {
				switch (code) {
					case 46:
						return this.readToken_dot();

					case 40:
						++this.pos;return this.finishToken(types.parenL);
					case 41:
						++this.pos;return this.finishToken(types.parenR);
					case 59:
						++this.pos;return this.finishToken(types.semi);
					case 44:
						++this.pos;return this.finishToken(types.comma);
					case 91:
						++this.pos;return this.finishToken(types.bracketL);
					case 93:
						++this.pos;return this.finishToken(types.bracketR);
					case 123:
						++this.pos;return this.finishToken(types.braceL);
					case 125:
						++this.pos;return this.finishToken(types.braceR);
					case 58:
						++this.pos;return this.finishToken(types.colon);
					case 63:
						++this.pos;return this.finishToken(types.question);

					case 96:
						if (this.options.ecmaVersion < 6) {
							break;
						}
						++this.pos;
						return this.finishToken(types.backQuote);

					case 48:
						var next = this.input.charCodeAt(this.pos + 1);
						if (next === 120 || next === 88) {
							return this.readRadixNumber(16);
						}
						if (this.options.ecmaVersion >= 6) {
							if (next === 111 || next === 79) {
								return this.readRadixNumber(8);
							}
							if (next === 98 || next === 66) {
								return this.readRadixNumber(2);
							}
						}
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						return this.readNumber(false);

					case 34:case 39:
						return this.readString(code);

					case 47:
						return this.readToken_slash();

					case 37:case 42:
						return this.readToken_mult_modulo_exp(code);

					case 124:case 38:
						return this.readToken_pipe_amp(code);

					case 94:
						return this.readToken_caret();

					case 43:case 45:
						return this.readToken_plus_min(code);

					case 60:case 62:
						return this.readToken_lt_gt(code);

					case 61:case 33:
						return this.readToken_eq_excl(code);

					case 126:
						return this.finishOp(types.prefix, 1);
				}

				this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
			};

			pp$8.finishOp = function (type, size) {
				var str = this.input.slice(this.pos, this.pos + size);
				this.pos += size;
				return this.finishToken(type, str);
			};

			function tryCreateRegexp(src, flags, throwErrorAt, parser) {
				try {
					return new RegExp(src, flags);
				} catch (e) {
					if (throwErrorAt !== undefined) {
						if (e instanceof SyntaxError) {
							parser.raise(throwErrorAt, "Error parsing regular expression: " + e.message);
						}
						throw e;
					}
				}
			}

			var regexpUnicodeSupport = !!tryCreateRegexp("\uffff", "u");

			pp$8.readRegexp = function () {
				var this$1 = this;

				var escaped,
				    inClass,
				    start = this.pos;
				for (;;) {
					if (this$1.pos >= this$1.input.length) {
						this$1.raise(start, "Unterminated regular expression");
					}
					var ch = this$1.input.charAt(this$1.pos);
					if (lineBreak.test(ch)) {
						this$1.raise(start, "Unterminated regular expression");
					}
					if (!escaped) {
						if (ch === "[") {
							inClass = true;
						} else if (ch === "]" && inClass) {
							inClass = false;
						} else if (ch === "/" && !inClass) {
							break;
						}
						escaped = ch === "\\";
					} else {
						escaped = false;
					}
					++this$1.pos;
				}
				var content = this.input.slice(start, this.pos);
				++this.pos;
				var mods = this.readWord1();
				var tmp = content,
				    tmpFlags = "";
				if (mods) {
					var validFlags = /^[gim]*$/;
					if (this.options.ecmaVersion >= 6) {
						validFlags = /^[gimuy]*$/;
					}
					if (!validFlags.test(mods)) {
						this.raise(start, "Invalid regular expression flag");
					}
					if (mods.indexOf("u") >= 0) {
						if (regexpUnicodeSupport) {
							tmpFlags = "u";
						} else {
							tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
								code = Number("0x" + code);
								if (code > 0x10FFFF) {
									this$1.raise(start + offset + 3, "Code point out of bounds");
								}
								return "x";
							});
							tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
							tmpFlags = tmpFlags.replace("u", "");
						}
					}
				}
				var value = null;
				if (!isRhino) {
					tryCreateRegexp(tmp, tmpFlags, start, this);
					value = tryCreateRegexp(content, mods);
				}
				return this.finishToken(types.regexp, { pattern: content, flags: mods, value: value });
			};

			pp$8.readInt = function (radix, len) {
				var this$1 = this;

				var start = this.pos,
				    total = 0;
				for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
					var code = this$1.input.charCodeAt(this$1.pos),
					    val = void 0;
					if (code >= 97) {
						val = code - 97 + 10;
					} else if (code >= 65) {
						val = code - 65 + 10;
					} else if (code >= 48 && code <= 57) {
						val = code - 48;
					} else {
						val = Infinity;
					}
					if (val >= radix) {
						break;
					}
					++this$1.pos;
					total = total * radix + val;
				}
				if (this.pos === start || len != null && this.pos - start !== len) {
					return null;
				}

				return total;
			};

			pp$8.readRadixNumber = function (radix) {
				this.pos += 2;
				var val = this.readInt(radix);
				if (val == null) {
					this.raise(this.start + 2, "Expected number in radix " + radix);
				}
				if (isIdentifierStart(this.fullCharCodeAtPos())) {
					this.raise(this.pos, "Identifier directly after number");
				}
				return this.finishToken(types.num, val);
			};

			pp$8.readNumber = function (startsWithDot) {
				var start = this.pos,
				    isFloat = false,
				    octal = this.input.charCodeAt(this.pos) === 48;
				if (!startsWithDot && this.readInt(10) === null) {
					this.raise(start, "Invalid number");
				}
				if (octal && this.pos == start + 1) {
					octal = false;
				}
				var next = this.input.charCodeAt(this.pos);
				if (next === 46 && !octal) {
					++this.pos;
					this.readInt(10);
					isFloat = true;
					next = this.input.charCodeAt(this.pos);
				}
				if ((next === 69 || next === 101) && !octal) {
					next = this.input.charCodeAt(++this.pos);
					if (next === 43 || next === 45) {
						++this.pos;
					}
					if (this.readInt(10) === null) {
						this.raise(start, "Invalid number");
					}
					isFloat = true;
				}
				if (isIdentifierStart(this.fullCharCodeAtPos())) {
					this.raise(this.pos, "Identifier directly after number");
				}

				var str = this.input.slice(start, this.pos),
				    val;
				if (isFloat) {
					val = parseFloat(str);
				} else if (!octal || str.length === 1) {
					val = parseInt(str, 10);
				} else if (this.strict) {
					this.raise(start, "Invalid number");
				} else if (/[89]/.test(str)) {
					val = parseInt(str, 10);
				} else {
					val = parseInt(str, 8);
				}
				return this.finishToken(types.num, val);
			};

			pp$8.readCodePoint = function () {
				var ch = this.input.charCodeAt(this.pos),
				    code;

				if (ch === 123) {
					if (this.options.ecmaVersion < 6) {
						this.unexpected();
					}
					var codePos = ++this.pos;
					code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
					++this.pos;
					if (code > 0x10FFFF) {
						this.invalidStringToken(codePos, "Code point out of bounds");
					}
				} else {
					code = this.readHexChar(4);
				}
				return code;
			};

			function codePointToString(code) {
				if (code <= 0xFFFF) {
					return String.fromCharCode(code);
				}
				code -= 0x10000;
				return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
			}

			pp$8.readString = function (quote) {
				var this$1 = this;

				var out = "",
				    chunkStart = ++this.pos;
				for (;;) {
					if (this$1.pos >= this$1.input.length) {
						this$1.raise(this$1.start, "Unterminated string constant");
					}
					var ch = this$1.input.charCodeAt(this$1.pos);
					if (ch === quote) {
						break;
					}
					if (ch === 92) {
						out += this$1.input.slice(chunkStart, this$1.pos);
						out += this$1.readEscapedChar(false);
						chunkStart = this$1.pos;
					} else {
						if (isNewLine(ch)) {
							this$1.raise(this$1.start, "Unterminated string constant");
						}
						++this$1.pos;
					}
				}
				out += this.input.slice(chunkStart, this.pos++);
				return this.finishToken(types.string, out);
			};

			var INVALID_TEMPLATE_ESCAPE_ERROR = {};

			pp$8.tryReadTemplateToken = function () {
				this.inTemplateElement = true;
				try {
					this.readTmplToken();
				} catch (err) {
					if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
						this.readInvalidTemplateToken();
					} else {
						throw err;
					}
				}

				this.inTemplateElement = false;
			};

			pp$8.invalidStringToken = function (position, message) {
				if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
					throw INVALID_TEMPLATE_ESCAPE_ERROR;
				} else {
					this.raise(position, message);
				}
			};

			pp$8.readTmplToken = function () {
				var this$1 = this;

				var out = "",
				    chunkStart = this.pos;
				for (;;) {
					if (this$1.pos >= this$1.input.length) {
						this$1.raise(this$1.start, "Unterminated template");
					}
					var ch = this$1.input.charCodeAt(this$1.pos);
					if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) {
						if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {
							if (ch === 36) {
								this$1.pos += 2;
								return this$1.finishToken(types.dollarBraceL);
							} else {
								++this$1.pos;
								return this$1.finishToken(types.backQuote);
							}
						}
						out += this$1.input.slice(chunkStart, this$1.pos);
						return this$1.finishToken(types.template, out);
					}
					if (ch === 92) {
						out += this$1.input.slice(chunkStart, this$1.pos);
						out += this$1.readEscapedChar(true);
						chunkStart = this$1.pos;
					} else if (isNewLine(ch)) {
						out += this$1.input.slice(chunkStart, this$1.pos);
						++this$1.pos;
						switch (ch) {
							case 13:
								if (this$1.input.charCodeAt(this$1.pos) === 10) {
									++this$1.pos;
								}
							case 10:
								out += "\n";
								break;
							default:
								out += String.fromCharCode(ch);
								break;
						}
						if (this$1.options.locations) {
							++this$1.curLine;
							this$1.lineStart = this$1.pos;
						}
						chunkStart = this$1.pos;
					} else {
						++this$1.pos;
					}
				}
			};

			pp$8.readInvalidTemplateToken = function () {
				var this$1 = this;

				for (; this.pos < this.input.length; this.pos++) {
					switch (this$1.input[this$1.pos]) {
						case "\\":
							++this$1.pos;
							break;

						case "$":
							if (this$1.input[this$1.pos + 1] !== "{") {
								break;
							}

						case "`":
							return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos));

					}
				}
				this.raise(this.start, "Unterminated template");
			};

			pp$8.readEscapedChar = function (inTemplate) {
				var ch = this.input.charCodeAt(++this.pos);
				++this.pos;
				switch (ch) {
					case 110:
						return "\n";
					case 114:
						return "\r";
					case 120:
						return String.fromCharCode(this.readHexChar(2));
					case 117:
						return codePointToString(this.readCodePoint());
					case 116:
						return "\t";
					case 98:
						return "\b";
					case 118:
						return "\u000b";
					case 102:
						return "\f";
					case 13:
						if (this.input.charCodeAt(this.pos) === 10) {
							++this.pos;
						}
					case 10:
						if (this.options.locations) {
							this.lineStart = this.pos;++this.curLine;
						}
						return "";
					default:
						if (ch >= 48 && ch <= 55) {
							var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
							var octal = parseInt(octalStr, 8);
							if (octal > 255) {
								octalStr = octalStr.slice(0, -1);
								octal = parseInt(octalStr, 8);
							}
							if (octalStr !== "0" && (this.strict || inTemplate)) {
								this.invalidStringToken(this.pos - 2, "Octal literal in strict mode");
							}
							this.pos += octalStr.length - 1;
							return String.fromCharCode(octal);
						}
						return String.fromCharCode(ch);
				}
			};

			pp$8.readHexChar = function (len) {
				var codePos = this.pos;
				var n = this.readInt(16, len);
				if (n === null) {
					this.invalidStringToken(codePos, "Bad character escape sequence");
				}
				return n;
			};

			pp$8.readWord1 = function () {
				var this$1 = this;

				this.containsEsc = false;
				var word = "",
				    first = true,
				    chunkStart = this.pos;
				var astral = this.options.ecmaVersion >= 6;
				while (this.pos < this.input.length) {
					var ch = this$1.fullCharCodeAtPos();
					if (isIdentifierChar(ch, astral)) {
						this$1.pos += ch <= 0xffff ? 1 : 2;
					} else if (ch === 92) {
						this$1.containsEsc = true;
						word += this$1.input.slice(chunkStart, this$1.pos);
						var escStart = this$1.pos;
						if (this$1.input.charCodeAt(++this$1.pos) != 117) {
							this$1.invalidStringToken(this$1.pos, "Expecting Unicode escape sequence \\uXXXX");
						}
						++this$1.pos;
						var esc = this$1.readCodePoint();
						if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
							this$1.invalidStringToken(escStart, "Invalid Unicode escape");
						}
						word += codePointToString(esc);
						chunkStart = this$1.pos;
					} else {
						break;
					}
					first = false;
				}
				return word + this.input.slice(chunkStart, this.pos);
			};

			pp$8.readWord = function () {
				var word = this.readWord1();
				var type = types.name;
				if (this.keywords.test(word)) {
					if (this.containsEsc) {
						this.raiseRecoverable(this.start, "Escape sequence in keyword " + word);
					}
					type = keywords$1[word];
				}
				return this.finishToken(type, word);
			};

			var version = "5.1.2";

			function parse(input, options) {
				return new Parser(options, input).parse();
			}

			function parseExpressionAt(input, pos, options) {
				var p = new Parser(options, input, pos);
				p.nextToken();
				return p.parseExpression();
			}

			function tokenizer(input, options) {
				return new Parser(options, input);
			}

			function addLooseExports(parse, Parser$$1, plugins$$1) {
				exports.parse_dammit = parse;
				exports.LooseParser = Parser$$1;
				exports.pluginsLoose = plugins$$1;
			}

			exports.version = version;
			exports.parse = parse;
			exports.parseExpressionAt = parseExpressionAt;
			exports.tokenizer = tokenizer;
			exports.addLooseExports = addLooseExports;
			exports.Parser = Parser;
			exports.plugins = plugins;
			exports.defaultOptions = defaultOptions;
			exports.Position = Position;
			exports.SourceLocation = SourceLocation;
			exports.getLineInfo = getLineInfo;
			exports.Node = Node;
			exports.TokenType = TokenType;
			exports.tokTypes = types;
			exports.keywordTypes = keywords$1;
			exports.TokContext = TokContext;
			exports.tokContexts = types$1;
			exports.isIdentifierChar = isIdentifierChar;
			exports.isIdentifierStart = isIdentifierStart;
			exports.Token = Token;
			exports.isNewLine = isNewLine;
			exports.lineBreak = lineBreak;
			exports.lineBreakG = lineBreakG;
			exports.nonASCIIwhitespace = nonASCIIwhitespace;

			Object.defineProperty(exports, '__esModule', { value: true });
		});
	}, {}], 27: [function (require, module, exports) {}, {}] }, {}, [25]);

'use strict';

const gpu = new GPU();

var files = ["models", "pe", "cre"];

const Data = {};

var Parties, Ridings, PartiesI, RidingsI;

var SlopesA, InterceptsA;

var Res;

var PopularVotes = {
	"Liberal": 40.0,
	"Conservative": 30.0,
	"New Democratic": 20.0,
	"Green": 5.0,
	"Bloc Québécois": 5.0
};

function PI(i, x) {
	return Parties[i];
}

function RI(i, x) {
	return Ridings[i];
}

function obj_from_arr(keys, arr) {
	const res = {};
	for (var i = 0; i < arr.length; i++) {
		res[keys[i]] = arr[i];
	}
	return res;
}

function DKR(xs) {
	return obj_from_arr(Ridings, xs);
}
function DKP(xs) {
	return obj_from_arr(Parties, xs);
}
function DVP(xs) {
	return xs.map(PI);
}

function EKP(PV) {
	return arr_from_obj(PartiesI, PV);
}

function arr_from_obj(indices, obj) {
	const arr = [];
	for (var k in obj) {
		if (obj.hasOwnProperty(k)) {
			arr[indices[k]] = obj[k];
		}
	}

	return arr;
}

function invert(xs) {
	const res = {};
	for (var i = 0; i < xs.length; i++) {
		res[xs[i]] = i;
	}
	return res;
}

function by_riding_party(riding_ids, party_names, xs) {
	const map = {};
	const N = xs.length;
	for (var i = 0; i < N; i++) {
		const r = riding_ids[i];
		if (!(r in map)) {
			map[r] = {};
		}

		map[r][party_names[i]] = xs[i];
	}

	return map;
}

function rp_to_array2d(map, v0) {
	const arr = [];
	const R = Object.keys(Ridings).length;
	const P = Object.keys(Parties).length;
	for (var i = 0; i < R; i++) {
		arr[i] = [];
		var m = map[Ridings[i]] || {};
		for (var j = 0; j < P; j++) {
			const val = m[Parties[j]];
			arr[i].push(val === undefined ? v0 : val);
		}
	}
	return arr;
}

// evaluate at swing model at PV=PV+i*dPV1+j*dPV2 and get seat
// count for party k
function evaluateMap(
/* P */pvs,
/* P */dpvx,
/* P */dpvy,
/* R*P */slopes,
/* R*P */intercepts, p) {
	//const p = this.thread.z;
	var count = 0;
	for (var r = 0; r < this.constants.R; r++) {
		var bestI = 0;
		var bestE = -100.0;
		for (var i = 0; i < this.constants.P; i++) {
			var pv = (this.constants.x0 + this.thread.x * this.constants.dx) * dpvx[i] + (this.constants.y0 + this.thread.y * this.constants.dy) * dpvy[i] + pvs[i];

			var ev = pv * slopes[r][i] + intercepts[r][i];
			const s = step(bestE, ev);
			const s1 = step(ev, bestE);
			bestI = s1 * bestI + s * i;
			bestE = s1 * bestE + s * ev;
			//if (s > 0 /*ev > bestE*/) {
			//  bestI = i;
			//  bestE = ev;
			//}
		}

		if (bestI === p) count++;
	}
	return count;
}

var K = {
	evaluateMap: gpu.createKernel(evaluateMap),

	render: function (NX, NY, constants) {
		const kernel = gpu.createKernel(function (
		/* P */pvs,
		/* P */dpvx,
		/* P */dpvy,
		/* R*P */slopes,
		/* R*P */intercepts) {
			const L = 1.0 * evaluateMap(pvs, dpvx, dpvy, slopes, intercepts, 3) / 338.0;
			const N = 1.0 * evaluateMap(pvs, dpvx, dpvy, slopes, intercepts, 4) / 338.0;
			const C = 1.0 * evaluateMap(pvs, dpvx, dpvy, slopes, intercepts, 1) / 338.0;

			var k = 0.0;
			if (L > N && L > C) {
				if (L < 0.5) k = 0.2;
				this.color(1, k, k);
			} else if (N > L && N > C) {
				if (N < 0.5) k = 0.2;
				this.color(1, 0.5 + k, k);
			} else if (C > L && C > N) {
				if (C < 0.5) k = 0.2;
				this.color(k, k, 0.75);
			} else if (L === N && L === C) {
				this.color(1, 1, 1);
			} else if (L === N && L !== C) {
				this.color(0.5, 0.5, 0);
			} else if (L === C && L !== N) {
				this.color(0.5, 0, 0.5);
			} else if (N === C && N !== L) {
				this.color(0.2, 0.5, 0.5);
			}
			//this.color(L, N, C);
		}, {
			constants: constants,
			output: [NX, NY],
			dimensions: [NX, NY],
			graphical: true,
			debug: false,
			outputToTexture: true,
			functions: [evaluateMap]
		});
		//kernel.setGraphical(true);

		return kernel;
	}
};

function start() {
	const pe = Data.pe,
	      models = Data.models,
	      cre = Data.cre;

	PartiesI = invert(Parties = _.uniq(pe.party_name));
	RidingsI = invert(Ridings = _.uniq(models.riding_id));

	const N = models.slope.length;

	SlopesA = rp_to_array2d(by_riding_party(models.riding_id, models.party_name, models.slope), 0.0);
	InterceptsA = rp_to_array2d(by_riding_party(models.riding_id, models.party_name, models.intercept), -100.0);

	const NX = 600,
	      NY = 600;
	const constants = {
		x0: -30.0, dx: 60.0 / NX,
		y0: -30.0, dy: 60.0 / NY,
		NX: NX,
		NY: NY,
		P: Parties.length,
		R: Ridings.length,
		N: N
	};
	//const em = K.evaluateMap;
	//em.setConstants(constants);
	//em.setOutput([NX, NY, Parties.length]);
	//const PV = EKP(PopularVotes);
	//(Res = DKP(K.evaluateMap(
	//  //[5.0, 30.0, 5.0, 40.0, 20.0],
	//  [5.0, 30.0, 5.0, 30.0, 30.0],
	//  [0.0, 0.0, 0.0, -1.0, 1.0],
	//  [0.0, -1.0, 0.0, 1.0, 0.0],
	//  SlopesA,
	//  InterceptsA
	//)));

	const render = K.render(NX, NY, constants);
	//render.setOutput([NX, NY]).setGraphical(true);
	const canvas = render.getCanvas();
	document.getElementsByTagName('header')[0].appendChild(canvas);

	function draw() {
		const t0 = performance.now();
		render([5.0, 30.0, 5.0, 30.0, 30.0], [0.0, 0.0, 0.0, -1.0, 1.0], [0.0, -1.0, 0.0, 1.0, 0.0], SlopesA, InterceptsA);
		const t1 = performance.now();
		console.log("after", t1 - t0);
		//requestAnimationFrame(draw);
	}
	requestAnimationFrame(draw);

	if (false) {
		const evaluate = gpu.createKernel(function evaluate(pvs, slopes, intercepts) {
			var bestI = 0;
			var bestE = -100.0;
			for (var i = 0; i < this.constants.P; i++) {
				var ev = pvs[i] * slopes[this.thread.x][i] + intercepts[this.thread.x][i];
				if (ev > bestE) {
					bestI = i;
					bestE = ev;
				}
			}
			return bestI;
		}, {
			constants: { P: Parties.length, N: N },
			output: [N]
		});

		const c = evaluate(PV, SlopesA, InterceptsA);
		//const results = DKR(DVP(Array.from(c)));
		//Res = results;
		console.log(results);
		console.log(_.mapValues("length", _.groupBy(_.identity, _.values(Res))));
	}
}

$.when.apply(this, files.map(function (name) {
	return $.getJSON("data/" + name + ".json", function (res) {
		Data[name] = res;
	});
})).then(start);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdwdS5qcyIsImluZGV4LmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwibW9kdWxlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiRnVuY3Rpb25CdWlsZGVyQmFzZSIsIkNQVUZ1bmN0aW9uTm9kZSIsIl9GdW5jdGlvbkJ1aWxkZXJCYXNlIiwiQ1BVRnVuY3Rpb25CdWlsZGVyIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsIk5vZGUiLCJwb2x5ZmlsbFN0YW5kYXJkRnVuY3Rpb25zIiwiQmFzZUZ1bmN0aW9uTm9kZSIsInV0aWxzIiwiX0Jhc2VGdW5jdGlvbk5vZGUiLCJhcHBseSIsImFyZ3VtZW50cyIsImdlbmVyYXRlIiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwiZnVuY3Rpb25TdHJpbmdBcnJheSIsImFzdEdlbmVyaWMiLCJnZXRKc0FTVCIsImZ1bmN0aW9uU3RyaW5nIiwiam9pbiIsInRyaW0iLCJnZXRGdW5jdGlvblByb3RvdHlwZVN0cmluZyIsIndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmciLCJhc3QiLCJyZXRBcnIiLCJmdW5jUGFyYW0iLCJhc3RFcnJvck91dHB1dCIsIkFycmF5IiwiaXNBcnJheSIsInR5cGUiLCJhc3RGdW5jdGlvbkRlY2xhcmF0aW9uIiwiYXN0RnVuY3Rpb25FeHByZXNzaW9uIiwiYXN0UmV0dXJuU3RhdGVtZW50IiwiYXN0TGl0ZXJhbCIsImFzdEJpbmFyeUV4cHJlc3Npb24iLCJhc3RJZGVudGlmaWVyRXhwcmVzc2lvbiIsImFzdEFzc2lnbm1lbnRFeHByZXNzaW9uIiwiYXN0RXhwcmVzc2lvblN0YXRlbWVudCIsImFzdEVtcHR5U3RhdGVtZW50IiwiYXN0QmxvY2tTdGF0ZW1lbnQiLCJhc3RJZlN0YXRlbWVudCIsImFzdEJyZWFrU3RhdGVtZW50IiwiYXN0Q29udGludWVTdGF0ZW1lbnQiLCJhc3RGb3JTdGF0ZW1lbnQiLCJhc3RXaGlsZVN0YXRlbWVudCIsImFzdFZhcmlhYmxlRGVjbGFyYXRpb24iLCJhc3RWYXJpYWJsZURlY2xhcmF0b3IiLCJhc3RUaGlzRXhwcmVzc2lvbiIsImFzdFNlcXVlbmNlRXhwcmVzc2lvbiIsImFzdFVuYXJ5RXhwcmVzc2lvbiIsImFzdFVwZGF0ZUV4cHJlc3Npb24iLCJhc3RMb2dpY2FsRXhwcmVzc2lvbiIsImFzdE1lbWJlckV4cHJlc3Npb24iLCJhc3RDYWxsRXhwcmVzc2lvbiIsImFzdEFycmF5RXhwcmVzc2lvbiIsImFkZEZ1bmN0aW9uIiwiZ2V0QXN0U3RyaW5nIiwianNGdW5jdGlvblN0cmluZyIsImlzUm9vdEtlcm5lbCIsInB1c2giLCJrZXJuYWxBc3QiLCJmdW5jdGlvbk5hbWUiLCJwYXJhbU5hbWVzIiwicGFyYW1OYW1lIiwiX2kiLCJib2R5IiwiYXJndW1lbnQiLCJpc1N1Yktlcm5lbCIsImlzTmFOIiwibGVmdCIsIm9wZXJhdG9yIiwicmlnaHQiLCJpZHROb2RlIiwibmFtZSIsImNvbnN0YW50cyIsImhhc093blByb3BlcnR5IiwidXNlclBhcmFtTmFtZSIsImdldFVzZXJQYXJhbU5hbWUiLCJmb3JOb2RlIiwidGVzdCIsImlzSWRlbnRpZmllckNvbnN0YW50IiwibG9vcE1heEl0ZXJhdGlvbnMiLCJ3YXJuIiwiaW5pdCIsInVwZGF0ZSIsImRlY2xhcmF0aW9ucyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInVwZGF0ZUFyZ3VtZW50IiwiaW5pdEFyZ3VtZW50IiwiX2kyIiwiZGVjbGFyYXRpb24iLCJpZCIsInNwbGljZSIsIndoaWxlTm9kZSIsImFzc05vZGUiLCJlTm9kZSIsImJOb2RlIiwiZXNOb2RlIiwiZXhwcmVzc2lvbiIsInZhcmRlY05vZGUiLCJpdmFyZGVjTm9kZSIsImlmTm9kZSIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJick5vZGUiLCJjck5vZGUiLCJsb2dOb2RlIiwidU5vZGUiLCJwcmVmaXgiLCJ0Tm9kZSIsIm1Ob2RlIiwidW5yb2xsZWQiLCJhc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsIiwicHJvcGVydHkiLCJvYmplY3QiLCJjb21wdXRlZCIsInNOb2RlIiwiZXhwcmVzc2lvbnMiLCJjYWxsZWUiLCJmdW5jTmFtZSIsImNhbGxlZEZ1bmN0aW9ucyIsImluZGV4T2YiLCJjYWxsZWRGdW5jdGlvbnNBcmd1bWVudHMiLCJmdW5jdGlvbkFyZ3VtZW50cyIsInBhcmFtSW5kZXgiLCJwYXJhbVR5cGVzIiwiYXJyTm9kZSIsImFyckxlbiIsImVsZW1lbnRzIiwic3ViTm9kZSIsImFzdEZ1bmN0aW9uUHJvdG90eXBlIiwicmV0dXJuVHlwZSIsImtlcm5lbFJ1blNob3J0Y3V0IiwiY3B1S2VybmVsIiwidG9TdHJpbmciLCJhbGxQcm9wZXJ0aWVzT2YiLCJjbG9uZSIsInNwbGl0QXJyYXkiLCJnZXRBcmd1bWVudFR5cGUiLCJnZXRPdXRwdXQiLCJkaW1Ub1RleFNpemUiLCJjb3B5RmxhdHRlbiIsImZsYXR0ZW4iLCJzeXN0ZW1FbmRpYW5uZXNzIiwiaW5pdFdlYkdsIiwidGV4U2l6ZSIsIm91dHB1dCIsIl9rZXJuZWxTdHJpbmciLCJidWlsZCIsImtlcm5lbFN0cmluZyIsIktlcm5lbEJhc2UiLCJfS2VybmVsQmFzZSIsIkNQVUtlcm5lbCIsImZuU3RyaW5nIiwic2V0dGluZ3MiLCJfZm5Cb2R5IiwiZ2V0RnVuY3Rpb25Cb2R5RnJvbVN0cmluZyIsIl9mbiIsInJ1biIsIl9jYW52YXNDdHgiLCJfaW1hZ2VEYXRhIiwiX2NvbG9yRGF0YSIsInRocmVhZCIsIngiLCJ5IiwieiIsImJpbmQiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJhcmdUeXBlIiwiZ2V0RGltZW5zaW9ucyIsImtlcm5lbEFyZ3MiLCJ0b0FycmF5IiwidGhyZWFkRGltIiwiZ3JhcGhpY2FsIiwiY2FudmFzIiwiZ2V0Q2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRDb250ZXh0IiwiY3JlYXRlSW1hZ2VEYXRhIiwiVWludDhDbGFtcGVkQXJyYXkiLCJnZXRLZXJuZWxTdHJpbmciLCJkaXIiLCJGdW5jdGlvbiIsImNvbG9yIiwiZyIsImIiLCJNYXRoIiwiZmxvb3IiLCJpbmRleCIsIl90aGlzMiIsImJ1aWxkZXIiLCJmdW5jdGlvbkJ1aWxkZXIiLCJhZGRLZXJuZWwiLCJwcm90b3R5cGVPbmx5IiwiYWRkRnVuY3Rpb25zIiwiZnVuY3Rpb25zIiwic3ViS2VybmVscyIsInN1Yktlcm5lbE91dHB1dFRleHR1cmVzIiwic3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyIsInN1Yktlcm5lbCIsImFkZFN1Yktlcm5lbCIsInN1Yktlcm5lbFByb3BlcnRpZXMiLCJwIiwiX3N1Yktlcm5lbCIsInByb3RvdHlwZXMiLCJnZXRQcm90b3R5cGVzIiwia2VybmVsIiwic2hpZnQiLCJfZ2V0TG9vcE1heFN0cmluZyIsIm1hcCIsImtleXMiLCJwcmVjb21waWxlS2VybmVsT2JqIiwiYXJnVHlwZXMiLCJwYXJzZUludCIsImNvbXBpbGVLZXJuZWwiLCJwcmVjb21waWxlT2JqIiwiUnVubmVyQmFzZSIsIl9SdW5uZXJCYXNlIiwiQ1BVUnVubmVyIiwiS2VybmVsIiwiZ2V0TW9kZSIsImdwdSIsIm5vZGVNYXAiLCJuYXRpdmVGdW5jdGlvbnMiLCJyb290S2VybmVsIiwiYWRkTmF0aXZlRnVuY3Rpb24iLCJnbHNsRnVuY3Rpb25TdHJpbmciLCJqc0Z1bmN0aW9uIiwiYWRkRnVuY3Rpb25Ob2RlIiwic2V0QWRkRnVuY3Rpb24iLCJhZGROYXRpdmVGdW5jdGlvbnMiLCJpbk5vZGUiLCJ0cmFjZUZ1bmN0aW9uQ2FsbHMiLCJyZXRMaXN0IiwicGFyZW50IiwiZk5vZGUiLCJnZXRGdW5jdGlvblN0cmluZyIsIm9wdGlvbnMiLCJrZXJuZWxOb2RlIiwiZ2V0UHJvdG90eXBlU3RyaW5nIiwiZ2V0UHJvdG90eXBlc0Zyb21GdW5jdGlvbk5hbWVzIiwicmV2ZXJzZSIsImdldFN0cmluZ0Zyb21GdW5jdGlvbk5hbWVzIiwiZnVuY3Rpb25MaXN0IiwicmV0Iiwibm9kZSIsIm9wdCIsImdldFByb3RvdHlwZVN0cmluZ0Zyb21GdW5jdGlvbk5hbWVzIiwiZ2V0U3RyaW5nIiwidW5kZWZpbmVkIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiYWNvcm4iLCJpbml0VmFyaWFibGVzIiwicmVhZFZhcmlhYmxlcyIsIndyaXRlVmFyaWFibGVzIiwiaXNGdW5jdGlvblN0cmluZyIsImVycm9yIiwiaXNGdW5jdGlvbiIsImdldEZ1bmN0aW9uTmFtZUZyb21TdHJpbmciLCJnZXRQYXJhbU5hbWVzRnJvbVN0cmluZyIsInBhcmFtVmFyaWFibGVOYW1lcyIsInJldHVybnMiLCJmbiIsImdldEpzRnVuY3Rpb24iLCJldmFsIiwiaW5QYXJzZXIiLCJqc0Z1bmN0aW9uQVNUIiwibG9jYXRpb25zIiwiZnVuY0FTVCIsInNldEZ1bmN0aW9uU3RyaW5nIiwiZ2V0UGFyYW1UeXBlIiwiY2FsbGVkRnVuY3Rpb25Bcmd1bWVudHMiLCJjYWxsZWRGdW5jdGlvbkFyZ3VtZW50IiwiQmFzZUtlcm5lbCIsIndyYXBhcm91bmQiLCJoYXJkY29kZUNvbnN0YW50cyIsIm91dHB1dFRvVGV4dHVyZSIsIl9jYW52YXMiLCJfd2ViR2wiLCJmbG9hdFRleHR1cmVzIiwiZmxvYXRPdXRwdXQiLCJmbG9hdE91dHB1dEZvcmNlIiwiY29weURhdGEiLCJzdWJLZXJuZWxOYW1lcyIsInNldE91dHB1dCIsImluaXRDYW52YXMiLCJjYiIsInNldEZ1bmN0aW9ucyIsInNldERlYnVnIiwiZmxhZyIsInNldEdyYXBoaWNhbCIsInNldExvb3BNYXhJdGVyYXRpb25zIiwibWF4Iiwic2V0Q29uc3RhbnRzIiwic2V0V3JhcGFyb3VuZCIsInNldEhhcmRjb2RlQ29uc3RhbnRzIiwic2V0T3V0cHV0VG9UZXh0dXJlIiwic2V0RmxvYXRUZXh0dXJlcyIsInNldEZsb2F0T3V0cHV0Iiwic2V0RmxvYXRPdXRwdXRGb3JjZSIsInNldENhbnZhcyIsInNldFdlYkdsIiwid2ViR2wiLCJzZXRDb3B5RGF0YSIsImdldFdlYkdsIiwiZXhlYyIsImV4ZWN1dGUiLCJhcmdzIiwibmV3UHJvbWlzZSIsImFjY2VwdCIsInJlamVjdCIsImFkZFN1Yktlcm5lbFByb3BlcnR5Iiwic291cmNlIiwic2hvcnRjdXQiLCJmb3JFYWNoIiwic3Vic3RyaW5nIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJCYXNlUnVubmVyIiwiZW5kaWFubmVzcyIsInRleHR1cmVUb0FycmF5IiwidGV4dHVyZSIsImNvcHkiLCJjcmVhdGVLZXJuZWwiLCJkZWxldGVUZXh0dXJlIiwiYnVpbGRQcm9taXNlS2VybmVsIiwiYnVpbGRLZXJuZWwiLCJhc3NpZ24iLCJ3ZWJnbCIsIldlYkdMRnVuY3Rpb25Ob2RlIiwiV2ViR0xGdW5jdGlvbkJ1aWxkZXIiLCJfcm91bmQiLCJyb3VuZCIsIkZ1bmN0aW9uTm9kZUJhc2UiLCJqc01hdGhQcmVmaXgiLCJsb2NhbFByZWZpeCIsImNvbnN0YW50c1ByZWZpeCIsIkRFQ09ERTMyX0VOQ09ERTMyIiwiRU5DT0RFMzJfREVDT0RFMzIiLCJfRnVuY3Rpb25Ob2RlQmFzZSIsIndlYkdsUmVnZXhPcHRpbWl6ZSIsIk51bWJlciIsImlzSW50ZWdlciIsInJlcU5hbWUiLCJhc3N1bWVOb3RUZXh0dXJlIiwiaWR4IiwibGFzdCIsInBvcCIsInVucm9sbGVkX2xjIiwidG9Mb3dlckNhc2UiLCJzbGljZSIsImlzSWRlbnRpZmllcktlcm5lbFBhcmFtIiwiZW5zdXJlSW5kZW50aWZpZXJUeXBlIiwiZXhwZWN0ZWRUeXBlIiwic3RhcnQiLCJsb2MiLCJsaW5lIiwiYWN0dWFsVHlwZSIsImluU3RyIiwicmVwbGFjZSIsImdwdUtlcm5lbCIsImNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyIsImNvbXBpbGVkVmVydFNoYWRlclN0cmluZyIsIl9nZXRGcmFnU2hhZGVyU3RyaW5nIiwiX2dldFZlcnRTaGFkZXJTdHJpbmciLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzZXR1cFBhcmFtcyIsIl9hZGRBcmd1bWVudCIsImdldEFyZ3VtZW50VGV4dHVyZSIsImdldFRleHR1cmVDYWNoZSIsImdldE91dHB1dFRleHR1cmUiLCJyZW5kZXJPdXRwdXQiLCJmcyIsIlRleHR1cmUiLCJmcmFnU2hhZGVyU3RyaW5nIiwidmVydFNoYWRlclN0cmluZyIsImNhbnZhc2VzIiwibWF4VGV4U2l6ZXMiLCJXZWJHTEtlcm5lbCIsInRleHR1cmVDYWNoZSIsInByb2dyYW1Vbmlmb3JtTG9jYXRpb25DYWNoZSIsImZyYW1lYnVmZmVyIiwiYnVmZmVyIiwicHJvZ3JhbSIsImFyZ3VtZW50c0xlbmd0aCIsImV4dCIsImV4dERyYXdCdWZmZXJzTWFwIiwib3V0cHV0VGV4dHVyZSIsIm1heFRleFNpemUiLCJpc1JlYWRQaXhlbCIsImlzRmxvYXRSZWFkUGl4ZWxzU3VwcG9ydGVkIiwiT0VTX3RleHR1cmVfZmxvYXQiLCJ1cGRhdGVNYXhUZXhTaXplIiwiY2FudmFzSW5kZXgiLCJnbCIsImVuYWJsZSIsIlNDSVNTT1JfVEVTVCIsInZpZXdwb3J0IiwiX2FkZEtlcm5lbHMiLCJ2ZXJ0U2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJmcmFnU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJ2ZXJ0aWNlcyIsIkZsb2F0MzJBcnJheSIsInRleENvb3JkcyIsInRleENvb3JkT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJidWZmZXJTdWJEYXRhIiwiYVBvc0xvYyIsImdldEF0dHJpYkxvY2F0aW9uIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJGQUxTRSIsImFUZXhDb29yZExvYyIsInNldHVwT3V0cHV0VGV4dHVyZSIsIkNPTE9SX0FUVEFDSE1FTlQwIiwic3ViS2VybmVsT3V0cHV0VGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIk5FQVJFU1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ1c2VQcm9ncmFtIiwic2Npc3NvciIsInVPdXRwdXREaW1Mb2MiLCJ1bmlmb3JtM2Z2IiwidVRleFNpemVMb2MiLCJ1bmlmb3JtMmZ2IiwicmF0aW9Mb2MiLCJ1bmlmb3JtMmYiLCJ0ZXhJbmRleCIsImJpbmRSZW5kZXJidWZmZXIiLCJSRU5ERVJCVUZGRVIiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9TVFJJUCIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiZHJhd0J1ZmZlcnNXRUJHTCIsInJlc3VsdCIsIl9vdXRwdXQiLCJyZWFkUGl4ZWxzIiwiYnl0ZXMiLCJVaW50OEFycmF5Iiwic3ViYXJyYXkiLCJjdWJlIiwiZGV0YWNoT3V0cHV0VGV4dHVyZSIsImRldGFjaFRleHR1cmVDYWNoZSIsImdldFN1Yktlcm5lbFRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwicGFyYW0iLCJwYXJhbVR5cGUiLCJsb2NhdGlvbiIsIl9nZXRGcmFnU2hhZGVyQXJ0aWZhY3RNYXAiLCJIRUFERVIiLCJfZ2V0SGVhZGVyU3RyaW5nIiwiTE9PUF9NQVgiLCJDT05TVEFOVFMiLCJfZ2V0Q29uc3RhbnRzU3RyaW5nIiwiREVDT0RFMzJfRU5ESUFOTkVTUyIsIl9nZXREZWNvZGUzMkVuZGlhbm5lc3NTdHJpbmciLCJFTkNPREUzMl9FTkRJQU5ORVNTIiwiX2dldEVuY29kZTMyRW5kaWFubmVzc1N0cmluZyIsIkdFVF9XUkFQQVJPVU5EIiwiX2dldEdldFdyYXBhcm91bmRTdHJpbmciLCJHRVRfVEVYVFVSRV9DSEFOTkVMIiwiX2dldEdldFRleHR1cmVDaGFubmVsU3RyaW5nIiwiR0VUX1RFWFRVUkVfSU5ERVgiLCJfZ2V0R2V0VGV4dHVyZUluZGV4U3RyaW5nIiwiR0VUX1JFU1VMVCIsIl9nZXRHZXRSZXN1bHRTdHJpbmciLCJNQUlOX1BBUkFNUyIsIl9nZXRNYWluUGFyYW1zU3RyaW5nIiwiTUFJTl9DT05TVEFOVFMiLCJfZ2V0TWFpbkNvbnN0YW50c1N0cmluZyIsIktFUk5FTCIsIl9nZXRLZXJuZWxTdHJpbmciLCJNQUlOX1JFU1VMVCIsIl9nZXRNYWluUmVzdWx0U3RyaW5nIiwiYXJndW1lbnRUZXh0dXJlIiwiZGltIiwic2l6ZSIsInZhbHVlc0ZsYXQiLCJmbGF0dGVuVG8iLCJsb2NTaXplIiwiZGltTG9jIiwidW5pZm9ybTFpIiwiX2xvYyIsInVuaWZvcm0xZiIsImlucHV0VGV4dHVyZSIsIl9kaW0iLCJfc2l6ZSIsIl9sb2MyIiwiX2xvY1NpemUiLCJfZGltTG9jIiwiX2xpbmVzVG9TdHJpbmciLCJfZ2V0VGV4dHVyZUNvb3JkaW5hdGUiLCJuYW1lcyIsInBhcmFtRGltIiwicGFyYW1TaXplIiwicGFyc2VGbG9hdCIsImxpbmVzIiwiX3JlcGxhY2VBcnRpZmFjdHMiLCJzcmMiLCJtYXRjaCIsImFydGlmYWN0IiwiZ2V0RXh0ZW5zaW9uIiwiX2V4dCIsIl9pMyIsIldlYkdMUnVubmVyIiwiX1dlYkdMS2VybmVsIiwiV2ViR0xWYWxpZGF0b3JLZXJuZWwiLCJhbGlhcyIsIlV0aWxzQ29yZSIsIkdQVUNvcmUiLCJ2YWxpZGF0ZUtlcm5lbE9iaiIsImtlcm5lbE9iaiIsImlzS2VybmVsT2JqIiwibG9hZEtlcm5lbE9iaiIsImluT3B0IiwiR1BVIiwiX0dQVUNvcmUiLCJtb2RlIiwiaXNXZWJHbFN1cHBvcnRlZCIsImtlcm5lbHMiLCJydW5uZXJTZXR0aW5ncyIsIl9ydW5uZXIiLCJjcmVhdGVLZXJuZWxNYXAiLCJpc1dlYkdsRHJhd0J1ZmZlcnNTdXBwb3J0ZWQiLCJfZnVuY3Rpb25zIiwiY29tYmluZUtlcm5lbHMiLCJsYXN0S2VybmVsIiwiY29tYmluZWRLZXJuZWwiLCJuYXRpdmVGdW5jdGlvbiIsIl9kZWxldGUiLCJpc0NhbnZhcyIsImNhbnZhc09iaiIsIm5vZGVOYW1lIiwidG9VcHBlckNhc2UiLCJpc0NhbnZhc1N1cHBvcnRlZCIsIl9pc0NhbnZhc1N1cHBvcnRlZCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlzV2ViR2wiLCJ3ZWJHbE9iaiIsIl9pc1dlYkdsU3VwcG9ydGVkIiwiX2lzV2ViR2xEcmF3QnVmZmVyc1N1cHBvcnRlZCIsImluaXRXZWJHbERlZmF1bHRPcHRpb25zIiwiYWxwaGEiLCJkZXB0aCIsImFudGlhbGlhcyIsIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhciIsIk9FU19lbGVtZW50X2luZGV4X3VpbnQiLCJfdGVzdGluZ1dlYkdsIiwiQm9vbGVhbiIsIkZVTkNUSU9OX05BTUUiLCJTVFJJUF9DT01NRU5UUyIsIkFSR1VNRU5UX05BTUVTIiwiX3N5c3RlbUVuZGlhbm5lc3MiLCJBcnJheUJ1ZmZlciIsIlVpbnQzMkFycmF5IiwiYyIsIl9pc0Zsb2F0UmVhZFBpeGVsc1N1cHBvcnRlZCIsIlV0aWxzIiwiX1V0aWxzQ29yZSIsImZ1bmNPYmoiLCJmdW5jU3RyIiwibGFzdEluZGV4T2YiLCJmdW5jIiwiZm5TdHIiLCJ0ZW1wIiwiaXNBY3RpdmVDbG9uZSIsImV4ZWN1dG9yIiwic2ltcGxlIiwiUHJvbWlzZSIsInNtYWxsX3Byb21pc2UiLCJmdW5jdGlvbkJpbmRlciIsImluRnVuYyIsInRoaXNPYmoiLCJhcnJheSIsImFyZyIsImRpbWVuc2lvbnMiLCJudW1UZXhlbHMiLCJjZWlsIiwidyIsInNxcnQiLCJwYWQiLCJhcnIiLCJwYWRkaW5nIiwiemVyb3MiLCJ2YWx1ZU9mIiwibGVuIiwiY29uY2F0IiwiZmxhdHRlbjJkQXJyYXlUbyIsIm9mZnNldCIsInNldCIsImZsYXR0ZW4zZEFycmF5VG8iLCJwYXJ0Iiwic3BsaXQiLCJlbmQiLCJjb2x1bW4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93IiwiZ2xvYmFsIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsInJlc2VydmVkV29yZHMiLCJzdHJpY3QiLCJzdHJpY3RCaW5kIiwiZWNtYTVBbmRMZXNzS2V5d29yZHMiLCJrZXl3b3JkcyIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMiLCJub25BU0NJSWlkZW50aWZpZXJDaGFycyIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0IiwiUmVnRXhwIiwibm9uQVNDSUlpZGVudGlmaWVyIiwiYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMiLCJhc3RyYWxJZGVudGlmaWVyQ29kZXMiLCJpc0luQXN0cmFsU2V0IiwicG9zIiwiaXNJZGVudGlmaWVyU3RhcnQiLCJhc3RyYWwiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJpc0lkZW50aWZpZXJDaGFyIiwiVG9rZW5UeXBlIiwibGFiZWwiLCJjb25mIiwia2V5d29yZCIsImJlZm9yZUV4cHIiLCJzdGFydHNFeHByIiwiaXNMb29wIiwiaXNBc3NpZ24iLCJwb3N0Zml4IiwiYmlub3AiLCJ1cGRhdGVDb250ZXh0IiwicHJlYyIsImtleXdvcmRzJDEiLCJrdyIsInR5cGVzIiwibnVtIiwicmVnZXhwIiwic3RyaW5nIiwiZW9mIiwiYnJhY2tldEwiLCJicmFja2V0UiIsImJyYWNlTCIsImJyYWNlUiIsInBhcmVuTCIsInBhcmVuUiIsImNvbW1hIiwic2VtaSIsImNvbG9uIiwiZG90IiwicXVlc3Rpb24iLCJhcnJvdyIsInRlbXBsYXRlIiwiaW52YWxpZFRlbXBsYXRlIiwiZWxsaXBzaXMiLCJiYWNrUXVvdGUiLCJkb2xsYXJCcmFjZUwiLCJlcSIsImluY0RlYyIsImxvZ2ljYWxPUiIsImxvZ2ljYWxBTkQiLCJiaXR3aXNlT1IiLCJiaXR3aXNlWE9SIiwiYml0d2lzZUFORCIsImVxdWFsaXR5IiwicmVsYXRpb25hbCIsImJpdFNoaWZ0IiwicGx1c01pbiIsIm1vZHVsbyIsInN0YXIiLCJzbGFzaCIsInN0YXJzdGFyIiwiX2JyZWFrIiwiX2Nhc2UiLCJfY2F0Y2giLCJfY29udGludWUiLCJfZGVidWdnZXIiLCJfZGVmYXVsdCIsIl9kbyIsIl9lbHNlIiwiX2ZpbmFsbHkiLCJfZm9yIiwiX2Z1bmN0aW9uIiwiX2lmIiwiX3JldHVybiIsIl9zd2l0Y2giLCJfdGhyb3ciLCJfdHJ5IiwiX3ZhciIsIl9jb25zdCIsIl93aGlsZSIsIl93aXRoIiwiX25ldyIsIl9zdXBlciIsIl9jbGFzcyIsIl9leHRlbmRzIiwiX2V4cG9ydCIsIl9pbXBvcnQiLCJfbnVsbCIsIl90cnVlIiwiX2ZhbHNlIiwiX2luIiwiX2luc3RhbmNlb2YiLCJfdm9pZCIsImxpbmVCcmVhayIsImxpbmVCcmVha0ciLCJpc05ld0xpbmUiLCJub25BU0NJSXdoaXRlc3BhY2UiLCJza2lwV2hpdGVTcGFjZSIsInJlZiIsImhhcyIsInByb3BOYW1lIiwiUG9zaXRpb24iLCJjb2wiLCJTb3VyY2VMb2NhdGlvbiIsInNvdXJjZUZpbGUiLCJnZXRMaW5lSW5mbyIsImlucHV0IiwiY3VyIiwibGFzdEluZGV4IiwiZGVmYXVsdE9wdGlvbnMiLCJlY21hVmVyc2lvbiIsInNvdXJjZVR5cGUiLCJvbkluc2VydGVkU2VtaWNvbG9uIiwib25UcmFpbGluZ0NvbW1hIiwiYWxsb3dSZXNlcnZlZCIsImFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uIiwiYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlIiwiYWxsb3dIYXNoQmFuZyIsIm9uVG9rZW4iLCJvbkNvbW1lbnQiLCJyYW5nZXMiLCJkaXJlY3RTb3VyY2VGaWxlIiwicHJlc2VydmVQYXJlbnMiLCJwbHVnaW5zIiwiZ2V0T3B0aW9ucyIsIm9wdHMiLCJ0b2tlbnMiLCJ0b2tlbiIsInB1c2hDb21tZW50IiwiYmxvY2siLCJ0ZXh0Iiwic3RhcnRMb2MiLCJlbmRMb2MiLCJjb21tZW50IiwicmFuZ2UiLCJrZXl3b3JkUmVnZXhwIiwid29yZHMiLCJQYXJzZXIiLCJzdGFydFBvcyIsInJlc2VydmVkIiwidiIsInJlc2VydmVkU3RyaWN0IiwicmVzZXJ2ZWRXb3Jkc1N0cmljdCIsInJlc2VydmVkV29yZHNTdHJpY3RCaW5kIiwiY29udGFpbnNFc2MiLCJsb2FkUGx1Z2lucyIsImxpbmVTdGFydCIsImN1ckxpbmUiLCJjdXJQb3NpdGlvbiIsImxhc3RUb2tFbmRMb2MiLCJsYXN0VG9rU3RhcnRMb2MiLCJsYXN0VG9rU3RhcnQiLCJsYXN0VG9rRW5kIiwiY29udGV4dCIsImluaXRpYWxDb250ZXh0IiwiZXhwckFsbG93ZWQiLCJpbk1vZHVsZSIsInN0cmljdERpcmVjdGl2ZSIsInBvdGVudGlhbEFycm93QXQiLCJpbkZ1bmN0aW9uIiwiaW5HZW5lcmF0b3IiLCJpbkFzeW5jIiwieWllbGRQb3MiLCJhd2FpdFBvcyIsImxhYmVscyIsInNraXBMaW5lQ29tbWVudCIsInNjb3BlU3RhY2siLCJlbnRlckZ1bmN0aW9uU2NvcGUiLCJpc0tleXdvcmQiLCJ3b3JkIiwiaXNSZXNlcnZlZFdvcmQiLCJleHRlbmQiLCJwbHVnaW5Db25maWdzIiwidGhpcyQxIiwicGx1Z2luIiwic3RhcnROb2RlIiwibmV4dFRva2VuIiwicGFyc2VUb3BMZXZlbCIsInBwIiwibGl0ZXJhbCIsImVhdCIsIm5leHQiLCJpc0NvbnRleHR1YWwiLCJlYXRDb250ZXh0dWFsIiwiZXhwZWN0Q29udGV4dHVhbCIsInVuZXhwZWN0ZWQiLCJjYW5JbnNlcnRTZW1pY29sb24iLCJpbnNlcnRTZW1pY29sb24iLCJzZW1pY29sb24iLCJhZnRlclRyYWlsaW5nQ29tbWEiLCJ0b2tUeXBlIiwibm90TmV4dCIsImV4cGVjdCIsInJhaXNlIiwiRGVzdHJ1Y3R1cmluZ0Vycm9ycyIsInNob3J0aGFuZEFzc2lnbiIsInRyYWlsaW5nQ29tbWEiLCJwYXJlbnRoZXNpemVkQXNzaWduIiwicGFyZW50aGVzaXplZEJpbmQiLCJjaGVja1BhdHRlcm5FcnJvcnMiLCJyZWZEZXN0cnVjdHVyaW5nRXJyb3JzIiwicmFpc2VSZWNvdmVyYWJsZSIsInBhcmVucyIsImNoZWNrRXhwcmVzc2lvbkVycm9ycyIsImFuZFRocm93IiwiY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zIiwiaXNTaW1wbGVBc3NpZ25UYXJnZXQiLCJleHByIiwicHAkMSIsInN0bXQiLCJwYXJzZVN0YXRlbWVudCIsImZpbmlzaE5vZGUiLCJsb29wTGFiZWwiLCJraW5kIiwic3dpdGNoTGFiZWwiLCJpc0xldCIsInNraXAiLCJuZXh0Q2giLCJjaGFyQ29kZUF0IiwiaWRlbnQiLCJpc0FzeW5jRnVuY3Rpb24iLCJjaGFyQXQiLCJ0b3BMZXZlbCIsInN0YXJ0dHlwZSIsInBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudCIsInBhcnNlRGVidWdnZXJTdGF0ZW1lbnQiLCJwYXJzZURvU3RhdGVtZW50IiwicGFyc2VGb3JTdGF0ZW1lbnQiLCJwYXJzZUZ1bmN0aW9uU3RhdGVtZW50IiwicGFyc2VDbGFzcyIsInBhcnNlSWZTdGF0ZW1lbnQiLCJwYXJzZVJldHVyblN0YXRlbWVudCIsInBhcnNlU3dpdGNoU3RhdGVtZW50IiwicGFyc2VUaHJvd1N0YXRlbWVudCIsInBhcnNlVHJ5U3RhdGVtZW50IiwicGFyc2VWYXJTdGF0ZW1lbnQiLCJwYXJzZVdoaWxlU3RhdGVtZW50IiwicGFyc2VXaXRoU3RhdGVtZW50IiwicGFyc2VCbG9jayIsInBhcnNlRW1wdHlTdGF0ZW1lbnQiLCJwYXJzZUltcG9ydCIsInBhcnNlRXhwb3J0IiwibWF5YmVOYW1lIiwicGFyc2VFeHByZXNzaW9uIiwicGFyc2VMYWJlbGVkU3RhdGVtZW50IiwicGFyc2VFeHByZXNzaW9uU3RhdGVtZW50IiwiaXNCcmVhayIsInBhcnNlSWRlbnQiLCJsYWIiLCJwYXJzZVBhcmVuRXhwcmVzc2lvbiIsImVudGVyTGV4aWNhbFNjb3BlIiwicGFyc2VGb3IiLCJpbml0JDEiLCJwYXJzZVZhciIsInBhcnNlRm9ySW4iLCJ0b0Fzc2lnbmFibGUiLCJjaGVja0xWYWwiLCJpc0FzeW5jIiwicGFyc2VGdW5jdGlvbiIsImRpc2NyaW1pbmFudCIsImNhc2VzIiwic2F3RGVmYXVsdCIsImlzQ2FzZSIsImV4aXRMZXhpY2FsU2NvcGUiLCJlbXB0eSIsImhhbmRsZXIiLCJjbGF1c2UiLCJwYXJzZUJpbmRpbmdBdG9tIiwiZmluYWxpemVyIiwiaSQxIiwibGlzdCIsImxhYmVsJDEiLCJzdGF0ZW1lbnRTdGFydCIsImdlbmVyYXRvciIsImNyZWF0ZU5ld0xleGljYWxTY29wZSIsImlzRm9yIiwiZGVjbCIsInBhcnNlVmFySWQiLCJwYXJzZU1heWJlQXNzaWduIiwiaXNTdGF0ZW1lbnQiLCJhbGxvd0V4cHJlc3Npb25Cb2R5IiwiaW5pdEZ1bmN0aW9uIiwiYXN5bmMiLCJvbGRJbkdlbiIsIm9sZEluQXN5bmMiLCJvbGRZaWVsZFBvcyIsIm9sZEF3YWl0UG9zIiwib2xkSW5GdW5jIiwicGFyc2VGdW5jdGlvblBhcmFtcyIsInBhcnNlRnVuY3Rpb25Cb2R5IiwicGFyYW1zIiwicGFyc2VCaW5kaW5nTGlzdCIsInBhcnNlQ2xhc3NJZCIsInBhcnNlQ2xhc3NTdXBlciIsImNsYXNzQm9keSIsImhhZENvbnN0cnVjdG9yIiwibWV0aG9kIiwiaXNHZW5lcmF0b3IiLCJpc01heWJlU3RhdGljIiwicGFyc2VQcm9wZXJ0eU5hbWUiLCJzdGF0aWMiLCJpc0dldFNldCIsInBhcnNlQ2xhc3NNZXRob2QiLCJwYXJhbUNvdW50IiwicGFyc2VNZXRob2QiLCJwYXJzZUV4cHJTdWJzY3JpcHRzIiwicGFyc2VFeHByQXRvbSIsImNoZWNrRXhwb3J0IiwiY05vZGUiLCJzaG91bGRQYXJzZUV4cG9ydFN0YXRlbWVudCIsImNoZWNrVmFyaWFibGVFeHBvcnQiLCJzcGVjaWZpZXJzIiwicGFyc2VFeHBvcnRTcGVjaWZpZXJzIiwic3BlYyIsImNoZWNrVW5yZXNlcnZlZCIsImxvY2FsIiwiY2hlY2tQYXR0ZXJuRXhwb3J0IiwicGF0IiwicHJvcGVydGllcyIsInByb3AiLCJsaXN0JDEiLCJlbHQiLCJkZWNscyIsIm5vZGVzIiwiZmlyc3QiLCJleHBvcnRlZCIsInBhcnNlSW1wb3J0U3BlY2lmaWVycyIsIm5vZGUkMSIsIm5vZGUkMiIsImltcG9ydGVkIiwicHAkMiIsImlzQmluZGluZyIsInRvQXNzaWduYWJsZUxpc3QiLCJleHByTGlzdCIsInBhcnNlU3ByZWFkIiwicGFyc2VSZXN0QmluZGluZyIsInBhcnNlT2JqIiwiY2xvc2UiLCJhbGxvd0VtcHR5IiwiYWxsb3dUcmFpbGluZ0NvbW1hIiwiZWx0cyIsInJlc3QiLCJwYXJzZUJpbmRpbmdMaXN0SXRlbSIsImVsZW0iLCJwYXJzZU1heWJlRGVmYXVsdCIsInN0YXJ0Tm9kZUF0IiwiYmluZGluZ1R5cGUiLCJjaGVja0NsYXNoZXMiLCJjYW5EZWNsYXJlVmFyTmFtZSIsImNhbkRlY2xhcmVMZXhpY2FsTmFtZSIsImRlY2xhcmVWYXJOYW1lIiwiZGVjbGFyZUxleGljYWxOYW1lIiwicHAkMyIsImNoZWNrUHJvcENsYXNoIiwicHJvcEhhc2giLCJzaG9ydGhhbmQiLCJwcm90byIsIm90aGVyIiwicmVkZWZpbml0aW9uIiwiZ2V0Iiwibm9JbiIsImFmdGVyTGVmdFBhcnNlIiwicGFyc2VZaWVsZCIsIm93bkRlc3RydWN0dXJpbmdFcnJvcnMiLCJvbGRQYXJlbkFzc2lnbiIsIm9sZFRyYWlsaW5nQ29tbWEiLCJwYXJzZU1heWJlQ29uZGl0aW9uYWwiLCJwYXJzZUV4cHJPcHMiLCJwYXJzZU1heWJlVW5hcnkiLCJwYXJzZUV4cHJPcCIsImxlZnRTdGFydFBvcyIsImxlZnRTdGFydExvYyIsIm1pblByZWMiLCJsb2dpY2FsIiwib3AiLCJidWlsZEJpbmFyeSIsInNhd1VuYXJ5IiwicGFyc2VBd2FpdCIsInNraXBBcnJvd1N1YnNjcmlwdHMiLCJwYXJzZVN1YnNjcmlwdHMiLCJiYXNlIiwibm9DYWxscyIsIm1heWJlQXN5bmNBcnJvdyIsInBhcnNlRXhwckxpc3QiLCJwYXJzZUFycm93RXhwcmVzc2lvbiIsInRhZyIsInF1YXNpIiwicGFyc2VUZW1wbGF0ZSIsImlzVGFnZ2VkIiwiY2FuQmVBcnJvdyIsInBhcnNlTGl0ZXJhbCIsInJlZ2V4IiwicGF0dGVybiIsImZsYWdzIiwicmF3IiwicGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbiIsInBhcnNlTmV3IiwidmFsIiwiaW5uZXJTdGFydFBvcyIsImlubmVyU3RhcnRMb2MiLCJsYXN0SXNDb21tYSIsInNwcmVhZFN0YXJ0IiwiaW5uZXJQYXJlblN0YXJ0IiwicGFyc2VQYXJlbkl0ZW0iLCJpbm5lckVuZFBvcyIsImlubmVyRW5kTG9jIiwicGFyc2VQYXJlbkFycm93TGlzdCIsImZpbmlzaE5vZGVBdCIsInBhciIsIml0ZW0iLCJlbXB0eSQxIiwibWV0YSIsInBhcnNlVGVtcGxhdGVFbGVtZW50IiwiY29va2VkIiwidGFpbCIsImN1ckVsdCIsInF1YXNpcyIsImlzQXN5bmNQcm9wIiwiaXNQYXR0ZXJuIiwicGFyc2VQcm9wZXJ0eVZhbHVlIiwiaXNBcnJvd0Z1bmN0aW9uIiwiaXNFeHByZXNzaW9uIiwib2xkU3RyaWN0IiwidXNlU3RyaWN0IiwiY2hlY2tQYXJhbXMiLCJub25TaW1wbGUiLCJpc1NpbXBsZVBhcmFtTGlzdCIsIm9sZExhYmVscyIsImV4aXRGdW5jdGlvblNjb3BlIiwiYWxsb3dEdXBsaWNhdGVzIiwibmFtZUhhc2giLCJyZSIsImxpYmVyYWwiLCJkZWxlZ2F0ZSIsInBwJDQiLCJtZXNzYWdlIiwiZXJyIiwiU3ludGF4RXJyb3IiLCJyYWlzZWRBdCIsInBwJDUiLCJzb3VyY2VzIiwidmFyIiwibGV4aWNhbCIsImNoaWxkVmFyIiwicGFyZW50TGV4aWNhbCIsInBhcmVudFNjb3BlIiwiY2hpbGRTY29wZSIsImN1cnJlbnRTY29wZSIsInBhcnNlciIsInBwJDYiLCJUb2tDb250ZXh0IiwiaXNFeHByIiwicHJlc2VydmVTcGFjZSIsIm92ZXJyaWRlIiwidHlwZXMkMSIsImJfc3RhdCIsImJfZXhwciIsImJfdG1wbCIsInBfc3RhdCIsInBfZXhwciIsInFfdG1wbCIsInRyeVJlYWRUZW1wbGF0ZVRva2VuIiwiZl9zdGF0IiwiZl9leHByIiwiZl9leHByX2dlbiIsImZfZ2VuIiwicHAkNyIsImJyYWNlSXNCbG9jayIsInByZXZUeXBlIiwiY3VyQ29udGV4dCIsImluR2VuZXJhdG9yQ29udGV4dCIsIm91dCIsInN0YXRlbWVudFBhcmVucyIsImFsbG93ZWQiLCJUb2tlbiIsInBwJDgiLCJpc1JoaW5vIiwiUGFja2FnZXMiLCJnZXRUb2tlbiIsImRvbmUiLCJza2lwU3BhY2UiLCJmaW5pc2hUb2tlbiIsInJlYWRUb2tlbiIsImZ1bGxDaGFyQ29kZUF0UG9zIiwicmVhZFdvcmQiLCJnZXRUb2tlbkZyb21Db2RlIiwic2tpcEJsb2NrQ29tbWVudCIsInN0YXJ0U2tpcCIsImNoIiwibG9vcCIsInJlYWRUb2tlbl9kb3QiLCJyZWFkTnVtYmVyIiwibmV4dDIiLCJyZWFkVG9rZW5fc2xhc2giLCJyZWFkUmVnZXhwIiwiZmluaXNoT3AiLCJyZWFkVG9rZW5fbXVsdF9tb2R1bG9fZXhwIiwidG9rZW50eXBlIiwicmVhZFRva2VuX3BpcGVfYW1wIiwicmVhZFRva2VuX2NhcmV0IiwicmVhZFRva2VuX3BsdXNfbWluIiwicmVhZFRva2VuX2x0X2d0IiwicmVhZFRva2VuX2VxX2V4Y2wiLCJyZWFkUmFkaXhOdW1iZXIiLCJyZWFkU3RyaW5nIiwiY29kZVBvaW50VG9TdHJpbmciLCJzdHIiLCJ0cnlDcmVhdGVSZWdleHAiLCJ0aHJvd0Vycm9yQXQiLCJyZWdleHBVbmljb2RlU3VwcG9ydCIsImVzY2FwZWQiLCJpbkNsYXNzIiwiY29udGVudCIsIm1vZHMiLCJyZWFkV29yZDEiLCJ0bXAiLCJ0bXBGbGFncyIsInZhbGlkRmxhZ3MiLCJfbWF0Y2giLCJyZWFkSW50IiwicmFkaXgiLCJ0b3RhbCIsIkluZmluaXR5Iiwic3RhcnRzV2l0aERvdCIsImlzRmxvYXQiLCJvY3RhbCIsInJlYWRDb2RlUG9pbnQiLCJjb2RlUG9zIiwicmVhZEhleENoYXIiLCJpbnZhbGlkU3RyaW5nVG9rZW4iLCJxdW90ZSIsImNodW5rU3RhcnQiLCJyZWFkRXNjYXBlZENoYXIiLCJJTlZBTElEX1RFTVBMQVRFX0VTQ0FQRV9FUlJPUiIsImluVGVtcGxhdGVFbGVtZW50IiwicmVhZFRtcGxUb2tlbiIsInJlYWRJbnZhbGlkVGVtcGxhdGVUb2tlbiIsInBvc2l0aW9uIiwiaW5UZW1wbGF0ZSIsIm9jdGFsU3RyIiwic3Vic3RyIiwiZXNjU3RhcnQiLCJlc2MiLCJ2ZXJzaW9uIiwicGFyc2VFeHByZXNzaW9uQXQiLCJ0b2tlbml6ZXIiLCJhZGRMb29zZUV4cG9ydHMiLCJQYXJzZXIkJDEiLCJwbHVnaW5zJCQxIiwicGFyc2VfZGFtbWl0IiwiTG9vc2VQYXJzZXIiLCJwbHVnaW5zTG9vc2UiLCJ0b2tUeXBlcyIsImtleXdvcmRUeXBlcyIsInRva0NvbnRleHRzIiwiZmlsZXMiLCJEYXRhIiwiUGFydGllcyIsIlJpZGluZ3MiLCJQYXJ0aWVzSSIsIlJpZGluZ3NJIiwiU2xvcGVzQSIsIkludGVyY2VwdHNBIiwiUmVzIiwiUG9wdWxhclZvdGVzIiwiUEkiLCJSSSIsIm9ial9mcm9tX2FyciIsInJlcyIsIkRLUiIsInhzIiwiREtQIiwiRFZQIiwiRUtQIiwiUFYiLCJhcnJfZnJvbV9vYmoiLCJpbmRpY2VzIiwiayIsImludmVydCIsImJ5X3JpZGluZ19wYXJ0eSIsInJpZGluZ19pZHMiLCJwYXJ0eV9uYW1lcyIsIk4iLCJycF90b19hcnJheTJkIiwidjAiLCJSIiwiUCIsIm0iLCJqIiwiZXZhbHVhdGVNYXAiLCJwdnMiLCJkcHZ4IiwiZHB2eSIsInNsb3BlcyIsImludGVyY2VwdHMiLCJjb3VudCIsImJlc3RJIiwiYmVzdEUiLCJwdiIsIngwIiwiZHgiLCJ5MCIsImR5IiwiZXYiLCJzdGVwIiwiczEiLCJLIiwicmVuZGVyIiwiTlgiLCJOWSIsIkwiLCJDIiwicGUiLCJtb2RlbHMiLCJjcmUiLCJfIiwidW5pcSIsInBhcnR5X25hbWUiLCJyaWRpbmdfaWQiLCJzbG9wZSIsImludGVyY2VwdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJkcmF3IiwidDAiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInQxIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZXZhbHVhdGUiLCJyZXN1bHRzIiwibWFwVmFsdWVzIiwiZ3JvdXBCeSIsImlkZW50aXR5IiwidmFsdWVzIiwiJCIsIndoZW4iLCJnZXRKU09OIiwidGhlbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7O0FBY0E7QUFBQSxDQUFBLFNBQUFBLENBQUEsQ0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQTtBQUFBLFVBQUFDLENBQUEsQ0FBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUE7QUFBQSxNQUFBLENBQUFKLEVBQUFHLENBQUEsQ0FBQSxFQUFBO0FBQUEsT0FBQSxDQUFBSixFQUFBSSxDQUFBLENBQUEsRUFBQTtBQUFBLFFBQUFFLElBQUEsT0FBQUMsT0FBQSxJQUFBLFVBQUEsSUFBQUEsT0FBQSxDQUFBLElBQUEsQ0FBQUYsQ0FBQSxJQUFBQyxDQUFBLEVBQUEsT0FBQUEsRUFBQUYsQ0FBQSxFQUFBLENBQUEsQ0FBQSxD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LEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxLQUFBLEVBQUEsR0FBQSxDQUFBOztBQUVBLE9BQUFDLHdCQUFBLENBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEtBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsTUFBQSxFQUFBLEdBQUEsQ0FBQTs7QUFFQSxZQUFBQyxhQUFBLENBQUFockIsSUFBQSxFQUFBd3BCLEdBQUEsRUFBQTtBQUNBLFFBQUF5QixN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QSxDQUFBLENBQUEsQ0FBQTtBQUNBO0FBQ0E7O0FBRUF3RSxFQUFBQyxJQUFBLENBQUEzdkMsS0FBQSxDQUFBLElBQUEsRUFBQTBxQyxNQUFBLzlCLEdBQUEsQ0FBQSxVQUFBM0ksSUFBQSxFQUFBO0FBQ0EsUUFBQTByQyxFQUFBRSxPQUFBLENBQUEsVUFBQTVyQyxJQUFBLEdBQUEsT0FBQSxFQUFBLFVBQUF1bkMsR0FBQSxFQUFBO0FBQUFaLE9BQUEzbUMsSUFBQSxJQUFBdW5DLEdBQUE7QUFBQSxFQUFBLENBQUE7QUFDQSxDQUZBLENBQUEsRUFFQXNFLElBRkEsQ0FFQTk1QixLQUZBIiwiZmlsZSI6InNjcmlwdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogZ3B1LmpzXG4gKiBodHRwOi8vZ3B1LnJvY2tzL1xuICpcbiAqIEdQVSBBY2NlbGVyYXRlZCBKYXZhU2NyaXB0XG4gKlxuICogQHZlcnNpb24gMS4wLjAtcmMuMVxuICogQGRhdGUgVHVlIE9jdCAxNyAyMDE3IDIzOjQxOjI5IEdNVC0wNzAwIChQRFQpXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKiBUaGUgTUlUIExpY2Vuc2VcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgZ3B1LmpzIFRlYW1cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7KGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBGdW5jdGlvbkJ1aWxkZXJCYXNlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb24tYnVpbGRlci1iYXNlJyk7XG52YXIgQ1BVRnVuY3Rpb25Ob2RlID0gcmVxdWlyZSgnLi9mdW5jdGlvbi1ub2RlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9GdW5jdGlvbkJ1aWxkZXJCYXNlKSB7XG4gIF9pbmhlcml0cyhDUFVGdW5jdGlvbkJ1aWxkZXIsIF9GdW5jdGlvbkJ1aWxkZXJCYXNlKTtcblxuICBmdW5jdGlvbiBDUFVGdW5jdGlvbkJ1aWxkZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENQVUZ1bmN0aW9uQnVpbGRlcik7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ1BVRnVuY3Rpb25CdWlsZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ1BVRnVuY3Rpb25CdWlsZGVyKSkuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5Ob2RlID0gQ1BVRnVuY3Rpb25Ob2RlO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhDUFVGdW5jdGlvbkJ1aWxkZXIsIFt7XG4gICAga2V5OiAncG9seWZpbGxTdGFuZGFyZEZ1bmN0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBvbHlmaWxsU3RhbmRhcmRGdW5jdGlvbnMoKSB7fVxuICB9XSk7XG5cbiAgcmV0dXJuIENQVUZ1bmN0aW9uQnVpbGRlcjtcbn0oRnVuY3Rpb25CdWlsZGVyQmFzZSk7XG59LHtcIi4uL2Z1bmN0aW9uLWJ1aWxkZXItYmFzZVwiOjYsXCIuL2Z1bmN0aW9uLW5vZGVcIjoyfV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEJhc2VGdW5jdGlvbk5vZGUgPSByZXF1aXJlKCcuLi9mdW5jdGlvbi1ub2RlLWJhc2UnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX0Jhc2VGdW5jdGlvbk5vZGUpIHtcblx0X2luaGVyaXRzKENQVUZ1bmN0aW9uTm9kZSwgX0Jhc2VGdW5jdGlvbk5vZGUpO1xuXG5cdGZ1bmN0aW9uIENQVUZ1bmN0aW9uTm9kZSgpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1BVRnVuY3Rpb25Ob2RlKTtcblxuXHRcdHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ1BVRnVuY3Rpb25Ob2RlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ1BVRnVuY3Rpb25Ob2RlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoQ1BVRnVuY3Rpb25Ob2RlLCBbe1xuXHRcdGtleTogJ2dlbmVyYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUoKSB7XG5cdFx0XHRpZiAodGhpcy5kZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyh0aGlzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuZnVuY3Rpb25TdHJpbmdBcnJheSA9IHRoaXMuYXN0R2VuZXJpYyh0aGlzLmdldEpzQVNUKCksIFtdLCB0aGlzKTtcblx0XHRcdHRoaXMuZnVuY3Rpb25TdHJpbmcgPSB0aGlzLmZ1bmN0aW9uU3RyaW5nQXJyYXkuam9pbignJykudHJpbSgpO1xuXHRcdFx0cmV0dXJuIHRoaXMuZnVuY3Rpb25TdHJpbmc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0RnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcoKSB7XG5cdFx0XHRpZiAodGhpcy53ZWJHbEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmc7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy53ZWJHbEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nID0gdGhpcy5nZW5lcmF0ZSgpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RHZW5lcmljJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0R2VuZXJpYyhhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoYXN0ID09PSBudWxsKSB7XG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ05VTEwgYXN0JywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXN0KSkge1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0W2ldLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzd2l0Y2ggKGFzdC50eXBlKSB7XG5cdFx0XHRcdFx0Y2FzZSAnRnVuY3Rpb25EZWNsYXJhdGlvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RGdW5jdGlvbkRlY2xhcmF0aW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0Z1bmN0aW9uRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RGdW5jdGlvbkV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnUmV0dXJuU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFJldHVyblN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdMaXRlcmFsJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdExpdGVyYWwoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQmluYXJ5RXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RCaW5hcnlFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0lkZW50aWZpZXInOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0SWRlbnRpZmllckV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQXNzaWdubWVudEV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QXNzaWdubWVudEV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnRXhwcmVzc2lvblN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RFeHByZXNzaW9uU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0VtcHR5U3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEVtcHR5U3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0Jsb2NrU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEJsb2NrU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0lmU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdElmU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0JyZWFrU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEJyZWFrU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0NvbnRpbnVlU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdENvbnRpbnVlU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0ZvclN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RGb3JTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnV2hpbGVTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0V2hpbGVTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnVmFyaWFibGVEZWNsYXJhdGlvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RWYXJpYWJsZURlY2xhcmF0aW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1ZhcmlhYmxlRGVjbGFyYXRvcic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RWYXJpYWJsZURlY2xhcmF0b3IoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnVGhpc0V4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0VGhpc0V4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnU2VxdWVuY2VFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFNlcXVlbmNlRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdVbmFyeUV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0VW5hcnlFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1VwZGF0ZUV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0VXBkYXRlRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdMb2dpY2FsRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RMb2dpY2FsRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdNZW1iZXJFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdE1lbWJlckV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQ2FsbEV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0Q2FsbEV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQXJyYXlFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEFycmF5RXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ1Vua25vd24gYXN0IHR5cGUgOiAnICsgYXN0LnR5cGUsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0RnVuY3Rpb25EZWNsYXJhdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEZ1bmN0aW9uRGVjbGFyYXRpb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKHRoaXMuYWRkRnVuY3Rpb24pIHtcblx0XHRcdFx0dGhpcy5hZGRGdW5jdGlvbihudWxsLCB1dGlscy5nZXRBc3RTdHJpbmcodGhpcy5qc0Z1bmN0aW9uU3RyaW5nLCBhc3QpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEZ1bmN0aW9uRXhwcmVzc2lvbicsXG5cblxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RGdW5jdGlvbkV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXG5cdFx0XHRpZiAoIWZ1bmNQYXJhbS5pc1Jvb3RLZXJuZWwpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ2Z1bmN0aW9uJyk7XG5cdFx0XHRcdGZ1bmNQYXJhbS5rZXJuYWxBc3QgPSBhc3Q7XG5cdFx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRcdHJldEFyci5wdXNoKGZ1bmNQYXJhbS5mdW5jdGlvbk5hbWUpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY1BhcmFtLnBhcmFtTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0XHR2YXIgcGFyYW1OYW1lID0gZnVuY1BhcmFtLnBhcmFtTmFtZXNbaV07XG5cblx0XHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCcsICcpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VzZXJfJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2gocGFyYW1OYW1lKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldEFyci5wdXNoKCcpIHtcXG4nKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICh2YXIgX2kgPSAwOyBfaSA8IGFzdC5ib2R5LmJvZHkubGVuZ3RoOyArK19pKSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QuYm9keS5ib2R5W19pXSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnXFxuJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghZnVuY1BhcmFtLmlzUm9vdEtlcm5lbCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnfVxcbicpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0UmV0dXJuU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0UmV0dXJuU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChmdW5jUGFyYW0uaXNSb290S2VybmVsKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdrZXJuZWxSZXN1bHQgPSAnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0fSBlbHNlIGlmIChmdW5jUGFyYW0uaXNTdWJLZXJuZWwpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSArICdSZXN1bHQgPSAnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgncmV0dXJuICcgKyBmdW5jUGFyYW0uZnVuY3Rpb25OYW1lICsgJ1Jlc3VsdDsnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdyZXR1cm4gJyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdH1cblxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RMaXRlcmFsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0TGl0ZXJhbChhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cblx0XHRcdGlmIChpc05hTihhc3QudmFsdWUpKSB7XG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ05vbi1udW1lcmljIGxpdGVyYWwgbm90IHN1cHBvcnRlZCA6ICcgKyBhc3QudmFsdWUsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0QXJyLnB1c2goYXN0LnZhbHVlKTtcblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0QmluYXJ5RXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEJpbmFyeUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJygnKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goYXN0Lm9wZXJhdG9yKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QucmlnaHQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RJZGVudGlmaWVyRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdElkZW50aWZpZXJFeHByZXNzaW9uKGlkdE5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoaWR0Tm9kZS50eXBlICE9PSAnSWRlbnRpZmllcicpIHtcblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnSWRlbnRpZmllckV4cHJlc3Npb24gLSBub3QgYW4gSWRlbnRpZmllcicsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblxuXHRcdFx0c3dpdGNoIChpZHROb2RlLm5hbWUpIHtcblx0XHRcdFx0Y2FzZSAnZ3B1X3RocmVhZFgnOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd0aHJlYWRJZC54Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dwdV90aHJlYWRZJzpcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndGhyZWFkSWQueScpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHVfdGhyZWFkWic6XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3RocmVhZElkLnonKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X291dHB1dFgnOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLngnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X291dHB1dFknOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLnknKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X291dHB1dFonOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLnonKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRpZiAodGhpcy5jb25zdGFudHMgJiYgdGhpcy5jb25zdGFudHMuaGFzT3duUHJvcGVydHkoaWR0Tm9kZS5uYW1lKSkge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2NvbnN0YW50c18nICsgaWR0Tm9kZS5uYW1lKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFyIHVzZXJQYXJhbU5hbWUgPSBmdW5jUGFyYW0uZ2V0VXNlclBhcmFtTmFtZShpZHROb2RlLm5hbWUpO1xuXHRcdFx0XHRcdFx0aWYgKHVzZXJQYXJhbU5hbWUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VzZXJfJyArIHVzZXJQYXJhbU5hbWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VzZXJfJyArIGlkdE5vZGUubmFtZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RGb3JTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RGb3JTdGF0ZW1lbnQoZm9yTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChmb3JOb2RlLnR5cGUgIT09ICdGb3JTdGF0ZW1lbnQnKSB7XG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ0ludmFsaWQgZm9yIHN0YXRtZW50JywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm9yTm9kZS50ZXN0ICYmIGZvck5vZGUudGVzdC50eXBlID09PSAnQmluYXJ5RXhwcmVzc2lvbicpIHtcblx0XHRcdFx0aWYgKChmb3JOb2RlLnRlc3QucmlnaHQudHlwZSA9PT0gJ0lkZW50aWZpZXInIHx8IGZvck5vZGUudGVzdC5yaWdodC50eXBlID09PSAnTGl0ZXJhbCcpICYmIGZvck5vZGUudGVzdC5vcGVyYXRvciA9PT0gJzwnICYmIHRoaXMuaXNJZGVudGlmaWVyQ29uc3RhbnQoZm9yTm9kZS50ZXN0LnJpZ2h0Lm5hbWUpID09PSBmYWxzZSkge1xuXG5cdFx0XHRcdFx0aWYgKCF0aGlzLmxvb3BNYXhJdGVyYXRpb25zKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ1dhcm5pbmc6IGxvb3BNYXhJdGVyYXRpb25zIGlzIG5vdCBzZXQhIFVzaW5nIGRlZmF1bHQgb2YgMTAwMCB3aGljaCBtYXkgcmVzdWx0IGluIHVuaW50ZW5kZWQgYmVoYXZpb3IuJyk7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ1NldCBsb29wTWF4SXRlcmF0aW9ucyBvciB1c2UgYSBmb3IgbG9vcCBvZiBmaXhlZCBsZW5ndGggdG8gc2lsZW5jZSB0aGlzIG1lc3NhZ2UuJyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2ZvciAoJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuaW5pdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGlmIChyZXRBcnJbcmV0QXJyLmxlbmd0aCAtIDFdICE9PSAnOycpIHtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnRlc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKGZvck5vZGUudGVzdC5vcGVyYXRvcik7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ0xPT1BfTUFYJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS51cGRhdGUsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3tcXG4nKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnaWYgKCcpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnRlc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKGZvck5vZGUudGVzdC5vcGVyYXRvcik7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdC5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcpIHtcXG4nKTtcblx0XHRcdFx0XHRpZiAoZm9yTm9kZS5ib2R5LnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpIHtcblx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZm9yTm9kZS5ib2R5LmJvZHkubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuYm9keS5ib2R5W2ldLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLmJvZHksIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ30gZWxzZSB7XFxuJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2JyZWFrO1xcbicpO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblxuXHRcdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZm9yTm9kZS5pbml0LmRlY2xhcmF0aW9ucykge1xuXHRcdFx0XHRcdHZhciBkZWNsYXJhdGlvbnMgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGZvck5vZGUuaW5pdC5kZWNsYXJhdGlvbnMpKTtcblx0XHRcdFx0XHR2YXIgdXBkYXRlQXJndW1lbnQgPSBmb3JOb2RlLnVwZGF0ZS5hcmd1bWVudDtcblx0XHRcdFx0XHRpZiAoIUFycmF5LmlzQXJyYXkoZGVjbGFyYXRpb25zKSB8fCBkZWNsYXJhdGlvbnMubGVuZ3RoIDwgMSkge1xuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2codGhpcy5qc0Z1bmN0aW9uU3RyaW5nKTtcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignRXJyb3I6IEluY29tcGF0aWJsZSBmb3IgbG9vcCBkZWNsYXJhdGlvbicpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChkZWNsYXJhdGlvbnMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRcdFx0dmFyIGluaXRBcmd1bWVudCA9IG51bGw7XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBkZWNsYXJhdGlvbnMubGVuZ3RoOyBfaTIrKykge1xuXHRcdFx0XHRcdFx0XHR2YXIgZGVjbGFyYXRpb24gPSBkZWNsYXJhdGlvbnNbX2kyXTtcblx0XHRcdFx0XHRcdFx0aWYgKGRlY2xhcmF0aW9uLmlkLm5hbWUgPT09IHVwZGF0ZUFyZ3VtZW50Lm5hbWUpIHtcblx0XHRcdFx0XHRcdFx0XHRpbml0QXJndW1lbnQgPSBkZWNsYXJhdGlvbjtcblx0XHRcdFx0XHRcdFx0XHRkZWNsYXJhdGlvbnMuc3BsaWNlKF9pMiwgMSk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3ZhciAnKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZGVjbGFyYXRpb24sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdmb3IgKGxldCAnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpbml0QXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdmb3IgKCcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuaW5pdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnRlc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnVwZGF0ZSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuYm9keSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnSW52YWxpZCBmb3Igc3RhdGVtZW50JywgZm9yTm9kZSwgZnVuY1BhcmFtKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0V2hpbGVTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RXaGlsZVN0YXRlbWVudCh3aGlsZU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAod2hpbGVOb2RlLnR5cGUgIT09ICdXaGlsZVN0YXRlbWVudCcpIHtcblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnSW52YWxpZCB3aGlsZSBzdGF0bWVudCcsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0QXJyLnB1c2goJ2ZvciAobGV0IGkgPSAwOyBpIDwgTE9PUF9NQVg7IGkrKykgeycpO1xuXHRcdFx0cmV0QXJyLnB1c2goJ2lmICgnKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyh3aGlsZU5vZGUudGVzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goJykge1xcbicpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKHdoaWxlTm9kZS5ib2R5LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnfSBlbHNlIHtcXG4nKTtcblx0XHRcdHJldEFyci5wdXNoKCdicmVhaztcXG4nKTtcblx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cdFx0XHRyZXRBcnIucHVzaCgnfVxcbicpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RBc3NpZ25tZW50RXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEFzc2lnbm1lbnRFeHByZXNzaW9uKGFzc05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXNzTm9kZS5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaChhc3NOb2RlLm9wZXJhdG9yKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3NOb2RlLnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RFbXB0eVN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEVtcHR5U3RhdGVtZW50KGVOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0QmxvY2tTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RCbG9ja1N0YXRlbWVudChiTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCd7XFxuJyk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGJOb2RlLmJvZHkubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGJOb2RlLmJvZHlbaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RFeHByZXNzaW9uU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RXhwcmVzc2lvblN0YXRlbWVudChlc05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMoZXNOb2RlLmV4cHJlc3Npb24sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKCc7XFxuJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RWYXJpYWJsZURlY2xhcmF0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0VmFyaWFibGVEZWNsYXJhdGlvbih2YXJkZWNOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ3ZhciAnKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdmFyZGVjTm9kZS5kZWNsYXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJywnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModmFyZGVjTm9kZS5kZWNsYXJhdGlvbnNbaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RWYXJpYWJsZURlY2xhcmF0b3InLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RWYXJpYWJsZURlY2xhcmF0b3IoaXZhcmRlY05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMoaXZhcmRlY05vZGUuaWQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdGlmIChpdmFyZGVjTm9kZS5pbml0ICE9PSBudWxsKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCc9Jyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpdmFyZGVjTm9kZS5pbml0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RJZlN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdElmU3RhdGVtZW50KGlmTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCdpZiAoJyk7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLnRlc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cdFx0XHRpZiAoaWZOb2RlLmNvbnNlcXVlbnQudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50Jykge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLmNvbnNlcXVlbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCcge1xcbicpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLmNvbnNlcXVlbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ1xcbn1cXG4nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlmTm9kZS5hbHRlcm5hdGUpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ2Vsc2UgJyk7XG5cdFx0XHRcdGlmIChpZk5vZGUuYWx0ZXJuYXRlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpIHtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLmFsdGVybmF0ZSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcge1xcbicpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpZk5vZGUuYWx0ZXJuYXRlLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ1xcbn1cXG4nKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0QnJlYWtTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RCcmVha1N0YXRlbWVudChick5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgnYnJlYWs7XFxuJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RDb250aW51ZVN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdENvbnRpbnVlU3RhdGVtZW50KGNyTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCdjb250aW51ZTtcXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdExvZ2ljYWxFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0TG9naWNhbEV4cHJlc3Npb24obG9nTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMobG9nTm9kZS5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaChsb2dOb2RlLm9wZXJhdG9yKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhsb2dOb2RlLnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0VXBkYXRlRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFVwZGF0ZUV4cHJlc3Npb24odU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAodU5vZGUucHJlZml4KSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKHVOb2RlLm9wZXJhdG9yKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHVOb2RlLmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModU5vZGUuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2godU5vZGUub3BlcmF0b3IpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RVbmFyeUV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RVbmFyeUV4cHJlc3Npb24odU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAodU5vZGUucHJlZml4KSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKHVOb2RlLm9wZXJhdG9yKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHVOb2RlLmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModU5vZGUuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2godU5vZGUub3BlcmF0b3IpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RUaGlzRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFRoaXNFeHByZXNzaW9uKHROb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ3RoaXMnKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdE1lbWJlckV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RNZW1iZXJFeHByZXNzaW9uKG1Ob2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0dmFyIHVucm9sbGVkID0gdGhpcy5hc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsKG1Ob2RlLnByb3BlcnR5KTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5vYmplY3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdGlmIChtTm9kZS5wcm9wZXJ0eS50eXBlID09PSAnSWRlbnRpZmllcicgJiYgbU5vZGUuY29tcHV0ZWQpIHtcblx0XHRcdFx0dW5yb2xsZWQgPSAndXNlcl8nICsgdW5yb2xsZWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAobU5vZGUuY29tcHV0ZWQpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ1snKTtcblx0XHRcdFx0cmV0QXJyLnB1c2godW5yb2xsZWQpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnXScpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJy4nKTtcblx0XHRcdFx0cmV0QXJyLnB1c2godW5yb2xsZWQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2FzdFNlcXVlbmNlRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFNlcXVlbmNlRXhwcmVzc2lvbihzTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc05vZGUuZXhwcmVzc2lvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJywnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoc05vZGUuZXhwcmVzc2lvbnMsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsKGFzdCwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoYXN0LnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuXHRcdFx0XHRyZXR1cm4gYXN0Lm5hbWU7XG5cdFx0XHR9IGVsc2UgaWYgKGFzdC50eXBlID09PSAnVGhpc0V4cHJlc3Npb24nKSB7XG5cdFx0XHRcdHJldHVybiAndGhpcyc7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChhc3QudHlwZSA9PT0gJ01lbWJlckV4cHJlc3Npb24nKSB7XG5cdFx0XHRcdGlmIChhc3Qub2JqZWN0ICYmIGFzdC5wcm9wZXJ0eSkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwoYXN0Lm9iamVjdCwgZnVuY1BhcmFtKSArICcuJyArIHRoaXMuYXN0TWVtYmVyRXhwcmVzc2lvblVucm9sbChhc3QucHJvcGVydHksIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGFzdC50eXBlID09PSAnTGl0ZXJhbCcpIHtcblx0XHRcdFx0cmV0dXJuIGFzdC52YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnVW5rbm93biBDYWxsRXhwcmVzc2lvbl91bnJvbGwnLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdENhbGxFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0Q2FsbEV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGFzdC5jYWxsZWUpIHtcblx0XHRcdFx0dmFyIGZ1bmNOYW1lID0gdGhpcy5hc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsKGFzdC5jYWxsZWUpO1xuXG5cdFx0XHRcdGlmIChmdW5jUGFyYW0uY2FsbGVkRnVuY3Rpb25zLmluZGV4T2YoZnVuY05hbWUpIDwgMCkge1xuXHRcdFx0XHRcdGZ1bmNQYXJhbS5jYWxsZWRGdW5jdGlvbnMucHVzaChmdW5jTmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFmdW5jUGFyYW0uaGFzT3duUHJvcGVydHkoJ2Z1bmNOYW1lJykpIHtcblx0XHRcdFx0XHRmdW5jUGFyYW0uY2FsbGVkRnVuY3Rpb25zQXJndW1lbnRzW2Z1bmNOYW1lXSA9IFtdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGZ1bmN0aW9uQXJndW1lbnRzID0gW107XG5cdFx0XHRcdGZ1bmNQYXJhbS5jYWxsZWRGdW5jdGlvbnNBcmd1bWVudHNbZnVuY05hbWVdLnB1c2goZnVuY3Rpb25Bcmd1bWVudHMpO1xuXG5cdFx0XHRcdHJldEFyci5wdXNoKGZ1bmNOYW1lKTtcblxuXHRcdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXN0LmFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdHZhciBhcmd1bWVudCA9IGFzdC5hcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCAnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0aWYgKGFyZ3VtZW50LnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuXHRcdFx0XHRcdFx0dmFyIHBhcmFtSW5kZXggPSBmdW5jUGFyYW0ucGFyYW1OYW1lcy5pbmRleE9mKGFyZ3VtZW50Lm5hbWUpO1xuXHRcdFx0XHRcdFx0aWYgKHBhcmFtSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uQXJndW1lbnRzLnB1c2gobnVsbCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbkFyZ3VtZW50cy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiBhcmd1bWVudC5uYW1lLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IGZ1bmNQYXJhbS5wYXJhbVR5cGVzW3BhcmFtSW5kZXhdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmdW5jdGlvbkFyZ3VtZW50cy5wdXNoKG51bGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cblx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdH1cblxuXHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnVW5rbm93biBDYWxsRXhwcmVzc2lvbicsIGFzdCwgZnVuY1BhcmFtKTtcblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0QXJyYXlFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0QXJyYXlFeHByZXNzaW9uKGFyck5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHR2YXIgYXJyTGVuID0gYXJyTm9kZS5lbGVtZW50cy5sZW5ndGg7XG5cblx0XHRcdHJldEFyci5wdXNoKCduZXcgRmxvYXQzMkFycmF5KCcpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuXHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCAnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgc3ViTm9kZSA9IGFyck5vZGUuZWxlbWVudHNbaV07XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhzdWJOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXG5cdFx0fVxuXHR9XSwgW3tcblx0XHRrZXk6ICdhc3RGdW5jdGlvblByb3RvdHlwZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEZ1bmN0aW9uUHJvdG90eXBlKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChmdW5jUGFyYW0uaXNSb290S2VybmVsIHx8IGZ1bmNQYXJhbS5pc1N1Yktlcm5lbCkge1xuXHRcdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0ucmV0dXJuVHlwZSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnICcpO1xuXHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmNQYXJhbS5wYXJhbU5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcsICcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLnBhcmFtVHlwZXNbaV0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnICcpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgndXNlcl8nKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLnBhcmFtTmFtZXNbaV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaCgnKTtcXG4nKTtcblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gQ1BVRnVuY3Rpb25Ob2RlO1xufShCYXNlRnVuY3Rpb25Ob2RlKTtcbn0se1wiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4vZnVuY3Rpb24tbm9kZS1iYXNlXCI6N31dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9jb3JlL3V0aWxzJyk7XG52YXIga2VybmVsUnVuU2hvcnRjdXQgPSByZXF1aXJlKCcuLi9rZXJuZWwtcnVuLXNob3J0Y3V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNwdUtlcm5lbCwgbmFtZSkge1xuICByZXR1cm4gJygpID0+IHtcXG4gICAgJyArIGtlcm5lbFJ1blNob3J0Y3V0LnRvU3RyaW5nKCkgKyAnO1xcbiAgICBjb25zdCB1dGlscyA9IHtcXG4gICAgICBhbGxQcm9wZXJ0aWVzT2Y6IGZ1bmN0aW9uICcgKyB1dGlscy5hbGxQcm9wZXJ0aWVzT2YudG9TdHJpbmcoKSArICcsXFxuICAgICAgY2xvbmU6IGZ1bmN0aW9uICcgKyB1dGlscy5jbG9uZS50b1N0cmluZygpICsgJyxcXG4gICAgICAvKnNwbGl0QXJyYXk6IGZ1bmN0aW9uICcgKyB1dGlscy5zcGxpdEFycmF5LnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGdldEFyZ3VtZW50VHlwZTogZnVuY3Rpb24gJyArIHV0aWxzLmdldEFyZ3VtZW50VHlwZS50b1N0cmluZygpICsgJyxcXG4gICAgICBnZXRPdXRwdXQ6IGZ1bmN0aW9uICcgKyB1dGlscy5nZXRPdXRwdXQudG9TdHJpbmcoKSArICcsXFxuICAgICAgZGltVG9UZXhTaXplOiBmdW5jdGlvbiAnICsgdXRpbHMuZGltVG9UZXhTaXplLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGNvcHlGbGF0dGVuOiBmdW5jdGlvbiAnICsgdXRpbHMuY29weUZsYXR0ZW4udG9TdHJpbmcoKSArICcsXFxuICAgICAgZmxhdHRlbjogZnVuY3Rpb24gJyArIHV0aWxzLmZsYXR0ZW4udG9TdHJpbmcoKSArICcsXFxuICAgICAgc3lzdGVtRW5kaWFubmVzczogXFwnJyArIHV0aWxzLnN5c3RlbUVuZGlhbm5lc3MoKSArICdcXCcsXFxuICAgICAgaW5pdFdlYkdsOiBmdW5jdGlvbiAnICsgdXRpbHMuaW5pdFdlYkdsLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGlzQXJyYXk6IGZ1bmN0aW9uICcgKyB1dGlscy5pc0FycmF5LnRvU3RyaW5nKCkgKyAnKi9cXG4gICAgfTtcXG4gICAgY2xhc3MgJyArIChuYW1lIHx8ICdLZXJuZWwnKSArICcge1xcbiAgICAgIGNvbnN0cnVjdG9yKCkgeyAgICAgICAgXFxuICAgICAgICB0aGlzLmFyZ3VtZW50c0xlbmd0aCA9IDA7XFxuICAgICAgICB0aGlzLl9jYW52YXMgPSBudWxsO1xcbiAgICAgICAgdGhpcy5fd2ViR2wgPSBudWxsO1xcbiAgICAgICAgdGhpcy5idWlsdCA9IGZhbHNlO1xcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcXG4gICAgICAgIHRoaXMucGFyYW1OYW1lcyA9ICcgKyBKU09OLnN0cmluZ2lmeShjcHVLZXJuZWwucGFyYW1OYW1lcykgKyAnO1xcbiAgICAgICAgdGhpcy5wYXJhbVR5cGVzID0gJyArIEpTT04uc3RyaW5naWZ5KGNwdUtlcm5lbC5wYXJhbVR5cGVzKSArICc7XFxuICAgICAgICB0aGlzLnRleFNpemUgPSAnICsgSlNPTi5zdHJpbmdpZnkoY3B1S2VybmVsLnRleFNpemUpICsgJztcXG4gICAgICAgIHRoaXMub3V0cHV0ID0gJyArIEpTT04uc3RyaW5naWZ5KGNwdUtlcm5lbC5vdXRwdXQpICsgJztcXG4gICAgICAgIHRoaXMuX2tlcm5lbFN0cmluZyA9IGAnICsgY3B1S2VybmVsLl9rZXJuZWxTdHJpbmcgKyAnYDtcXG4gICAgICAgIHRoaXMub3V0cHV0ID0gJyArIEpTT04uc3RyaW5naWZ5KGNwdUtlcm5lbC5vdXRwdXQpICsgJztcXG5cXHRcXHQgICAgdGhpcy5ydW4gPSBmdW5jdGlvbigpIHtcXG4gICAgICAgICAgdGhpcy5ydW4gPSBudWxsO1xcbiAgICAgICAgICB0aGlzLmJ1aWxkKCk7XFxuICAgICAgICAgIHJldHVybiB0aGlzLnJ1bi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xcbiAgICAgICAgfS5iaW5kKHRoaXMpO1xcbiAgICAgICAgdGhpcy50aHJlYWQgPSB7XFxuICAgICAgICAgIHg6IDAsXFxuICAgICAgICAgIHk6IDAsXFxuICAgICAgICAgIHo6IDBcXG4gICAgICAgIH07XFxuICAgICAgfVxcbiAgICAgIHNldENhbnZhcyhjYW52YXMpIHsgdGhpcy5fY2FudmFzID0gY2FudmFzOyByZXR1cm4gdGhpczsgfVxcbiAgICAgIHNldFdlYkdsKHdlYkdsKSB7IHRoaXMuX3dlYkdsID0gd2ViR2w7IHJldHVybiB0aGlzOyB9XFxuICAgICAgJyArIGNwdUtlcm5lbC5idWlsZC50b1N0cmluZygpICsgJ1xcbiAgICAgIHJ1biAoKSB7ICcgKyBjcHVLZXJuZWwua2VybmVsU3RyaW5nICsgJyB9XFxuICAgICAgZ2V0S2VybmVsU3RyaW5nKCkgeyByZXR1cm4gdGhpcy5fa2VybmVsU3RyaW5nOyB9XFxuICAgIH07XFxuICAgIHJldHVybiBrZXJuZWxSdW5TaG9ydGN1dChuZXcgS2VybmVsKCkpO1xcbiAgfTsnO1xufTtcbn0se1wiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4va2VybmVsLXJ1bi1zaG9ydGN1dFwiOjl9XSw0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgS2VybmVsQmFzZSA9IHJlcXVpcmUoJy4uL2tlcm5lbC1iYXNlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9jb3JlL3V0aWxzJyk7XG52YXIga2VybmVsU3RyaW5nID0gcmVxdWlyZSgnLi9rZXJuZWwtc3RyaW5nJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9LZXJuZWxCYXNlKSB7XG5cdF9pbmhlcml0cyhDUFVLZXJuZWwsIF9LZXJuZWxCYXNlKTtcblxuXHRmdW5jdGlvbiBDUFVLZXJuZWwoZm5TdHJpbmcsIHNldHRpbmdzKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIENQVUtlcm5lbCk7XG5cblx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ1BVS2VybmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ1BVS2VybmVsKSkuY2FsbCh0aGlzLCBmblN0cmluZywgc2V0dGluZ3MpKTtcblxuXHRcdF90aGlzLl9mbkJvZHkgPSB1dGlscy5nZXRGdW5jdGlvbkJvZHlGcm9tU3RyaW5nKGZuU3RyaW5nKTtcblx0XHRfdGhpcy5fZm4gPSBudWxsO1xuXHRcdF90aGlzLnJ1biA9IG51bGw7XG5cdFx0X3RoaXMuX2NhbnZhc0N0eCA9IG51bGw7XG5cdFx0X3RoaXMuX2ltYWdlRGF0YSA9IG51bGw7XG5cdFx0X3RoaXMuX2NvbG9yRGF0YSA9IG51bGw7XG5cdFx0X3RoaXMuX2tlcm5lbFN0cmluZyA9IG51bGw7XG5cdFx0X3RoaXMudGhyZWFkID0ge1xuXHRcdFx0eDogMCxcblx0XHRcdHk6IDAsXG5cdFx0XHR6OiAwXG5cdFx0fTtcblxuXHRcdF90aGlzLnJ1biA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHRoaXMucnVuID0gbnVsbDtcblx0XHRcdHRoaXMuYnVpbGQoKTtcblx0XHRcdHJldHVybiB0aGlzLnJ1bi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdH0uYmluZChfdGhpcyk7XG5cdFx0cmV0dXJuIF90aGlzO1xuXHR9XG5cblxuXG5cdF9jcmVhdGVDbGFzcyhDUFVLZXJuZWwsIFt7XG5cdFx0a2V5OiAndmFsaWRhdGVPcHRpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKCkge1xuXHRcdFx0aWYgKCF0aGlzLm91dHB1dCB8fCB0aGlzLm91dHB1dC5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggIT09IDEpIHtcblx0XHRcdFx0XHR0aHJvdyAnQXV0byBkaW1lbnNpb25zIG9ubHkgc3VwcG9ydGVkIGZvciBrZXJuZWxzIHdpdGggb25seSBvbmUgaW5wdXQnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGFyZ1R5cGUgPSB1dGlscy5nZXRBcmd1bWVudFR5cGUoYXJndW1lbnRzWzBdKTtcblx0XHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdBcnJheScpIHtcblx0XHRcdFx0XHR0aGlzLm91dHB1dCA9IHV0aWxzLmdldERpbWVuc2lvbnMoYXJnVHlwZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ1RleHR1cmUnKSB7XG5cdFx0XHRcdFx0dGhpcy5vdXRwdXQgPSBhcmd1bWVudHNbMF0ub3V0cHV0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93ICdBdXRvIGRpbWVuc2lvbnMgbm90IHN1cHBvcnRlZCBmb3IgaW5wdXQgdHlwZTogJyArIGFyZ1R5cGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYnVpbGQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBidWlsZCgpIHtcblxuXHRcdFx0dmFyIGtlcm5lbEFyZ3MgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBhcmdUeXBlID0gdXRpbHMuZ2V0QXJndW1lbnRUeXBlKGFyZ3VtZW50c1tpXSk7XG5cdFx0XHRcdGlmIChhcmdUeXBlID09PSAnQXJyYXknIHx8IGFyZ1R5cGUgPT09ICdOdW1iZXInKSB7XG5cdFx0XHRcdFx0a2VybmVsQXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnVGV4dHVyZScpIHtcblx0XHRcdFx0XHRrZXJuZWxBcmdzW2ldID0gYXJndW1lbnRzW2ldLnRvQXJyYXkoKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyAnSW5wdXQgdHlwZSBub3Qgc3VwcG9ydGVkIChDUFUpOiAnICsgYXJndW1lbnRzW2ldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciB0aHJlYWREaW0gPSB0aGlzLnRocmVhZERpbSA9IHV0aWxzLmNsb25lKHRoaXMub3V0cHV0KTtcblxuXHRcdFx0d2hpbGUgKHRocmVhZERpbS5sZW5ndGggPCAzKSB7XG5cdFx0XHRcdHRocmVhZERpbS5wdXNoKDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5ncmFwaGljYWwpIHtcblx0XHRcdFx0dmFyIGNhbnZhcyA9IHRoaXMuZ2V0Q2FudmFzKCk7XG5cdFx0XHRcdGNhbnZhcy53aWR0aCA9IHRocmVhZERpbVswXTtcblx0XHRcdFx0Y2FudmFzLmhlaWdodCA9IHRocmVhZERpbVsxXTtcblx0XHRcdFx0dGhpcy5fY2FudmFzQ3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cdFx0XHRcdHRoaXMuX2ltYWdlRGF0YSA9IHRoaXMuX2NhbnZhc0N0eC5jcmVhdGVJbWFnZURhdGEodGhyZWFkRGltWzBdLCB0aHJlYWREaW1bMV0pO1xuXHRcdFx0XHR0aGlzLl9jb2xvckRhdGEgPSBuZXcgVWludDhDbGFtcGVkQXJyYXkodGhyZWFkRGltWzBdICogdGhyZWFkRGltWzFdICogNCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBrZXJuZWxTdHJpbmcgPSB0aGlzLmdldEtlcm5lbFN0cmluZygpO1xuXG5cdFx0XHRpZiAodGhpcy5kZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnT3B0aW9uczonKTtcblx0XHRcdFx0Y29uc29sZS5kaXIodGhpcyk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdGdW5jdGlvbiBvdXRwdXQ6Jyk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGtlcm5lbFN0cmluZyk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMua2VybmVsU3RyaW5nID0ga2VybmVsU3RyaW5nO1xuXHRcdFx0dGhpcy5ydW4gPSBuZXcgRnVuY3Rpb24oW10sIGtlcm5lbFN0cmluZykuYmluZCh0aGlzKSgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2NvbG9yJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29sb3IociwgZywgYiwgYSkge1xuXHRcdFx0aWYgKHR5cGVvZiBhID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRhID0gMTtcblx0XHRcdH1cblxuXHRcdFx0ciA9IE1hdGguZmxvb3IociAqIDI1NSk7XG5cdFx0XHRnID0gTWF0aC5mbG9vcihnICogMjU1KTtcblx0XHRcdGIgPSBNYXRoLmZsb29yKGIgKiAyNTUpO1xuXHRcdFx0YSA9IE1hdGguZmxvb3IoYSAqIDI1NSk7XG5cblx0XHRcdHZhciB3aWR0aCA9IHRoaXMub3V0cHV0WzBdO1xuXHRcdFx0dmFyIGhlaWdodCA9IHRoaXMub3V0cHV0WzFdO1xuXG5cdFx0XHR2YXIgeCA9IHRoaXMudGhyZWFkLng7XG5cdFx0XHR2YXIgeSA9IGhlaWdodCAtIHRoaXMudGhyZWFkLnkgLSAxO1xuXG5cdFx0XHR2YXIgaW5kZXggPSB4ICsgeSAqIHdpZHRoO1xuXG5cdFx0XHR0aGlzLl9jb2xvckRhdGFbaW5kZXggKiA0ICsgMF0gPSByO1xuXHRcdFx0dGhpcy5fY29sb3JEYXRhW2luZGV4ICogNCArIDFdID0gZztcblx0XHRcdHRoaXMuX2NvbG9yRGF0YVtpbmRleCAqIDQgKyAyXSA9IGI7XG5cdFx0XHR0aGlzLl9jb2xvckRhdGFbaW5kZXggKiA0ICsgM10gPSBhO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRLZXJuZWxTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRLZXJuZWxTdHJpbmcoKSB7XG5cdFx0XHR2YXIgX3RoaXMyID0gdGhpcztcblxuXHRcdFx0aWYgKHRoaXMuX2tlcm5lbFN0cmluZyAhPT0gbnVsbCkgcmV0dXJuIHRoaXMuX2tlcm5lbFN0cmluZztcblxuXHRcdFx0dmFyIGJ1aWxkZXIgPSB0aGlzLmZ1bmN0aW9uQnVpbGRlcjtcblxuXHRcdFx0dmFyIHRocmVhZERpbSA9IHRoaXMudGhyZWFkRGltIHx8ICh0aGlzLnRocmVhZERpbSA9IHV0aWxzLmNsb25lKHRoaXMub3V0cHV0KSk7XG5cdFx0XHR3aGlsZSAodGhyZWFkRGltLmxlbmd0aCA8IDMpIHtcblx0XHRcdFx0dGhyZWFkRGltLnB1c2goMSk7XG5cdFx0XHR9XG5cblx0XHRcdGJ1aWxkZXIuYWRkS2VybmVsKHRoaXMuZm5TdHJpbmcsIHtcblx0XHRcdFx0cHJvdG90eXBlT25seTogZmFsc2UsXG5cdFx0XHRcdGNvbnN0YW50czogdGhpcy5jb25zdGFudHMsXG5cdFx0XHRcdGRlYnVnOiB0aGlzLmRlYnVnLFxuXHRcdFx0XHRsb29wTWF4SXRlcmF0aW9uczogdGhpcy5sb29wTWF4SXRlcmF0aW9uc1xuXHRcdFx0fSwgdGhpcy5wYXJhbU5hbWVzLCB0aGlzLnBhcmFtVHlwZXMpO1xuXG5cdFx0XHRidWlsZGVyLmFkZEZ1bmN0aW9ucyh0aGlzLmZ1bmN0aW9ucyk7XG5cblx0XHRcdGlmICh0aGlzLnN1Yktlcm5lbHMgIT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcyA9IFtdO1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1Yktlcm5lbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgc3ViS2VybmVsID0gdGhpcy5zdWJLZXJuZWxzW2ldO1xuXHRcdFx0XHRcdGJ1aWxkZXIuYWRkU3ViS2VybmVsKHN1Yktlcm5lbCk7XG5cdFx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLnB1c2goc3ViS2VybmVsLm5hbWUgKyAnUmVzdWx0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzICE9PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9IFtdO1xuXHRcdFx0XHR2YXIgX2kgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBwIGluIHRoaXMuc3ViS2VybmVsUHJvcGVydGllcykge1xuXHRcdFx0XHRcdGlmICghdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHApKSBjb250aW51ZTtcblx0XHRcdFx0XHR2YXIgX3N1Yktlcm5lbCA9IHRoaXMuc3ViS2VybmVsUHJvcGVydGllc1twXTtcblx0XHRcdFx0XHRidWlsZGVyLmFkZFN1Yktlcm5lbChfc3ViS2VybmVsKTtcblx0XHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMucHVzaChfc3ViS2VybmVsLm5hbWUgKyAnUmVzdWx0Jyk7XG5cdFx0XHRcdFx0X2krKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgcHJvdG90eXBlcyA9IGJ1aWxkZXIuZ2V0UHJvdG90eXBlcygpO1xuXHRcdFx0dmFyIGtlcm5lbCA9IHByb3RvdHlwZXMuc2hpZnQoKTtcblx0XHRcdHZhciBrZXJuZWxTdHJpbmcgPSB0aGlzLl9rZXJuZWxTdHJpbmcgPSAnXFxuXFx0XFx0dmFyIExPT1BfTUFYID0gJyArIHRoaXMuX2dldExvb3BNYXhTdHJpbmcoKSArICc7XFxuICAnICsgKHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9PT0gbnVsbCA/ICcnIDogdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gJyAgdmFyICcgKyBuYW1lICsgJyA9IG51bGw7XFxuJztcblx0XHRcdH0pLmpvaW4oJycpKSArICdcXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgnICsgdGhpcy5wYXJhbU5hbWVzLm1hcChmdW5jdGlvbiAocGFyYW1OYW1lKSB7XG5cdFx0XHRcdHJldHVybiAndXNlcl8nICsgcGFyYW1OYW1lO1xuXHRcdFx0fSkuam9pbignLCAnKSArICcpIHtcXG4gICAgdmFyIHJldCA9IG5ldyBBcnJheSgnICsgdGhyZWFkRGltWzJdICsgJyk7XFxuICAnICsgKHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9PT0gbnVsbCA/ICcnIDogdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gJyAgJyArIG5hbWUgKyAnWiA9IG5ldyBBcnJheSgnICsgdGhyZWFkRGltWzJdICsgJyk7XFxuJztcblx0XHRcdH0pLmpvaW4oJycpKSArICdcXG4gICAgZm9yICh0aGlzLnRocmVhZC56ID0gMDsgdGhpcy50aHJlYWQueiA8ICcgKyB0aHJlYWREaW1bMl0gKyAnOyB0aGlzLnRocmVhZC56KyspIHtcXG4gICAgICByZXRbdGhpcy50aHJlYWQuel0gPSBuZXcgQXJyYXkoJyArIHRocmVhZERpbVsxXSArICcpO1xcbiAgJyArICh0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPT09IG51bGwgPyAnJyA6IHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdFx0cmV0dXJuICcgICAgJyArIG5hbWUgKyAnWlt0aGlzLnRocmVhZC56XSA9IG5ldyBBcnJheSgnICsgdGhyZWFkRGltWzFdICsgJyk7XFxuJztcblx0XHRcdH0pLmpvaW4oJycpKSArICdcXG4gICAgICBmb3IgKHRoaXMudGhyZWFkLnkgPSAwOyB0aGlzLnRocmVhZC55IDwgJyArIHRocmVhZERpbVsxXSArICc7IHRoaXMudGhyZWFkLnkrKykge1xcbiAgICAgICAgcmV0W3RoaXMudGhyZWFkLnpdW3RoaXMudGhyZWFkLnldID0gbmV3IEFycmF5KCcgKyB0aHJlYWREaW1bMF0gKyAnKTtcXG4gICcgKyAodGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID09PSBudWxsID8gJycgOiB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRcdHJldHVybiAnICAgICAgJyArIG5hbWUgKyAnWlt0aGlzLnRocmVhZC56XVt0aGlzLnRocmVhZC55XSA9IG5ldyBBcnJheSgnICsgdGhyZWFkRGltWzBdICsgJyk7XFxuJztcblx0XHRcdH0pLmpvaW4oJycpKSArICdcXG4gICAgICAgIGZvciAodGhpcy50aHJlYWQueCA9IDA7IHRoaXMudGhyZWFkLnggPCAnICsgdGhyZWFkRGltWzBdICsgJzsgdGhpcy50aHJlYWQueCsrKSB7XFxuICAgICAgICAgIHZhciBrZXJuZWxSZXN1bHQ7XFxuICAgICAgICAgICcgKyBrZXJuZWwgKyAnXFxuICAgICAgICAgIHJldFt0aGlzLnRocmVhZC56XVt0aGlzLnRocmVhZC55XVt0aGlzLnRocmVhZC54XSA9IGtlcm5lbFJlc3VsdDtcXG4nICsgKHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9PT0gbnVsbCA/ICcnIDogdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gJyAgICAgICAgJyArIG5hbWUgKyAnWlt0aGlzLnRocmVhZC56XVt0aGlzLnRocmVhZC55XVt0aGlzLnRocmVhZC54XSA9ICcgKyBuYW1lICsgJztcXG4nO1xuXHRcdFx0fSkuam9pbignJykpICsgJ1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgIFxcbiAgICAgIGlmICh0aGlzLmdyYXBoaWNhbCkge1xcbiAgICAgICAgdGhpcy5faW1hZ2VEYXRhLmRhdGEuc2V0KHRoaXMuX2NvbG9yRGF0YSk7XFxuICAgICAgICB0aGlzLl9jYW52YXNDdHgucHV0SW1hZ2VEYXRhKHRoaXMuX2ltYWdlRGF0YSwgMCwgMCk7XFxuICAgICAgICByZXR1cm47XFxuICAgICAgfVxcbiAgICAgIFxcbiAgICAgIGlmICh0aGlzLm91dHB1dC5sZW5ndGggPT09IDEpIHtcXG4gICAgICAgIHJldCA9IHJldFswXVswXTtcXG4nICsgKHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9PT0gbnVsbCA/ICcnIDogdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gJyAgICAnICsgbmFtZSArICcgPSAnICsgbmFtZSArICdaWzBdWzBdO1xcbic7XG5cdFx0XHR9KS5qb2luKCcnKSkgKyAnXFxuICAgICAgXFxuICAgIH0gZWxzZSBpZiAodGhpcy5vdXRwdXQubGVuZ3RoID09PSAyKSB7XFxuICAgICAgcmV0ID0gcmV0WzBdO1xcbiAgICAgICcgKyAodGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID09PSBudWxsID8gJycgOiB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRcdHJldHVybiAnICAgICcgKyBuYW1lICsgJyA9ICcgKyBuYW1lICsgJ1pbMF07XFxuJztcblx0XHRcdH0pLmpvaW4oJycpKSArICdcXG4gICAgfVxcbiAgICBcXG4gICAgJyArICh0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPT09IG51bGwgPyAncmV0dXJuIHJldDtcXG4nIDogdGhpcy5zdWJLZXJuZWxzICE9PSBudWxsID8gJ3ZhciByZXN1bHQgPSBbXFxuICAgICAgICAnICsgdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gJycgKyBuYW1lO1xuXHRcdFx0fSkuam9pbignLFxcbicpICsgJ1xcbiAgICAgIF07XFxuICAgICAgcmVzdWx0LnJlc3VsdCA9IHJldDtcXG4gICAgICByZXR1cm4gcmVzdWx0O1xcbicgOiAncmV0dXJuIHtcXG4gICAgICAgIHJlc3VsdDogcmV0LFxcbiAgICAgICAgJyArIE9iamVjdC5rZXlzKHRoaXMuc3ViS2VybmVsUHJvcGVydGllcykubWFwKGZ1bmN0aW9uIChuYW1lLCBpKSB7XG5cdFx0XHRcdHJldHVybiBuYW1lICsgJzogJyArIF90aGlzMi5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzW2ldO1xuXHRcdFx0fSkuam9pbignLFxcbicpICsgJ1xcbiAgICAgIH07JykgKyAnXFxuICAgICcgKyAocHJvdG90eXBlcy5sZW5ndGggPiAwID8gcHJvdG90eXBlcy5qb2luKCdcXG4nKSA6ICcnKSArICdcXG4gICAgfS5iaW5kKHRoaXMpOyc7XG5cdFx0XHRyZXR1cm4ga2VybmVsU3RyaW5nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICd0b1N0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdFx0cmV0dXJuIGtlcm5lbFN0cmluZyh0aGlzKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAncHJlY29tcGlsZUtlcm5lbE9iaicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHByZWNvbXBpbGVLZXJuZWxPYmooYXJnVHlwZXMpIHtcblxuXHRcdFx0dmFyIHRocmVhZERpbSA9IHRoaXMudGhyZWFkRGltIHx8ICh0aGlzLnRocmVhZERpbSA9IHV0aWxzLmNsb25lKHRoaXMub3V0cHV0KSk7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHRocmVhZERpbTogdGhyZWFkRGltXG5cdFx0XHR9O1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0TG9vcE1heFN0cmluZycsXG5cblxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0TG9vcE1heFN0cmluZygpIHtcblx0XHRcdHJldHVybiB0aGlzLmxvb3BNYXhJdGVyYXRpb25zID8gJyAnICsgcGFyc2VJbnQodGhpcy5sb29wTWF4SXRlcmF0aW9ucykgKyAnO1xcbicgOiAnIDEwMDA7XFxuJztcblx0XHR9XG5cdH1dLCBbe1xuXHRcdGtleTogJ2NvbXBpbGVLZXJuZWwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb21waWxlS2VybmVsKHByZWNvbXBpbGVPYmopIHtcblxuXHRcdFx0dmFyIHRocmVhZERpbSA9IHByZWNvbXBpbGVPYmoudGhyZWFkRGltO1xuXG5cdFx0XHR3aGlsZSAodGhyZWFkRGltLmxlbmd0aCA8IDMpIHtcblx0XHRcdFx0dGhyZWFkRGltLnB1c2goMSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIENQVUtlcm5lbDtcbn0oS2VybmVsQmFzZSk7XG59LHtcIi4uLy4uL2NvcmUvdXRpbHNcIjoyNCxcIi4uL2tlcm5lbC1iYXNlXCI6OCxcIi4va2VybmVsLXN0cmluZ1wiOjN9XSw1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9jb3JlL3V0aWxzJyk7XG52YXIgUnVubmVyQmFzZSA9IHJlcXVpcmUoJy4uL3J1bm5lci1iYXNlJyk7XG52YXIgQ1BVS2VybmVsID0gcmVxdWlyZSgnLi9rZXJuZWwnKTtcbnZhciBDUFVGdW5jdGlvbkJ1aWxkZXIgPSByZXF1aXJlKCcuL2Z1bmN0aW9uLWJ1aWxkZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX1J1bm5lckJhc2UpIHtcblx0X2luaGVyaXRzKENQVVJ1bm5lciwgX1J1bm5lckJhc2UpO1xuXG5cblx0ZnVuY3Rpb24gQ1BVUnVubmVyKHNldHRpbmdzKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIENQVVJ1bm5lcik7XG5cblx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoQ1BVUnVubmVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ1BVUnVubmVyKSkuY2FsbCh0aGlzLCBuZXcgQ1BVRnVuY3Rpb25CdWlsZGVyKCksIHNldHRpbmdzKSk7XG5cblx0XHRfdGhpcy5LZXJuZWwgPSBDUFVLZXJuZWw7XG5cdFx0X3RoaXMua2VybmVsID0gbnVsbDtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXG5cblx0X2NyZWF0ZUNsYXNzKENQVVJ1bm5lciwgW3tcblx0XHRrZXk6ICdnZXRNb2RlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kZSgpIHtcblx0XHRcdHJldHVybiAnY3B1Jztcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gQ1BVUnVubmVyO1xufShSdW5uZXJCYXNlKTtcbn0se1wiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4vcnVubmVyLWJhc2VcIjoxMCxcIi4vZnVuY3Rpb24tYnVpbGRlclwiOjEsXCIuL2tlcm5lbFwiOjR9XSw2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gRnVuY3Rpb25CdWlsZGVyQmFzZShncHUpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnVuY3Rpb25CdWlsZGVyQmFzZSk7XG5cblx0XHR0aGlzLm5vZGVNYXAgPSB7fTtcblx0XHR0aGlzLm5hdGl2ZUZ1bmN0aW9ucyA9IHt9O1xuXHRcdHRoaXMuZ3B1ID0gZ3B1O1xuXHRcdHRoaXMucm9vdEtlcm5lbCA9IG51bGw7XG5cdFx0dGhpcy5Ob2RlID0gbnVsbDtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhGdW5jdGlvbkJ1aWxkZXJCYXNlLCBbe1xuXHRcdGtleTogJ2FkZE5hdGl2ZUZ1bmN0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkTmF0aXZlRnVuY3Rpb24oZnVuY3Rpb25OYW1lLCBnbHNsRnVuY3Rpb25TdHJpbmcpIHtcblx0XHRcdHRoaXMubmF0aXZlRnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0gPSBnbHNsRnVuY3Rpb25TdHJpbmc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZEZ1bmN0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkRnVuY3Rpb24oZnVuY3Rpb25OYW1lLCBqc0Z1bmN0aW9uLCBwYXJhbVR5cGVzLCByZXR1cm5UeXBlKSB7XG5cdFx0XHR0aGlzLmFkZEZ1bmN0aW9uTm9kZShuZXcgdGhpcy5Ob2RlKGZ1bmN0aW9uTmFtZSwganNGdW5jdGlvbiwgcGFyYW1UeXBlcywgcmV0dXJuVHlwZSkuc2V0QWRkRnVuY3Rpb24odGhpcy5hZGRGdW5jdGlvbi5iaW5kKHRoaXMpKSk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYWRkRnVuY3Rpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkRnVuY3Rpb25zKGZ1bmN0aW9ucykge1xuXHRcdFx0aWYgKGZ1bmN0aW9ucykge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShmdW5jdGlvbnMpKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHRoaXMuYWRkRnVuY3Rpb24obnVsbCwgZnVuY3Rpb25zW2ldKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgcCBpbiBmdW5jdGlvbnMpIHtcblx0XHRcdFx0XHRcdHRoaXMuYWRkRnVuY3Rpb24ocCwgZnVuY3Rpb25zW3BdKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhZGROYXRpdmVGdW5jdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhZGROYXRpdmVGdW5jdGlvbnMobmF0aXZlRnVuY3Rpb25zKSB7XG5cdFx0XHRmb3IgKHZhciBmdW5jdGlvbk5hbWUgaW4gbmF0aXZlRnVuY3Rpb25zKSB7XG5cdFx0XHRcdGlmICghbmF0aXZlRnVuY3Rpb25zLmhhc093blByb3BlcnR5KGZ1bmN0aW9uTmFtZSkpIGNvbnRpbnVlO1xuXHRcdFx0XHR0aGlzLmFkZE5hdGl2ZUZ1bmN0aW9uKGZ1bmN0aW9uTmFtZSwgbmF0aXZlRnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhZGRGdW5jdGlvbk5vZGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhZGRGdW5jdGlvbk5vZGUoaW5Ob2RlKSB7XG5cdFx0XHR0aGlzLm5vZGVNYXBbaW5Ob2RlLmZ1bmN0aW9uTmFtZV0gPSBpbk5vZGU7XG5cdFx0XHRpZiAoaW5Ob2RlLmlzUm9vdEtlcm5lbCkge1xuXHRcdFx0XHR0aGlzLnJvb3RLZXJuZWwgPSBpbk5vZGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3RyYWNlRnVuY3Rpb25DYWxscycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHRyYWNlRnVuY3Rpb25DYWxscyhmdW5jdGlvbk5hbWUsIHJldExpc3QsIHBhcmVudCkge1xuXHRcdFx0ZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25OYW1lIHx8ICdrZXJuZWwnO1xuXHRcdFx0cmV0TGlzdCA9IHJldExpc3QgfHwgW107XG5cblx0XHRcdHZhciBmTm9kZSA9IHRoaXMubm9kZU1hcFtmdW5jdGlvbk5hbWVdO1xuXHRcdFx0aWYgKGZOb2RlKSB7XG5cdFx0XHRcdGlmIChyZXRMaXN0LmluZGV4T2YoZnVuY3Rpb25OYW1lKSA+PSAwKSB7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0TGlzdC5wdXNoKGZ1bmN0aW9uTmFtZSk7XG5cdFx0XHRcdFx0aWYgKHBhcmVudCkge1xuXHRcdFx0XHRcdFx0Zk5vZGUucGFyZW50ID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0Zk5vZGUuY29uc3RhbnRzID0gcGFyZW50LmNvbnN0YW50cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Zk5vZGUuZ2V0RnVuY3Rpb25TdHJpbmcoKTtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZOb2RlLmNhbGxlZEZ1bmN0aW9ucy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdFx0dGhpcy50cmFjZUZ1bmN0aW9uQ2FsbHMoZk5vZGUuY2FsbGVkRnVuY3Rpb25zW2ldLCByZXRMaXN0LCBmTm9kZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLm5hdGl2ZUZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdKSB7XG5cdFx0XHRcdGlmIChyZXRMaXN0LmluZGV4T2YoZnVuY3Rpb25OYW1lKSA+PSAwKSB7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0TGlzdC5wdXNoKGZ1bmN0aW9uTmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldExpc3Q7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZEtlcm5lbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZEtlcm5lbChmblN0cmluZywgb3B0aW9ucywgcGFyYW1OYW1lcywgcGFyYW1UeXBlcykge1xuXHRcdFx0dmFyIGtlcm5lbE5vZGUgPSBuZXcgdGhpcy5Ob2RlKCdrZXJuZWwnLCBmblN0cmluZywgb3B0aW9ucywgcGFyYW1UeXBlcyk7XG5cdFx0XHRrZXJuZWxOb2RlLnNldEFkZEZ1bmN0aW9uKHRoaXMuYWRkRnVuY3Rpb24uYmluZCh0aGlzKSk7XG5cdFx0XHRrZXJuZWxOb2RlLnBhcmFtTmFtZXMgPSBwYXJhbU5hbWVzO1xuXHRcdFx0a2VybmVsTm9kZS5wYXJhbVR5cGVzID0gcGFyYW1UeXBlcztcblx0XHRcdGtlcm5lbE5vZGUuaXNSb290S2VybmVsID0gdHJ1ZTtcblx0XHRcdHRoaXMuYWRkRnVuY3Rpb25Ob2RlKGtlcm5lbE5vZGUpO1xuXHRcdFx0cmV0dXJuIGtlcm5lbE5vZGU7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZFN1Yktlcm5lbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZFN1Yktlcm5lbChqc0Z1bmN0aW9uLCBvcHRpb25zLCBwYXJhbVR5cGVzLCByZXR1cm5UeXBlKSB7XG5cdFx0XHR2YXIga2VybmVsTm9kZSA9IG5ldyB0aGlzLk5vZGUobnVsbCwganNGdW5jdGlvbiwgb3B0aW9ucywgcGFyYW1UeXBlcywgcmV0dXJuVHlwZSk7XG5cdFx0XHRrZXJuZWxOb2RlLnNldEFkZEZ1bmN0aW9uKHRoaXMuYWRkRnVuY3Rpb24uYmluZCh0aGlzKSk7XG5cdFx0XHRrZXJuZWxOb2RlLmlzU3ViS2VybmVsID0gdHJ1ZTtcblx0XHRcdHRoaXMuYWRkRnVuY3Rpb25Ob2RlKGtlcm5lbE5vZGUpO1xuXHRcdFx0cmV0dXJuIGtlcm5lbE5vZGU7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFByb3RvdHlwZVN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFByb3RvdHlwZVN0cmluZyhmdW5jdGlvbk5hbWUpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFByb3RvdHlwZXMoZnVuY3Rpb25OYW1lKS5qb2luKCdcXG4nKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0UHJvdG90eXBlcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFByb3RvdHlwZXMoZnVuY3Rpb25OYW1lKSB7XG5cdFx0XHR0aGlzLnJvb3RLZXJuZWwuZ2VuZXJhdGUoKTtcblx0XHRcdGlmIChmdW5jdGlvbk5hbWUpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UHJvdG90eXBlc0Zyb21GdW5jdGlvbk5hbWVzKHRoaXMudHJhY2VGdW5jdGlvbkNhbGxzKGZ1bmN0aW9uTmFtZSwgW10pLnJldmVyc2UoKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRQcm90b3R5cGVzRnJvbUZ1bmN0aW9uTmFtZXMoT2JqZWN0LmtleXModGhpcy5ub2RlTWFwKSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFN0cmluZ0Zyb21GdW5jdGlvbk5hbWVzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0U3RyaW5nRnJvbUZ1bmN0aW9uTmFtZXMoZnVuY3Rpb25MaXN0KSB7XG5cdFx0XHR2YXIgcmV0ID0gW107XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9uTGlzdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgbm9kZSA9IHRoaXMubm9kZU1hcFtmdW5jdGlvbkxpc3RbaV1dO1xuXHRcdFx0XHRpZiAobm9kZSkge1xuXHRcdFx0XHRcdHJldC5wdXNoKHRoaXMubm9kZU1hcFtmdW5jdGlvbkxpc3RbaV1dLmdldEZ1bmN0aW9uU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0LmpvaW4oJ1xcbicpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRQcm90b3R5cGVzRnJvbUZ1bmN0aW9uTmFtZXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVzRnJvbUZ1bmN0aW9uTmFtZXMoZnVuY3Rpb25MaXN0LCBvcHQpIHtcblx0XHRcdHZhciByZXQgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY3Rpb25MaXN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHZhciBmdW5jdGlvbk5hbWUgPSBmdW5jdGlvbkxpc3RbaV07XG5cdFx0XHRcdHZhciBub2RlID0gdGhpcy5ub2RlTWFwW2Z1bmN0aW9uTmFtZV07XG5cdFx0XHRcdGlmIChub2RlKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2gobm9kZS5nZXRGdW5jdGlvblByb3RvdHlwZVN0cmluZyhvcHQpKTtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLm5hdGl2ZUZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2godGhpcy5uYXRpdmVGdW5jdGlvbnNbZnVuY3Rpb25OYW1lXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFByb3RvdHlwZVN0cmluZ0Zyb21GdW5jdGlvbk5hbWVzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvdG90eXBlU3RyaW5nRnJvbUZ1bmN0aW9uTmFtZXMoZnVuY3Rpb25MaXN0LCBvcHQpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFByb3RvdHlwZXNGcm9tRnVuY3Rpb25OYW1lcyhmdW5jdGlvbkxpc3QsIG9wdCkudG9TdHJpbmcoKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0U3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0U3RyaW5nKGZ1bmN0aW9uTmFtZSwgb3B0KSB7XG5cdFx0XHRpZiAob3B0ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0b3B0ID0ge307XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmdW5jdGlvbk5hbWUpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0U3RyaW5nRnJvbUZ1bmN0aW9uTmFtZXModGhpcy50cmFjZUZ1bmN0aW9uQ2FsbHMoZnVuY3Rpb25OYW1lLCBbXSwgb3B0KS5yZXZlcnNlKCksIG9wdCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRTdHJpbmdGcm9tRnVuY3Rpb25OYW1lcyhPYmplY3Qua2V5cyh0aGlzLm5vZGVNYXApLCBvcHQpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3BvbHlmaWxsU3RhbmRhcmRGdW5jdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBwb2x5ZmlsbFN0YW5kYXJkRnVuY3Rpb25zKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdwb2x5ZmlsbFN0YW5kYXJkRnVuY3Rpb25zIG5vdCBkZWZpbmVkIG9uIGJhc2UgZnVuY3Rpb24gYnVpbGRlcicpO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBGdW5jdGlvbkJ1aWxkZXJCYXNlO1xufSgpO1xufSx7fV0sNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vY29yZS91dGlscycpO1xudmFyIGFjb3JuID0gcmVxdWlyZSgnYWNvcm4nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gQmFzZUZ1bmN0aW9uTm9kZShmdW5jdGlvbk5hbWUsIGpzRnVuY3Rpb24sIG9wdGlvbnMsIHBhcmFtVHlwZXMsIHJldHVyblR5cGUpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZUZ1bmN0aW9uTm9kZSk7XG5cblx0XHR0aGlzLmNhbGxlZEZ1bmN0aW9ucyA9IFtdO1xuXHRcdHRoaXMuY2FsbGVkRnVuY3Rpb25zQXJndW1lbnRzID0ge307XG5cdFx0dGhpcy5pbml0VmFyaWFibGVzID0gW107XG5cdFx0dGhpcy5yZWFkVmFyaWFibGVzID0gW107XG5cdFx0dGhpcy53cml0ZVZhcmlhYmxlcyA9IFtdO1xuXHRcdHRoaXMuYWRkRnVuY3Rpb24gPSBudWxsO1xuXHRcdHRoaXMuaXNSb290S2VybmVsID0gZmFsc2U7XG5cdFx0dGhpcy5pc1N1Yktlcm5lbCA9IGZhbHNlO1xuXHRcdHRoaXMucGFyZW50ID0gbnVsbDtcblx0XHR0aGlzLmRlYnVnID0gbnVsbDtcblx0XHR0aGlzLnByb3RvdHlwZU9ubHkgPSBudWxsO1xuXHRcdHRoaXMuY29uc3RhbnRzID0gbnVsbDtcblxuXHRcdGlmIChvcHRpb25zKSB7XG5cdFx0XHRpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZGVidWcnKSkge1xuXHRcdFx0XHR0aGlzLmRlYnVnID0gb3B0aW9ucy5kZWJ1Zztcblx0XHRcdH1cblx0XHRcdGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdwcm90b3R5cGVPbmx5JykpIHtcblx0XHRcdFx0dGhpcy5wcm90b3R5cGVPbmx5ID0gb3B0aW9ucy5wcm90b3R5cGVPbmx5O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2NvbnN0YW50cycpKSB7XG5cdFx0XHRcdHRoaXMuY29uc3RhbnRzID0gb3B0aW9ucy5jb25zdGFudHM7XG5cdFx0XHR9XG5cdFx0XHRpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbG9vcE1heEl0ZXJhdGlvbnMnKSkge1xuXHRcdFx0XHR0aGlzLmxvb3BNYXhJdGVyYXRpb25zID0gb3B0aW9ucy5sb29wTWF4SXRlcmF0aW9ucztcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIWpzRnVuY3Rpb24pIHtcblx0XHRcdHRocm93ICdqc0Z1bmN0aW9uLCBwYXJhbWV0ZXIgaXMgbWlzc2luZyc7XG5cdFx0fVxuXG5cdFx0dGhpcy5qc0Z1bmN0aW9uU3RyaW5nID0ganNGdW5jdGlvbi50b1N0cmluZygpO1xuXHRcdGlmICghdXRpbHMuaXNGdW5jdGlvblN0cmluZyh0aGlzLmpzRnVuY3Rpb25TdHJpbmcpKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdqc0Z1bmN0aW9uLCB0byBzdHJpbmcgY29udmVyc2lvbiBjaGVjayBmYWlsZWQ6IG5vdCBhIGZ1bmN0aW9uPycsIHRoaXMuanNGdW5jdGlvblN0cmluZyk7XG5cdFx0XHR0aHJvdyAnanNGdW5jdGlvbiwgdG8gc3RyaW5nIGNvbnZlcnNpb24gY2hlY2sgZmFpbGVkOiBub3QgYSBmdW5jdGlvbj8nO1xuXHRcdH1cblxuXHRcdGlmICghdXRpbHMuaXNGdW5jdGlvbihqc0Z1bmN0aW9uKSkge1xuXHRcdFx0dGhpcy5qc0Z1bmN0aW9uID0gbnVsbDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5qc0Z1bmN0aW9uID0ganNGdW5jdGlvbjtcblx0XHR9XG5cblx0XHR0aGlzLmZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTmFtZSB8fCBqc0Z1bmN0aW9uICYmIGpzRnVuY3Rpb24ubmFtZSB8fCB1dGlscy5nZXRGdW5jdGlvbk5hbWVGcm9tU3RyaW5nKHRoaXMuanNGdW5jdGlvblN0cmluZyk7XG5cblx0XHRpZiAoIXRoaXMuZnVuY3Rpb25OYW1lKSB7XG5cdFx0XHR0aHJvdyAnanNGdW5jdGlvbiwgbWlzc2luZyBuYW1lIGFyZ3VtZW50IG9yIHZhbHVlJztcblx0XHR9XG5cblx0XHR0aGlzLnBhcmFtTmFtZXMgPSB1dGlscy5nZXRQYXJhbU5hbWVzRnJvbVN0cmluZyh0aGlzLmpzRnVuY3Rpb25TdHJpbmcpO1xuXHRcdGlmIChwYXJhbVR5cGVzKSB7XG5cdFx0XHRpZiAoQXJyYXkuaXNBcnJheShwYXJhbVR5cGVzKSkge1xuXHRcdFx0XHRpZiAocGFyYW1UeXBlcy5sZW5ndGggIT09IHRoaXMucGFyYW1OYW1lcy5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aHJvdyAnSW52YWxpZCBhcmd1bWVudCB0eXBlIGFycmF5IGxlbmd0aCwgYWdhaW5zdCBmdW5jdGlvbiBsZW5ndGggLT4gKCcgKyBwYXJhbVR5cGVzLmxlbmd0aCArICcsJyArIHRoaXMucGFyYW1OYW1lcy5sZW5ndGggKyAnKSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5wYXJhbVR5cGVzID0gcGFyYW1UeXBlcztcblx0XHRcdH0gZWxzZSBpZiAoKHR5cGVvZiBwYXJhbVR5cGVzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXJhbVR5cGVzKSkgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdHZhciBwYXJhbVZhcmlhYmxlTmFtZXMgPSBPYmplY3Qua2V5cyhwYXJhbVR5cGVzKTtcblx0XHRcdFx0aWYgKHBhcmFtVHlwZXMuaGFzT3duUHJvcGVydHkoJ3JldHVybnMnKSkge1xuXHRcdFx0XHRcdHRoaXMucmV0dXJuVHlwZSA9IHBhcmFtVHlwZXMucmV0dXJucztcblx0XHRcdFx0XHRwYXJhbVZhcmlhYmxlTmFtZXMuc3BsaWNlKHBhcmFtVmFyaWFibGVOYW1lcy5pbmRleE9mKCdyZXR1cm5zJyksIDEpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChwYXJhbVZhcmlhYmxlTmFtZXMubGVuZ3RoID4gMCAmJiBwYXJhbVZhcmlhYmxlTmFtZXMubGVuZ3RoICE9PSB0aGlzLnBhcmFtTmFtZXMubGVuZ3RoKSB7XG5cdFx0XHRcdFx0dGhyb3cgJ0ludmFsaWQgYXJndW1lbnQgdHlwZSBhcnJheSBsZW5ndGgsIGFnYWluc3QgZnVuY3Rpb24gbGVuZ3RoIC0+ICgnICsgcGFyYW1WYXJpYWJsZU5hbWVzLmxlbmd0aCArICcsJyArIHRoaXMucGFyYW1OYW1lcy5sZW5ndGggKyAnKSc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5wYXJhbVR5cGVzID0gdGhpcy5wYXJhbU5hbWVzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdFx0XHRpZiAocGFyYW1UeXBlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBwYXJhbVR5cGVzW2tleV07XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJ2Zsb2F0Jztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBhcmFtVHlwZXMgPSBbXTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMucmV0dXJuVHlwZSkge1xuXHRcdFx0dGhpcy5yZXR1cm5UeXBlID0gcmV0dXJuVHlwZSB8fCAnZmxvYXQnO1xuXHRcdH1cblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhCYXNlRnVuY3Rpb25Ob2RlLCBbe1xuXHRcdGtleTogJ2lzSWRlbnRpZmllckNvbnN0YW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNJZGVudGlmaWVyQ29uc3RhbnQocGFyYW1OYW1lKSB7XG5cdFx0XHRpZiAoIXRoaXMuY29uc3RhbnRzKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRyZXR1cm4gdGhpcy5jb25zdGFudHMuaGFzT3duUHJvcGVydHkocGFyYW1OYW1lKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZXRBZGRGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEFkZEZ1bmN0aW9uKGZuKSB7XG5cdFx0XHR0aGlzLmFkZEZ1bmN0aW9uID0gZm47XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0SnNGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEpzRnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAodGhpcy5qc0Z1bmN0aW9uKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmpzRnVuY3Rpb247XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmpzRnVuY3Rpb25TdHJpbmcpIHtcblx0XHRcdFx0dGhpcy5qc0Z1bmN0aW9uID0gZXZhbCh0aGlzLmpzRnVuY3Rpb25TdHJpbmcpO1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5qc0Z1bmN0aW9uO1xuXHRcdFx0fVxuXG5cdFx0XHR0aHJvdyAnTWlzc2luZyBqc0Z1bmN0aW9uLCBhbmQganNGdW5jdGlvblN0cmluZyBwYXJhbWV0ZXInO1xuXHRcdH1cblxuXG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0SnNBU1QnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRKc0FTVChpblBhcnNlcikge1xuXHRcdFx0aWYgKHRoaXMuanNGdW5jdGlvbkFTVCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5qc0Z1bmN0aW9uQVNUO1xuXHRcdFx0fVxuXG5cdFx0XHRpblBhcnNlciA9IGluUGFyc2VyIHx8IGFjb3JuO1xuXHRcdFx0aWYgKGluUGFyc2VyID09PSBudWxsKSB7XG5cdFx0XHRcdHRocm93ICdNaXNzaW5nIEpTIHRvIEFTVCBwYXJzZXInO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYXN0ID0gaW5QYXJzZXIucGFyc2UoJ3ZhciAnICsgdGhpcy5mdW5jdGlvbk5hbWUgKyAnID0gJyArIHRoaXMuanNGdW5jdGlvblN0cmluZyArICc7Jywge1xuXHRcdFx0XHRsb2NhdGlvbnM6IHRydWVcblx0XHRcdH0pO1xuXHRcdFx0aWYgKGFzdCA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyAnRmFpbGVkIHRvIHBhcnNlIEpTIGNvZGUnO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZnVuY0FTVCA9IGFzdC5ib2R5WzBdLmRlY2xhcmF0aW9uc1swXS5pbml0O1xuXHRcdFx0dGhpcy5qc0Z1bmN0aW9uQVNUID0gZnVuY0FTVDtcblxuXHRcdFx0cmV0dXJuIGZ1bmNBU1Q7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldEZ1bmN0aW9uU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0RnVuY3Rpb25TdHJpbmcoKSB7XG5cdFx0XHR0aGlzLmdlbmVyYXRlKCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5mdW5jdGlvblN0cmluZztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0RnVuY3Rpb25TdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRGdW5jdGlvblN0cmluZyhmdW5jdGlvblN0cmluZykge1xuXHRcdFx0dGhpcy5mdW5jdGlvblN0cmluZyA9IGZ1bmN0aW9uU3RyaW5nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRQYXJhbVR5cGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRQYXJhbVR5cGUocGFyYW1OYW1lKSB7XG5cdFx0XHR2YXIgcGFyYW1JbmRleCA9IHRoaXMucGFyYW1OYW1lcy5pbmRleE9mKHBhcmFtTmFtZSk7XG5cdFx0XHRpZiAocGFyYW1JbmRleCA9PT0gLTEpIHJldHVybiBudWxsO1xuXHRcdFx0aWYgKCF0aGlzLnBhcmVudCkgcmV0dXJuIG51bGw7XG5cdFx0XHRpZiAodGhpcy5wYXJhbVR5cGVzW3BhcmFtSW5kZXhdKSByZXR1cm4gdGhpcy5wYXJhbVR5cGVzW3BhcmFtSW5kZXhdO1xuXHRcdFx0dmFyIGNhbGxlZEZ1bmN0aW9uQXJndW1lbnRzID0gdGhpcy5wYXJlbnQuY2FsbGVkRnVuY3Rpb25zQXJndW1lbnRzW3RoaXMuZnVuY3Rpb25OYW1lXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGVkRnVuY3Rpb25Bcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGNhbGxlZEZ1bmN0aW9uQXJndW1lbnQgPSBjYWxsZWRGdW5jdGlvbkFyZ3VtZW50c1tpXTtcblx0XHRcdFx0aWYgKGNhbGxlZEZ1bmN0aW9uQXJndW1lbnRbcGFyYW1JbmRleF0gIT09IG51bGwpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5wYXJhbVR5cGVzW3BhcmFtSW5kZXhdID0gY2FsbGVkRnVuY3Rpb25Bcmd1bWVudFtwYXJhbUluZGV4XS50eXBlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0VXNlclBhcmFtTmFtZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFVzZXJQYXJhbU5hbWUocGFyYW1OYW1lKSB7XG5cdFx0XHR2YXIgcGFyYW1JbmRleCA9IHRoaXMucGFyYW1OYW1lcy5pbmRleE9mKHBhcmFtTmFtZSk7XG5cdFx0XHRpZiAocGFyYW1JbmRleCA9PT0gLTEpIHJldHVybiBudWxsO1xuXHRcdFx0aWYgKCF0aGlzLnBhcmVudCkgcmV0dXJuIG51bGw7XG5cdFx0XHR2YXIgY2FsbGVkRnVuY3Rpb25Bcmd1bWVudHMgPSB0aGlzLnBhcmVudC5jYWxsZWRGdW5jdGlvbnNBcmd1bWVudHNbdGhpcy5mdW5jdGlvbk5hbWVdO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsZWRGdW5jdGlvbkFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgY2FsbGVkRnVuY3Rpb25Bcmd1bWVudCA9IGNhbGxlZEZ1bmN0aW9uQXJndW1lbnRzW2ldO1xuXHRcdFx0XHRpZiAoY2FsbGVkRnVuY3Rpb25Bcmd1bWVudFtwYXJhbUluZGV4XSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBjYWxsZWRGdW5jdGlvbkFyZ3VtZW50W3BhcmFtSW5kZXhdLm5hbWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2dlbmVyYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUob3B0aW9ucykge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdnZW5lcmF0ZSBub3QgZGVmaW5lZCBvbiBCYXNlRnVuY3Rpb25Ob2RlJyk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEVycm9yT3V0cHV0Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RXJyb3JPdXRwdXQoZXJyb3IsIGFzdCwgZnVuY1BhcmFtKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKHV0aWxzLmdldEFzdFN0cmluZyh0aGlzLmpzRnVuY3Rpb25TdHJpbmcsIGFzdCkpO1xuXHRcdFx0Y29uc29sZS5lcnJvcihlcnJvciwgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0dXJuIGVycm9yO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBCYXNlRnVuY3Rpb25Ob2RlO1xufSgpO1xufSx7XCIuLi9jb3JlL3V0aWxzXCI6MjQsXCJhY29yblwiOjI2fV0sODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gQmFzZUtlcm5lbChmblN0cmluZywgc2V0dGluZ3MpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZUtlcm5lbCk7XG5cblx0XHR0aGlzLnBhcmFtTmFtZXMgPSB1dGlscy5nZXRQYXJhbU5hbWVzRnJvbVN0cmluZyhmblN0cmluZyk7XG5cdFx0dGhpcy5mblN0cmluZyA9IGZuU3RyaW5nO1xuXHRcdHRoaXMub3V0cHV0ID0gbnVsbDtcblx0XHR0aGlzLmRlYnVnID0gZmFsc2U7XG5cdFx0dGhpcy5ncmFwaGljYWwgPSBmYWxzZTtcblx0XHR0aGlzLmxvb3BNYXhJdGVyYXRpb25zID0gMDtcblx0XHR0aGlzLmNvbnN0YW50cyA9IG51bGw7XG5cdFx0dGhpcy53cmFwYXJvdW5kID0gbnVsbDtcblx0XHR0aGlzLmhhcmRjb2RlQ29uc3RhbnRzID0gbnVsbDtcblx0XHR0aGlzLm91dHB1dFRvVGV4dHVyZSA9IG51bGw7XG5cdFx0dGhpcy50ZXhTaXplID0gbnVsbDtcblx0XHR0aGlzLl9jYW52YXMgPSBudWxsO1xuXHRcdHRoaXMuX3dlYkdsID0gbnVsbDtcblx0XHR0aGlzLnRocmVhZERpbSA9IG51bGw7XG5cdFx0dGhpcy5mbG9hdFRleHR1cmVzID0gbnVsbDtcblx0XHR0aGlzLmZsb2F0T3V0cHV0ID0gbnVsbDtcblx0XHR0aGlzLmZsb2F0T3V0cHV0Rm9yY2UgPSBudWxsO1xuXHRcdHRoaXMuYWRkRnVuY3Rpb24gPSBudWxsO1xuXHRcdHRoaXMuZnVuY3Rpb25zID0gbnVsbDtcblx0XHR0aGlzLm5hdGl2ZUZ1bmN0aW9ucyA9IG51bGw7XG5cdFx0dGhpcy5jb3B5RGF0YSA9IHRydWU7XG5cdFx0dGhpcy5zdWJLZXJuZWxzID0gbnVsbDtcblx0XHR0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMgPSBudWxsO1xuXHRcdHRoaXMuc3ViS2VybmVsTmFtZXMgPSBudWxsO1xuXHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9IG51bGw7XG5cdFx0dGhpcy5mdW5jdGlvbkJ1aWxkZXIgPSBudWxsO1xuXG5cdFx0Zm9yICh2YXIgcCBpbiBzZXR0aW5ncykge1xuXHRcdFx0aWYgKCFzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eShwKSB8fCAhdGhpcy5oYXNPd25Qcm9wZXJ0eShwKSkgY29udGludWU7XG5cdFx0XHR0aGlzW3BdID0gc2V0dGluZ3NbcF07XG5cdFx0fVxuXHRcdGlmIChzZXR0aW5ncy5oYXNPd25Qcm9wZXJ0eSgnY2FudmFzJykpIHtcblx0XHRcdHRoaXMuX2NhbnZhcyA9IHNldHRpbmdzLmNhbnZhcztcblx0XHR9XG5cdFx0aWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KCdvdXRwdXQnKSkge1xuXHRcdFx0dGhpcy5zZXRPdXRwdXQoc2V0dGluZ3Mub3V0cHV0KTtcblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuX2NhbnZhcykgdGhpcy5fY2FudmFzID0gdXRpbHMuaW5pdENhbnZhcygpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKEJhc2VLZXJuZWwsIFt7XG5cdFx0a2V5OiAnYnVpbGQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBidWlsZCgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignXCJidWlsZFwiIG5vdCBkZWZpbmVkIG9uIEJhc2UnKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZXRBZGRGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEFkZEZ1bmN0aW9uKGNiKSB7XG5cdFx0XHR0aGlzLmFkZEZ1bmN0aW9uID0gY2I7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZXRGdW5jdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRGdW5jdGlvbnMoZnVuY3Rpb25zKSB7XG5cdFx0XHR0aGlzLmZ1bmN0aW9ucyA9IGZ1bmN0aW9ucztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRPdXRwdXQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRPdXRwdXQob3V0cHV0KSB7XG5cdFx0XHRpZiAob3V0cHV0Lmhhc093blByb3BlcnR5KCd4JykpIHtcblx0XHRcdFx0aWYgKG91dHB1dC5oYXNPd25Qcm9wZXJ0eSgneScpKSB7XG5cdFx0XHRcdFx0aWYgKG91dHB1dC5oYXNPd25Qcm9wZXJ0eSgneicpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLm91dHB1dCA9IFtvdXRwdXQueCwgb3V0cHV0LnksIG91dHB1dC56XTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5vdXRwdXQgPSBbb3V0cHV0LngsIG91dHB1dC55XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5vdXRwdXQgPSBbb3V0cHV0LnhdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLm91dHB1dCA9IG91dHB1dDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXREZWJ1ZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldERlYnVnKGZsYWcpIHtcblx0XHRcdHRoaXMuZGVidWcgPSBmbGFnO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3NldEdyYXBoaWNhbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEdyYXBoaWNhbChmbGFnKSB7XG5cdFx0XHR0aGlzLmdyYXBoaWNhbCA9IGZsYWc7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0TG9vcE1heEl0ZXJhdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRMb29wTWF4SXRlcmF0aW9ucyhtYXgpIHtcblx0XHRcdHRoaXMubG9vcE1heEl0ZXJhdGlvbnMgPSBtYXg7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0Q29uc3RhbnRzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0Q29uc3RhbnRzKGNvbnN0YW50cykge1xuXHRcdFx0dGhpcy5jb25zdGFudHMgPSBjb25zdGFudHM7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZXRXcmFwYXJvdW5kJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0V3JhcGFyb3VuZChmbGFnKSB7XG5cdFx0XHRjb25zb2xlLndhcm4oJ1dyYXBhcm91bmQgbW9kZSBpcyBub3Qgc3VwcG9ydGVkIGFuZCB1bmRvY3VtZW50ZWQuJyk7XG5cdFx0XHR0aGlzLndyYXBhcm91bmQgPSBmbGFnO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0SGFyZGNvZGVDb25zdGFudHMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRIYXJkY29kZUNvbnN0YW50cyhmbGFnKSB7XG5cdFx0XHR0aGlzLmhhcmRjb2RlQ29uc3RhbnRzID0gZmxhZztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3NldE91dHB1dFRvVGV4dHVyZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldE91dHB1dFRvVGV4dHVyZShmbGFnKSB7XG5cdFx0XHR0aGlzLm91dHB1dFRvVGV4dHVyZSA9IGZsYWc7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0RmxvYXRUZXh0dXJlcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEZsb2F0VGV4dHVyZXMoZmxhZykge1xuXHRcdFx0dGhpcy5mbG9hdFRleHR1cmVzID0gZmxhZztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRGbG9hdE91dHB1dCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEZsb2F0T3V0cHV0KGZsYWcpIHtcblx0XHRcdHRoaXMuZmxvYXRPdXRwdXQgPSBmbGFnO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0RmxvYXRPdXRwdXRGb3JjZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEZsb2F0T3V0cHV0Rm9yY2UoZmxhZykge1xuXHRcdFx0dGhpcy5mbG9hdE91dHB1dEZvcmNlID0gZmxhZztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRDYW52YXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRDYW52YXMoY2FudmFzKSB7XG5cdFx0XHR0aGlzLl9jYW52YXMgPSBjYW52YXM7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0V2ViR2wnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRXZWJHbCh3ZWJHbCkge1xuXHRcdFx0dGhpcy5fd2ViR2wgPSB3ZWJHbDtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3NldENvcHlEYXRhJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0Q29weURhdGEoY29weURhdGEpIHtcblx0XHRcdHRoaXMuY29weURhdGEgPSBjb3B5RGF0YTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRDYW52YXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRDYW52YXMoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fY2FudmFzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRXZWJHbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFdlYkdsKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3dlYkdsO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3ZhbGlkYXRlT3B0aW9ucycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucygpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcigndmFsaWRhdGVPcHRpb25zIG5vdCBkZWZpbmVkJyk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZXhlYycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGV4ZWMoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5leGVjdXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZXhlY3V0ZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG5cdFx0XHR2YXIgX3RoaXMgPSB0aGlzO1xuXG5cdFx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBbYXJndW1lbnRzWzBdXSA6IEFycmF5LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cblx0XHRcdHJldHVybiB1dGlscy5uZXdQcm9taXNlKGZ1bmN0aW9uIChhY2NlcHQsIHJlamVjdCkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGFjY2VwdChfdGhpcy5ydW4uYXBwbHkoX3RoaXMsIGFyZ3MpKTtcblx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdHJlamVjdChlKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZFN1Yktlcm5lbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZFN1Yktlcm5lbChmblN0cmluZykge1xuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVscyA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbHMgPSBbXTtcblx0XHRcdFx0dGhpcy5zdWJLZXJuZWxOYW1lcyA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5zdWJLZXJuZWxzLnB1c2goZm5TdHJpbmcpO1xuXHRcdFx0dGhpcy5zdWJLZXJuZWxOYW1lcy5wdXNoKHV0aWxzLmdldEZ1bmN0aW9uTmFtZUZyb21TdHJpbmcoZm5TdHJpbmcpKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhZGRTdWJLZXJuZWxQcm9wZXJ0eScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZFN1Yktlcm5lbFByb3BlcnR5KHByb3BlcnR5LCBmblN0cmluZykge1xuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVsUHJvcGVydGllcyA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMgPSB7fTtcblx0XHRcdFx0dGhpcy5zdWJLZXJuZWxOYW1lcyA9IFtdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVsUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdjYW5ub3QgYWRkIHN1YiBrZXJuZWwgJyArIHByb3BlcnR5ICsgJywgYWxyZWFkeSBkZWZpbmVkJyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXNbcHJvcGVydHldID0gZm5TdHJpbmc7XG5cdFx0XHR0aGlzLnN1Yktlcm5lbE5hbWVzLnB1c2godXRpbHMuZ2V0RnVuY3Rpb25OYW1lRnJvbVN0cmluZyhmblN0cmluZykpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYWRkTmF0aXZlRnVuY3Rpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhZGROYXRpdmVGdW5jdGlvbihuYW1lLCBzb3VyY2UpIHtcblx0XHRcdHRoaXMuZnVuY3Rpb25CdWlsZGVyLmFkZE5hdGl2ZUZ1bmN0aW9uKG5hbWUsIHNvdXJjZSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEJhc2VLZXJuZWw7XG59KCk7XG59LHtcIi4uL2NvcmUvdXRpbHNcIjoyNH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9jb3JlL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ga2VybmVsUnVuU2hvcnRjdXQoa2VybmVsKSB7XG5cdHZhciBzaG9ydGN1dCA9IGZ1bmN0aW9uIHNob3J0Y3V0KCkge1xuXHRcdHJldHVybiBrZXJuZWwucnVuLmFwcGx5KGtlcm5lbCwgYXJndW1lbnRzKTtcblx0fTtcblxuXHR1dGlscy5hbGxQcm9wZXJ0aWVzT2Yoa2VybmVsKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRpZiAoa2V5WzBdID09PSAnXycgJiYga2V5WzFdID09PSAnXycpIHJldHVybjtcblx0XHRpZiAodHlwZW9mIGtlcm5lbFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRpZiAoa2V5LnN1YnN0cmluZygwLCAzKSA9PT0gJ2FkZCcgfHwga2V5LnN1YnN0cmluZygwLCAzKSA9PT0gJ3NldCcpIHtcblx0XHRcdFx0c2hvcnRjdXRba2V5XSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRrZXJuZWxba2V5XS5hcHBseShrZXJuZWwsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdFx0cmV0dXJuIHNob3J0Y3V0O1xuXHRcdFx0XHR9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2hvcnRjdXRba2V5XSA9IGtlcm5lbFtrZXldLmJpbmQoa2VybmVsKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c2hvcnRjdXQuX19kZWZpbmVHZXR0ZXJfXyhrZXksIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIGtlcm5lbFtrZXldO1xuXHRcdFx0fSk7XG5cdFx0XHRzaG9ydGN1dC5fX2RlZmluZVNldHRlcl9fKGtleSwgZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0XHRcdGtlcm5lbFtrZXldID0gdmFsdWU7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH0pO1xuXG5cdHNob3J0Y3V0Lmtlcm5lbCA9IGtlcm5lbDtcblxuXHRyZXR1cm4gc2hvcnRjdXQ7XG59O1xufSx7XCIuLi9jb3JlL3V0aWxzXCI6MjR9XSwxMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbHMnKTtcbnZhciBrZXJuZWxSdW5TaG9ydGN1dCA9IHJlcXVpcmUoJy4va2VybmVsLXJ1bi1zaG9ydGN1dCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuXG5cdGZ1bmN0aW9uIEJhc2VSdW5uZXIoZnVuY3Rpb25CdWlsZGVyLCBzZXR0aW5ncykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlUnVubmVyKTtcblxuXHRcdHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG5cdFx0dGhpcy5rZXJuZWwgPSBzZXR0aW5ncy5rZXJuZWw7XG5cdFx0dGhpcy5jYW52YXMgPSBzZXR0aW5ncy5jYW52YXM7XG5cdFx0dGhpcy53ZWJHbCA9IHNldHRpbmdzLndlYkdsO1xuXHRcdHRoaXMuZm4gPSBudWxsO1xuXHRcdHRoaXMuZnVuY3Rpb25CdWlsZGVyID0gZnVuY3Rpb25CdWlsZGVyO1xuXHRcdHRoaXMuZm5TdHJpbmcgPSBudWxsO1xuXHRcdHRoaXMuZW5kaWFubmVzcyA9IHV0aWxzLnN5c3RlbUVuZGlhbm5lc3MoKTtcblx0XHR0aGlzLmZ1bmN0aW9uQnVpbGRlci5wb2x5ZmlsbFN0YW5kYXJkRnVuY3Rpb25zKCk7XG5cdH1cblxuXG5cblx0X2NyZWF0ZUNsYXNzKEJhc2VSdW5uZXIsIFt7XG5cdFx0a2V5OiAndGV4dHVyZVRvQXJyYXknLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiB0ZXh0dXJlVG9BcnJheSh0ZXh0dXJlKSB7XG5cdFx0XHR2YXIgY29weSA9IHRoaXMuY3JlYXRlS2VybmVsKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRcdHJldHVybiB4W3RoaXMudGhyZWFkLnpdW3RoaXMudGhyZWFkLnldW3RoaXMudGhyZWFkLnhdO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBjb3B5KHRleHR1cmUpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdkZWxldGVUZXh0dXJlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKSB7XG5cdFx0XHR0aGlzLndlYkdsLmRlbGV0ZVRleHR1cmUodGV4dHVyZS50ZXh0dXJlKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYnVpbGRQcm9taXNlS2VybmVsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYnVpbGRQcm9taXNlS2VybmVsKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdub3QgeWV0IGltcGxlbWVudGVkJyk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0TW9kZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldE1vZGUoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wibW9kZVwiIG5vdCBpbXBsZW1lbnRlZCBvbiBCYXNlUnVubmVyJyk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2J1aWxkS2VybmVsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYnVpbGRLZXJuZWwoZm4sIHNldHRpbmdzKSB7XG5cdFx0XHRzZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIHNldHRpbmdzIHx8IHt9KTtcblx0XHRcdHZhciBmblN0cmluZyA9IGZuLnRvU3RyaW5nKCk7XG5cdFx0XHRpZiAoIXNldHRpbmdzLmZ1bmN0aW9uQnVpbGRlcikge1xuXHRcdFx0XHRzZXR0aW5ncy5mdW5jdGlvbkJ1aWxkZXIgPSB0aGlzLmZ1bmN0aW9uQnVpbGRlcjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFzZXR0aW5ncy5jYW52YXMpIHtcblx0XHRcdFx0c2V0dGluZ3MuY2FudmFzID0gdGhpcy5jYW52YXM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghc2V0dGluZ3Mud2ViR2wpIHtcblx0XHRcdFx0c2V0dGluZ3Mud2ViR2wgPSB0aGlzLndlYmdsO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ga2VybmVsUnVuU2hvcnRjdXQobmV3IHRoaXMuS2VybmVsKGZuU3RyaW5nLCBzZXR0aW5ncykpO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBCYXNlUnVubmVyO1xufSgpO1xufSx7XCIuLi9jb3JlL3V0aWxzXCI6MjQsXCIuL2tlcm5lbC1ydW4tc2hvcnRjdXRcIjo5fV0sMTE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBGdW5jdGlvbkJ1aWxkZXJCYXNlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb24tYnVpbGRlci1iYXNlJyk7XG52YXIgV2ViR0xGdW5jdGlvbk5vZGUgPSByZXF1aXJlKCcuL2Z1bmN0aW9uLW5vZGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX0Z1bmN0aW9uQnVpbGRlckJhc2UpIHtcblx0X2luaGVyaXRzKFdlYkdMRnVuY3Rpb25CdWlsZGVyLCBfRnVuY3Rpb25CdWlsZGVyQmFzZSk7XG5cblx0ZnVuY3Rpb24gV2ViR0xGdW5jdGlvbkJ1aWxkZXIoKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYkdMRnVuY3Rpb25CdWlsZGVyKTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChXZWJHTEZ1bmN0aW9uQnVpbGRlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFdlYkdMRnVuY3Rpb25CdWlsZGVyKSkuY2FsbCh0aGlzKSk7XG5cblx0XHRfdGhpcy5Ob2RlID0gV2ViR0xGdW5jdGlvbk5vZGU7XG5cdFx0cmV0dXJuIF90aGlzO1xuXHR9XG5cblxuXG5cblx0X2NyZWF0ZUNsYXNzKFdlYkdMRnVuY3Rpb25CdWlsZGVyLCBbe1xuXHRcdGtleTogJ3BvbHlmaWxsU3RhbmRhcmRGdW5jdGlvbnMnLFxuXG5cblx0XHR2YWx1ZTogZnVuY3Rpb24gcG9seWZpbGxTdGFuZGFyZEZ1bmN0aW9ucygpIHtcblx0XHRcdHRoaXMuYWRkRnVuY3Rpb24oJ3JvdW5kJywgX3JvdW5kKTtcblx0XHR9XG5cdH1dLCBbe1xuXHRcdGtleTogJ3JvdW5kJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcm91bmQoYSkge1xuXHRcdFx0cmV0dXJuIF9yb3VuZChhKTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gV2ViR0xGdW5jdGlvbkJ1aWxkZXI7XG59KEZ1bmN0aW9uQnVpbGRlckJhc2UpO1xuXG5mdW5jdGlvbiBfcm91bmQoYSkge1xuXHRyZXR1cm4gTWF0aC5mbG9vcihhICsgMC41KTtcbn1cbn0se1wiLi4vZnVuY3Rpb24tYnVpbGRlci1iYXNlXCI6NixcIi4vZnVuY3Rpb24tbm9kZVwiOjEyfV0sMTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBGdW5jdGlvbk5vZGVCYXNlID0gcmVxdWlyZSgnLi4vZnVuY3Rpb24tbm9kZS1iYXNlJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9jb3JlL3V0aWxzJyk7XG52YXIganNNYXRoUHJlZml4ID0gJ01hdGguJztcbnZhciBsb2NhbFByZWZpeCA9ICd0aGlzLic7XG52YXIgY29uc3RhbnRzUHJlZml4ID0gJ3RoaXMuY29uc3RhbnRzLic7XG5cbnZhciBERUNPREUzMl9FTkNPREUzMiA9IC9kZWNvZGUzMlxcKFxccytlbmNvZGUzMlxcKC9nO1xudmFyIEVOQ09ERTMyX0RFQ09ERTMyID0gL2VuY29kZTMyXFwoXFxzK2RlY29kZTMyXFwoL2c7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9GdW5jdGlvbk5vZGVCYXNlKSB7XG5cdF9pbmhlcml0cyhXZWJHTEZ1bmN0aW9uTm9kZSwgX0Z1bmN0aW9uTm9kZUJhc2UpO1xuXG5cdGZ1bmN0aW9uIFdlYkdMRnVuY3Rpb25Ob2RlKCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJHTEZ1bmN0aW9uTm9kZSk7XG5cblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdlYkdMRnVuY3Rpb25Ob2RlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoV2ViR0xGdW5jdGlvbk5vZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhXZWJHTEZ1bmN0aW9uTm9kZSwgW3tcblx0XHRrZXk6ICdnZW5lcmF0ZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdlbmVyYXRlKCkge1xuXHRcdFx0aWYgKHRoaXMuZGVidWcpIHtcblx0XHRcdFx0Y29uc29sZS5sb2codGhpcyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5wcm90b3R5cGVPbmx5KSB7XG5cdFx0XHRcdHJldHVybiBXZWJHTEZ1bmN0aW9uTm9kZS5hc3RGdW5jdGlvblByb3RvdHlwZSh0aGlzLmdldEpzQVNUKCksIFtdLCB0aGlzKS5qb2luKCcnKS50cmltKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmZ1bmN0aW9uU3RyaW5nQXJyYXkgPSB0aGlzLmFzdEdlbmVyaWModGhpcy5nZXRKc0FTVCgpLCBbXSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmZ1bmN0aW9uU3RyaW5nID0gd2ViR2xSZWdleE9wdGltaXplKHRoaXMuZnVuY3Rpb25TdHJpbmdBcnJheS5qb2luKCcnKS50cmltKCkpO1xuXHRcdFx0cmV0dXJuIHRoaXMuZnVuY3Rpb25TdHJpbmc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEdlbmVyaWMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RHZW5lcmljKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChhc3QgPT09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnTlVMTCBhc3QnLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShhc3QpKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3RbaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN3aXRjaCAoYXN0LnR5cGUpIHtcblx0XHRcdFx0XHRjYXNlICdGdW5jdGlvbkRlY2xhcmF0aW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEZ1bmN0aW9uRGVjbGFyYXRpb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEZ1bmN0aW9uRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdSZXR1cm5TdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0UmV0dXJuU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0xpdGVyYWwnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0TGl0ZXJhbChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdCaW5hcnlFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEJpbmFyeUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnSWRlbnRpZmllcic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RJZGVudGlmaWVyRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdBc3NpZ25tZW50RXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RBc3NpZ25tZW50RXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdFeHByZXNzaW9uU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEV4cHJlc3Npb25TdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnRW1wdHlTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0RW1wdHlTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQmxvY2tTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QmxvY2tTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnSWZTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0SWZTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQnJlYWtTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QnJlYWtTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQ29udGludWVTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0Q29udGludWVTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnRm9yU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEZvclN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdXaGlsZVN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RXaGlsZVN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdWYXJpYWJsZURlY2xhcmF0aW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFZhcmlhYmxlRGVjbGFyYXRpb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnVmFyaWFibGVEZWNsYXJhdG9yJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFZhcmlhYmxlRGVjbGFyYXRvcihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdUaGlzRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RUaGlzRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0U2VxdWVuY2VFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RVbmFyeUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RVcGRhdGVFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0xvZ2ljYWxFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdExvZ2ljYWxFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0TWVtYmVyRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdDYWxsRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RDYWxsRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QXJyYXlFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnVW5rbm93biBhc3QgdHlwZSA6ICcgKyBhc3QudHlwZSwgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RGdW5jdGlvbkRlY2xhcmF0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RnVuY3Rpb25EZWNsYXJhdGlvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAodGhpcy5hZGRGdW5jdGlvbikge1xuXHRcdFx0XHR0aGlzLmFkZEZ1bmN0aW9uKG51bGwsIHV0aWxzLmdldEFzdFN0cmluZyh0aGlzLmpzRnVuY3Rpb25TdHJpbmcsIGFzdCkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0RnVuY3Rpb25FeHByZXNzaW9uJyxcblxuXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEZ1bmN0aW9uRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cblx0XHRcdGlmIChmdW5jUGFyYW0uaXNSb290S2VybmVsKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCd2b2lkJyk7XG5cdFx0XHRcdGZ1bmNQYXJhbS5rZXJuYWxBc3QgPSBhc3Q7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0ucmV0dXJuVHlwZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXRBcnIucHVzaCgnICcpO1xuXHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXG5cdFx0XHRpZiAoIWZ1bmNQYXJhbS5pc1Jvb3RLZXJuZWwpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jUGFyYW0ucGFyYW1OYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdHZhciBwYXJhbU5hbWUgPSBmdW5jUGFyYW0ucGFyYW1OYW1lc1tpXTtcblxuXHRcdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJywgJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZhciB0eXBlID0gZnVuY1BhcmFtLmdldFBhcmFtVHlwZShwYXJhbU5hbWUpO1xuXHRcdFx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRcdFx0Y2FzZSAnVGV4dHVyZSc6XG5cdFx0XHRcdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdzYW1wbGVyMkQnKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnZmxvYXQnKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnICcpO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1c2VyXycpO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKHBhcmFtTmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0QXJyLnB1c2goJykge1xcbicpO1xuXG5cdFx0XHRmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXN0LmJvZHkuYm9keS5sZW5ndGg7ICsrX2kpIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5ib2R5LmJvZHlbX2ldLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdcXG4nKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFJldHVyblN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFJldHVyblN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoZnVuY1BhcmFtLmlzUm9vdEtlcm5lbCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgna2VybmVsUmVzdWx0ID0gJyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ3JldHVybjsnKTtcblx0XHRcdH0gZWxzZSBpZiAoZnVuY1BhcmFtLmlzU3ViS2VybmVsKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKGZ1bmNQYXJhbS5mdW5jdGlvbk5hbWUgKyAnUmVzdWx0ID0gJyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ3JldHVybiAnICsgZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSArICdSZXN1bHQ7Jyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgncmV0dXJuICcpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHR9XG5cblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0TGl0ZXJhbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdExpdGVyYWwoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXG5cdFx0XHRpZiAoaXNOYU4oYXN0LnZhbHVlKSkge1xuXHRcdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdOb24tbnVtZXJpYyBsaXRlcmFsIG5vdCBzdXBwb3J0ZWQgOiAnICsgYXN0LnZhbHVlLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldEFyci5wdXNoKGFzdC52YWx1ZSk7XG5cblx0XHRcdGlmIChOdW1iZXIuaXNJbnRlZ2VyKGFzdC52YWx1ZSkpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJy4wJyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEJpbmFyeUV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RCaW5hcnlFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cblx0XHRcdGlmIChhc3Qub3BlcmF0b3IgPT09ICclJykge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnbW9kKCcpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LmxlZnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJywnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXHRcdFx0fSBlbHNlIGlmIChhc3Qub3BlcmF0b3IgPT09ICc9PT0nKSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnPT0nKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fSBlbHNlIGlmIChhc3Qub3BlcmF0b3IgPT09ICchPT0nKSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnIT0nKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKGFzdC5vcGVyYXRvcik7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QucmlnaHQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0SWRlbnRpZmllckV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RJZGVudGlmaWVyRXhwcmVzc2lvbihpZHROb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGlkdE5vZGUudHlwZSAhPT0gJ0lkZW50aWZpZXInKSB7XG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ0lkZW50aWZpZXJFeHByZXNzaW9uIC0gbm90IGFuIElkZW50aWZpZXInLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cblx0XHRcdHN3aXRjaCAoaWR0Tm9kZS5uYW1lKSB7XG5cdFx0XHRcdGNhc2UgJ2dwdV90aHJlYWRYJzpcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndGhyZWFkSWQueCcpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHVfdGhyZWFkWSc6XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3RocmVhZElkLnknKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X3RocmVhZFonOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd0aHJlYWRJZC56Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dwdV9vdXRwdXRYJzpcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndU91dHB1dERpbS54Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dwdV9vdXRwdXRZJzpcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndU91dHB1dERpbS55Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dwdV9vdXRwdXRaJzpcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndU91dHB1dERpbS56Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0aWYgKHRoaXMuY29uc3RhbnRzICYmIHRoaXMuY29uc3RhbnRzLmhhc093blByb3BlcnR5KGlkdE5vZGUubmFtZSkpIHtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdjb25zdGFudHNfJyArIGlkdE5vZGUubmFtZSk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHZhciB1c2VyUGFyYW1OYW1lID0gZnVuY1BhcmFtLmdldFVzZXJQYXJhbU5hbWUoaWR0Tm9kZS5uYW1lKTtcblx0XHRcdFx0XHRcdGlmICh1c2VyUGFyYW1OYW1lICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCd1c2VyXycgKyB1c2VyUGFyYW1OYW1lKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCd1c2VyXycgKyBpZHROb2RlLm5hbWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0Rm9yU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0Rm9yU3RhdGVtZW50KGZvck5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoZm9yTm9kZS50eXBlICE9PSAnRm9yU3RhdGVtZW50Jykge1xuXHRcdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdJbnZhbGlkIGZvciBzdGF0bWVudCcsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZvck5vZGUudGVzdCAmJiBmb3JOb2RlLnRlc3QudHlwZSA9PT0gJ0JpbmFyeUV4cHJlc3Npb24nKSB7XG5cdFx0XHRcdGlmIChmb3JOb2RlLnRlc3QucmlnaHQudHlwZSA9PT0gJ0lkZW50aWZpZXInICYmIGZvck5vZGUudGVzdC5vcGVyYXRvciA9PT0gJzwnICYmIHRoaXMuaXNJZGVudGlmaWVyQ29uc3RhbnQoZm9yTm9kZS50ZXN0LnJpZ2h0Lm5hbWUpID09PSBmYWxzZSkge1xuXG5cdFx0XHRcdFx0aWYgKCF0aGlzLmxvb3BNYXhJdGVyYXRpb25zKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ1dhcm5pbmc6IGxvb3BNYXhJdGVyYXRpb25zIGlzIG5vdCBzZXQhIFVzaW5nIGRlZmF1bHQgb2YgMTAwMCB3aGljaCBtYXkgcmVzdWx0IGluIHVuaW50ZW5kZWQgYmVoYXZpb3IuJyk7XG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ1NldCBsb29wTWF4SXRlcmF0aW9ucyBvciB1c2UgYSBmb3IgbG9vcCBvZiBmaXhlZCBsZW5ndGggdG8gc2lsZW5jZSB0aGlzIG1lc3NhZ2UuJyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2ZvciAoJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuaW5pdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnRlc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKGZvck5vZGUudGVzdC5vcGVyYXRvcik7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ0xPT1BfTUFYJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS51cGRhdGUsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3tcXG4nKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnaWYgKCcpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnRlc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKGZvck5vZGUudGVzdC5vcGVyYXRvcik7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdC5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcpIHtcXG4nKTtcblx0XHRcdFx0XHRpZiAoZm9yTm9kZS5ib2R5LnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpIHtcblx0XHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZm9yTm9kZS5ib2R5LmJvZHkubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuYm9keS5ib2R5W2ldLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLmJvZHksIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ30gZWxzZSB7XFxuJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2JyZWFrO1xcbicpO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblxuXHRcdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGRlY2xhcmF0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZm9yTm9kZS5pbml0LmRlY2xhcmF0aW9ucykpO1xuXHRcdFx0XHRcdHZhciB1cGRhdGVBcmd1bWVudCA9IGZvck5vZGUudXBkYXRlLmFyZ3VtZW50O1xuXHRcdFx0XHRcdGlmICghQXJyYXkuaXNBcnJheShkZWNsYXJhdGlvbnMpIHx8IGRlY2xhcmF0aW9ucy5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyh0aGlzLmpzRnVuY3Rpb25TdHJpbmcpO1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFcnJvcjogSW5jb21wYXRpYmxlIGZvciBsb29wIGRlY2xhcmF0aW9uJyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0XHR2YXIgaW5pdEFyZ3VtZW50ID0gbnVsbDtcblx0XHRcdFx0XHRcdGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGRlY2xhcmF0aW9ucy5sZW5ndGg7IF9pMisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9uc1tfaTJdO1xuXHRcdFx0XHRcdFx0XHRpZiAoZGVjbGFyYXRpb24uaWQubmFtZSA9PT0gdXBkYXRlQXJndW1lbnQubmFtZSkge1xuXHRcdFx0XHRcdFx0XHRcdGluaXRBcmd1bWVudCA9IGRlY2xhcmF0aW9uO1xuXHRcdFx0XHRcdFx0XHRcdGRlY2xhcmF0aW9ucy5zcGxpY2UoX2kyLCAxKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnZmxvYXQgJyk7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGRlY2xhcmF0aW9uLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnZm9yIChmbG9hdCAnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpbml0QXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdmb3IgKCcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuaW5pdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnRlc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnVwZGF0ZSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuYm9keSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnSW52YWxpZCBmb3Igc3RhdGVtZW50JywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RXaGlsZVN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFdoaWxlU3RhdGVtZW50KHdoaWxlTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmICh3aGlsZU5vZGUudHlwZSAhPT0gJ1doaWxlU3RhdGVtZW50Jykge1xuXHRcdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdJbnZhbGlkIHdoaWxlIHN0YXRtZW50JywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaCgnZm9yIChmbG9hdCBpID0gMC4wOyBpIDwgTE9PUF9NQVg7IGkrKykgeycpO1xuXHRcdFx0cmV0QXJyLnB1c2goJ2lmICgnKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyh3aGlsZU5vZGUudGVzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goJykge1xcbicpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKHdoaWxlTm9kZS5ib2R5LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnfSBlbHNlIHtcXG4nKTtcblx0XHRcdHJldEFyci5wdXNoKCdicmVhaztcXG4nKTtcblx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cdFx0XHRyZXRBcnIucHVzaCgnfVxcbicpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RBc3NpZ25tZW50RXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEFzc2lnbm1lbnRFeHByZXNzaW9uKGFzc05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoYXNzTm9kZS5vcGVyYXRvciA9PT0gJyU9Jykge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXNzTm9kZS5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCc9Jyk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdtb2QoJyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3NOb2RlLmxlZnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJywnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzc05vZGUucmlnaHQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3NOb2RlLmxlZnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goYXNzTm9kZS5vcGVyYXRvcik7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3NOb2RlLnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEVtcHR5U3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RW1wdHlTdGF0ZW1lbnQoZU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RCbG9ja1N0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEJsb2NrU3RhdGVtZW50KGJOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ3tcXG4nKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYk5vZGUuYm9keS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYk5vZGUuYm9keVtpXSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEV4cHJlc3Npb25TdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RFeHByZXNzaW9uU3RhdGVtZW50KGVzTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhlc05vZGUuZXhwcmVzc2lvbiwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goJztcXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFZhcmlhYmxlRGVjbGFyYXRpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RWYXJpYWJsZURlY2xhcmF0aW9uKHZhcmRlY05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgnZmxvYXQgJyk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZhcmRlY05vZGUuZGVjbGFyYXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcsJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHZhcmRlY05vZGUuZGVjbGFyYXRpb25zW2ldLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0VmFyaWFibGVEZWNsYXJhdG9yJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0VmFyaWFibGVEZWNsYXJhdG9yKGl2YXJkZWNOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGl2YXJkZWNOb2RlLmlkLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRpZiAoaXZhcmRlY05vZGUuaW5pdCAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnPScpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaXZhcmRlY05vZGUuaW5pdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0SWZTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RJZlN0YXRlbWVudChpZk5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgnaWYgKCcpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGlmTm9kZS50ZXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXHRcdFx0aWYgKGlmTm9kZS5jb25zZXF1ZW50LnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGlmTm9kZS5jb25zZXF1ZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnIHtcXG4nKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGlmTm9kZS5jb25zZXF1ZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdcXG59XFxuJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpZk5vZGUuYWx0ZXJuYXRlKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdlbHNlICcpO1xuXHRcdFx0XHRpZiAoaWZOb2RlLmFsdGVybmF0ZS50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKSB7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGlmTm9kZS5hbHRlcm5hdGUsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnIHtcXG4nKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLmFsdGVybmF0ZSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCdcXG59XFxuJyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEJyZWFrU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0QnJlYWtTdGF0ZW1lbnQoYnJOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ2JyZWFrO1xcbicpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0Q29udGludWVTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RDb250aW51ZVN0YXRlbWVudChjck5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgnY29udGludWU7XFxuJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RMb2dpY2FsRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdExvZ2ljYWxFeHByZXNzaW9uKGxvZ05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGxvZ05vZGUubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2gobG9nTm9kZS5vcGVyYXRvcik7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMobG9nTm9kZS5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFVwZGF0ZUV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RVcGRhdGVFeHByZXNzaW9uKHVOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKHVOb2RlLnByZWZpeCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCh1Tm9kZS5vcGVyYXRvcik7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyh1Tm9kZS5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHVOb2RlLmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKHVOb2RlLm9wZXJhdG9yKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0VW5hcnlFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0VW5hcnlFeHByZXNzaW9uKHVOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKHVOb2RlLnByZWZpeCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCh1Tm9kZS5vcGVyYXRvcik7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyh1Tm9kZS5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHVOb2RlLmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKHVOb2RlLm9wZXJhdG9yKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0VGhpc0V4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RUaGlzRXhwcmVzc2lvbih0Tm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCd0aGlzJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RNZW1iZXJFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0TWVtYmVyRXhwcmVzc2lvbihtTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChtTm9kZS5jb21wdXRlZCkge1xuXHRcdFx0XHRpZiAobU5vZGUub2JqZWN0LnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuXHRcdFx0XHRcdHZhciByZXFOYW1lID0gbU5vZGUub2JqZWN0Lm5hbWU7XG5cdFx0XHRcdFx0dmFyIGZ1bmNOYW1lID0gZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSB8fCAna2VybmVsJztcblx0XHRcdFx0XHR2YXIgYXNzdW1lTm90VGV4dHVyZSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKGZ1bmNQYXJhbS5wYXJhbU5hbWVzKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4ID0gZnVuY1BhcmFtLnBhcmFtTmFtZXMuaW5kZXhPZihyZXFOYW1lKTtcblx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCAmJiBmdW5jUGFyYW0ucGFyYW1UeXBlc1tpZHhdID09PSAnZmxvYXQnKSB7XG5cdFx0XHRcdFx0XHRcdGFzc3VtZU5vdFRleHR1cmUgPSB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChhc3N1bWVOb3RUZXh0dXJlKSB7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUub2JqZWN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnW2ludCgnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5wcm9wZXJ0eSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJyldJyk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdnZXQoJyk7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUub2JqZWN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCB2ZWMyKCcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLm9iamVjdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ1NpemVbMF0sJyk7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUub2JqZWN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnU2l6ZVsxXSksIHZlYzMoJyk7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUub2JqZWN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnRGltWzBdLCcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLm9iamVjdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ0RpbVsxXSwnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5vYmplY3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdEaW1bMl0nKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCcpLCAnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5wcm9wZXJ0eSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLm9iamVjdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHZhciBsYXN0ID0gcmV0QXJyLnBvcCgpO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcsJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLnByb3BlcnR5LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2gobGFzdCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0dmFyIHVucm9sbGVkID0gdGhpcy5hc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsKG1Ob2RlKTtcblx0XHRcdFx0dmFyIHVucm9sbGVkX2xjID0gdW5yb2xsZWQudG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0XHRpZiAodW5yb2xsZWQuaW5kZXhPZihjb25zdGFudHNQcmVmaXgpID09PSAwKSB7XG5cdFx0XHRcdFx0dW5yb2xsZWQgPSAnY29uc3RhbnRzXycgKyB1bnJvbGxlZC5zbGljZShjb25zdGFudHNQcmVmaXgubGVuZ3RoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh1bnJvbGxlZF9sYyA9PT0gJ3RoaXMudGhyZWFkLngnKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3RocmVhZElkLngnKTtcblx0XHRcdFx0fSBlbHNlIGlmICh1bnJvbGxlZF9sYyA9PT0gJ3RoaXMudGhyZWFkLnknKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3RocmVhZElkLnknKTtcblx0XHRcdFx0fSBlbHNlIGlmICh1bnJvbGxlZF9sYyA9PT0gJ3RoaXMudGhyZWFkLnonKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3RocmVhZElkLnonKTtcblx0XHRcdFx0fSBlbHNlIGlmICh1bnJvbGxlZF9sYyA9PT0gJ3RoaXMub3V0cHV0LngnKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VPdXRwdXREaW0ueCcpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHVucm9sbGVkX2xjID09PSAndGhpcy5vdXRwdXQueScpIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndU91dHB1dERpbS55Jyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodW5yb2xsZWRfbGMgPT09ICd0aGlzLm91dHB1dC56Jykge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLnonKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCh1bnJvbGxlZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0U2VxdWVuY2VFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0U2VxdWVuY2VFeHByZXNzaW9uKHNOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzTm9kZS5leHByZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhzTm9kZS5leHByZXNzaW9ucywgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0TWVtYmVyRXhwcmVzc2lvblVucm9sbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwoYXN0LCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChhc3QudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdFx0XHRcdHJldHVybiBhc3QubmFtZTtcblx0XHRcdH0gZWxzZSBpZiAoYXN0LnR5cGUgPT09ICdUaGlzRXhwcmVzc2lvbicpIHtcblx0XHRcdFx0cmV0dXJuICd0aGlzJztcblx0XHRcdH1cblxuXHRcdFx0aWYgKGFzdC50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicpIHtcblx0XHRcdFx0aWYgKGFzdC5vYmplY3QgJiYgYXN0LnByb3BlcnR5KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0TWVtYmVyRXhwcmVzc2lvblVucm9sbChhc3Qub2JqZWN0LCBmdW5jUGFyYW0pICsgJy4nICsgdGhpcy5hc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsKGFzdC5wcm9wZXJ0eSwgZnVuY1BhcmFtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdVbmtub3duIENhbGxFeHByZXNzaW9uX3Vucm9sbCcsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0Q2FsbEV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RDYWxsRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoYXN0LmNhbGxlZSkge1xuXHRcdFx0XHR2YXIgZnVuY05hbWUgPSB0aGlzLmFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwoYXN0LmNhbGxlZSk7XG5cblx0XHRcdFx0aWYgKGZ1bmNOYW1lLmluZGV4T2YoanNNYXRoUHJlZml4KSA9PT0gMCkge1xuXHRcdFx0XHRcdGZ1bmNOYW1lID0gZnVuY05hbWUuc2xpY2UoanNNYXRoUHJlZml4Lmxlbmd0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZnVuY05hbWUuaW5kZXhPZihsb2NhbFByZWZpeCkgPT09IDApIHtcblx0XHRcdFx0XHRmdW5jTmFtZSA9IGZ1bmNOYW1lLnNsaWNlKGxvY2FsUHJlZml4Lmxlbmd0aCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZnVuY1BhcmFtLmNhbGxlZEZ1bmN0aW9ucy5pbmRleE9mKGZ1bmNOYW1lKSA8IDApIHtcblx0XHRcdFx0XHRmdW5jUGFyYW0uY2FsbGVkRnVuY3Rpb25zLnB1c2goZnVuY05hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghZnVuY1BhcmFtLmhhc093blByb3BlcnR5KCdmdW5jTmFtZScpKSB7XG5cdFx0XHRcdFx0ZnVuY1BhcmFtLmNhbGxlZEZ1bmN0aW9uc0FyZ3VtZW50c1tmdW5jTmFtZV0gPSBbXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBmdW5jdGlvbkFyZ3VtZW50cyA9IFtdO1xuXHRcdFx0XHRmdW5jUGFyYW0uY2FsbGVkRnVuY3Rpb25zQXJndW1lbnRzW2Z1bmNOYW1lXS5wdXNoKGZ1bmN0aW9uQXJndW1lbnRzKTtcblxuXHRcdFx0XHRyZXRBcnIucHVzaChmdW5jTmFtZSk7XG5cblx0XHRcdFx0cmV0QXJyLnB1c2goJygnKTtcblxuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFzdC5hcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0XHR2YXIgYXJndW1lbnQgPSBhc3QuYXJndW1lbnRzW2ldO1xuXHRcdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJywgJyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGlmIChhcmd1bWVudC50eXBlID09PSAnSWRlbnRpZmllcicpIHtcblx0XHRcdFx0XHRcdHZhciBwYXJhbUluZGV4ID0gZnVuY1BhcmFtLnBhcmFtTmFtZXMuaW5kZXhPZihhcmd1bWVudC5uYW1lKTtcblx0XHRcdFx0XHRcdGlmIChwYXJhbUluZGV4ID09PSAtMSkge1xuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbkFyZ3VtZW50cy5wdXNoKG51bGwpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0ZnVuY3Rpb25Bcmd1bWVudHMucHVzaCh7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZTogYXJndW1lbnQubmFtZSxcblx0XHRcdFx0XHRcdFx0XHR0eXBlOiBmdW5jUGFyYW0ucGFyYW1UeXBlc1twYXJhbUluZGV4XVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZnVuY3Rpb25Bcmd1bWVudHMucHVzaChudWxsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXG5cdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHR9XG5cblx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ1Vua25vd24gQ2FsbEV4cHJlc3Npb24nLCBhc3QsIGZ1bmNQYXJhbSk7XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEFycmF5RXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEFycmF5RXhwcmVzc2lvbihhcnJOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0dmFyIGFyckxlbiA9IGFyck5vZGUuZWxlbWVudHMubGVuZ3RoO1xuXG5cdFx0XHRyZXRBcnIucHVzaCgnZmxvYXRbJyArIGFyckxlbiArICddKCcpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcnJMZW47ICsraSkge1xuXHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCAnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YXIgc3ViTm9kZSA9IGFyck5vZGUuZWxlbWVudHNbaV07XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhzdWJOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0RnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcoKSB7XG5cdFx0XHRpZiAodGhpcy53ZWJHbEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmc7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy53ZWJHbEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nID0gdGhpcy5nZW5lcmF0ZSgpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2J1aWxkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYnVpbGQoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRGdW5jdGlvblByb3RvdHlwZVN0cmluZygpLmxlbmd0aCA+IDA7XG5cdFx0fVxuXHR9XSwgW3tcblx0XHRrZXk6ICdhc3RGdW5jdGlvblByb3RvdHlwZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEZ1bmN0aW9uUHJvdG90eXBlKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChmdW5jUGFyYW0uaXNSb290S2VybmVsIHx8IGZ1bmNQYXJhbS5pc1N1Yktlcm5lbCkge1xuXHRcdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0ucmV0dXJuVHlwZSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnICcpO1xuXHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmNQYXJhbS5wYXJhbU5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcsICcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLnBhcmFtVHlwZXNbaV0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnICcpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgndXNlcl8nKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLnBhcmFtTmFtZXNbaV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaCgnKTtcXG4nKTtcblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gV2ViR0xGdW5jdGlvbk5vZGU7XG59KEZ1bmN0aW9uTm9kZUJhc2UpO1xuXG5mdW5jdGlvbiBpc0lkZW50aWZpZXJLZXJuZWxQYXJhbShwYXJhbU5hbWUsIGFzdCwgZnVuY1BhcmFtKSB7XG5cdHJldHVybiBmdW5jUGFyYW0ucGFyYW1OYW1lcy5pbmRleE9mKHBhcmFtTmFtZSkgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVJbmRlbnRpZmllclR5cGUocGFyYW1OYW1lLCBleHBlY3RlZFR5cGUsIGFzdCwgZnVuY1BhcmFtKSB7XG5cdHZhciBzdGFydCA9IGFzdC5sb2Muc3RhcnQ7XG5cblx0aWYgKCFpc0lkZW50aWZpZXJLZXJuZWxQYXJhbShwYXJhbU5hbWUsIGZ1bmNQYXJhbSkgJiYgZXhwZWN0ZWRUeXBlICE9PSAnZmxvYXQnKSB7XG5cdFx0dGhyb3cgJ0Vycm9yIHVuZXhwZWN0ZWQgaWRlbnRpZmllciAnICsgcGFyYW1OYW1lICsgJyBvbiBsaW5lICcgKyBzdGFydC5saW5lO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBhY3R1YWxUeXBlID0gZnVuY1BhcmFtLnBhcmFtVHlwZXNbZnVuY1BhcmFtLnBhcmFtTmFtZXMuaW5kZXhPZihwYXJhbU5hbWUpXTtcblx0XHRpZiAoYWN0dWFsVHlwZSAhPT0gZXhwZWN0ZWRUeXBlKSB7XG5cdFx0XHR0aHJvdyAnRXJyb3IgdW5leHBlY3RlZCBpZGVudGlmaWVyICcgKyBwYXJhbU5hbWUgKyAnIG9uIGxpbmUgJyArIHN0YXJ0LmxpbmU7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHdlYkdsUmVnZXhPcHRpbWl6ZShpblN0cikge1xuXHRyZXR1cm4gaW5TdHIucmVwbGFjZShERUNPREUzMl9FTkNPREUzMiwgJygoJykucmVwbGFjZShFTkNPREUzMl9ERUNPREUzMiwgJygoJyk7XG59XG59LHtcIi4uLy4uL2NvcmUvdXRpbHNcIjoyNCxcIi4uL2Z1bmN0aW9uLW5vZGUtYmFzZVwiOjd9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcbnZhciBrZXJuZWxSdW5TaG9ydGN1dCA9IHJlcXVpcmUoJy4uL2tlcm5lbC1ydW4tc2hvcnRjdXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZ3B1S2VybmVsLCBuYW1lKSB7XG4gIHJldHVybiAnKCkgPT4ge1xcbiAgICAnICsga2VybmVsUnVuU2hvcnRjdXQudG9TdHJpbmcoKSArICc7XFxuICAgIGNvbnN0IHV0aWxzID0ge1xcbiAgICAgIGFsbFByb3BlcnRpZXNPZjogZnVuY3Rpb24gJyArIHV0aWxzLmFsbFByb3BlcnRpZXNPZi50b1N0cmluZygpICsgJyxcXG4gICAgICBjbG9uZTogZnVuY3Rpb24gJyArIHV0aWxzLmNsb25lLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIHNwbGl0QXJyYXk6IGZ1bmN0aW9uICcgKyB1dGlscy5zcGxpdEFycmF5LnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGdldEFyZ3VtZW50VHlwZTogZnVuY3Rpb24gJyArIHV0aWxzLmdldEFyZ3VtZW50VHlwZS50b1N0cmluZygpICsgJyxcXG4gICAgICBnZXREaW1lbnNpb25zOiBmdW5jdGlvbiAnICsgdXRpbHMuZ2V0RGltZW5zaW9ucy50b1N0cmluZygpICsgJyxcXG4gICAgICBkaW1Ub1RleFNpemU6IGZ1bmN0aW9uICcgKyB1dGlscy5kaW1Ub1RleFNpemUudG9TdHJpbmcoKSArICcsXFxuICAgICAgY29weUZsYXR0ZW46IGZ1bmN0aW9uICcgKyB1dGlscy5jb3B5RmxhdHRlbi50b1N0cmluZygpICsgJyxcXG4gICAgICBmbGF0dGVuOiBmdW5jdGlvbiAnICsgdXRpbHMuZmxhdHRlbi50b1N0cmluZygpICsgJyxcXG4gICAgICBzeXN0ZW1FbmRpYW5uZXNzOiBcXCcnICsgdXRpbHMuc3lzdGVtRW5kaWFubmVzcygpICsgJ1xcJyxcXG4gICAgICBpbml0V2ViR2w6IGZ1bmN0aW9uICcgKyB1dGlscy5pbml0V2ViR2wudG9TdHJpbmcoKSArICcsXFxuICAgICAgaXNBcnJheTogZnVuY3Rpb24gJyArIHV0aWxzLmlzQXJyYXkudG9TdHJpbmcoKSArICdcXG4gICAgfTtcXG4gICAgY2xhc3MgJyArIChuYW1lIHx8ICdLZXJuZWwnKSArICcge1xcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xcbiAgICAgICAgdGhpcy5hcmd1bWVudHNMZW5ndGggPSAwO1xcbiAgICAgICAgdGhpcy5fY2FudmFzID0gbnVsbDtcXG4gICAgICAgIHRoaXMuX3dlYkdsID0gbnVsbDtcXG4gICAgICAgIHRoaXMuYnVpbHQgPSBmYWxzZTtcXG4gICAgICAgIHRoaXMucHJvZ3JhbSA9IG51bGw7XFxuICAgICAgICB0aGlzLnBhcmFtTmFtZXMgPSAnICsgSlNPTi5zdHJpbmdpZnkoZ3B1S2VybmVsLnBhcmFtTmFtZXMpICsgJztcXG4gICAgICAgIHRoaXMucGFyYW1UeXBlcyA9ICcgKyBKU09OLnN0cmluZ2lmeShncHVLZXJuZWwucGFyYW1UeXBlcykgKyAnO1xcbiAgICAgICAgdGhpcy50ZXhTaXplID0gJyArIEpTT04uc3RyaW5naWZ5KGdwdUtlcm5lbC50ZXhTaXplKSArICc7XFxuICAgICAgICB0aGlzLm91dHB1dCA9ICcgKyBKU09OLnN0cmluZ2lmeShncHVLZXJuZWwub3V0cHV0KSArICc7XFxuICAgICAgICB0aGlzLmNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyA9IGAnICsgZ3B1S2VybmVsLmNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyArICdgO1xcblxcdFxcdCAgICB0aGlzLmNvbXBpbGVkVmVydFNoYWRlclN0cmluZyA9IGAnICsgZ3B1S2VybmVsLmNvbXBpbGVkVmVydFNoYWRlclN0cmluZyArICdgO1xcblxcdFxcdCAgICB0aGlzLnByb2dyYW1Vbmlmb3JtTG9jYXRpb25DYWNoZSA9IHt9O1xcblxcdFxcdCAgICB0aGlzLnRleHR1cmVDYWNoZSA9IHt9O1xcblxcdFxcdCAgICB0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzID0gbnVsbDtcXG4gICAgICB9XFxuICAgICAgJyArIGdwdUtlcm5lbC5fZ2V0RnJhZ1NoYWRlclN0cmluZy50b1N0cmluZygpICsgJ1xcbiAgICAgICcgKyBncHVLZXJuZWwuX2dldFZlcnRTaGFkZXJTdHJpbmcudG9TdHJpbmcoKSArICdcXG4gICAgICB2YWxpZGF0ZU9wdGlvbnMoKSB7fVxcbiAgICAgIHNldHVwUGFyYW1zKCkge31cXG4gICAgICBzZXRDYW52YXMoY2FudmFzKSB7IHRoaXMuX2NhbnZhcyA9IGNhbnZhczsgcmV0dXJuIHRoaXM7IH1cXG4gICAgICBzZXRXZWJHbCh3ZWJHbCkgeyB0aGlzLl93ZWJHbCA9IHdlYkdsOyByZXR1cm4gdGhpczsgfVxcbiAgICAgICcgKyBncHVLZXJuZWwuZ2V0VW5pZm9ybUxvY2F0aW9uLnRvU3RyaW5nKCkgKyAnXFxuICAgICAgJyArIGdwdUtlcm5lbC5zZXR1cFBhcmFtcy50b1N0cmluZygpICsgJ1xcbiAgICAgICcgKyBncHVLZXJuZWwuYnVpbGQudG9TdHJpbmcoKSArICdcXG5cXHRcXHQgICcgKyBncHVLZXJuZWwucnVuLnRvU3RyaW5nKCkgKyAnXFxuXFx0XFx0ICAnICsgZ3B1S2VybmVsLl9hZGRBcmd1bWVudC50b1N0cmluZygpICsgJ1xcblxcdFxcdCAgJyArIGdwdUtlcm5lbC5nZXRBcmd1bWVudFRleHR1cmUudG9TdHJpbmcoKSArICdcXG5cXHRcXHQgICcgKyBncHVLZXJuZWwuZ2V0VGV4dHVyZUNhY2hlLnRvU3RyaW5nKCkgKyAnXFxuXFx0XFx0ICAnICsgZ3B1S2VybmVsLmdldE91dHB1dFRleHR1cmUudG9TdHJpbmcoKSArICdcXG5cXHRcXHQgICcgKyBncHVLZXJuZWwucmVuZGVyT3V0cHV0LnRvU3RyaW5nKCkgKyAnXFxuICAgIH07XFxuICAgIHJldHVybiBrZXJuZWxSdW5TaG9ydGN1dChuZXcgS2VybmVsKCkpO1xcbiAgfTsnO1xufTtcbn0se1wiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4va2VybmVsLXJ1bi1zaG9ydGN1dFwiOjl9XSwxNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbnZhciBLZXJuZWxCYXNlID0gcmVxdWlyZSgnLi4va2VybmVsLWJhc2UnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcbnZhciBUZXh0dXJlID0gcmVxdWlyZSgnLi4vLi4vY29yZS90ZXh0dXJlJyk7XG52YXIgZnJhZ1NoYWRlclN0cmluZyA9IHJlcXVpcmUoJy4vc2hhZGVyLWZyYWcnKTtcbnZhciB2ZXJ0U2hhZGVyU3RyaW5nID0gcmVxdWlyZSgnLi9zaGFkZXItdmVydCcpO1xudmFyIGtlcm5lbFN0cmluZyA9IHJlcXVpcmUoJy4va2VybmVsLXN0cmluZycpO1xudmFyIGNhbnZhc2VzID0gW107XG52YXIgbWF4VGV4U2l6ZXMgPSB7fTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9LZXJuZWxCYXNlKSB7XG5cdF9pbmhlcml0cyhXZWJHTEtlcm5lbCwgX0tlcm5lbEJhc2UpO1xuXG5cdGZ1bmN0aW9uIFdlYkdMS2VybmVsKGZuU3RyaW5nLCBzZXR0aW5ncykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJHTEtlcm5lbCk7XG5cblx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoV2ViR0xLZXJuZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXZWJHTEtlcm5lbCkpLmNhbGwodGhpcywgZm5TdHJpbmcsIHNldHRpbmdzKSk7XG5cblx0XHRfdGhpcy50ZXh0dXJlQ2FjaGUgPSB7fTtcblx0XHRfdGhpcy50aHJlYWREaW0gPSB7fTtcblx0XHRfdGhpcy5wcm9ncmFtVW5pZm9ybUxvY2F0aW9uQ2FjaGUgPSB7fTtcblx0XHRfdGhpcy5mcmFtZWJ1ZmZlciA9IG51bGw7XG5cblx0XHRfdGhpcy5idWZmZXIgPSBudWxsO1xuXHRcdF90aGlzLnByb2dyYW0gPSBudWxsO1xuXHRcdF90aGlzLm91dHB1dFRvVGV4dHVyZSA9IHNldHRpbmdzLm91dHB1dFRvVGV4dHVyZTtcblx0XHRfdGhpcy5lbmRpYW5uZXNzID0gdXRpbHMuc3lzdGVtRW5kaWFubmVzcygpO1xuXHRcdF90aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzID0gbnVsbDtcblx0XHRfdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID0gbnVsbDtcblx0XHRfdGhpcy5wYXJhbVR5cGVzID0gbnVsbDtcblx0XHRfdGhpcy5hcmd1bWVudHNMZW5ndGggPSAwO1xuXHRcdF90aGlzLmV4dCA9IG51bGw7XG5cdFx0X3RoaXMuY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nID0gbnVsbDtcblx0XHRfdGhpcy5jb21waWxlZFZlcnRTaGFkZXJTdHJpbmcgPSBudWxsO1xuXHRcdF90aGlzLmV4dERyYXdCdWZmZXJzTWFwID0gbnVsbDtcblx0XHRfdGhpcy5vdXRwdXRUZXh0dXJlID0gbnVsbDtcblx0XHRfdGhpcy5tYXhUZXhTaXplID0gbnVsbDtcblx0XHRpZiAoIV90aGlzLl93ZWJHbCkgX3RoaXMuX3dlYkdsID0gdXRpbHMuaW5pdFdlYkdsKF90aGlzLmdldENhbnZhcygpKTtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXG5cblx0X2NyZWF0ZUNsYXNzKFdlYkdMS2VybmVsLCBbe1xuXHRcdGtleTogJ3ZhbGlkYXRlT3B0aW9ucycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucygpIHtcblx0XHRcdHZhciBpc1JlYWRQaXhlbCA9IHV0aWxzLmlzRmxvYXRSZWFkUGl4ZWxzU3VwcG9ydGVkKCk7XG5cdFx0XHRpZiAodGhpcy5mbG9hdFRleHR1cmVzID09PSB0cnVlICYmICF1dGlscy5PRVNfdGV4dHVyZV9mbG9hdCkge1xuXHRcdFx0XHR0aHJvdyAnRmxvYXQgdGV4dHVyZXMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBicm93c2VyJztcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5mbG9hdE91dHB1dCA9PT0gdHJ1ZSAmJiB0aGlzLmZsb2F0T3V0cHV0Rm9yY2UgIT09IHRydWUgJiYgIWlzUmVhZFBpeGVsKSB7XG5cdFx0XHRcdHRocm93ICdGbG9hdCB0ZXh0dXJlIG91dHB1dHMgYXJlIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBicm93c2VyJztcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5mbG9hdFRleHR1cmVzID09PSBudWxsICYmICFpc1JlYWRQaXhlbCAmJiAhdGhpcy5ncmFwaGljYWwpIHtcblx0XHRcdFx0dGhpcy5mbG9hdFRleHR1cmVzID0gdHJ1ZTtcblx0XHRcdFx0dGhpcy5mbG9hdE91dHB1dCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXRoaXMub3V0cHV0IHx8IHRoaXMub3V0cHV0Lmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuXHRcdFx0XHRcdHRocm93ICdBdXRvIG91dHB1dCBvbmx5IHN1cHBvcnRlZCBmb3Iga2VybmVscyB3aXRoIG9ubHkgb25lIGlucHV0Jztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBhcmdUeXBlID0gdXRpbHMuZ2V0QXJndW1lbnRUeXBlKGFyZ3VtZW50c1swXSk7XG5cdFx0XHRcdGlmIChhcmdUeXBlID09PSAnQXJyYXknKSB7XG5cdFx0XHRcdFx0dGhpcy5vdXRwdXQgPSB1dGlscy5nZXREaW1lbnNpb25zKGFyZ1R5cGUpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdUZXh0dXJlJykge1xuXHRcdFx0XHRcdHRoaXMub3V0cHV0ID0gYXJndW1lbnRzWzBdLm91dHB1dDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aHJvdyAnQXV0byBvdXRwdXQgbm90IHN1cHBvcnRlZCBmb3IgaW5wdXQgdHlwZTogJyArIGFyZ1R5cGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dGhpcy50ZXhTaXplID0gdXRpbHMuZGltVG9UZXhTaXplKHtcblx0XHRcdFx0ZmxvYXRUZXh0dXJlczogdGhpcy5mbG9hdFRleHR1cmVzLFxuXHRcdFx0XHRmbG9hdE91dHB1dDogdGhpcy5mbG9hdE91dHB1dFxuXHRcdFx0fSwgdGhpcy5vdXRwdXQsIHRydWUpO1xuXG5cdFx0XHRpZiAodGhpcy5ncmFwaGljYWwpIHtcblx0XHRcdFx0aWYgKHRoaXMub3V0cHV0Lmxlbmd0aCAhPT0gMikge1xuXHRcdFx0XHRcdHRocm93ICdPdXRwdXQgbXVzdCBoYXZlIDIgZGltZW5zaW9ucyBvbiBncmFwaGljYWwgbW9kZSc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodGhpcy5mbG9hdE91dHB1dCkge1xuXHRcdFx0XHRcdHRocm93ICdDYW5ub3QgdXNlIGdyYXBoaWNhbCBtb2RlIGFuZCBmbG9hdCBvdXRwdXQgYXQgdGhlIHNhbWUgdGltZSc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aGlzLnRleFNpemUgPSB1dGlscy5jbG9uZSh0aGlzLm91dHB1dCk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuZmxvYXRPdXRwdXQgPT09IHVuZGVmaW5lZCAmJiB1dGlscy5PRVNfdGV4dHVyZV9mbG9hdCkge1xuXHRcdFx0XHR0aGlzLmZsb2F0T3V0cHV0ID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICd1cGRhdGVNYXhUZXhTaXplJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdXBkYXRlTWF4VGV4U2l6ZSgpIHtcblx0XHRcdHZhciB0ZXhTaXplID0gdGhpcy50ZXhTaXplO1xuXHRcdFx0dmFyIGNhbnZhcyA9IHRoaXMuX2NhbnZhcztcblx0XHRcdGlmICh0aGlzLm1heFRleFNpemUgPT09IG51bGwpIHtcblx0XHRcdFx0dmFyIGNhbnZhc0luZGV4ID0gY2FudmFzZXMuaW5kZXhPZihjYW52YXMpO1xuXHRcdFx0XHRpZiAoY2FudmFzSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0Y2FudmFzSW5kZXggPSBjYW52YXNlcy5sZW5ndGg7XG5cdFx0XHRcdFx0Y2FudmFzZXMucHVzaChjYW52YXMpO1xuXHRcdFx0XHRcdG1heFRleFNpemVzW2NhbnZhc0luZGV4XSA9IFt0ZXhTaXplWzBdLCB0ZXhTaXplWzFdXTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLm1heFRleFNpemUgPSBtYXhUZXhTaXplc1tjYW52YXNJbmRleF07XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5tYXhUZXhTaXplWzBdIDwgdGV4U2l6ZVswXSkge1xuXHRcdFx0XHR0aGlzLm1heFRleFNpemVbMF0gPSB0ZXhTaXplWzBdO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHRoaXMubWF4VGV4U2l6ZVsxXSA8IHRleFNpemVbMV0pIHtcblx0XHRcdFx0dGhpcy5tYXhUZXhTaXplWzFdID0gdGV4U2l6ZVsxXTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYnVpbGQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBidWlsZCgpIHtcblx0XHRcdHRoaXMudmFsaWRhdGVPcHRpb25zKCk7XG5cdFx0XHR0aGlzLnNldHVwUGFyYW1zKGFyZ3VtZW50cyk7XG5cdFx0XHR0aGlzLnVwZGF0ZU1heFRleFNpemUoKTtcblx0XHRcdHZhciB0ZXhTaXplID0gdGhpcy50ZXhTaXplO1xuXHRcdFx0dmFyIGdsID0gdGhpcy5fd2ViR2w7XG5cdFx0XHR2YXIgY2FudmFzID0gdGhpcy5fY2FudmFzO1xuXHRcdFx0Z2wuZW5hYmxlKGdsLlNDSVNTT1JfVEVTVCk7XG5cdFx0XHRnbC52aWV3cG9ydCgwLCAwLCB0aGlzLm1heFRleFNpemVbMF0sIHRoaXMubWF4VGV4U2l6ZVsxXSk7XG4gICAgICAvLyBUT0RPIGVkaXRlZCB0byBmaXggc3VzcGVjdGVkIGJ1Z1xuXHRcdFx0Ly9jYW52YXMud2lkdGggPSB0aGlzLm1heFRleFNpemVbMF07XG5cdFx0XHQvL2NhbnZhcy5oZWlnaHQgPSB0aGlzLm1heFRleFNpemVbMV07XG4gICAgICBjYW52YXMud2lkdGggPSB0aGlzLm91dHB1dFswXTtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLm91dHB1dFsxXTtcblx0XHRcdHZhciB0aHJlYWREaW0gPSB0aGlzLnRocmVhZERpbSA9IHV0aWxzLmNsb25lKHRoaXMub3V0cHV0KTtcblx0XHRcdHdoaWxlICh0aHJlYWREaW0ubGVuZ3RoIDwgMykge1xuXHRcdFx0XHR0aHJlYWREaW0ucHVzaCgxKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuZnVuY3Rpb25CdWlsZGVyKSB0aGlzLl9hZGRLZXJuZWxzKCk7XG5cblx0XHRcdHZhciBjb21waWxlZFZlcnRTaGFkZXJTdHJpbmcgPSB0aGlzLl9nZXRWZXJ0U2hhZGVyU3RyaW5nKGFyZ3VtZW50cyk7XG5cdFx0XHR2YXIgdmVydFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcblx0XHRcdGdsLnNoYWRlclNvdXJjZSh2ZXJ0U2hhZGVyLCBjb21waWxlZFZlcnRTaGFkZXJTdHJpbmcpO1xuXHRcdFx0Z2wuY29tcGlsZVNoYWRlcih2ZXJ0U2hhZGVyKTtcblxuXHRcdFx0dmFyIGNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyA9IHRoaXMuX2dldEZyYWdTaGFkZXJTdHJpbmcoYXJndW1lbnRzKTtcblx0XHRcdHZhciBmcmFnU2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLkZSQUdNRU5UX1NIQURFUik7XG5cdFx0XHRnbC5zaGFkZXJTb3VyY2UoZnJhZ1NoYWRlciwgY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nKTtcblx0XHRcdGdsLmNvbXBpbGVTaGFkZXIoZnJhZ1NoYWRlcik7XG5cblx0XHRcdGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHZlcnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhjb21waWxlZFZlcnRTaGFkZXJTdHJpbmcpO1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcnM6ICcgKyBnbC5nZXRTaGFkZXJJbmZvTG9nKHZlcnRTaGFkZXIpKTtcblx0XHRcdFx0dGhyb3cgJ0Vycm9yIGNvbXBpbGluZyB2ZXJ0ZXggc2hhZGVyJztcblx0XHRcdH1cblx0XHRcdGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKGZyYWdTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhjb21waWxlZEZyYWdTaGFkZXJTdHJpbmcpO1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdBbiBlcnJvciBvY2N1cnJlZCBjb21waWxpbmcgdGhlIHNoYWRlcnM6ICcgKyBnbC5nZXRTaGFkZXJJbmZvTG9nKGZyYWdTaGFkZXIpKTtcblx0XHRcdFx0dGhyb3cgJ0Vycm9yIGNvbXBpbGluZyBmcmFnbWVudCBzaGFkZXInO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5kZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnT3B0aW9uczonKTtcblx0XHRcdFx0Y29uc29sZS5kaXIodGhpcyk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdHTFNMIFNoYWRlciBPdXRwdXQ6Jyk7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwcm9ncmFtID0gdGhpcy5wcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuXHRcdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRTaGFkZXIpO1xuXHRcdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdTaGFkZXIpO1xuXHRcdFx0Z2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XG5cdFx0XHR0aGlzLmZyYW1lYnVmZmVyID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcblx0XHRcdHRoaXMuZnJhbWVidWZmZXIud2lkdGggPSB0ZXhTaXplWzBdO1xuXHRcdFx0dGhpcy5mcmFtZWJ1ZmZlci5oZWlnaHQgPSB0ZXhTaXplWzFdO1xuXG5cdFx0XHR2YXIgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KFstMSwgLTEsIDEsIC0xLCAtMSwgMSwgMSwgMV0pO1xuXHRcdFx0dmFyIHRleENvb3JkcyA9IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDEsIDAsIDAsIDEsIDEsIDFdKTtcblxuXHRcdFx0dmFyIHRleENvb3JkT2Zmc2V0ID0gdmVydGljZXMuYnl0ZUxlbmd0aDtcblxuXHRcdFx0dmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xuXHRcdFx0aWYgKCFidWZmZXIpIHtcblx0XHRcdFx0YnVmZmVyID0gdGhpcy5idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcblx0XHRcdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XG5cdFx0XHRcdGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCB2ZXJ0aWNlcy5ieXRlTGVuZ3RoICsgdGV4Q29vcmRzLmJ5dGVMZW5ndGgsIGdsLlNUQVRJQ19EUkFXKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xuXHRcdFx0fVxuXG5cdFx0XHRnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgMCwgdmVydGljZXMpO1xuXHRcdFx0Z2wuYnVmZmVyU3ViRGF0YShnbC5BUlJBWV9CVUZGRVIsIHRleENvb3JkT2Zmc2V0LCB0ZXhDb29yZHMpO1xuXG5cdFx0XHR2YXIgYVBvc0xvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgJ2FQb3MnKTtcblx0XHRcdGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGFQb3NMb2MpO1xuXHRcdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihhUG9zTG9jLCAyLCBnbC5GTE9BVCwgZ2wuRkFMU0UsIDAsIDApO1xuXHRcdFx0dmFyIGFUZXhDb29yZExvYyA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgJ2FUZXhDb29yZCcpO1xuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYVRleENvb3JkTG9jKTtcblx0XHRcdGdsLnZlcnRleEF0dHJpYlBvaW50ZXIoYVRleENvb3JkTG9jLCAyLCBnbC5GTE9BVCwgZ2wuRkFMU0UsIDAsIHRleENvb3JkT2Zmc2V0KTtcblxuXHRcdFx0dGhpcy5zZXR1cE91dHB1dFRleHR1cmUoKTtcblxuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXMgIT09IG51bGwpIHtcblx0XHRcdFx0dmFyIGV4dERyYXdCdWZmZXJzTWFwID0gdGhpcy5leHREcmF3QnVmZmVyc01hcCA9IFtnbC5DT0xPUl9BVFRBQ0hNRU5UMF07XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBzdWJLZXJuZWxPdXRwdXRUZXh0dXJlID0gdGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlc1tpXTtcblx0XHRcdFx0XHRleHREcmF3QnVmZmVyc01hcC5wdXNoKGdsLkNPTE9SX0FUVEFDSE1FTlQwICsgaSArIDEpO1xuXHRcdFx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyBhcmd1bWVudHMubGVuZ3RoICsgaSk7XG5cdFx0XHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgc3ViS2VybmVsT3V0cHV0VGV4dHVyZSk7XG5cdFx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdFx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRcdFx0XHRpZiAodGhpcy5mbG9hdE91dHB1dCkge1xuXHRcdFx0XHRcdFx0Z2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdLCAwLCBnbC5SR0JBLCBnbC5GTE9BVCwgbnVsbCk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgdGV4U2l6ZVswXSwgdGV4U2l6ZVsxXSwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3J1bicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHJ1bigpIHtcblx0XHRcdGlmICh0aGlzLnByb2dyYW0gPT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5idWlsZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHBhcmFtTmFtZXMgPSB0aGlzLnBhcmFtTmFtZXM7XG5cdFx0XHR2YXIgcGFyYW1UeXBlcyA9IHRoaXMucGFyYW1UeXBlcztcblx0XHRcdHZhciB0ZXhTaXplID0gdGhpcy50ZXhTaXplO1xuXHRcdFx0dmFyIGdsID0gdGhpcy5fd2ViR2w7XG5cblx0XHRcdGdsLnVzZVByb2dyYW0odGhpcy5wcm9ncmFtKTtcblx0XHRcdGdsLnNjaXNzb3IoMCwgMCwgdGV4U2l6ZVswXSwgdGV4U2l6ZVsxXSk7XG5cblx0XHRcdGlmICghdGhpcy5oYXJkY29kZUNvbnN0YW50cykge1xuXHRcdFx0XHR2YXIgdU91dHB1dERpbUxvYyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1T3V0cHV0RGltJyk7XG5cdFx0XHRcdGdsLnVuaWZvcm0zZnYodU91dHB1dERpbUxvYywgdGhpcy50aHJlYWREaW0pO1xuXHRcdFx0XHR2YXIgdVRleFNpemVMb2MgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbigndVRleFNpemUnKTtcblx0XHRcdFx0Z2wudW5pZm9ybTJmdih1VGV4U2l6ZUxvYywgdGV4U2l6ZSk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciByYXRpb0xvYyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCdyYXRpbycpO1xuXHRcdFx0Z2wudW5pZm9ybTJmKHJhdGlvTG9jLCB0ZXhTaXplWzBdIC8gdGhpcy5tYXhUZXhTaXplWzBdLCB0ZXhTaXplWzFdIC8gdGhpcy5tYXhUZXhTaXplWzFdKTtcblxuXHRcdFx0dGhpcy5hcmd1bWVudHNMZW5ndGggPSAwO1xuXHRcdFx0Zm9yICh2YXIgdGV4SW5kZXggPSAwOyB0ZXhJbmRleCA8IHBhcmFtTmFtZXMubGVuZ3RoOyB0ZXhJbmRleCsrKSB7XG5cdFx0XHRcdHRoaXMuX2FkZEFyZ3VtZW50KGFyZ3VtZW50c1t0ZXhJbmRleF0sIHBhcmFtVHlwZXNbdGV4SW5kZXhdLCBwYXJhbU5hbWVzW3RleEluZGV4XSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmdyYXBoaWNhbCkge1xuXHRcdFx0XHRnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgbnVsbCk7XG5cdFx0XHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XG5cdFx0XHRcdGdsLmRyYXdBcnJheXMoZ2wuVFJJQU5HTEVfU1RSSVAsIDAsIDQpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5mcmFtZWJ1ZmZlcik7XG5cdFx0XHR2YXIgb3V0cHV0VGV4dHVyZSA9IHRoaXMub3V0cHV0VGV4dHVyZTtcblx0XHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCwgZ2wuVEVYVFVSRV8yRCwgb3V0cHV0VGV4dHVyZSwgMCk7XG5cblx0XHRcdGlmICh0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzICE9PSBudWxsKSB7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBzdWJLZXJuZWxPdXRwdXRUZXh0dXJlID0gdGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlc1tpXTtcblx0XHRcdFx0XHRnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpICsgMSwgZ2wuVEVYVFVSRV8yRCwgc3ViS2VybmVsT3V0cHV0VGV4dHVyZSwgMCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5leHQuZHJhd0J1ZmZlcnNXRUJHTCh0aGlzLmV4dERyYXdCdWZmZXJzTWFwKTtcblx0XHRcdH1cblxuXHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG5cblx0XHRcdGlmICh0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzICE9PSBudWxsKSB7XG5cdFx0XHRcdGlmICh0aGlzLnN1Yktlcm5lbHMgIT09IG51bGwpIHtcblx0XHRcdFx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0XHRcdFx0b3V0cHV0LnJlc3VsdCA9IHRoaXMucmVuZGVyT3V0cHV0KG91dHB1dFRleHR1cmUpO1xuXHRcdFx0XHRcdGZvciAodmFyIF9pID0gMDsgX2kgPCB0aGlzLnN1Yktlcm5lbHMubGVuZ3RoOyBfaSsrKSB7XG5cdFx0XHRcdFx0XHRvdXRwdXQucHVzaChuZXcgVGV4dHVyZSh0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzW19pXSwgdGV4U2l6ZSwgdGhpcy5vdXRwdXQsIHRoaXMuX3dlYkdsKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBvdXRwdXQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAodGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0dmFyIF9vdXRwdXQgPSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQ6IHRoaXMucmVuZGVyT3V0cHV0KG91dHB1dFRleHR1cmUpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR2YXIgX2kyID0gMDtcblx0XHRcdFx0XHRmb3IgKHZhciBwIGluIHRoaXMuc3ViS2VybmVsUHJvcGVydGllcykge1xuXHRcdFx0XHRcdFx0aWYgKCF0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocCkpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0X291dHB1dFtwXSA9IG5ldyBUZXh0dXJlKHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXNbX2kyXSwgdGV4U2l6ZSwgdGhpcy5vdXRwdXQsIHRoaXMuX3dlYkdsKTtcblx0XHRcdFx0XHRcdF9pMisrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gX291dHB1dDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdGhpcy5yZW5kZXJPdXRwdXQob3V0cHV0VGV4dHVyZSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3JlbmRlck91dHB1dCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHJlbmRlck91dHB1dChvdXRwdXRUZXh0dXJlKSB7XG5cdFx0XHR2YXIgdGV4U2l6ZSA9IHRoaXMudGV4U2l6ZTtcblx0XHRcdHZhciBnbCA9IHRoaXMuX3dlYkdsO1xuXHRcdFx0dmFyIHRocmVhZERpbSA9IHRoaXMudGhyZWFkRGltO1xuXHRcdFx0dmFyIG91dHB1dCA9IHRoaXMub3V0cHV0O1xuXHRcdFx0aWYgKHRoaXMub3V0cHV0VG9UZXh0dXJlKSB7XG5cdFx0XHRcdHJldHVybiBuZXcgVGV4dHVyZShvdXRwdXRUZXh0dXJlLCB0ZXhTaXplLCBvdXRwdXQsIHRoaXMuX3dlYkdsKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSB2b2lkIDA7XG5cdFx0XHRcdGlmICh0aGlzLmZsb2F0T3V0cHV0KSB7XG5cdFx0XHRcdFx0cmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheSh0ZXhTaXplWzBdICogdGV4U2l6ZVsxXSAqIDQpO1xuXHRcdFx0XHRcdGdsLnJlYWRQaXhlbHMoMCwgMCwgdGV4U2l6ZVswXSwgdGV4U2l6ZVsxXSwgZ2wuUkdCQSwgZ2wuRkxPQVQsIHJlc3VsdCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkodGV4U2l6ZVswXSAqIHRleFNpemVbMV0gKiA0KTtcblx0XHRcdFx0XHRnbC5yZWFkUGl4ZWxzKDAsIDAsIHRleFNpemVbMF0sIHRleFNpemVbMV0sIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGJ5dGVzKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KGJ5dGVzLmJ1ZmZlcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgPSByZXN1bHQuc3ViYXJyYXkoMCwgdGhyZWFkRGltWzBdICogdGhyZWFkRGltWzFdICogdGhyZWFkRGltWzJdKTtcblxuXHRcdFx0XHRpZiAob3V0cHV0Lmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAob3V0cHV0Lmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRcdHJldHVybiB1dGlscy5zcGxpdEFycmF5KHJlc3VsdCwgb3V0cHV0WzBdKTtcblx0XHRcdFx0fSBlbHNlIGlmIChvdXRwdXQubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRcdFx0dmFyIGN1YmUgPSB1dGlscy5zcGxpdEFycmF5KHJlc3VsdCwgb3V0cHV0WzBdICogb3V0cHV0WzFdKTtcblx0XHRcdFx0XHRyZXR1cm4gY3ViZS5tYXAoZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB1dGlscy5zcGxpdEFycmF5KHgsIG91dHB1dFswXSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0T3V0cHV0VGV4dHVyZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldE91dHB1dFRleHR1cmUoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRUZXh0dXJlQ2FjaGUoJ09VVFBVVCcpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdkZXRhY2hPdXRwdXRUZXh0dXJlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZGV0YWNoT3V0cHV0VGV4dHVyZSgpIHtcblx0XHRcdHRoaXMuZGV0YWNoVGV4dHVyZUNhY2hlKCdPVVRQVVQnKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0dXBPdXRwdXRUZXh0dXJlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0dXBPdXRwdXRUZXh0dXJlKCkge1xuXHRcdFx0dmFyIGdsID0gdGhpcy5fd2ViR2w7XG5cdFx0XHR2YXIgdGV4U2l6ZSA9IHRoaXMudGV4U2l6ZTtcblx0XHRcdHRoaXMuZGV0YWNoT3V0cHV0VGV4dHVyZSgpO1xuXHRcdFx0dGhpcy5vdXRwdXRUZXh0dXJlID0gdGhpcy5nZXRPdXRwdXRUZXh0dXJlKCk7XG5cdFx0XHRnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgdGhpcy5wYXJhbU5hbWVzLmxlbmd0aCk7XG5cdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLm91dHB1dFRleHR1cmUpO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRcdGlmICh0aGlzLmZsb2F0T3V0cHV0KSB7XG5cdFx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgdGV4U2l6ZVswXSwgdGV4U2l6ZVsxXSwgMCwgZ2wuUkdCQSwgZ2wuRkxPQVQsIG51bGwpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Z2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0QXJndW1lbnRUZXh0dXJlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0QXJndW1lbnRUZXh0dXJlKG5hbWUpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFRleHR1cmVDYWNoZSgnQVJHVU1FTlRfJyArIG5hbWUpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRTdWJLZXJuZWxUZXh0dXJlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0U3ViS2VybmVsVGV4dHVyZShuYW1lKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRUZXh0dXJlQ2FjaGUoJ1NVQl9LRVJORUxfJyArIG5hbWUpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRUZXh0dXJlQ2FjaGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRUZXh0dXJlQ2FjaGUobmFtZSkge1xuXHRcdFx0aWYgKHRoaXMub3V0cHV0VG9UZXh0dXJlKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl93ZWJHbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy50ZXh0dXJlQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZUNhY2hlW25hbWVdO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMudGV4dHVyZUNhY2hlW25hbWVdID0gdGhpcy5fd2ViR2wuY3JlYXRlVGV4dHVyZSgpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdkZXRhY2hUZXh0dXJlQ2FjaGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBkZXRhY2hUZXh0dXJlQ2FjaGUobmFtZSkge1xuXHRcdFx0ZGVsZXRlIHRoaXMudGV4dHVyZUNhY2hlW25hbWVdO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXR1cFBhcmFtcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldHVwUGFyYW1zKGFyZ3MpIHtcblx0XHRcdHZhciBwYXJhbVR5cGVzID0gdGhpcy5wYXJhbVR5cGVzID0gW107XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIHBhcmFtID0gYXJnc1tpXTtcblx0XHRcdFx0dmFyIHBhcmFtVHlwZSA9IHV0aWxzLmdldEFyZ3VtZW50VHlwZShwYXJhbSk7XG5cdFx0XHRcdHBhcmFtVHlwZXMucHVzaChwYXJhbVR5cGUpO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRVbmlmb3JtTG9jYXRpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRVbmlmb3JtTG9jYXRpb24obmFtZSkge1xuXHRcdFx0dmFyIGxvY2F0aW9uID0gdGhpcy5wcm9ncmFtVW5pZm9ybUxvY2F0aW9uQ2FjaGVbbmFtZV07XG5cdFx0XHRpZiAoIWxvY2F0aW9uKSB7XG5cdFx0XHRcdGxvY2F0aW9uID0gdGhpcy5fd2ViR2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgbmFtZSk7XG5cdFx0XHRcdHRoaXMucHJvZ3JhbVVuaWZvcm1Mb2NhdGlvbkNhY2hlW25hbWVdID0gbG9jYXRpb247XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbG9jYXRpb247XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRGcmFnU2hhZGVyQXJ0aWZhY3RNYXAnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0RnJhZ1NoYWRlckFydGlmYWN0TWFwKGFyZ3MpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdEhFQURFUjogdGhpcy5fZ2V0SGVhZGVyU3RyaW5nKCksXG5cdFx0XHRcdExPT1BfTUFYOiB0aGlzLl9nZXRMb29wTWF4U3RyaW5nKCksXG5cdFx0XHRcdENPTlNUQU5UUzogdGhpcy5fZ2V0Q29uc3RhbnRzU3RyaW5nKCksXG5cdFx0XHRcdERFQ09ERTMyX0VORElBTk5FU1M6IHRoaXMuX2dldERlY29kZTMyRW5kaWFubmVzc1N0cmluZygpLFxuXHRcdFx0XHRFTkNPREUzMl9FTkRJQU5ORVNTOiB0aGlzLl9nZXRFbmNvZGUzMkVuZGlhbm5lc3NTdHJpbmcoKSxcblx0XHRcdFx0R0VUX1dSQVBBUk9VTkQ6IHRoaXMuX2dldEdldFdyYXBhcm91bmRTdHJpbmcoKSxcblx0XHRcdFx0R0VUX1RFWFRVUkVfQ0hBTk5FTDogdGhpcy5fZ2V0R2V0VGV4dHVyZUNoYW5uZWxTdHJpbmcoKSxcblx0XHRcdFx0R0VUX1RFWFRVUkVfSU5ERVg6IHRoaXMuX2dldEdldFRleHR1cmVJbmRleFN0cmluZygpLFxuXHRcdFx0XHRHRVRfUkVTVUxUOiB0aGlzLl9nZXRHZXRSZXN1bHRTdHJpbmcoKSxcblx0XHRcdFx0TUFJTl9QQVJBTVM6IHRoaXMuX2dldE1haW5QYXJhbXNTdHJpbmcoYXJncyksXG5cdFx0XHRcdE1BSU5fQ09OU1RBTlRTOiB0aGlzLl9nZXRNYWluQ29uc3RhbnRzU3RyaW5nKCksXG5cdFx0XHRcdEtFUk5FTDogdGhpcy5fZ2V0S2VybmVsU3RyaW5nKCksXG5cdFx0XHRcdE1BSU5fUkVTVUxUOiB0aGlzLl9nZXRNYWluUmVzdWx0U3RyaW5nKClcblx0XHRcdH07XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19hZGRBcmd1bWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9hZGRBcmd1bWVudCh2YWx1ZSwgdHlwZSwgbmFtZSkge1xuXHRcdFx0dmFyIGdsID0gdGhpcy5fd2ViR2w7XG5cdFx0XHR2YXIgYXJndW1lbnRUZXh0dXJlID0gdGhpcy5nZXRBcmd1bWVudFRleHR1cmUobmFtZSk7XG5cdFx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBUZXh0dXJlKSB7XG5cdFx0XHRcdHR5cGUgPSAnVGV4dHVyZSc7XG5cdFx0XHR9XG5cdFx0XHRzd2l0Y2ggKHR5cGUpIHtcblx0XHRcdFx0Y2FzZSAnQXJyYXknOlxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBkaW0gPSB1dGlscy5nZXREaW1lbnNpb25zKHZhbHVlLCB0cnVlKTtcblx0XHRcdFx0XHRcdHZhciBzaXplID0gdXRpbHMuZGltVG9UZXhTaXplKHtcblx0XHRcdFx0XHRcdFx0ZmxvYXRUZXh0dXJlczogdGhpcy5mbG9hdFRleHR1cmVzLFxuXHRcdFx0XHRcdFx0XHRmbG9hdE91dHB1dDogdGhpcy5mbG9hdE91dHB1dFxuXHRcdFx0XHRcdFx0fSwgZGltKTtcblx0XHRcdFx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0aGlzLmFyZ3VtZW50c0xlbmd0aCk7XG5cdFx0XHRcdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBhcmd1bWVudFRleHR1cmUpO1xuXHRcdFx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG5cdFx0XHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdFx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5ORUFSRVNUKTtcblx0XHRcdFx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NQUdfRklMVEVSLCBnbC5ORUFSRVNUKTtcblxuXHRcdFx0XHRcdFx0dmFyIGxlbmd0aCA9IHNpemVbMF0gKiBzaXplWzFdO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuZmxvYXRUZXh0dXJlcykge1xuXHRcdFx0XHRcdFx0XHRsZW5ndGggKj0gNDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIHZhbHVlc0ZsYXQgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG5cdFx0XHRcdFx0XHR1dGlscy5mbGF0dGVuVG8odmFsdWUsIHZhbHVlc0ZsYXQpO1xuXG5cdFx0XHRcdFx0XHR2YXIgYnVmZmVyID0gdm9pZCAwO1xuXHRcdFx0XHRcdFx0aWYgKHRoaXMuZmxvYXRUZXh0dXJlcykge1xuXHRcdFx0XHRcdFx0XHRidWZmZXIgPSBuZXcgRmxvYXQzMkFycmF5KHZhbHVlc0ZsYXQpO1xuXHRcdFx0XHRcdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHNpemVbMF0sIHNpemVbMV0sIDAsIGdsLlJHQkEsIGdsLkZMT0FULCBidWZmZXIpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0YnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkobmV3IEZsb2F0MzJBcnJheSh2YWx1ZXNGbGF0KS5idWZmZXIpO1xuXHRcdFx0XHRcdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHNpemVbMF0sIHNpemVbMV0sIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGJ1ZmZlcik7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHZhciBsb2MgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbigndXNlcl8nICsgbmFtZSk7XG5cdFx0XHRcdFx0XHR2YXIgbG9jU2l6ZSA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1c2VyXycgKyBuYW1lICsgJ1NpemUnKTtcblx0XHRcdFx0XHRcdHZhciBkaW1Mb2MgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbigndXNlcl8nICsgbmFtZSArICdEaW0nKTtcblxuXHRcdFx0XHRcdFx0aWYgKCF0aGlzLmhhcmRjb2RlQ29uc3RhbnRzKSB7XG5cdFx0XHRcdFx0XHRcdGdsLnVuaWZvcm0zZnYoZGltTG9jLCBkaW0pO1xuXHRcdFx0XHRcdFx0XHRnbC51bmlmb3JtMmZ2KGxvY1NpemUsIHNpemUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Z2wudW5pZm9ybTFpKGxvYywgdGhpcy5hcmd1bWVudHNMZW5ndGgpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlICdOdW1iZXInOlxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHZhciBfbG9jID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oJ3VzZXJfJyArIG5hbWUpO1xuXHRcdFx0XHRcdFx0Z2wudW5pZm9ybTFmKF9sb2MsIHZhbHVlKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0Y2FzZSAnVGV4dHVyZSc6XG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dmFyIGlucHV0VGV4dHVyZSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0dmFyIF9kaW0gPSB1dGlscy5nZXREaW1lbnNpb25zKGlucHV0VGV4dHVyZSwgdHJ1ZSk7XG5cblx0XHRcdFx0XHRcdHZhciBfc2l6ZSA9IGlucHV0VGV4dHVyZS5zaXplO1xuXG5cdFx0XHRcdFx0XHRpZiAoaW5wdXRUZXh0dXJlLnRleHR1cmUgPT09IHRoaXMub3V0cHV0VGV4dHVyZSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNldHVwT3V0cHV0VGV4dHVyZSgpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwICsgdGhpcy5hcmd1bWVudHNMZW5ndGgpO1xuXHRcdFx0XHRcdFx0Z2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgaW5wdXRUZXh0dXJlLnRleHR1cmUpO1xuXG5cdFx0XHRcdFx0XHR2YXIgX2xvYzIgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbigndXNlcl8nICsgbmFtZSk7XG5cdFx0XHRcdFx0XHR2YXIgX2xvY1NpemUgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbigndXNlcl8nICsgbmFtZSArICdTaXplJyk7XG5cdFx0XHRcdFx0XHR2YXIgX2RpbUxvYyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1c2VyXycgKyBuYW1lICsgJ0RpbScpO1xuXG5cdFx0XHRcdFx0XHRnbC51bmlmb3JtM2Z2KF9kaW1Mb2MsIF9kaW0pO1xuXHRcdFx0XHRcdFx0Z2wudW5pZm9ybTJmdihfbG9jU2l6ZSwgX3NpemUpO1xuXHRcdFx0XHRcdFx0Z2wudW5pZm9ybTFpKF9sb2MyLCB0aGlzLmFyZ3VtZW50c0xlbmd0aCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0dGhyb3cgJ0lucHV0IHR5cGUgbm90IHN1cHBvcnRlZCAoV2ViR0wpOiAnICsgdmFsdWU7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLmFyZ3VtZW50c0xlbmd0aCsrO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0SGVhZGVyU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldEhlYWRlclN0cmluZygpIHtcblx0XHRcdHJldHVybiB0aGlzLnN1Yktlcm5lbHMgIT09IG51bGwgfHwgdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzICE9PSBudWxsID9cblx0XHRcdCcjZXh0ZW5zaW9uIEdMX0VYVF9kcmF3X2J1ZmZlcnMgOiByZXF1aXJlXFxuJyA6ICcnO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0TG9vcE1heFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRMb29wTWF4U3RyaW5nKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubG9vcE1heEl0ZXJhdGlvbnMgPyAnICcgKyBwYXJzZUludCh0aGlzLmxvb3BNYXhJdGVyYXRpb25zKSArICcuMDtcXG4nIDogJyAxMDAwLjA7XFxuJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldENvbnN0YW50c1N0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRDb25zdGFudHNTdHJpbmcoKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHR2YXIgdGhyZWFkRGltID0gdGhpcy50aHJlYWREaW07XG5cdFx0XHR2YXIgdGV4U2l6ZSA9IHRoaXMudGV4U2l6ZTtcblx0XHRcdGlmICh0aGlzLmhhcmRjb2RlQ29uc3RhbnRzKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKCdoaWdocCB2ZWMzIHVPdXRwdXREaW0gPSB2ZWMzKCcgKyB0aHJlYWREaW1bMF0gKyAnLCcgKyB0aHJlYWREaW1bMV0gKyAnLCAnICsgdGhyZWFkRGltWzJdICsgJyknLCAnaGlnaHAgdmVjMiB1VGV4U2l6ZSA9IHZlYzIoJyArIHRleFNpemVbMF0gKyAnLCAnICsgdGV4U2l6ZVsxXSArICcpJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgndW5pZm9ybSBoaWdocCB2ZWMzIHVPdXRwdXREaW0nLCAndW5pZm9ybSBoaWdocCB2ZWMyIHVUZXhTaXplJyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLl9saW5lc1RvU3RyaW5nKHJlc3VsdCk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRUZXh0dXJlQ29vcmRpbmF0ZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRUZXh0dXJlQ29vcmRpbmF0ZSgpIHtcblx0XHRcdHZhciBuYW1lcyA9IHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcztcblx0XHRcdGlmIChuYW1lcyA9PT0gbnVsbCB8fCBuYW1lcy5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdHJldHVybiAndmFyeWluZyBoaWdocCB2ZWMyIHZUZXhDb29yZDtcXG4nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuICdvdXQgaGlnaHAgdmVjMiB2VGV4Q29vcmQ7XFxuJztcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldERlY29kZTMyRW5kaWFubmVzc1N0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXREZWNvZGUzMkVuZGlhbm5lc3NTdHJpbmcoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbmRpYW5uZXNzID09PSAnTEUnID8gJycgOiAnICByZ2JhLnJnYmEgPSByZ2JhLmFiZ3I7XFxuJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEVuY29kZTMyRW5kaWFubmVzc1N0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRFbmNvZGUzMkVuZGlhbm5lc3NTdHJpbmcoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lbmRpYW5uZXNzID09PSAnTEUnID8gJycgOiAnICByZ2JhLnJnYmEgPSByZ2JhLmFiZ3I7XFxuJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEdldFdyYXBhcm91bmRTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0R2V0V3JhcGFyb3VuZFN0cmluZygpIHtcblx0XHRcdHJldHVybiB0aGlzLndyYXBhcm91bmQgPyAnICB4eXogPSBtb2QoeHl6LCB0ZXhEaW0pO1xcbicgOiAnJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEdldFRleHR1cmVDaGFubmVsU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldEdldFRleHR1cmVDaGFubmVsU3RyaW5nKCkge1xuXHRcdFx0aWYgKCF0aGlzLmZsb2F0VGV4dHVyZXMpIHJldHVybiAnJztcblxuXHRcdFx0cmV0dXJuIHRoaXMuX2xpbmVzVG9TdHJpbmcoWycgIGludCBjaGFubmVsID0gaW50KGludGVnZXJNb2QoaW5kZXgsIDQuMCkpJywgJyAgaW5kZXggPSBmbG9hdChpbnQoaW5kZXgpIC8gNCknXSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRHZXRUZXh0dXJlSW5kZXhTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0R2V0VGV4dHVyZUluZGV4U3RyaW5nKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZmxvYXRUZXh0dXJlcyA/ICcgIGluZGV4ID0gZmxvYXQoaW50KGluZGV4KS80KTtcXG4nIDogJyc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRHZXRSZXN1bHRTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0R2V0UmVzdWx0U3RyaW5nKCkge1xuXHRcdFx0aWYgKCF0aGlzLmZsb2F0VGV4dHVyZXMpIHJldHVybiAnICByZXR1cm4gZGVjb2RlMzIodGV4ZWwpO1xcbic7XG5cdFx0XHRyZXR1cm4gdGhpcy5fbGluZXNUb1N0cmluZyhbJyAgaWYgKGNoYW5uZWwgPT0gMCkgcmV0dXJuIHRleGVsLnInLCAnICBpZiAoY2hhbm5lbCA9PSAxKSByZXR1cm4gdGV4ZWwuZycsICcgIGlmIChjaGFubmVsID09IDIpIHJldHVybiB0ZXhlbC5iJywgJyAgaWYgKGNoYW5uZWwgPT0gMykgcmV0dXJuIHRleGVsLmEnXSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRNYWluUGFyYW1zU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldE1haW5QYXJhbXNTdHJpbmcoYXJncykge1xuXHRcdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdFx0dmFyIHBhcmFtVHlwZXMgPSB0aGlzLnBhcmFtVHlwZXM7XG5cdFx0XHR2YXIgcGFyYW1OYW1lcyA9IHRoaXMucGFyYW1OYW1lcztcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1OYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyYW0gPSBhcmdzW2ldO1xuXHRcdFx0XHR2YXIgcGFyYW1OYW1lID0gcGFyYW1OYW1lc1tpXTtcblx0XHRcdFx0dmFyIHBhcmFtVHlwZSA9IHBhcmFtVHlwZXNbaV07XG5cdFx0XHRcdGlmICh0aGlzLmhhcmRjb2RlQ29uc3RhbnRzKSB7XG5cdFx0XHRcdFx0aWYgKHBhcmFtVHlwZSA9PT0gJ0FycmF5JyB8fCBwYXJhbVR5cGUgPT09ICdUZXh0dXJlJykge1xuXHRcdFx0XHRcdFx0dmFyIHBhcmFtRGltID0gdXRpbHMuZ2V0RGltZW5zaW9ucyhwYXJhbSwgdHJ1ZSk7XG5cdFx0XHRcdFx0XHR2YXIgcGFyYW1TaXplID0gdXRpbHMuZGltVG9UZXhTaXplKHtcblx0XHRcdFx0XHRcdFx0ZmxvYXRUZXh0dXJlczogdGhpcy5mbG9hdFRleHR1cmVzLFxuXHRcdFx0XHRcdFx0XHRmbG9hdE91dHB1dDogdGhpcy5mbG9hdE91dHB1dFxuXHRcdFx0XHRcdFx0fSwgcGFyYW1EaW0pO1xuXG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaCgndW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdXNlcl8nICsgcGFyYW1OYW1lLCAnaGlnaHAgdmVjMiB1c2VyXycgKyBwYXJhbU5hbWUgKyAnU2l6ZSA9IHZlYzIoJyArIHBhcmFtU2l6ZVswXSArICcuMCwgJyArIHBhcmFtU2l6ZVsxXSArICcuMCknLCAnaGlnaHAgdmVjMyB1c2VyXycgKyBwYXJhbU5hbWUgKyAnRGltID0gdmVjMygnICsgcGFyYW1EaW1bMF0gKyAnLjAsICcgKyBwYXJhbURpbVsxXSArICcuMCwgJyArIHBhcmFtRGltWzJdICsgJy4wKScpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1UeXBlID09PSAnTnVtYmVyJyAmJiBOdW1iZXIuaXNJbnRlZ2VyKHBhcmFtKSkge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnB1c2goJ2hpZ2hwIGZsb2F0IHVzZXJfJyArIHBhcmFtTmFtZSArICcgPSAnICsgcGFyYW0gKyAnLjAnKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHBhcmFtVHlwZSA9PT0gJ051bWJlcicpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKCdoaWdocCBmbG9hdCB1c2VyXycgKyBwYXJhbU5hbWUgKyAnID0gJyArIHBhcmFtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aWYgKHBhcmFtVHlwZSA9PT0gJ0FycmF5JyB8fCBwYXJhbVR5cGUgPT09ICdUZXh0dXJlJykge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnB1c2goJ3VuaWZvcm0gaGlnaHAgc2FtcGxlcjJEIHVzZXJfJyArIHBhcmFtTmFtZSwgJ3VuaWZvcm0gaGlnaHAgdmVjMiB1c2VyXycgKyBwYXJhbU5hbWUgKyAnU2l6ZScsICd1bmlmb3JtIGhpZ2hwIHZlYzMgdXNlcl8nICsgcGFyYW1OYW1lICsgJ0RpbScpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1UeXBlID09PSAnTnVtYmVyJykge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnB1c2goJ3VuaWZvcm0gaGlnaHAgZmxvYXQgdXNlcl8nICsgcGFyYW1OYW1lKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLl9saW5lc1RvU3RyaW5nKHJlc3VsdCk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRNYWluQ29uc3RhbnRzU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldE1haW5Db25zdGFudHNTdHJpbmcoKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHRpZiAodGhpcy5jb25zdGFudHMpIHtcblx0XHRcdFx0Zm9yICh2YXIgbmFtZSBpbiB0aGlzLmNvbnN0YW50cykge1xuXHRcdFx0XHRcdGlmICghdGhpcy5jb25zdGFudHMuaGFzT3duUHJvcGVydHkobmFtZSkpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdHZhciB2YWx1ZSA9IHBhcnNlRmxvYXQodGhpcy5jb25zdGFudHNbbmFtZV0pO1xuXG5cdFx0XHRcdFx0aWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaCgnY29uc3QgZmxvYXQgY29uc3RhbnRzXycgKyBuYW1lICsgJyA9ICcgKyBwYXJzZUludCh2YWx1ZSkgKyAnLjAnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnB1c2goJ2NvbnN0IGZsb2F0IGNvbnN0YW50c18nICsgbmFtZSArICcgPSAnICsgcGFyc2VGbG9hdCh2YWx1ZSkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuX2xpbmVzVG9TdHJpbmcocmVzdWx0KTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEtlcm5lbFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRLZXJuZWxTdHJpbmcoKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHR2YXIgbmFtZXMgPSB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXM7XG5cdFx0XHRpZiAobmFtZXMgIT09IG51bGwpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goJ2hpZ2hwIGZsb2F0IGtlcm5lbFJlc3VsdCA9IDAuMCcpO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG5hbWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0cmVzdWx0LnB1c2goJ2hpZ2hwIGZsb2F0ICcgKyBuYW1lc1tpXSArICcgPSAwLjAnKTtcblx0XHRcdFx0fVxuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnaGlnaHAgZmxvYXQga2VybmVsUmVzdWx0ID0gMC4wJyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLl9saW5lc1RvU3RyaW5nKHJlc3VsdCkgKyB0aGlzLmZ1bmN0aW9uQnVpbGRlci5nZXRQcm90b3R5cGVTdHJpbmcoJ2tlcm5lbCcpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0TWFpblJlc3VsdFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRNYWluUmVzdWx0U3RyaW5nKCkge1xuXHRcdFx0dmFyIG5hbWVzID0gdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzO1xuXHRcdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdFx0aWYgKHRoaXMuZmxvYXRPdXRwdXQpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goJyAgaW5kZXggKj0gNC4wJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmdyYXBoaWNhbCkge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnICB0aHJlYWRJZCA9IGluZGV4VG8zRChpbmRleCwgdU91dHB1dERpbSknLCAnICBrZXJuZWwoKScsICcgIGdsX0ZyYWdDb2xvciA9IGFjdHVhbENvbG9yJyk7XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuZmxvYXRPdXRwdXQpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goJyAgdGhyZWFkSWQgPSBpbmRleFRvM0QoaW5kZXgsIHVPdXRwdXREaW0pJywgJyAga2VybmVsKCknLCAnICBnbF9GcmFnQ29sb3IuciA9IGtlcm5lbFJlc3VsdCcsICcgIGluZGV4ICs9IDEuMCcsICcgIHRocmVhZElkID0gaW5kZXhUbzNEKGluZGV4LCB1T3V0cHV0RGltKScsICcgIGtlcm5lbCgpJywgJyAgZ2xfRnJhZ0NvbG9yLmcgPSBrZXJuZWxSZXN1bHQnLCAnICBpbmRleCArPSAxLjAnLCAnICB0aHJlYWRJZCA9IGluZGV4VG8zRChpbmRleCwgdU91dHB1dERpbSknLCAnICBrZXJuZWwoKScsICcgIGdsX0ZyYWdDb2xvci5iID0ga2VybmVsUmVzdWx0JywgJyAgaW5kZXggKz0gMS4wJywgJyAgdGhyZWFkSWQgPSBpbmRleFRvM0QoaW5kZXgsIHVPdXRwdXREaW0pJywgJyAga2VybmVsKCknLCAnICBnbF9GcmFnQ29sb3IuYSA9IGtlcm5lbFJlc3VsdCcpO1xuXHRcdFx0fSBlbHNlIGlmIChuYW1lcyAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnICB0aHJlYWRJZCA9IGluZGV4VG8zRChpbmRleCwgdU91dHB1dERpbSknKTtcblx0XHRcdFx0cmVzdWx0LnB1c2goJyAga2VybmVsKCknKTtcblx0XHRcdFx0cmVzdWx0LnB1c2goJyAgZ2xfRnJhZ0RhdGFbMF0gPSBlbmNvZGUzMihrZXJuZWxSZXN1bHQpJyk7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRyZXN1bHQucHVzaCgnICBnbF9GcmFnRGF0YVsnICsgKGkgKyAxKSArICddID0gZW5jb2RlMzIoJyArIG5hbWVzW2ldICsgJyknKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goJyAgdGhyZWFkSWQgPSBpbmRleFRvM0QoaW5kZXgsIHVPdXRwdXREaW0pJywgJyAga2VybmVsKCknLCAnICBnbF9GcmFnQ29sb3IgPSBlbmNvZGUzMihrZXJuZWxSZXN1bHQpJyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLl9saW5lc1RvU3RyaW5nKHJlc3VsdCk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19saW5lc1RvU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2xpbmVzVG9TdHJpbmcobGluZXMpIHtcblx0XHRcdGlmIChsaW5lcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdHJldHVybiBsaW5lcy5qb2luKCc7XFxuJykgKyAnO1xcbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gJ1xcbic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19yZXBsYWNlQXJ0aWZhY3RzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX3JlcGxhY2VBcnRpZmFjdHMoc3JjLCBtYXApIHtcblx0XHRcdHJldHVybiBzcmMucmVwbGFjZSgvWyBdKl9fKFtBLVpdK1swLTldKihbX10/W0EtWl0pKilfXztcXG4vZywgZnVuY3Rpb24gKG1hdGNoLCBhcnRpZmFjdCkge1xuXHRcdFx0XHRpZiAobWFwLmhhc093blByb3BlcnR5KGFydGlmYWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiBtYXBbYXJ0aWZhY3RdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRocm93ICd1bmhhbmRsZWQgYXJ0aWZhY3QgJyArIGFydGlmYWN0O1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19hZGRLZXJuZWxzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2FkZEtlcm5lbHMoKSB7XG5cdFx0XHR2YXIgYnVpbGRlciA9IHRoaXMuZnVuY3Rpb25CdWlsZGVyO1xuXHRcdFx0dmFyIGdsID0gdGhpcy5fd2ViR2w7XG5cblx0XHRcdGJ1aWxkZXIuYWRkRnVuY3Rpb25zKHRoaXMuZnVuY3Rpb25zKTtcblx0XHRcdGJ1aWxkZXIuYWRkTmF0aXZlRnVuY3Rpb25zKHRoaXMubmF0aXZlRnVuY3Rpb25zKTtcblxuXHRcdFx0YnVpbGRlci5hZGRLZXJuZWwodGhpcy5mblN0cmluZywge1xuXHRcdFx0XHRwcm90b3R5cGVPbmx5OiBmYWxzZSxcblx0XHRcdFx0Y29uc3RhbnRzOiB0aGlzLmNvbnN0YW50cyxcblx0XHRcdFx0ZGVidWc6IHRoaXMuZGVidWcsXG5cdFx0XHRcdGxvb3BNYXhJdGVyYXRpb25zOiB0aGlzLmxvb3BNYXhJdGVyYXRpb25zXG5cdFx0XHR9LCB0aGlzLnBhcmFtTmFtZXMsIHRoaXMucGFyYW1UeXBlcyk7XG5cblx0XHRcdGlmICh0aGlzLnN1Yktlcm5lbHMgIT09IG51bGwpIHtcblx0XHRcdFx0dmFyIGV4dCA9IHRoaXMuZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnKTtcblx0XHRcdFx0aWYgKCFleHQpIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGluc3RhbnRpYXRlIGRyYXcgYnVmZmVycyBleHRlbnNpb24nKTtcblx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcyA9IFtdO1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1Yktlcm5lbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHR2YXIgc3ViS2VybmVsID0gdGhpcy5zdWJLZXJuZWxzW2ldO1xuXHRcdFx0XHRcdGJ1aWxkZXIuYWRkU3ViS2VybmVsKHN1Yktlcm5lbCwge1xuXHRcdFx0XHRcdFx0cHJvdG90eXBlT25seTogZmFsc2UsXG5cdFx0XHRcdFx0XHRjb25zdGFudHM6IHRoaXMuY29uc3RhbnRzLFxuXHRcdFx0XHRcdFx0ZGVidWc6IHRoaXMuZGVidWcsXG5cdFx0XHRcdFx0XHRsb29wTWF4SXRlcmF0aW9uczogdGhpcy5sb29wTWF4SXRlcmF0aW9uc1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXMucHVzaCh0aGlzLmdldFN1Yktlcm5lbFRleHR1cmUoaSkpO1xuXHRcdFx0XHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcy5wdXNoKHN1Yktlcm5lbC5uYW1lICsgJ1Jlc3VsdCcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuc3ViS2VybmVsUHJvcGVydGllcyAhPT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgX2V4dCA9IHRoaXMuZXh0ID0gZ2wuZ2V0RXh0ZW5zaW9uKCdXRUJHTF9kcmF3X2J1ZmZlcnMnKTtcblx0XHRcdFx0aWYgKCFfZXh0KSB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBpbnN0YW50aWF0ZSBkcmF3IGJ1ZmZlcnMgZXh0ZW5zaW9uJyk7XG5cdFx0XHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXMgPSBbXTtcblx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID0gW107XG5cdFx0XHRcdHZhciBfaTMgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBwIGluIHRoaXMuc3ViS2VybmVsUHJvcGVydGllcykge1xuXHRcdFx0XHRcdGlmICghdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHApKSBjb250aW51ZTtcblx0XHRcdFx0XHR2YXIgX3N1Yktlcm5lbCA9IHRoaXMuc3ViS2VybmVsUHJvcGVydGllc1twXTtcblx0XHRcdFx0XHRidWlsZGVyLmFkZFN1Yktlcm5lbChfc3ViS2VybmVsLCB7XG5cdFx0XHRcdFx0XHRwcm90b3R5cGVPbmx5OiBmYWxzZSxcblx0XHRcdFx0XHRcdGNvbnN0YW50czogdGhpcy5jb25zdGFudHMsXG5cdFx0XHRcdFx0XHRkZWJ1ZzogdGhpcy5kZWJ1Zyxcblx0XHRcdFx0XHRcdGxvb3BNYXhJdGVyYXRpb25zOiB0aGlzLmxvb3BNYXhJdGVyYXRpb25zXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcy5wdXNoKHRoaXMuZ2V0U3ViS2VybmVsVGV4dHVyZShwKSk7XG5cdFx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLnB1c2goX3N1Yktlcm5lbC5uYW1lICsgJ1Jlc3VsdCcpO1xuXHRcdFx0XHRcdF9pMysrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRGcmFnU2hhZGVyU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldEZyYWdTaGFkZXJTdHJpbmcoYXJncykge1xuXHRcdFx0aWYgKHRoaXMuY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nICE9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZztcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyA9IHRoaXMuX3JlcGxhY2VBcnRpZmFjdHMoZnJhZ1NoYWRlclN0cmluZywgdGhpcy5fZ2V0RnJhZ1NoYWRlckFydGlmYWN0TWFwKGFyZ3MpKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldFZlcnRTaGFkZXJTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0VmVydFNoYWRlclN0cmluZyhhcmdzKSB7XG5cdFx0XHRpZiAodGhpcy5jb21waWxlZFZlcnRTaGFkZXJTdHJpbmcgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29tcGlsZWRWZXJ0U2hhZGVyU3RyaW5nO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuY29tcGlsZWRWZXJ0U2hhZGVyU3RyaW5nID0gdmVydFNoYWRlclN0cmluZztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAndG9TdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRcdHJldHVybiBrZXJuZWxTdHJpbmcodGhpcyk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYWRkRnVuY3Rpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhZGRGdW5jdGlvbihmbikge1xuXHRcdFx0dGhpcy5mdW5jdGlvbkJ1aWxkZXIuYWRkRnVuY3Rpb24obnVsbCwgZm4pO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBXZWJHTEtlcm5lbDtcbn0oS2VybmVsQmFzZSk7XG59LHtcIi4uLy4uL2NvcmUvdGV4dHVyZVwiOjIyLFwiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4va2VybmVsLWJhc2VcIjo4LFwiLi9rZXJuZWwtc3RyaW5nXCI6MTMsXCIuL3NoYWRlci1mcmFnXCI6MTYsXCIuL3NoYWRlci12ZXJ0XCI6MTcsXCJmc1wiOjI3fV0sMTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBSdW5uZXJCYXNlID0gcmVxdWlyZSgnLi4vcnVubmVyLWJhc2UnKTtcbnZhciBXZWJHTEtlcm5lbCA9IHJlcXVpcmUoJy4va2VybmVsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9jb3JlL3V0aWxzJyk7XG52YXIgV2ViR0xGdW5jdGlvbkJ1aWxkZXIgPSByZXF1aXJlKCcuL2Z1bmN0aW9uLWJ1aWxkZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX1J1bm5lckJhc2UpIHtcblx0X2luaGVyaXRzKFdlYkdMUnVubmVyLCBfUnVubmVyQmFzZSk7XG5cblx0ZnVuY3Rpb24gV2ViR0xSdW5uZXIoc2V0dGluZ3MpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViR0xSdW5uZXIpO1xuXG5cdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdlYkdMUnVubmVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoV2ViR0xSdW5uZXIpKS5jYWxsKHRoaXMsIG5ldyBXZWJHTEZ1bmN0aW9uQnVpbGRlcigpLCBzZXR0aW5ncykpO1xuXG5cdFx0X3RoaXMuS2VybmVsID0gV2ViR0xLZXJuZWw7XG5cdFx0X3RoaXMua2VybmVsID0gbnVsbDtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXG5cblx0X2NyZWF0ZUNsYXNzKFdlYkdMUnVubmVyLCBbe1xuXHRcdGtleTogJ2dldE1vZGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRNb2RlKCkge1xuXHRcdFx0cmV0dXJuICdncHUnO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBXZWJHTFJ1bm5lcjtcbn0oUnVubmVyQmFzZSk7XG59LHtcIi4uLy4uL2NvcmUvdXRpbHNcIjoyNCxcIi4uL3J1bm5lci1iYXNlXCI6MTAsXCIuL2Z1bmN0aW9uLWJ1aWxkZXJcIjoxMSxcIi4va2VybmVsXCI6MTR9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBcIl9fSEVBREVSX187XFxucHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbnByZWNpc2lvbiBoaWdocCBpbnQ7XFxucHJlY2lzaW9uIGhpZ2hwIHNhbXBsZXIyRDtcXG5cXG5jb25zdCBmbG9hdCBMT09QX01BWCA9IF9fTE9PUF9NQVhfXztcXG4jZGVmaW5lIEVQU0lMT04gMC4wMDAwMDAxO1xcblxcbl9fQ09OU1RBTlRTX187XFxuXFxudmFyeWluZyBoaWdocCB2ZWMyIHZUZXhDb29yZDtcXG5cXG52ZWM0IHJvdW5kKHZlYzQgeCkge1xcbiAgcmV0dXJuIGZsb29yKHggKyAwLjUpO1xcbn1cXG5cXG5oaWdocCBmbG9hdCByb3VuZChoaWdocCBmbG9hdCB4KSB7XFxuICByZXR1cm4gZmxvb3IoeCArIDAuNSk7XFxufVxcblxcbnZlYzIgaW50ZWdlck1vZCh2ZWMyIHgsIGZsb2F0IHkpIHtcXG4gIHZlYzIgcmVzID0gZmxvb3IobW9kKHgsIHkpKTtcXG4gIHJldHVybiByZXMgKiBzdGVwKDEuMCAtIGZsb29yKHkpLCAtcmVzKTtcXG59XFxuXFxudmVjMyBpbnRlZ2VyTW9kKHZlYzMgeCwgZmxvYXQgeSkge1xcbiAgdmVjMyByZXMgPSBmbG9vcihtb2QoeCwgeSkpO1xcbiAgcmV0dXJuIHJlcyAqIHN0ZXAoMS4wIC0gZmxvb3IoeSksIC1yZXMpO1xcbn1cXG5cXG52ZWM0IGludGVnZXJNb2QodmVjNCB4LCB2ZWM0IHkpIHtcXG4gIHZlYzQgcmVzID0gZmxvb3IobW9kKHgsIHkpKTtcXG4gIHJldHVybiByZXMgKiBzdGVwKDEuMCAtIGZsb29yKHkpLCAtcmVzKTtcXG59XFxuXFxuaGlnaHAgZmxvYXQgaW50ZWdlck1vZChoaWdocCBmbG9hdCB4LCBoaWdocCBmbG9hdCB5KSB7XFxuICBoaWdocCBmbG9hdCByZXMgPSBmbG9vcihtb2QoeCwgeSkpO1xcbiAgcmV0dXJuIHJlcyAqIChyZXMgPiBmbG9vcih5KSAtIDEuMCA/IDAuMCA6IDEuMCk7XFxufVxcblxcbmhpZ2hwIGludCBpbnRlZ2VyTW9kKGhpZ2hwIGludCB4LCBoaWdocCBpbnQgeSkge1xcbiAgcmV0dXJuIGludChpbnRlZ2VyTW9kKGZsb2F0KHgpLCBmbG9hdCh5KSkpO1xcbn1cXG5cXG4vLyBIZXJlIGJlIGRyYWdvbnMhXFxuLy8gRE8gTk9UIE9QVElNSVpFIFRISVMgQ09ERVxcbi8vIFlPVSBXSUxMIEJSRUFLIFNPTUVUSElORyBPTiBTT01FQk9EWSdTIE1BQ0hJTkVcXG4vLyBMRUFWRSBJVCBBUyBJVCBJUywgTEVTVCBZT1UgV0FTVEUgWU9VUiBPV04gVElNRVxcbmNvbnN0IHZlYzIgTUFHSUNfVkVDID0gdmVjMigxLjAsIC0yNTYuMCk7XFxuY29uc3QgdmVjNCBTQ0FMRV9GQUNUT1IgPSB2ZWM0KDEuMCwgMjU2LjAsIDY1NTM2LjAsIDAuMCk7XFxuY29uc3QgdmVjNCBTQ0FMRV9GQUNUT1JfSU5WID0gdmVjNCgxLjAsIDAuMDAzOTA2MjUsIDAuMDAwMDE1MjU4Nzg5MDYyNSwgMC4wKTsgLy8gMSwgMS8yNTYsIDEvNjU1MzZcXG5oaWdocCBmbG9hdCBkZWNvZGUzMihoaWdocCB2ZWM0IHJnYmEpIHtcXG4gIF9fREVDT0RFMzJfRU5ESUFOTkVTU19fO1xcbiAgcmdiYSAqPSAyNTUuMDtcXG4gIHZlYzIgZ3RlMTI4O1xcbiAgZ3RlMTI4LnggPSByZ2JhLmIgPj0gMTI4LjAgPyAxLjAgOiAwLjA7XFxuICBndGUxMjgueSA9IHJnYmEuYSA+PSAxMjguMCA/IDEuMCA6IDAuMDtcXG4gIGZsb2F0IGV4cG9uZW50ID0gMi4wICogcmdiYS5hIC0gMTI3LjAgKyBkb3QoZ3RlMTI4LCBNQUdJQ19WRUMpO1xcbiAgZmxvYXQgcmVzID0gZXhwMihyb3VuZChleHBvbmVudCkpO1xcbiAgcmdiYS5iID0gcmdiYS5iIC0gMTI4LjAgKiBndGUxMjgueDtcXG4gIHJlcyA9IGRvdChyZ2JhLCBTQ0FMRV9GQUNUT1IpICogZXhwMihyb3VuZChleHBvbmVudC0yMy4wKSkgKyByZXM7XFxuICByZXMgKj0gZ3RlMTI4LnkgKiAtMi4wICsgMS4wO1xcbiAgcmV0dXJuIHJlcztcXG59XFxuXFxuaGlnaHAgdmVjNCBlbmNvZGUzMihoaWdocCBmbG9hdCBmKSB7XFxuICBoaWdocCBmbG9hdCBGID0gYWJzKGYpO1xcbiAgaGlnaHAgZmxvYXQgc2lnbiA9IGYgPCAwLjAgPyAxLjAgOiAwLjA7XFxuICBoaWdocCBmbG9hdCBleHBvbmVudCA9IGZsb29yKGxvZzIoRikpO1xcbiAgaGlnaHAgZmxvYXQgbWFudGlzc2EgPSAoZXhwMigtZXhwb25lbnQpICogRik7XFxuICAvLyBleHBvbmVudCArPSBmbG9vcihsb2cyKG1hbnRpc3NhKSk7XFxuICB2ZWM0IHJnYmEgPSB2ZWM0KEYgKiBleHAyKDIzLjAtZXhwb25lbnQpKSAqIFNDQUxFX0ZBQ1RPUl9JTlY7XFxuICByZ2JhLnJnID0gaW50ZWdlck1vZChyZ2JhLnJnLCAyNTYuMCk7XFxuICByZ2JhLmIgPSBpbnRlZ2VyTW9kKHJnYmEuYiwgMTI4LjApO1xcbiAgcmdiYS5hID0gZXhwb25lbnQqMC41ICsgNjMuNTtcXG4gIHJnYmEuYmEgKz0gdmVjMihpbnRlZ2VyTW9kKGV4cG9uZW50KzEyNy4wLCAyLjApLCBzaWduKSAqIDEyOC4wO1xcbiAgcmdiYSA9IGZsb29yKHJnYmEpO1xcbiAgcmdiYSAqPSAwLjAwMzkyMTU2OTsgLy8gMS8yNTVcXG4gIF9fRU5DT0RFMzJfRU5ESUFOTkVTU19fO1xcbiAgcmV0dXJuIHJnYmE7XFxufVxcbi8vIERyYWdvbnMgZW5kIGhlcmVcXG5cXG5oaWdocCBmbG9hdCBpbmRleDtcXG5oaWdocCB2ZWMzIHRocmVhZElkO1xcblxcbmhpZ2hwIHZlYzMgaW5kZXhUbzNEKGhpZ2hwIGZsb2F0IGlkeCwgaGlnaHAgdmVjMyB0ZXhEaW0pIHtcXG4gIGhpZ2hwIGZsb2F0IHogPSBmbG9vcihpZHggLyAodGV4RGltLnggKiB0ZXhEaW0ueSkpO1xcbiAgaWR4IC09IHogKiB0ZXhEaW0ueCAqIHRleERpbS55O1xcbiAgaGlnaHAgZmxvYXQgeSA9IGZsb29yKGlkeCAvIHRleERpbS54KTtcXG4gIGhpZ2hwIGZsb2F0IHggPSBpbnRlZ2VyTW9kKGlkeCwgdGV4RGltLngpO1xcbiAgcmV0dXJuIHZlYzMoeCwgeSwgeik7XFxufVxcblxcbmhpZ2hwIGZsb2F0IGdldChoaWdocCBzYW1wbGVyMkQgdGV4LCBoaWdocCB2ZWMyIHRleFNpemUsIGhpZ2hwIHZlYzMgdGV4RGltLCBoaWdocCBmbG9hdCB6LCBoaWdocCBmbG9hdCB5LCBoaWdocCBmbG9hdCB4KSB7XFxuICBoaWdocCB2ZWMzIHh5eiA9IHZlYzMoeCwgeSwgeik7XFxuICB4eXogPSBmbG9vcih4eXogKyAwLjUpO1xcbiAgX19HRVRfV1JBUEFST1VORF9fO1xcbiAgaGlnaHAgZmxvYXQgaW5kZXggPSByb3VuZCh4eXoueCArIHRleERpbS54ICogKHh5ei55ICsgdGV4RGltLnkgKiB4eXoueikpO1xcbiAgX19HRVRfVEVYVFVSRV9DSEFOTkVMX187XFxuICBoaWdocCBmbG9hdCB3ID0gcm91bmQodGV4U2l6ZS54KTtcXG4gIHZlYzIgc3QgPSB2ZWMyKGludGVnZXJNb2QoaW5kZXgsIHcpLCBmbG9hdChpbnQoaW5kZXgpIC8gaW50KHcpKSkgKyAwLjU7XFxuICBfX0dFVF9URVhUVVJFX0lOREVYX187XFxuICBoaWdocCB2ZWM0IHRleGVsID0gdGV4dHVyZTJEKHRleCwgc3QgLyB0ZXhTaXplKTtcXG4gIF9fR0VUX1JFU1VMVF9fO1xcbn1cXG5cXG5oaWdocCBmbG9hdCBnZXQoaGlnaHAgc2FtcGxlcjJEIHRleCwgaGlnaHAgdmVjMiB0ZXhTaXplLCBoaWdocCB2ZWMzIHRleERpbSwgaGlnaHAgZmxvYXQgeSwgaGlnaHAgZmxvYXQgeCkge1xcbiAgcmV0dXJuIGdldCh0ZXgsIHRleFNpemUsIHRleERpbSwgMC4wLCB5LCB4KTtcXG59XFxuXFxuaGlnaHAgZmxvYXQgZ2V0KGhpZ2hwIHNhbXBsZXIyRCB0ZXgsIGhpZ2hwIHZlYzIgdGV4U2l6ZSwgaGlnaHAgdmVjMyB0ZXhEaW0sIGhpZ2hwIGZsb2F0IHgpIHtcXG4gIHJldHVybiBnZXQodGV4LCB0ZXhTaXplLCB0ZXhEaW0sIDAuMCwgMC4wLCB4KTtcXG59XFxuXFxuaGlnaHAgdmVjNCBhY3R1YWxDb2xvcjtcXG52b2lkIGNvbG9yKGZsb2F0IHIsIGZsb2F0IGcsIGZsb2F0IGIsIGZsb2F0IGEpIHtcXG4gIGFjdHVhbENvbG9yID0gdmVjNChyLGcsYixhKTtcXG59XFxuXFxudm9pZCBjb2xvcihmbG9hdCByLCBmbG9hdCBnLCBmbG9hdCBiKSB7XFxuICBjb2xvcihyLGcsYiwxLjApO1xcbn1cXG5cXG5fX01BSU5fUEFSQU1TX187XFxuX19NQUlOX0NPTlNUQU5UU19fO1xcbl9fS0VSTkVMX187XFxuXFxudm9pZCBtYWluKHZvaWQpIHtcXG4gIGluZGV4ID0gZmxvb3IodlRleENvb3JkLnMgKiBmbG9hdCh1VGV4U2l6ZS54KSkgKyBmbG9vcih2VGV4Q29vcmQudCAqIGZsb2F0KHVUZXhTaXplLnkpKSAqIHVUZXhTaXplLng7XFxuICBfX01BSU5fUkVTVUxUX187XFxufVwiO1xufSx7fV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5wcmVjaXNpb24gaGlnaHAgc2FtcGxlcjJEO1xcblxcbmF0dHJpYnV0ZSBoaWdocCB2ZWMyIGFQb3M7XFxuYXR0cmlidXRlIGhpZ2hwIHZlYzIgYVRleENvb3JkO1xcblxcbnZhcnlpbmcgaGlnaHAgdmVjMiB2VGV4Q29vcmQ7XFxudW5pZm9ybSB2ZWMyIHJhdGlvO1xcblxcbnZvaWQgbWFpbih2b2lkKSB7XFxuICBnbF9Qb3NpdGlvbiA9IHZlYzQoKGFQb3MgKyB2ZWMyKDEpKSAqIHJhdGlvICsgdmVjMigtMSksIDAsIDEpO1xcbiAgdlRleENvb3JkID0gYVRleENvb3JkO1xcbn1cIjtcbn0se31dLDE4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgV2ViR0xLZXJuZWwgPSByZXF1aXJlKCcuL2tlcm5lbCcpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vY29yZS91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfV2ViR0xLZXJuZWwpIHtcblx0X2luaGVyaXRzKFdlYkdMVmFsaWRhdG9yS2VybmVsLCBfV2ViR0xLZXJuZWwpO1xuXG5cdGZ1bmN0aW9uIFdlYkdMVmFsaWRhdG9yS2VybmVsKCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJHTFZhbGlkYXRvcktlcm5lbCk7XG5cblx0XHRyZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdlYkdMVmFsaWRhdG9yS2VybmVsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoV2ViR0xWYWxpZGF0b3JLZXJuZWwpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhXZWJHTFZhbGlkYXRvcktlcm5lbCwgW3tcblx0XHRrZXk6ICd2YWxpZGF0ZU9wdGlvbnMnLFxuXG5cblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKCkge1xuXHRcdFx0dGhpcy50ZXhTaXplID0gdXRpbHMuZGltVG9UZXhTaXplKHtcblx0XHRcdFx0ZmxvYXRUZXh0dXJlczogdGhpcy5mbG9hdFRleHR1cmVzLFxuXHRcdFx0XHRmbG9hdE91dHB1dDogdGhpcy5mbG9hdE91dHB1dFxuXHRcdFx0fSwgdGhpcy5vdXRwdXQsIHRydWUpO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBXZWJHTFZhbGlkYXRvcktlcm5lbDtcbn0oV2ViR0xLZXJuZWwpO1xufSx7XCIuLi8uLi9jb3JlL3V0aWxzXCI6MjQsXCIuL2tlcm5lbFwiOjE0fV0sMTk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFsaWFzKG5hbWUsIGZuKSB7XG5cdHZhciBmblN0cmluZyA9IGZuLnRvU3RyaW5nKCk7XG5cdHJldHVybiBuZXcgRnVuY3Rpb24oJ3JldHVybiBmdW5jdGlvbiAnICsgbmFtZSArICcgKCcgKyB1dGlscy5nZXRQYXJhbU5hbWVzRnJvbVN0cmluZyhmblN0cmluZykuam9pbignLCAnKSArICcpIHsnICsgdXRpbHMuZ2V0RnVuY3Rpb25Cb2R5RnJvbVN0cmluZyhmblN0cmluZykgKyAnfScpKCk7XG59O1xufSx7XCIuL3V0aWxzXCI6MjR9XSwyMDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBVdGlsc0NvcmUgPSByZXF1aXJlKFwiLi91dGlscy1jb3JlXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gR1BVQ29yZSgpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgR1BVQ29yZSk7XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoR1BVQ29yZSwgbnVsbCwgW3tcblx0XHRrZXk6IFwidmFsaWRhdGVLZXJuZWxPYmpcIixcblxuXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHZhbGlkYXRlS2VybmVsT2JqKGtlcm5lbE9iaikge1xuXG5cdFx0XHRpZiAoa2VybmVsT2JqID09PSBudWxsKSB7XG5cdFx0XHRcdHRocm93IFwiS2VybmVsT2JqIGJlaW5nIHZhbGlkYXRlZCBpcyBOVUxMXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2Yga2VybmVsT2JqID09PSBcInN0cmluZ1wiKSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0a2VybmVsT2JqID0gSlNPTi5wYXJzZShrZXJuZWxPYmopO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5lcnJvcihlKTtcblx0XHRcdFx0XHR0aHJvdyBcIkZhaWxlZCB0byBjb252ZXJ0IEtlcm5lbE9iaiBmcm9tIEpTT04gc3RyaW5nXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoa2VybmVsT2JqID09PSBudWxsKSB7XG5cdFx0XHRcdFx0dGhyb3cgXCJJbnZhbGlkIChOVUxMKSBLZXJuZWxPYmogSlNPTiBzdHJpbmcgcmVwcmVzZW50YXRpb25cIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoa2VybmVsT2JqLmlzS2VybmVsT2JqICE9PSB0cnVlKSB7XG5cdFx0XHRcdHRocm93IFwiRmFpbGVkIG1pc3NpbmcgaXNLZXJuZWxPYmogZmxhZyBjaGVja1wiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ga2VybmVsT2JqO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6IFwibG9hZEtlcm5lbE9ialwiLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBsb2FkS2VybmVsT2JqKGtlcm5lbE9iaiwgaW5PcHQpIHtcblxuXHRcdFx0a2VybmVsT2JqID0gdmFsaWRhdGVLZXJuZWxPYmooa2VybmVsT2JqKTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gR1BVQ29yZTtcbn0oKTtcbn0se1wiLi91dGlscy1jb3JlXCI6MjN9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIFdlYkdMUnVubmVyID0gcmVxdWlyZSgnLi4vYmFja2VuZC93ZWItZ2wvcnVubmVyJyk7XG52YXIgQ1BVUnVubmVyID0gcmVxdWlyZSgnLi4vYmFja2VuZC9jcHUvcnVubmVyJyk7XG52YXIgV2ViR0xWYWxpZGF0b3JLZXJuZWwgPSByZXF1aXJlKCcuLi9iYWNrZW5kL3dlYi1nbC92YWxpZGF0b3Ita2VybmVsJyk7XG52YXIgR1BVQ29yZSA9IHJlcXVpcmUoXCIuL2dwdS1jb3JlXCIpO1xuXG5cbnZhciBHUFUgPSBmdW5jdGlvbiAoX0dQVUNvcmUpIHtcblx0X2luaGVyaXRzKEdQVSwgX0dQVUNvcmUpO1xuXG5cdGZ1bmN0aW9uIEdQVShzZXR0aW5ncykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHUFUpO1xuXG5cdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKEdQVS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKEdQVSkpLmNhbGwodGhpcywgc2V0dGluZ3MpKTtcblxuXHRcdHNldHRpbmdzID0gc2V0dGluZ3MgfHwge307XG5cdFx0X3RoaXMuX2NhbnZhcyA9IHNldHRpbmdzLmNhbnZhcyB8fCBudWxsO1xuXHRcdF90aGlzLl93ZWJHbCA9IHNldHRpbmdzLndlYkdsIHx8IG51bGw7XG5cdFx0dmFyIG1vZGUgPSBzZXR0aW5ncy5tb2RlIHx8ICd3ZWJnbCc7XG5cdFx0aWYgKCF1dGlscy5pc1dlYkdsU3VwcG9ydGVkKCkpIHtcblx0XHRcdGNvbnNvbGUud2FybignV2FybmluZzogZ3B1IG5vdCBzdXBwb3J0ZWQsIGZhbGxpbmcgYmFjayB0byBjcHUgc3VwcG9ydCcpO1xuXHRcdFx0bW9kZSA9ICdjcHUnO1xuXHRcdH1cblxuXHRcdF90aGlzLmtlcm5lbHMgPSBbXTtcblxuXHRcdHZhciBydW5uZXJTZXR0aW5ncyA9IHtcblx0XHRcdGNhbnZhczogX3RoaXMuX2NhbnZhcyxcblx0XHRcdHdlYkdsOiBfdGhpcy5fd2ViR2xcblx0XHR9O1xuXG5cdFx0aWYgKG1vZGUpIHtcblx0XHRcdHN3aXRjaCAobW9kZS50b0xvd2VyQ2FzZSgpKSB7XG5cdFx0XHRcdGNhc2UgJ2NwdSc6XG5cdFx0XHRcdFx0X3RoaXMuX3J1bm5lciA9IG5ldyBDUFVSdW5uZXIocnVubmVyU2V0dGluZ3MpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHUnOlxuXHRcdFx0XHRjYXNlICd3ZWJnbCc6XG5cdFx0XHRcdFx0X3RoaXMuX3J1bm5lciA9IG5ldyBXZWJHTFJ1bm5lcihydW5uZXJTZXR0aW5ncyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ3dlYmdsLXZhbGlkYXRvcic6XG5cdFx0XHRcdFx0X3RoaXMuX3J1bm5lciA9IG5ldyBXZWJHTFJ1bm5lcihydW5uZXJTZXR0aW5ncyk7XG5cdFx0XHRcdFx0X3RoaXMuX3J1bm5lci5LZXJuZWwgPSBXZWJHTFZhbGlkYXRvcktlcm5lbDtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIG1vZGUgKyAnXCIgbW9kZSBpcyBub3QgZGVmaW5lZCcpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXG5cdF9jcmVhdGVDbGFzcyhHUFUsIFt7XG5cdFx0a2V5OiAnY3JlYXRlS2VybmVsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY3JlYXRlS2VybmVsKGZuLCBzZXR0aW5ncykge1xuXHRcdFx0aWYgKHR5cGVvZiBmbiA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0dGhyb3cgJ01pc3NpbmcgZm4gcGFyYW1ldGVyJztcblx0XHRcdH1cblx0XHRcdGlmICghdXRpbHMuaXNGdW5jdGlvbihmbikgJiYgdHlwZW9mIGZuICE9PSAnc3RyaW5nJykge1xuXHRcdFx0XHR0aHJvdyAnZm4gcGFyYW1ldGVyIG5vdCBhIGZ1bmN0aW9uJztcblx0XHRcdH1cblxuXHRcdFx0dmFyIGtlcm5lbCA9IHRoaXMuX3J1bm5lci5idWlsZEtlcm5lbChmbiwgc2V0dGluZ3MgfHwge30pO1xuXG5cdFx0XHRpZiAoIXRoaXMuX2NhbnZhcykge1xuXHRcdFx0XHR0aGlzLl9jYW52YXMgPSBrZXJuZWwuZ2V0Q2FudmFzKCk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIXRoaXMuX3J1bm5lci5jYW52YXMpIHtcblx0XHRcdFx0dGhpcy5fcnVubmVyLmNhbnZhcyA9IGtlcm5lbC5nZXRDYW52YXMoKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5rZXJuZWxzLnB1c2goa2VybmVsKTtcblxuXHRcdFx0cmV0dXJuIGtlcm5lbDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnY3JlYXRlS2VybmVsTWFwJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY3JlYXRlS2VybmVsTWFwKCkge1xuXHRcdFx0dmFyIGZuID0gdm9pZCAwO1xuXHRcdFx0dmFyIHNldHRpbmdzID0gdm9pZCAwO1xuXHRcdFx0aWYgKHR5cGVvZiBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDJdID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGZuID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAyXTtcblx0XHRcdFx0c2V0dGluZ3MgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm4gPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXV0aWxzLmlzV2ViR2xEcmF3QnVmZmVyc1N1cHBvcnRlZCgpKSB7XG5cdFx0XHRcdHRoaXMuX3J1bm5lciA9IG5ldyBDUFVSdW5uZXIoc2V0dGluZ3MpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIga2VybmVsID0gdGhpcy5jcmVhdGVLZXJuZWwoZm4sIHNldHRpbmdzKTtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcblx0XHRcdFx0dmFyIGZ1bmN0aW9ucyA9IGFyZ3VtZW50c1swXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRrZXJuZWwuYWRkU3ViS2VybmVsKGZ1bmN0aW9uc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBfZnVuY3Rpb25zID0gYXJndW1lbnRzWzBdO1xuXHRcdFx0XHRmb3IgKHZhciBwIGluIF9mdW5jdGlvbnMpIHtcblx0XHRcdFx0XHRpZiAoIV9mdW5jdGlvbnMuaGFzT3duUHJvcGVydHkocCkpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdGtlcm5lbC5hZGRTdWJLZXJuZWxQcm9wZXJ0eShwLCBfZnVuY3Rpb25zW3BdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ga2VybmVsO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdjb21iaW5lS2VybmVscycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbWJpbmVLZXJuZWxzKCkge1xuXHRcdFx0dmFyIGxhc3RLZXJuZWwgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDJdO1xuXHRcdFx0dmFyIGNvbWJpbmVkS2VybmVsID0gYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGggLSAxXTtcblx0XHRcdGlmICh0aGlzLmdldE1vZGUoKSA9PT0gJ2NwdScpIHJldHVybiBjb21iaW5lZEtlcm5lbDtcblxuXHRcdFx0dmFyIGNhbnZhcyA9IGFyZ3VtZW50c1swXS5nZXRDYW52YXMoKTtcblx0XHRcdHZhciB3ZWJHbCA9IGFyZ3VtZW50c1swXS5nZXRXZWJHbCgpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGggLSAxOyBpKyspIHtcblx0XHRcdFx0YXJndW1lbnRzW2ldLnNldENhbnZhcyhjYW52YXMpLnNldFdlYkdsKHdlYkdsKS5zZXRPdXRwdXRUb1RleHR1cmUodHJ1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdGNvbWJpbmVkS2VybmVsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG5cdFx0XHRcdHZhciB0ZXhTaXplID0gbGFzdEtlcm5lbC50ZXhTaXplO1xuXHRcdFx0XHR2YXIgZ2wgPSBsYXN0S2VybmVsLmdldFdlYkdsKCk7XG5cdFx0XHRcdHZhciB0aHJlYWREaW0gPSBsYXN0S2VybmVsLnRocmVhZERpbTtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHZvaWQgMDtcblx0XHRcdFx0aWYgKGxhc3RLZXJuZWwuZmxvYXRPdXRwdXQpIHtcblx0XHRcdFx0XHRyZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KHRleFNpemVbMF0gKiB0ZXhTaXplWzFdICogNCk7XG5cdFx0XHRcdFx0Z2wucmVhZFBpeGVscygwLCAwLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdLCBnbC5SR0JBLCBnbC5GTE9BVCwgcmVzdWx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSh0ZXhTaXplWzBdICogdGV4U2l6ZVsxXSAqIDQpO1xuXHRcdFx0XHRcdGdsLnJlYWRQaXhlbHMoMCwgMCwgdGV4U2l6ZVswXSwgdGV4U2l6ZVsxXSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgYnl0ZXMpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkoYnl0ZXMuYnVmZmVyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5zdWJhcnJheSgwLCB0aHJlYWREaW1bMF0gKiB0aHJlYWREaW1bMV0gKiB0aHJlYWREaW1bMl0pO1xuXG5cdFx0XHRcdGlmIChsYXN0S2VybmVsLm91dHB1dC5sZW5ndGggPT09IDEpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0XHR9IGVsc2UgaWYgKGxhc3RLZXJuZWwub3V0cHV0Lmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRcdHJldHVybiB1dGlscy5zcGxpdEFycmF5KHJlc3VsdCwgbGFzdEtlcm5lbC5vdXRwdXRbMF0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGxhc3RLZXJuZWwub3V0cHV0Lmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRcdHZhciBjdWJlID0gdXRpbHMuc3BsaXRBcnJheShyZXN1bHQsIGxhc3RLZXJuZWwub3V0cHV0WzBdICogbGFzdEtlcm5lbC5vdXRwdXRbMV0pO1xuXHRcdFx0XHRcdHJldHVybiBjdWJlLm1hcChmdW5jdGlvbiAoeCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHV0aWxzLnNwbGl0QXJyYXkoeCwgbGFzdEtlcm5lbC5vdXRwdXRbMF0pO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhZGRGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZEZ1bmN0aW9uKGZuLCBwYXJhbVR5cGVzLCByZXR1cm5UeXBlKSB7XG5cdFx0XHR0aGlzLl9ydW5uZXIuZnVuY3Rpb25CdWlsZGVyLmFkZEZ1bmN0aW9uKG51bGwsIGZuLCBwYXJhbVR5cGVzLCByZXR1cm5UeXBlKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhZGROYXRpdmVGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZE5hdGl2ZUZ1bmN0aW9uKG5hbWUsIG5hdGl2ZUZ1bmN0aW9uKSB7XG5cdFx0XHR0aGlzLl9ydW5uZXIuZnVuY3Rpb25CdWlsZGVyLmFkZE5hdGl2ZUZ1bmN0aW9uKG5hbWUsIG5hdGl2ZUZ1bmN0aW9uKTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRNb2RlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kZSgpIHtcblx0XHRcdHJldHVybiB0aGlzLl9ydW5uZXIuZ2V0TW9kZSgpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdpc1dlYkdsU3VwcG9ydGVkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNXZWJHbFN1cHBvcnRlZCgpIHtcblx0XHRcdHJldHVybiB1dGlscy5pc1dlYkdsU3VwcG9ydGVkKCk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldENhbnZhcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldENhbnZhcygpIHtcblx0XHRcdHJldHVybiB0aGlzLl9jYW52YXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFdlYkdsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0V2ViR2woKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fd2ViR2w7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEdQVTtcbn0oR1BVQ29yZSk7XG5cbjtcblxuT2JqZWN0LmFzc2lnbihHUFUsIEdQVUNvcmUpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdQVTtcbn0se1wiLi4vYmFja2VuZC9jcHUvcnVubmVyXCI6NSxcIi4uL2JhY2tlbmQvd2ViLWdsL3J1bm5lclwiOjE1LFwiLi4vYmFja2VuZC93ZWItZ2wvdmFsaWRhdG9yLWtlcm5lbFwiOjE4LFwiLi9ncHUtY29yZVwiOjIwLFwiLi91dGlsc1wiOjI0fV0sMjI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgZ3B1ID0gbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cblx0ZnVuY3Rpb24gVGV4dHVyZSh0ZXh0dXJlLCBzaXplLCBvdXRwdXQsIHdlYkdsKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRleHR1cmUpO1xuXG5cdFx0dGhpcy50ZXh0dXJlID0gdGV4dHVyZTtcblx0XHR0aGlzLnNpemUgPSBzaXplO1xuXHRcdHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuXHRcdHRoaXMud2ViR2wgPSB3ZWJHbDtcblx0XHR0aGlzLmtlcm5lbCA9IG51bGw7XG5cdH1cblxuXG5cblx0X2NyZWF0ZUNsYXNzKFRleHR1cmUsIFt7XG5cdFx0a2V5OiAndG9BcnJheScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHRvQXJyYXkoZ3B1KSB7XG5cdFx0XHRpZiAoIWdwdSkgdGhyb3cgbmV3IEVycm9yKCdZb3UgbmVlZCB0byBwYXNzIHRoZSBHUFUgb2JqZWN0IGZvciB0b0FycmF5IHRvIHdvcmsuJyk7XG5cdFx0XHRpZiAodGhpcy5rZXJuZWwpIHJldHVybiB0aGlzLmtlcm5lbCh0aGlzKTtcblxuXHRcdFx0dGhpcy5rZXJuZWwgPSBncHUuY3JlYXRlS2VybmVsKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRcdHJldHVybiB4W3RoaXMudGhyZWFkLnpdW3RoaXMudGhyZWFkLnldW3RoaXMudGhyZWFkLnhdO1xuXHRcdFx0fSkuc2V0T3V0cHV0KHRoaXMub3V0cHV0KTtcblxuXHRcdFx0cmV0dXJuIHRoaXMua2VybmVsKHRoaXMpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdkZWxldGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMud2ViR2wuZGVsZXRlVGV4dHVyZSh0aGlzLnRleHR1cmUpO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBUZXh0dXJlO1xufSgpO1xufSx7fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBVdGlsc0NvcmUgPSBmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIFV0aWxzQ29yZSgpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXRpbHNDb3JlKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhVdGlsc0NvcmUsIG51bGwsIFt7XG5cdFx0a2V5OiAnaXNDYW52YXMnLFxuXG5cblxuXG5cblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNDYW52YXMoY2FudmFzT2JqKSB7XG5cdFx0XHRyZXR1cm4gY2FudmFzT2JqICE9PSBudWxsICYmIGNhbnZhc09iai5ub2RlTmFtZSAmJiBjYW52YXNPYmouZ2V0Q29udGV4dCAmJiBjYW52YXNPYmoubm9kZU5hbWUudG9VcHBlckNhc2UoKSA9PT0gJ0NBTlZBUyc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2lzQ2FudmFzU3VwcG9ydGVkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNDYW52YXNTdXBwb3J0ZWQoKSB7XG5cdFx0XHRyZXR1cm4gX2lzQ2FudmFzU3VwcG9ydGVkO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdpbml0Q2FudmFzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaW5pdENhbnZhcygpIHtcblx0XHRcdGlmICghX2lzQ2FudmFzU3VwcG9ydGVkKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cblx0XHRcdGNhbnZhcy53aWR0aCA9IDI7XG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gMjtcblxuXHRcdFx0cmV0dXJuIGNhbnZhcztcblx0XHR9XG5cblxuXG5cblx0fSwge1xuXHRcdGtleTogJ2lzV2ViR2wnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc1dlYkdsKHdlYkdsT2JqKSB7XG5cdFx0XHRyZXR1cm4gd2ViR2xPYmogJiYgdHlwZW9mIHdlYkdsT2JqLmdldEV4dGVuc2lvbiA9PT0gJ2Z1bmN0aW9uJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaXNXZWJHbFN1cHBvcnRlZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGlzV2ViR2xTdXBwb3J0ZWQoKSB7XG5cdFx0XHRyZXR1cm4gX2lzV2ViR2xTdXBwb3J0ZWQ7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnaXNXZWJHbERyYXdCdWZmZXJzU3VwcG9ydGVkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNXZWJHbERyYXdCdWZmZXJzU3VwcG9ydGVkKCkge1xuXHRcdFx0cmV0dXJuIF9pc1dlYkdsRHJhd0J1ZmZlcnNTdXBwb3J0ZWQ7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2luaXRXZWJHbERlZmF1bHRPcHRpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaW5pdFdlYkdsRGVmYXVsdE9wdGlvbnMoKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRhbHBoYTogZmFsc2UsXG5cdFx0XHRcdGRlcHRoOiBmYWxzZSxcblx0XHRcdFx0YW50aWFsaWFzOiBmYWxzZVxuXHRcdFx0fTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaW5pdFdlYkdsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaW5pdFdlYkdsKGNhbnZhc09iaikge1xuXG5cdFx0XHRpZiAodHlwZW9mIF9pc0NhbnZhc1N1cHBvcnRlZCAhPT0gJ3VuZGVmaW5lZCcgfHwgY2FudmFzT2JqID09PSBudWxsKSB7XG5cdFx0XHRcdGlmICghX2lzQ2FudmFzU3VwcG9ydGVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKCFVdGlsc0NvcmUuaXNDYW52YXMoY2FudmFzT2JqKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY2FudmFzIG9iamVjdCAtICcgKyBjYW52YXNPYmopO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgd2ViR2wgPSBjYW52YXNPYmouZ2V0Q29udGV4dCgnZXhwZXJpbWVudGFsLXdlYmdsJywgVXRpbHNDb3JlLmluaXRXZWJHbERlZmF1bHRPcHRpb25zKCkpIHx8IGNhbnZhc09iai5nZXRDb250ZXh0KCd3ZWJnbCcsIFV0aWxzQ29yZS5pbml0V2ViR2xEZWZhdWx0T3B0aW9ucygpKTtcblxuXHRcdFx0aWYgKHdlYkdsKSB7XG5cdFx0XHRcdHdlYkdsLk9FU190ZXh0dXJlX2Zsb2F0ID0gd2ViR2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9mbG9hdCcpO1xuXHRcdFx0XHR3ZWJHbC5PRVNfdGV4dHVyZV9mbG9hdF9saW5lYXIgPSB3ZWJHbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xuXHRcdFx0XHR3ZWJHbC5PRVNfZWxlbWVudF9pbmRleF91aW50ID0gd2ViR2wuZ2V0RXh0ZW5zaW9uKCdPRVNfZWxlbWVudF9pbmRleF91aW50Jyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB3ZWJHbDtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gVXRpbHNDb3JlO1xufSgpO1xuXG5cbnZhciBfaXNDYW52YXNTdXBwb3J0ZWQgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gVXRpbHNDb3JlLmlzQ2FudmFzKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKSA6IGZhbHNlO1xudmFyIF90ZXN0aW5nV2ViR2wgPSBVdGlsc0NvcmUuaW5pdFdlYkdsKFV0aWxzQ29yZS5pbml0Q2FudmFzKCkpO1xudmFyIF9pc1dlYkdsU3VwcG9ydGVkID0gVXRpbHNDb3JlLmlzV2ViR2woX3Rlc3RpbmdXZWJHbCk7XG52YXIgX2lzV2ViR2xEcmF3QnVmZmVyc1N1cHBvcnRlZCA9IF9pc1dlYkdsU3VwcG9ydGVkICYmIEJvb2xlYW4oX3Rlc3RpbmdXZWJHbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpKTtcblxuaWYgKF9pc1dlYkdsU3VwcG9ydGVkKSB7XG5cdFV0aWxzQ29yZS5PRVNfdGV4dHVyZV9mbG9hdCA9IF90ZXN0aW5nV2ViR2wuT0VTX3RleHR1cmVfZmxvYXQ7XG5cdFV0aWxzQ29yZS5PRVNfdGV4dHVyZV9mbG9hdF9saW5lYXIgPSBfdGVzdGluZ1dlYkdsLk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhcjtcblx0VXRpbHNDb3JlLk9FU19lbGVtZW50X2luZGV4X3VpbnQgPSBfdGVzdGluZ1dlYkdsLk9FU19lbGVtZW50X2luZGV4X3VpbnQ7XG59IGVsc2Uge1xuXHRVdGlsc0NvcmUuT0VTX3RleHR1cmVfZmxvYXQgPSBmYWxzZTtcblx0VXRpbHNDb3JlLk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhciA9IGZhbHNlO1xuXHRVdGlsc0NvcmUuT0VTX2VsZW1lbnRfaW5kZXhfdWludCA9IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFV0aWxzQ29yZTtcbn0se31dLDI0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFV0aWxzQ29yZSA9IHJlcXVpcmUoXCIuL3V0aWxzLWNvcmVcIik7XG52YXIgVGV4dHVyZSA9IHJlcXVpcmUoJy4vdGV4dHVyZScpO1xudmFyIEZVTkNUSU9OX05BTUUgPSAvZnVuY3Rpb24gKFteKF0qKS87XG5cbnZhciBTVFJJUF9DT01NRU5UUyA9IC8oKFxcL1xcLy4qJCl8KFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pKS9tZztcblxudmFyIEFSR1VNRU5UX05BTUVTID0gLyhbXlxccyxdKykvZztcblxudmFyIF9zeXN0ZW1FbmRpYW5uZXNzID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgYiA9IG5ldyBBcnJheUJ1ZmZlcig0KTtcblx0dmFyIGEgPSBuZXcgVWludDMyQXJyYXkoYik7XG5cdHZhciBjID0gbmV3IFVpbnQ4QXJyYXkoYik7XG5cdGFbMF0gPSAweGRlYWRiZWVmO1xuXHRpZiAoY1swXSA9PT0gMHhlZikgcmV0dXJuICdMRSc7XG5cdGlmIChjWzBdID09PSAweGRlKSByZXR1cm4gJ0JFJztcblx0dGhyb3cgbmV3IEVycm9yKCd1bmtub3duIGVuZGlhbm5lc3MnKTtcbn0oKTtcblxudmFyIF9pc0Zsb2F0UmVhZFBpeGVsc1N1cHBvcnRlZCA9IG51bGw7XG5cbnZhciBVdGlscyA9IGZ1bmN0aW9uIChfVXRpbHNDb3JlKSB7XG5cdF9pbmhlcml0cyhVdGlscywgX1V0aWxzQ29yZSk7XG5cblx0ZnVuY3Rpb24gVXRpbHMoKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFV0aWxzKTtcblxuXHRcdHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVXRpbHMuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihVdGlscykpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKFV0aWxzLCBudWxsLCBbe1xuXHRcdGtleTogJ3N5c3RlbUVuZGlhbm5lc3MnLFxuXG5cblxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzeXN0ZW1FbmRpYW5uZXNzKCkge1xuXHRcdFx0cmV0dXJuIF9zeXN0ZW1FbmRpYW5uZXNzO1xuXHRcdH1cblxuXG5cblx0fSwge1xuXHRcdGtleTogJ2lzRnVuY3Rpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmNPYmopIHtcblx0XHRcdHJldHVybiB0eXBlb2YgZnVuY09iaiA9PT0gJ2Z1bmN0aW9uJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaXNGdW5jdGlvblN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGlzRnVuY3Rpb25TdHJpbmcoZnVuY1N0cikge1xuXHRcdFx0aWYgKGZ1bmNTdHIgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmNTdHIudG9TdHJpbmcoKS5zbGljZSgwLCAnZnVuY3Rpb24nLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gJ2Z1bmN0aW9uJztcblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0RnVuY3Rpb25OYW1lRnJvbVN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEZ1bmN0aW9uTmFtZUZyb21TdHJpbmcoZnVuY1N0cikge1xuXHRcdFx0cmV0dXJuIEZVTkNUSU9OX05BTUUuZXhlYyhmdW5jU3RyKVsxXTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdnZXRGdW5jdGlvbkJvZHlGcm9tU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0RnVuY3Rpb25Cb2R5RnJvbVN0cmluZyhmdW5jU3RyKSB7XG5cdFx0XHRyZXR1cm4gZnVuY1N0ci5zdWJzdHJpbmcoZnVuY1N0ci5pbmRleE9mKCd7JykgKyAxLCBmdW5jU3RyLmxhc3RJbmRleE9mKCd9JykpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRQYXJhbU5hbWVzRnJvbVN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFBhcmFtTmFtZXNGcm9tU3RyaW5nKGZ1bmMpIHtcblx0XHRcdHZhciBmblN0ciA9IGZ1bmMudG9TdHJpbmcoKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyk7XG5cdFx0XHR2YXIgcmVzdWx0ID0gZm5TdHIuc2xpY2UoZm5TdHIuaW5kZXhPZignKCcpICsgMSwgZm5TdHIuaW5kZXhPZignKScpKS5tYXRjaChBUkdVTUVOVF9OQU1FUyk7XG5cdFx0XHRpZiAocmVzdWx0ID09PSBudWxsKSByZXN1bHQgPSBbXTtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnY2xvbmUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjbG9uZShvYmopIHtcblx0XHRcdGlmIChvYmogPT09IG51bGwgfHwgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iaikpICE9PSAnb2JqZWN0JyB8fCBvYmouaGFzT3duUHJvcGVydHkoJ2lzQWN0aXZlQ2xvbmUnKSkgcmV0dXJuIG9iajtcblxuXHRcdFx0dmFyIHRlbXAgPSBvYmouY29uc3RydWN0b3IoKTtcblxuXHRcdFx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuXHRcdFx0XHRcdG9iai5pc0FjdGl2ZUNsb25lID0gbnVsbDtcblx0XHRcdFx0XHR0ZW1wW2tleV0gPSBVdGlscy5jbG9uZShvYmpba2V5XSk7XG5cdFx0XHRcdFx0ZGVsZXRlIG9iai5pc0FjdGl2ZUNsb25lO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0ZW1wO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICduZXdQcm9taXNlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gbmV3UHJvbWlzZShleGVjdXRvcikge1xuXHRcdFx0dmFyIHNpbXBsZSA9IFByb21pc2UgfHwgc21hbGxfcHJvbWlzZTtcblx0XHRcdGlmIChzaW1wbGUgPT09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgVHlwZUVycm9yKCdCcm93c2VyIGlzIG1pc3NpbmcgUHJvbWlzZSBpbXBsZW1lbnRhdGlvbi4gQ29uc2lkZXIgYWRkaW5nIHNtYWxsX3Byb21pc2UuanMgcG9seWZpbGwnKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBuZXcgc2ltcGxlKGV4ZWN1dG9yKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZnVuY3Rpb25CaW5kZXInLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBmdW5jdGlvbkJpbmRlcihpbkZ1bmMsIHRoaXNPYmopIHtcblx0XHRcdGlmIChpbkZ1bmMuYmluZCkge1xuXHRcdFx0XHRyZXR1cm4gaW5GdW5jLmJpbmQodGhpc09iaik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IFthcmd1bWVudHNbMF1dIDogQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblx0XHRcdFx0cmV0dXJuIGluRnVuYy5hcHBseSh0aGlzT2JqLCBhcmdzKTtcblx0XHRcdH07XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2lzQXJyYXknLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc0FycmF5KGFycmF5KSB7XG5cdFx0XHRpZiAoaXNOYU4oYXJyYXkubGVuZ3RoKSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRBcmd1bWVudFR5cGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRBcmd1bWVudFR5cGUoYXJnKSB7XG5cdFx0XHRpZiAoVXRpbHMuaXNBcnJheShhcmcpKSB7XG5cdFx0XHRcdHJldHVybiAnQXJyYXknO1xuXHRcdFx0fSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuXHRcdFx0XHRyZXR1cm4gJ051bWJlcic7XG5cdFx0XHR9IGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIFRleHR1cmUpIHtcblx0XHRcdFx0cmV0dXJuICdUZXh0dXJlJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAnVW5rbm93bic7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2lzRmxvYXRSZWFkUGl4ZWxzU3VwcG9ydGVkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNGbG9hdFJlYWRQaXhlbHNTdXBwb3J0ZWQoKSB7XG5cdFx0XHRpZiAoX2lzRmxvYXRSZWFkUGl4ZWxzU3VwcG9ydGVkICE9PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiBfaXNGbG9hdFJlYWRQaXhlbHNTdXBwb3J0ZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBHUFUgPSByZXF1aXJlKCcuLi9pbmRleCcpO1xuXHRcdFx0dmFyIHggPSBuZXcgR1BVKHtcblx0XHRcdFx0bW9kZTogJ3dlYmdsLXZhbGlkYXRvcidcblx0XHRcdH0pLmNyZWF0ZUtlcm5lbChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fSwge1xuXHRcdFx0XHRvdXRwdXQ6IFsyXSxcblx0XHRcdFx0ZmxvYXRUZXh0dXJlczogdHJ1ZSxcblx0XHRcdFx0ZmxvYXRPdXRwdXQ6IHRydWUsXG5cdFx0XHRcdGZsb2F0T3V0cHV0Rm9yY2U6IHRydWVcblx0XHRcdH0pKCk7XG5cblx0XHRcdF9pc0Zsb2F0UmVhZFBpeGVsc1N1cHBvcnRlZCA9IHhbMF0gPT09IDE7XG5cblx0XHRcdHJldHVybiBfaXNGbG9hdFJlYWRQaXhlbHNTdXBwb3J0ZWQ7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZGltVG9UZXhTaXplJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZGltVG9UZXhTaXplKG9wdCwgZGltZW5zaW9ucywgb3V0cHV0KSB7XG5cdFx0XHR2YXIgbnVtVGV4ZWxzID0gZGltZW5zaW9uc1swXTtcblx0XHRcdGZvciAodmFyIGkgPSAxOyBpIDwgZGltZW5zaW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRudW1UZXhlbHMgKj0gZGltZW5zaW9uc1tpXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdC5mbG9hdFRleHR1cmVzICYmICghb3V0cHV0IHx8IG9wdC5mbG9hdE91dHB1dCkpIHtcblx0XHRcdFx0bnVtVGV4ZWxzID0gTWF0aC5jZWlsKG51bVRleGVscyAvIDQpO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgdyA9IE1hdGguY2VpbChNYXRoLnNxcnQobnVtVGV4ZWxzKSk7XG5cdFx0XHRyZXR1cm4gW3csIHddO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXREaW1lbnNpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyh4LCBwYWQpIHtcblx0XHRcdHZhciByZXQgPSB2b2lkIDA7XG5cdFx0XHRpZiAoVXRpbHMuaXNBcnJheSh4KSkge1xuXHRcdFx0XHR2YXIgZGltID0gW107XG5cdFx0XHRcdHZhciB0ZW1wID0geDtcblx0XHRcdFx0d2hpbGUgKFV0aWxzLmlzQXJyYXkodGVtcCkpIHtcblx0XHRcdFx0XHRkaW0ucHVzaCh0ZW1wLmxlbmd0aCk7XG5cdFx0XHRcdFx0dGVtcCA9IHRlbXBbMF07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0ID0gZGltLnJldmVyc2UoKTtcblx0XHRcdH0gZWxzZSBpZiAoeCBpbnN0YW5jZW9mIFRleHR1cmUpIHtcblx0XHRcdFx0cmV0ID0geC5vdXRwdXQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyAnVW5rbm93biBkaW1lbnNpb25zIG9mICcgKyB4O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocGFkKSB7XG5cdFx0XHRcdHJldCA9IFV0aWxzLmNsb25lKHJldCk7XG5cdFx0XHRcdHdoaWxlIChyZXQubGVuZ3RoIDwgMykge1xuXHRcdFx0XHRcdHJldC5wdXNoKDEpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3BhZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHBhZChhcnIsIHBhZGRpbmcpIHtcblx0XHRcdGZ1bmN0aW9uIHplcm9zKG4pIHtcblx0XHRcdFx0cmV0dXJuIEFycmF5LmFwcGx5KG51bGwsIG5ldyBBcnJheShuKSkubWFwKE51bWJlci5wcm90b3R5cGUudmFsdWVPZiwgMCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBsZW4gPSBhcnIubGVuZ3RoICsgcGFkZGluZyAqIDI7XG5cblx0XHRcdHZhciByZXQgPSBhcnIubWFwKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRcdHJldHVybiBbXS5jb25jYXQoemVyb3MocGFkZGluZyksIHgsIHplcm9zKHBhZGRpbmcpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHBhZGRpbmc7IGkrKykge1xuXHRcdFx0XHRyZXQgPSBbXS5jb25jYXQoW3plcm9zKGxlbildLCByZXQsIFt6ZXJvcyhsZW4pXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2ZsYXR0ZW4yZEFycmF5VG8nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBmbGF0dGVuMmRBcnJheVRvKGFycmF5LCB0YXJnZXQpIHtcblx0XHRcdHZhciBvZmZzZXQgPSAwO1xuXHRcdFx0Zm9yICh2YXIgeSA9IDA7IHkgPCBhcnJheS5sZW5ndGg7IHkrKykge1xuXHRcdFx0XHR0YXJnZXQuc2V0KGFycmF5W3ldLCBvZmZzZXQpO1xuXHRcdFx0XHRvZmZzZXQgKz0gYXJyYXlbeV0ubGVuZ3RoO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdmbGF0dGVuM2RBcnJheVRvJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZmxhdHRlbjNkQXJyYXlUbyhhcnJheSwgdGFyZ2V0KSB7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gMDtcblx0XHRcdGZvciAodmFyIHogPSAwOyB6IDwgYXJyYXkubGVuZ3RoOyB6KyspIHtcblx0XHRcdFx0Zm9yICh2YXIgeSA9IDA7IHkgPCBhcnJheVt6XS5sZW5ndGg7IHkrKykge1xuXHRcdFx0XHRcdHRhcmdldC5zZXQoYXJyYXlbel1beV0sIG9mZnNldCk7XG5cdFx0XHRcdFx0b2Zmc2V0ICs9IGFycmF5W3pdW3ldLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdmbGF0dGVuVG8nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBmbGF0dGVuVG8oYXJyYXksIHRhcmdldCkge1xuXHRcdFx0aWYgKFV0aWxzLmlzQXJyYXkoYXJyYXlbMF0pKSB7XG5cdFx0XHRcdGlmIChVdGlscy5pc0FycmF5KGFycmF5WzBdWzBdKSkge1xuXHRcdFx0XHRcdFV0aWxzLmZsYXR0ZW4zZEFycmF5VG8oYXJyYXksIHRhcmdldCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0VXRpbHMuZmxhdHRlbjJkQXJyYXlUbyhhcnJheSwgdGFyZ2V0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGFyZ2V0LnNldChhcnJheSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3NwbGl0QXJyYXknLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzcGxpdEFycmF5KGFycmF5LCBwYXJ0KSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSBwYXJ0KSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycmF5LCBpLCBpICsgcGFydCkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdnZXRBc3RTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRBc3RTdHJpbmcoc291cmNlLCBhc3QpIHtcblx0XHRcdHZhciBsaW5lcyA9IEFycmF5LmlzQXJyYXkoc291cmNlKSA/IHNvdXJjZSA6IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi9nKTtcblx0XHRcdHZhciBzdGFydCA9IGFzdC5sb2Muc3RhcnQ7XG5cdFx0XHR2YXIgZW5kID0gYXN0LmxvYy5lbmQ7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHRyZXN1bHQucHVzaChsaW5lc1tzdGFydC5saW5lIC0gMV0uc2xpY2Uoc3RhcnQuY29sdW1uKSk7XG5cdFx0XHRmb3IgKHZhciBpID0gc3RhcnQubGluZTsgaSA8IGVuZC5saW5lIC0gMTsgaSsrKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKGxpbmVzW2ldKTtcblx0XHRcdH1cblx0XHRcdHJlc3VsdC5wdXNoKGxpbmVzW2VuZC5saW5lIC0gMV0uc2xpY2UoMCwgZW5kLmNvbHVtbikpO1xuXHRcdFx0cmV0dXJuIHJlc3VsdC5qb2luKCdcXG4nKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhbGxQcm9wZXJ0aWVzT2YnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhbGxQcm9wZXJ0aWVzT2Yob2JqKSB7XG5cdFx0XHR2YXIgcHJvcHMgPSBbXTtcblxuXHRcdFx0ZG8ge1xuXHRcdFx0XHRwcm9wcy5wdXNoLmFwcGx5KHByb3BzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcblx0XHRcdH0gd2hpbGUgKG9iaiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKTtcblxuXHRcdFx0cmV0dXJuIHByb3BzO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBVdGlscztcbn0oVXRpbHNDb3JlKTtcblxuXG5cbk9iamVjdC5hc3NpZ24oVXRpbHMsIFV0aWxzQ29yZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbHM7XG59LHtcIi4uL2luZGV4XCI6MjUsXCIuL3RleHR1cmVcIjoyMixcIi4vdXRpbHMtY29yZVwiOjIzfV0sMjU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgR1BVID0gcmVxdWlyZSgnLi9jb3JlL2dwdScpO1xudmFyIGFsaWFzID0gcmVxdWlyZSgnLi9jb3JlL2FsaWFzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL2NvcmUvdXRpbHMnKTtcblxudmFyIENQVUZ1bmN0aW9uQnVpbGRlciA9IHJlcXVpcmUoJy4vYmFja2VuZC9jcHUvZnVuY3Rpb24tYnVpbGRlcicpO1xudmFyIENQVUZ1bmN0aW9uTm9kZSA9IHJlcXVpcmUoJy4vYmFja2VuZC9jcHUvZnVuY3Rpb24tbm9kZScpO1xudmFyIENQVUtlcm5lbCA9IHJlcXVpcmUoJy4vYmFja2VuZC9jcHUva2VybmVsJyk7XG52YXIgQ1BVUnVubmVyID0gcmVxdWlyZSgnLi9iYWNrZW5kL2NwdS9ydW5uZXInKTtcblxudmFyIFdlYkdMRnVuY3Rpb25CdWlsZGVyID0gcmVxdWlyZSgnLi9iYWNrZW5kL3dlYi1nbC9mdW5jdGlvbi1idWlsZGVyJyk7XG52YXIgV2ViR0xGdW5jdGlvbk5vZGUgPSByZXF1aXJlKCcuL2JhY2tlbmQvd2ViLWdsL2Z1bmN0aW9uLW5vZGUnKTtcbnZhciBXZWJHTEtlcm5lbCA9IHJlcXVpcmUoJy4vYmFja2VuZC93ZWItZ2wva2VybmVsJyk7XG52YXIgV2ViR0xSdW5uZXIgPSByZXF1aXJlKCcuL2JhY2tlbmQvd2ViLWdsL3J1bm5lcicpO1xuXG5HUFUuYWxpYXMgPSBhbGlhcztcbkdQVS51dGlscyA9IHV0aWxzO1xuXG5HUFUuQ1BVRnVuY3Rpb25CdWlsZGVyID0gQ1BVRnVuY3Rpb25CdWlsZGVyO1xuR1BVLkNQVUZ1bmN0aW9uTm9kZSA9IENQVUZ1bmN0aW9uTm9kZTtcbkdQVS5DUFVLZXJuZWwgPSBDUFVLZXJuZWw7XG5HUFUuQ1BVUnVubmVyID0gQ1BVUnVubmVyO1xuXG5HUFUuV2ViR0xGdW5jdGlvbkJ1aWxkZXIgPSBXZWJHTEZ1bmN0aW9uQnVpbGRlcjtcbkdQVS5XZWJHTEZ1bmN0aW9uTm9kZSA9IFdlYkdMRnVuY3Rpb25Ob2RlO1xuR1BVLldlYkdMS2VybmVsID0gV2ViR0xLZXJuZWw7XG5HUFUuV2ViR0xSdW5uZXIgPSBXZWJHTFJ1bm5lcjtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gR1BVO1xufVxuaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG5cdHdpbmRvdy5HUFUgPSBHUFU7XG59XG59LHtcIi4vYmFja2VuZC9jcHUvZnVuY3Rpb24tYnVpbGRlclwiOjEsXCIuL2JhY2tlbmQvY3B1L2Z1bmN0aW9uLW5vZGVcIjoyLFwiLi9iYWNrZW5kL2NwdS9rZXJuZWxcIjo0LFwiLi9iYWNrZW5kL2NwdS9ydW5uZXJcIjo1LFwiLi9iYWNrZW5kL3dlYi1nbC9mdW5jdGlvbi1idWlsZGVyXCI6MTEsXCIuL2JhY2tlbmQvd2ViLWdsL2Z1bmN0aW9uLW5vZGVcIjoxMixcIi4vYmFja2VuZC93ZWItZ2wva2VybmVsXCI6MTQsXCIuL2JhY2tlbmQvd2ViLWdsL3J1bm5lclwiOjE1LFwiLi9jb3JlL2FsaWFzXCI6MTksXCIuL2NvcmUvZ3B1XCI6MjEsXCIuL2NvcmUvdXRpbHNcIjoyNH1dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cykgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJ10sIGZhY3RvcnkpIDpcblx0KGZhY3RvcnkoKGdsb2JhbC5hY29ybiA9IGdsb2JhbC5hY29ybiB8fCB7fSkpKTtcbn0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcblxuXG52YXIgcmVzZXJ2ZWRXb3JkcyA9IHtcbiAgMzogXCJhYnN0cmFjdCBib29sZWFuIGJ5dGUgY2hhciBjbGFzcyBkb3VibGUgZW51bSBleHBvcnQgZXh0ZW5kcyBmaW5hbCBmbG9hdCBnb3RvIGltcGxlbWVudHMgaW1wb3J0IGludCBpbnRlcmZhY2UgbG9uZyBuYXRpdmUgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc2hvcnQgc3RhdGljIHN1cGVyIHN5bmNocm9uaXplZCB0aHJvd3MgdHJhbnNpZW50IHZvbGF0aWxlXCIsXG4gIDU6IFwiY2xhc3MgZW51bSBleHRlbmRzIHN1cGVyIGNvbnN0IGV4cG9ydCBpbXBvcnRcIixcbiAgNjogXCJlbnVtXCIsXG4gIHN0cmljdDogXCJpbXBsZW1lbnRzIGludGVyZmFjZSBsZXQgcGFja2FnZSBwcml2YXRlIHByb3RlY3RlZCBwdWJsaWMgc3RhdGljIHlpZWxkXCIsXG4gIHN0cmljdEJpbmQ6IFwiZXZhbCBhcmd1bWVudHNcIlxufTtcblxuXG52YXIgZWNtYTVBbmRMZXNzS2V5d29yZHMgPSBcImJyZWFrIGNhc2UgY2F0Y2ggY29udGludWUgZGVidWdnZXIgZGVmYXVsdCBkbyBlbHNlIGZpbmFsbHkgZm9yIGZ1bmN0aW9uIGlmIHJldHVybiBzd2l0Y2ggdGhyb3cgdHJ5IHZhciB3aGlsZSB3aXRoIG51bGwgdHJ1ZSBmYWxzZSBpbnN0YW5jZW9mIHR5cGVvZiB2b2lkIGRlbGV0ZSBuZXcgaW4gdGhpc1wiO1xuXG52YXIga2V5d29yZHMgPSB7XG4gIDU6IGVjbWE1QW5kTGVzc0tleXdvcmRzLFxuICA2OiBlY21hNUFuZExlc3NLZXl3b3JkcyArIFwiIGNvbnN0IGNsYXNzIGV4dGVuZHMgZXhwb3J0IGltcG9ydCBzdXBlclwiXG59O1xuXG5cblxudmFyIG5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgPSBcIlxceGFhXFx4YjVcXHhiYVxceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHUwMmMxXFx1MDJjNi1cXHUwMmQxXFx1MDJlMC1cXHUwMmU0XFx1MDJlY1xcdTAyZWVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN2EtXFx1MDM3ZFxcdTAzN2ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhhXFx1MDM4Y1xcdTAzOGUtXFx1MDNhMVxcdTAzYTMtXFx1MDNmNVxcdTAzZjctXFx1MDQ4MVxcdTA0OGEtXFx1MDUyZlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYxLVxcdTA1ODdcXHUwNWQwLVxcdTA1ZWFcXHUwNWYwLVxcdTA1ZjJcXHUwNjIwLVxcdTA2NGFcXHUwNjZlXFx1MDY2ZlxcdTA2NzEtXFx1MDZkM1xcdTA2ZDVcXHUwNmU1XFx1MDZlNlxcdTA2ZWVcXHUwNmVmXFx1MDZmYS1cXHUwNmZjXFx1MDZmZlxcdTA3MTBcXHUwNzEyLVxcdTA3MmZcXHUwNzRkLVxcdTA3YTVcXHUwN2IxXFx1MDdjYS1cXHUwN2VhXFx1MDdmNFxcdTA3ZjVcXHUwN2ZhXFx1MDgwMC1cXHUwODE1XFx1MDgxYVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDhhMC1cXHUwOGI0XFx1MDhiNi1cXHUwOGJkXFx1MDkwNC1cXHUwOTM5XFx1MDkzZFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OGNcXHUwOThmXFx1MDk5MFxcdTA5OTMtXFx1MDlhOFxcdTA5YWEtXFx1MDliMFxcdTA5YjJcXHUwOWI2LVxcdTA5YjlcXHUwOWJkXFx1MDljZVxcdTA5ZGNcXHUwOWRkXFx1MDlkZi1cXHUwOWUxXFx1MDlmMFxcdTA5ZjFcXHUwYTA1LVxcdTBhMGFcXHUwYTBmXFx1MGExMFxcdTBhMTMtXFx1MGEyOFxcdTBhMmEtXFx1MGEzMFxcdTBhMzJcXHUwYTMzXFx1MGEzNVxcdTBhMzZcXHUwYTM4XFx1MGEzOVxcdTBhNTktXFx1MGE1Y1xcdTBhNWVcXHUwYTcyLVxcdTBhNzRcXHUwYTg1LVxcdTBhOGRcXHUwYThmLVxcdTBhOTFcXHUwYTkzLVxcdTBhYThcXHUwYWFhLVxcdTBhYjBcXHUwYWIyXFx1MGFiM1xcdTBhYjUtXFx1MGFiOVxcdTBhYmRcXHUwYWQwXFx1MGFlMFxcdTBhZTFcXHUwYWY5XFx1MGIwNS1cXHUwYjBjXFx1MGIwZlxcdTBiMTBcXHUwYjEzLVxcdTBiMjhcXHUwYjJhLVxcdTBiMzBcXHUwYjMyXFx1MGIzM1xcdTBiMzUtXFx1MGIzOVxcdTBiM2RcXHUwYjVjXFx1MGI1ZFxcdTBiNWYtXFx1MGI2MVxcdTBiNzFcXHUwYjgzXFx1MGI4NS1cXHUwYjhhXFx1MGI4ZS1cXHUwYjkwXFx1MGI5Mi1cXHUwYjk1XFx1MGI5OVxcdTBiOWFcXHUwYjljXFx1MGI5ZVxcdTBiOWZcXHUwYmEzXFx1MGJhNFxcdTBiYTgtXFx1MGJhYVxcdTBiYWUtXFx1MGJiOVxcdTBiZDBcXHUwYzA1LVxcdTBjMGNcXHUwYzBlLVxcdTBjMTBcXHUwYzEyLVxcdTBjMjhcXHUwYzJhLVxcdTBjMzlcXHUwYzNkXFx1MGM1OC1cXHUwYzVhXFx1MGM2MFxcdTBjNjFcXHUwYzgwXFx1MGM4NS1cXHUwYzhjXFx1MGM4ZS1cXHUwYzkwXFx1MGM5Mi1cXHUwY2E4XFx1MGNhYS1cXHUwY2IzXFx1MGNiNS1cXHUwY2I5XFx1MGNiZFxcdTBjZGVcXHUwY2UwXFx1MGNlMVxcdTBjZjFcXHUwY2YyXFx1MGQwNS1cXHUwZDBjXFx1MGQwZS1cXHUwZDEwXFx1MGQxMi1cXHUwZDNhXFx1MGQzZFxcdTBkNGVcXHUwZDU0LVxcdTBkNTZcXHUwZDVmLVxcdTBkNjFcXHUwZDdhLVxcdTBkN2ZcXHUwZDg1LVxcdTBkOTZcXHUwZDlhLVxcdTBkYjFcXHUwZGIzLVxcdTBkYmJcXHUwZGJkXFx1MGRjMC1cXHUwZGM2XFx1MGUwMS1cXHUwZTMwXFx1MGUzMlxcdTBlMzNcXHUwZTQwLVxcdTBlNDZcXHUwZTgxXFx1MGU4MlxcdTBlODRcXHUwZTg3XFx1MGU4OFxcdTBlOGFcXHUwZThkXFx1MGU5NC1cXHUwZTk3XFx1MGU5OS1cXHUwZTlmXFx1MGVhMS1cXHUwZWEzXFx1MGVhNVxcdTBlYTdcXHUwZWFhXFx1MGVhYlxcdTBlYWQtXFx1MGViMFxcdTBlYjJcXHUwZWIzXFx1MGViZFxcdTBlYzAtXFx1MGVjNFxcdTBlYzZcXHUwZWRjLVxcdTBlZGZcXHUwZjAwXFx1MGY0MC1cXHUwZjQ3XFx1MGY0OS1cXHUwZjZjXFx1MGY4OC1cXHUwZjhjXFx1MTAwMC1cXHUxMDJhXFx1MTAzZlxcdTEwNTAtXFx1MTA1NVxcdTEwNWEtXFx1MTA1ZFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNmUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOGVcXHUxMGEwLVxcdTEwYzVcXHUxMGM3XFx1MTBjZFxcdTEwZDAtXFx1MTBmYVxcdTEwZmMtXFx1MTI0OFxcdTEyNGEtXFx1MTI0ZFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVhLVxcdTEyNWRcXHUxMjYwLVxcdTEyODhcXHUxMjhhLVxcdTEyOGRcXHUxMjkwLVxcdTEyYjBcXHUxMmIyLVxcdTEyYjVcXHUxMmI4LVxcdTEyYmVcXHUxMmMwXFx1MTJjMi1cXHUxMmM1XFx1MTJjOC1cXHUxMmQ2XFx1MTJkOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVhXFx1MTM4MC1cXHUxMzhmXFx1MTNhMC1cXHUxM2Y1XFx1MTNmOC1cXHUxM2ZkXFx1MTQwMS1cXHUxNjZjXFx1MTY2Zi1cXHUxNjdmXFx1MTY4MS1cXHUxNjlhXFx1MTZhMC1cXHUxNmVhXFx1MTZlZS1cXHUxNmY4XFx1MTcwMC1cXHUxNzBjXFx1MTcwZS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZjXFx1MTc2ZS1cXHUxNzcwXFx1MTc4MC1cXHUxN2IzXFx1MTdkN1xcdTE3ZGNcXHUxODIwLVxcdTE4NzdcXHUxODgwLVxcdTE4YThcXHUxOGFhXFx1MThiMC1cXHUxOGY1XFx1MTkwMC1cXHUxOTFlXFx1MTk1MC1cXHUxOTZkXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOWFiXFx1MTliMC1cXHUxOWM5XFx1MWEwMC1cXHUxYTE2XFx1MWEyMC1cXHUxYTU0XFx1MWFhN1xcdTFiMDUtXFx1MWIzM1xcdTFiNDUtXFx1MWI0YlxcdTFiODMtXFx1MWJhMFxcdTFiYWVcXHUxYmFmXFx1MWJiYS1cXHUxYmU1XFx1MWMwMC1cXHUxYzIzXFx1MWM0ZC1cXHUxYzRmXFx1MWM1YS1cXHUxYzdkXFx1MWM4MC1cXHUxYzg4XFx1MWNlOS1cXHUxY2VjXFx1MWNlZS1cXHUxY2YxXFx1MWNmNVxcdTFjZjZcXHUxZDAwLVxcdTFkYmZcXHUxZTAwLVxcdTFmMTVcXHUxZjE4LVxcdTFmMWRcXHUxZjIwLVxcdTFmNDVcXHUxZjQ4LVxcdTFmNGRcXHUxZjUwLVxcdTFmNTdcXHUxZjU5XFx1MWY1YlxcdTFmNWRcXHUxZjVmLVxcdTFmN2RcXHUxZjgwLVxcdTFmYjRcXHUxZmI2LVxcdTFmYmNcXHUxZmJlXFx1MWZjMi1cXHUxZmM0XFx1MWZjNi1cXHUxZmNjXFx1MWZkMC1cXHUxZmQzXFx1MWZkNi1cXHUxZmRiXFx1MWZlMC1cXHUxZmVjXFx1MWZmMi1cXHUxZmY0XFx1MWZmNi1cXHUxZmZjXFx1MjA3MVxcdTIwN2ZcXHUyMDkwLVxcdTIwOWNcXHUyMTAyXFx1MjEwN1xcdTIxMGEtXFx1MjExM1xcdTIxMTVcXHUyMTE4LVxcdTIxMWRcXHUyMTI0XFx1MjEyNlxcdTIxMjhcXHUyMTJhLVxcdTIxMzlcXHUyMTNjLVxcdTIxM2ZcXHUyMTQ1LVxcdTIxNDlcXHUyMTRlXFx1MjE2MC1cXHUyMTg4XFx1MmMwMC1cXHUyYzJlXFx1MmMzMC1cXHUyYzVlXFx1MmM2MC1cXHUyY2U0XFx1MmNlYi1cXHUyY2VlXFx1MmNmMlxcdTJjZjNcXHUyZDAwLVxcdTJkMjVcXHUyZDI3XFx1MmQyZFxcdTJkMzAtXFx1MmQ2N1xcdTJkNmZcXHUyZDgwLVxcdTJkOTZcXHUyZGEwLVxcdTJkYTZcXHUyZGE4LVxcdTJkYWVcXHUyZGIwLVxcdTJkYjZcXHUyZGI4LVxcdTJkYmVcXHUyZGMwLVxcdTJkYzZcXHUyZGM4LVxcdTJkY2VcXHUyZGQwLVxcdTJkZDZcXHUyZGQ4LVxcdTJkZGVcXHUzMDA1LVxcdTMwMDdcXHUzMDIxLVxcdTMwMjlcXHUzMDMxLVxcdTMwMzVcXHUzMDM4LVxcdTMwM2NcXHUzMDQxLVxcdTMwOTZcXHUzMDliLVxcdTMwOWZcXHUzMGExLVxcdTMwZmFcXHUzMGZjLVxcdTMwZmZcXHUzMTA1LVxcdTMxMmRcXHUzMTMxLVxcdTMxOGVcXHUzMWEwLVxcdTMxYmFcXHUzMWYwLVxcdTMxZmZcXHUzNDAwLVxcdTRkYjVcXHU0ZTAwLVxcdTlmZDVcXHVhMDAwLVxcdWE0OGNcXHVhNGQwLVxcdWE0ZmRcXHVhNTAwLVxcdWE2MGNcXHVhNjEwLVxcdWE2MWZcXHVhNjJhXFx1YTYyYlxcdWE2NDAtXFx1YTY2ZVxcdWE2N2YtXFx1YTY5ZFxcdWE2YTAtXFx1YTZlZlxcdWE3MTctXFx1YTcxZlxcdWE3MjItXFx1YTc4OFxcdWE3OGItXFx1YTdhZVxcdWE3YjAtXFx1YTdiN1xcdWE3ZjctXFx1YTgwMVxcdWE4MDMtXFx1YTgwNVxcdWE4MDctXFx1YTgwYVxcdWE4MGMtXFx1YTgyMlxcdWE4NDAtXFx1YTg3M1xcdWE4ODItXFx1YThiM1xcdWE4ZjItXFx1YThmN1xcdWE4ZmJcXHVhOGZkXFx1YTkwYS1cXHVhOTI1XFx1YTkzMC1cXHVhOTQ2XFx1YTk2MC1cXHVhOTdjXFx1YTk4NC1cXHVhOWIyXFx1YTljZlxcdWE5ZTAtXFx1YTllNFxcdWE5ZTYtXFx1YTllZlxcdWE5ZmEtXFx1YTlmZVxcdWFhMDAtXFx1YWEyOFxcdWFhNDAtXFx1YWE0MlxcdWFhNDQtXFx1YWE0YlxcdWFhNjAtXFx1YWE3NlxcdWFhN2FcXHVhYTdlLVxcdWFhYWZcXHVhYWIxXFx1YWFiNVxcdWFhYjZcXHVhYWI5LVxcdWFhYmRcXHVhYWMwXFx1YWFjMlxcdWFhZGItXFx1YWFkZFxcdWFhZTAtXFx1YWFlYVxcdWFhZjItXFx1YWFmNFxcdWFiMDEtXFx1YWIwNlxcdWFiMDktXFx1YWIwZVxcdWFiMTEtXFx1YWIxNlxcdWFiMjAtXFx1YWIyNlxcdWFiMjgtXFx1YWIyZVxcdWFiMzAtXFx1YWI1YVxcdWFiNWMtXFx1YWI2NVxcdWFiNzAtXFx1YWJlMlxcdWFjMDAtXFx1ZDdhM1xcdWQ3YjAtXFx1ZDdjNlxcdWQ3Y2ItXFx1ZDdmYlxcdWY5MDAtXFx1ZmE2ZFxcdWZhNzAtXFx1ZmFkOVxcdWZiMDAtXFx1ZmIwNlxcdWZiMTMtXFx1ZmIxN1xcdWZiMWRcXHVmYjFmLVxcdWZiMjhcXHVmYjJhLVxcdWZiMzZcXHVmYjM4LVxcdWZiM2NcXHVmYjNlXFx1ZmI0MFxcdWZiNDFcXHVmYjQzXFx1ZmI0NFxcdWZiNDYtXFx1ZmJiMVxcdWZiZDMtXFx1ZmQzZFxcdWZkNTAtXFx1ZmQ4ZlxcdWZkOTItXFx1ZmRjN1xcdWZkZjAtXFx1ZmRmYlxcdWZlNzAtXFx1ZmU3NFxcdWZlNzYtXFx1ZmVmY1xcdWZmMjEtXFx1ZmYzYVxcdWZmNDEtXFx1ZmY1YVxcdWZmNjYtXFx1ZmZiZVxcdWZmYzItXFx1ZmZjN1xcdWZmY2EtXFx1ZmZjZlxcdWZmZDItXFx1ZmZkN1xcdWZmZGEtXFx1ZmZkY1wiO1xudmFyIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzID0gXCJcXHUyMDBjXFx1MjAwZFxceGI3XFx1MDMwMC1cXHUwMzZmXFx1MDM4N1xcdTA0ODMtXFx1MDQ4N1xcdTA1OTEtXFx1MDViZFxcdTA1YmZcXHUwNWMxXFx1MDVjMlxcdTA1YzRcXHUwNWM1XFx1MDVjN1xcdTA2MTAtXFx1MDYxYVxcdTA2NGItXFx1MDY2OVxcdTA2NzBcXHUwNmQ2LVxcdTA2ZGNcXHUwNmRmLVxcdTA2ZTRcXHUwNmU3XFx1MDZlOFxcdTA2ZWEtXFx1MDZlZFxcdTA2ZjAtXFx1MDZmOVxcdTA3MTFcXHUwNzMwLVxcdTA3NGFcXHUwN2E2LVxcdTA3YjBcXHUwN2MwLVxcdTA3YzlcXHUwN2ViLVxcdTA3ZjNcXHUwODE2LVxcdTA4MTlcXHUwODFiLVxcdTA4MjNcXHUwODI1LVxcdTA4MjdcXHUwODI5LVxcdTA4MmRcXHUwODU5LVxcdTA4NWJcXHUwOGQ0LVxcdTA4ZTFcXHUwOGUzLVxcdTA5MDNcXHUwOTNhLVxcdTA5M2NcXHUwOTNlLVxcdTA5NGZcXHUwOTUxLVxcdTA5NTdcXHUwOTYyXFx1MDk2M1xcdTA5NjYtXFx1MDk2ZlxcdTA5ODEtXFx1MDk4M1xcdTA5YmNcXHUwOWJlLVxcdTA5YzRcXHUwOWM3XFx1MDljOFxcdTA5Y2ItXFx1MDljZFxcdTA5ZDdcXHUwOWUyXFx1MDllM1xcdTA5ZTYtXFx1MDllZlxcdTBhMDEtXFx1MGEwM1xcdTBhM2NcXHUwYTNlLVxcdTBhNDJcXHUwYTQ3XFx1MGE0OFxcdTBhNGItXFx1MGE0ZFxcdTBhNTFcXHUwYTY2LVxcdTBhNzFcXHUwYTc1XFx1MGE4MS1cXHUwYTgzXFx1MGFiY1xcdTBhYmUtXFx1MGFjNVxcdTBhYzctXFx1MGFjOVxcdTBhY2ItXFx1MGFjZFxcdTBhZTJcXHUwYWUzXFx1MGFlNi1cXHUwYWVmXFx1MGIwMS1cXHUwYjAzXFx1MGIzY1xcdTBiM2UtXFx1MGI0NFxcdTBiNDdcXHUwYjQ4XFx1MGI0Yi1cXHUwYjRkXFx1MGI1NlxcdTBiNTdcXHUwYjYyXFx1MGI2M1xcdTBiNjYtXFx1MGI2ZlxcdTBiODJcXHUwYmJlLVxcdTBiYzJcXHUwYmM2LVxcdTBiYzhcXHUwYmNhLVxcdTBiY2RcXHUwYmQ3XFx1MGJlNi1cXHUwYmVmXFx1MGMwMC1cXHUwYzAzXFx1MGMzZS1cXHUwYzQ0XFx1MGM0Ni1cXHUwYzQ4XFx1MGM0YS1cXHUwYzRkXFx1MGM1NVxcdTBjNTZcXHUwYzYyXFx1MGM2M1xcdTBjNjYtXFx1MGM2ZlxcdTBjODEtXFx1MGM4M1xcdTBjYmNcXHUwY2JlLVxcdTBjYzRcXHUwY2M2LVxcdTBjYzhcXHUwY2NhLVxcdTBjY2RcXHUwY2Q1XFx1MGNkNlxcdTBjZTJcXHUwY2UzXFx1MGNlNi1cXHUwY2VmXFx1MGQwMS1cXHUwZDAzXFx1MGQzZS1cXHUwZDQ0XFx1MGQ0Ni1cXHUwZDQ4XFx1MGQ0YS1cXHUwZDRkXFx1MGQ1N1xcdTBkNjJcXHUwZDYzXFx1MGQ2Ni1cXHUwZDZmXFx1MGQ4MlxcdTBkODNcXHUwZGNhXFx1MGRjZi1cXHUwZGQ0XFx1MGRkNlxcdTBkZDgtXFx1MGRkZlxcdTBkZTYtXFx1MGRlZlxcdTBkZjJcXHUwZGYzXFx1MGUzMVxcdTBlMzQtXFx1MGUzYVxcdTBlNDctXFx1MGU0ZVxcdTBlNTAtXFx1MGU1OVxcdTBlYjFcXHUwZWI0LVxcdTBlYjlcXHUwZWJiXFx1MGViY1xcdTBlYzgtXFx1MGVjZFxcdTBlZDAtXFx1MGVkOVxcdTBmMThcXHUwZjE5XFx1MGYyMC1cXHUwZjI5XFx1MGYzNVxcdTBmMzdcXHUwZjM5XFx1MGYzZVxcdTBmM2ZcXHUwZjcxLVxcdTBmODRcXHUwZjg2XFx1MGY4N1xcdTBmOGQtXFx1MGY5N1xcdTBmOTktXFx1MGZiY1xcdTBmYzZcXHUxMDJiLVxcdTEwM2VcXHUxMDQwLVxcdTEwNDlcXHUxMDU2LVxcdTEwNTlcXHUxMDVlLVxcdTEwNjBcXHUxMDYyLVxcdTEwNjRcXHUxMDY3LVxcdTEwNmRcXHUxMDcxLVxcdTEwNzRcXHUxMDgyLVxcdTEwOGRcXHUxMDhmLVxcdTEwOWRcXHUxMzVkLVxcdTEzNWZcXHUxMzY5LVxcdTEzNzFcXHUxNzEyLVxcdTE3MTRcXHUxNzMyLVxcdTE3MzRcXHUxNzUyXFx1MTc1M1xcdTE3NzJcXHUxNzczXFx1MTdiNC1cXHUxN2QzXFx1MTdkZFxcdTE3ZTAtXFx1MTdlOVxcdTE4MGItXFx1MTgwZFxcdTE4MTAtXFx1MTgxOVxcdTE4YTlcXHUxOTIwLVxcdTE5MmJcXHUxOTMwLVxcdTE5M2JcXHUxOTQ2LVxcdTE5NGZcXHUxOWQwLVxcdTE5ZGFcXHUxYTE3LVxcdTFhMWJcXHUxYTU1LVxcdTFhNWVcXHUxYTYwLVxcdTFhN2NcXHUxYTdmLVxcdTFhODlcXHUxYTkwLVxcdTFhOTlcXHUxYWIwLVxcdTFhYmRcXHUxYjAwLVxcdTFiMDRcXHUxYjM0LVxcdTFiNDRcXHUxYjUwLVxcdTFiNTlcXHUxYjZiLVxcdTFiNzNcXHUxYjgwLVxcdTFiODJcXHUxYmExLVxcdTFiYWRcXHUxYmIwLVxcdTFiYjlcXHUxYmU2LVxcdTFiZjNcXHUxYzI0LVxcdTFjMzdcXHUxYzQwLVxcdTFjNDlcXHUxYzUwLVxcdTFjNTlcXHUxY2QwLVxcdTFjZDJcXHUxY2Q0LVxcdTFjZThcXHUxY2VkXFx1MWNmMi1cXHUxY2Y0XFx1MWNmOFxcdTFjZjlcXHUxZGMwLVxcdTFkZjVcXHUxZGZiLVxcdTFkZmZcXHUyMDNmXFx1MjA0MFxcdTIwNTRcXHUyMGQwLVxcdTIwZGNcXHUyMGUxXFx1MjBlNS1cXHUyMGYwXFx1MmNlZi1cXHUyY2YxXFx1MmQ3ZlxcdTJkZTAtXFx1MmRmZlxcdTMwMmEtXFx1MzAyZlxcdTMwOTlcXHUzMDlhXFx1YTYyMC1cXHVhNjI5XFx1YTY2ZlxcdWE2NzQtXFx1YTY3ZFxcdWE2OWVcXHVhNjlmXFx1YTZmMFxcdWE2ZjFcXHVhODAyXFx1YTgwNlxcdWE4MGJcXHVhODIzLVxcdWE4MjdcXHVhODgwXFx1YTg4MVxcdWE4YjQtXFx1YThjNVxcdWE4ZDAtXFx1YThkOVxcdWE4ZTAtXFx1YThmMVxcdWE5MDAtXFx1YTkwOVxcdWE5MjYtXFx1YTkyZFxcdWE5NDctXFx1YTk1M1xcdWE5ODAtXFx1YTk4M1xcdWE5YjMtXFx1YTljMFxcdWE5ZDAtXFx1YTlkOVxcdWE5ZTVcXHVhOWYwLVxcdWE5ZjlcXHVhYTI5LVxcdWFhMzZcXHVhYTQzXFx1YWE0Y1xcdWFhNGRcXHVhYTUwLVxcdWFhNTlcXHVhYTdiLVxcdWFhN2RcXHVhYWIwXFx1YWFiMi1cXHVhYWI0XFx1YWFiN1xcdWFhYjhcXHVhYWJlXFx1YWFiZlxcdWFhYzFcXHVhYWViLVxcdWFhZWZcXHVhYWY1XFx1YWFmNlxcdWFiZTMtXFx1YWJlYVxcdWFiZWNcXHVhYmVkXFx1YWJmMC1cXHVhYmY5XFx1ZmIxZVxcdWZlMDAtXFx1ZmUwZlxcdWZlMjAtXFx1ZmUyZlxcdWZlMzNcXHVmZTM0XFx1ZmU0ZC1cXHVmZTRmXFx1ZmYxMC1cXHVmZjE5XFx1ZmYzZlwiO1xuXG52YXIgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIFwiXVwiKTtcbnZhciBub25BU0NJSWlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKFwiW1wiICsgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyArIG5vbkFTQ0lJaWRlbnRpZmllckNoYXJzICsgXCJdXCIpO1xuXG5ub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzID0gbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBudWxsO1xuXG5cbnZhciBhc3RyYWxJZGVudGlmaWVyU3RhcnRDb2RlcyA9IFswLDExLDIsMjUsMiwxOCwyLDEsMiwxNCwzLDEzLDM1LDEyMiw3MCw1MiwyNjgsMjgsNCw0OCw0OCwzMSwxNywyNiw2LDM3LDExLDI5LDMsMzUsNSw3LDIsNCw0MywxNTcsMTksMzUsNSwzNSw1LDM5LDksNTEsMTU3LDMxMCwxMCwyMSwxMSw3LDE1Myw1LDMsMCwyLDQzLDIsMSw0LDAsMywyMiwxMSwyMiwxMCwzMCw2NiwxOCwyLDEsMTEsMjEsMTEsMjUsNzEsNTUsNywxLDY1LDAsMTYsMywyLDIsMiwyNiw0NSwyOCw0LDI4LDM2LDcsMiwyNywyOCw1MywxMSwyMSwxMSwxOCwxNCwxNywxMTEsNzIsNTYsNTAsMTQsNTAsNzg1LDUyLDc2LDQ0LDMzLDI0LDI3LDM1LDQyLDM0LDQsMCwxMyw0NywxNSwzLDIyLDAsMiwwLDM2LDE3LDIsMjQsODUsNiwyLDAsMiwzLDIsMTQsMiw5LDgsNDYsMzksNywzLDEsMywyMSwyLDYsMiwxLDIsNCw0LDAsMTksMCwxMyw0LDE1OSw1MiwxOSwzLDU0LDQ3LDIxLDEsMiwwLDE4NSw0Niw0MiwzLDM3LDQ3LDIxLDAsNjAsNDIsODYsMjUsMzkxLDYzLDMyLDAsNDQ5LDU2LDI2NCw4LDIsMzYsMTgsMCw1MCwyOSw4ODEsOTIxLDEwMywxMTAsMTgsMTk1LDI3NDksMTA3MCw0MDUwLDU4Miw4NjM0LDU2OCw4LDMwLDExNCwyOSwxOSw0NywxNywzLDMyLDIwLDYsMTgsODgxLDY4LDEyLDAsNjcsMTIsNjUsMCwzMiw2MTI0LDIwLDc1NCw5NDg2LDEsMzA3MSwxMDYsNiwxMiw0LDgsOCw5LDU5OTEsODQsMiw3MCwyLDEsMywwLDMsMSwzLDMsMiwxMSwyLDAsMiw2LDIsNjQsMiwzLDMsNywyLDYsMiwyNywyLDMsMiw0LDIsMCw0LDYsMiwzMzksMywyNCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDcsNDE0OSwxOTYsNjAsNjcsMTIxMywzLDIsMjYsMiwxLDIsMCwzLDAsMiw5LDIsMywyLDAsMiwwLDcsMCw1LDAsMiwwLDIsMCwyLDIsMiwxLDIsMCwzLDAsMiwwLDIsMCwyLDAsMiwwLDIsMSwyLDAsMywzLDIsNiwyLDMsMiwzLDIsMCwyLDksMiwxNiw2LDIsMiw0LDIsMTYsNDQyMSw0MjcxMCw0Miw0MTQ4LDEyLDIyMSwzLDU3NjEsMTA1OTEsNTQxXTtcblxudmFyIGFzdHJhbElkZW50aWZpZXJDb2RlcyA9IFs1MDksMCwyMjcsMCwxNTAsNCwyOTQsOSwxMzY4LDIsMiwxLDYsMyw0MSwyLDUsMCwxNjYsMSwxMzA2LDIsNTQsMTQsMzIsOSwxNiwzLDQ2LDEwLDU0LDksNywyLDM3LDEzLDIsOSw1MiwwLDEzLDIsNDksMTMsMTAsMiw0LDksODMsMTEsNywwLDE2MSwxMSw2LDksNywzLDU3LDAsMiw2LDMsMSwzLDIsMTAsMCwxMSwxLDMsNiw0LDQsMTkzLDE3LDEwLDksODcsMTksMTMsOSwyMTQsNiwzLDgsMjgsMSw4MywxNiwxNiw5LDgyLDEyLDksOSw4NCwxNCw1LDksNDIzLDksODM4LDcsMiw3LDE3LDksNTcsMjEsMiwxMywxOTg4Miw5LDEzNSw0LDYwLDYsMjYsOSwxMDE2LDQ1LDE3LDMsMTk3MjMsMSw1MzE5LDQsNCw1LDksNywzLDYsMzEsMywxNDksMiwxNDE4LDQ5LDUxMyw1NCw1LDQ5LDksMCwxNSwwLDIzLDQsMiwxNCwxMzYxLDYsMiwxNiwzLDYsMiwxLDIsNCwyMjE0LDYsMTEwLDYsNiw5LDc5MjQ4NywyMzldO1xuXG5mdW5jdGlvbiBpc0luQXN0cmFsU2V0KGNvZGUsIHNldCkge1xuICB2YXIgcG9zID0gMHgxMDAwMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZXQubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBwb3MgKz0gc2V0W2ldO1xuICAgIGlmIChwb3MgPiBjb2RlKSB7IHJldHVybiBmYWxzZSB9XG4gICAgcG9zICs9IHNldFtpICsgMV07XG4gICAgaWYgKHBvcyA+PSBjb2RlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGlzSWRlbnRpZmllclN0YXJ0KGNvZGUsIGFzdHJhbCkge1xuICBpZiAoY29kZSA8IDY1KSB7IHJldHVybiBjb2RlID09PSAzNiB9XG4gIGlmIChjb2RlIDwgOTEpIHsgcmV0dXJuIHRydWUgfVxuICBpZiAoY29kZSA8IDk3KSB7IHJldHVybiBjb2RlID09PSA5NSB9XG4gIGlmIChjb2RlIDwgMTIzKSB7IHJldHVybiB0cnVlIH1cbiAgaWYgKGNvZGUgPD0gMHhmZmZmKSB7IHJldHVybiBjb2RlID49IDB4YWEgJiYgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnQudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKSB9XG4gIGlmIChhc3RyYWwgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzKVxufVxuXG5cbmZ1bmN0aW9uIGlzSWRlbnRpZmllckNoYXIoY29kZSwgYXN0cmFsKSB7XG4gIGlmIChjb2RlIDwgNDgpIHsgcmV0dXJuIGNvZGUgPT09IDM2IH1cbiAgaWYgKGNvZGUgPCA1OCkgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChjb2RlIDwgNjUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgaWYgKGNvZGUgPCA5MSkgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChjb2RlIDwgOTcpIHsgcmV0dXJuIGNvZGUgPT09IDk1IH1cbiAgaWYgKGNvZGUgPCAxMjMpIHsgcmV0dXJuIHRydWUgfVxuICBpZiAoY29kZSA8PSAweGZmZmYpIHsgcmV0dXJuIGNvZGUgPj0gMHhhYSAmJiBub25BU0NJSWlkZW50aWZpZXIudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpKSB9XG4gIGlmIChhc3RyYWwgPT09IGZhbHNlKSB7IHJldHVybiBmYWxzZSB9XG4gIHJldHVybiBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzKSB8fCBpc0luQXN0cmFsU2V0KGNvZGUsIGFzdHJhbElkZW50aWZpZXJDb2Rlcylcbn1cblxuXG5cblxuXG52YXIgVG9rZW5UeXBlID0gZnVuY3Rpb24gVG9rZW5UeXBlKGxhYmVsLCBjb25mKSB7XG4gIGlmICggY29uZiA9PT0gdm9pZCAwICkgY29uZiA9IHt9O1xuXG4gIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgdGhpcy5rZXl3b3JkID0gY29uZi5rZXl3b3JkO1xuICB0aGlzLmJlZm9yZUV4cHIgPSAhIWNvbmYuYmVmb3JlRXhwcjtcbiAgdGhpcy5zdGFydHNFeHByID0gISFjb25mLnN0YXJ0c0V4cHI7XG4gIHRoaXMuaXNMb29wID0gISFjb25mLmlzTG9vcDtcbiAgdGhpcy5pc0Fzc2lnbiA9ICEhY29uZi5pc0Fzc2lnbjtcbiAgdGhpcy5wcmVmaXggPSAhIWNvbmYucHJlZml4O1xuICB0aGlzLnBvc3RmaXggPSAhIWNvbmYucG9zdGZpeDtcbiAgdGhpcy5iaW5vcCA9IGNvbmYuYmlub3AgfHwgbnVsbDtcbiAgdGhpcy51cGRhdGVDb250ZXh0ID0gbnVsbDtcbn07XG5cbmZ1bmN0aW9uIGJpbm9wKG5hbWUsIHByZWMpIHtcbiAgcmV0dXJuIG5ldyBUb2tlblR5cGUobmFtZSwge2JlZm9yZUV4cHI6IHRydWUsIGJpbm9wOiBwcmVjfSlcbn1cbnZhciBiZWZvcmVFeHByID0ge2JlZm9yZUV4cHI6IHRydWV9O1xudmFyIHN0YXJ0c0V4cHIgPSB7c3RhcnRzRXhwcjogdHJ1ZX07XG5cblxudmFyIGtleXdvcmRzJDEgPSB7fTtcblxuZnVuY3Rpb24ga3cobmFtZSwgb3B0aW9ucykge1xuICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBvcHRpb25zLmtleXdvcmQgPSBuYW1lO1xuICByZXR1cm4ga2V5d29yZHMkMVtuYW1lXSA9IG5ldyBUb2tlblR5cGUobmFtZSwgb3B0aW9ucylcbn1cblxudmFyIHR5cGVzID0ge1xuICBudW06IG5ldyBUb2tlblR5cGUoXCJudW1cIiwgc3RhcnRzRXhwciksXG4gIHJlZ2V4cDogbmV3IFRva2VuVHlwZShcInJlZ2V4cFwiLCBzdGFydHNFeHByKSxcbiAgc3RyaW5nOiBuZXcgVG9rZW5UeXBlKFwic3RyaW5nXCIsIHN0YXJ0c0V4cHIpLFxuICBuYW1lOiBuZXcgVG9rZW5UeXBlKFwibmFtZVwiLCBzdGFydHNFeHByKSxcbiAgZW9mOiBuZXcgVG9rZW5UeXBlKFwiZW9mXCIpLFxuXG4gIGJyYWNrZXRMOiBuZXcgVG9rZW5UeXBlKFwiW1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBicmFja2V0UjogbmV3IFRva2VuVHlwZShcIl1cIiksXG4gIGJyYWNlTDogbmV3IFRva2VuVHlwZShcIntcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgYnJhY2VSOiBuZXcgVG9rZW5UeXBlKFwifVwiKSxcbiAgcGFyZW5MOiBuZXcgVG9rZW5UeXBlKFwiKFwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBwYXJlblI6IG5ldyBUb2tlblR5cGUoXCIpXCIpLFxuICBjb21tYTogbmV3IFRva2VuVHlwZShcIixcIiwgYmVmb3JlRXhwciksXG4gIHNlbWk6IG5ldyBUb2tlblR5cGUoXCI7XCIsIGJlZm9yZUV4cHIpLFxuICBjb2xvbjogbmV3IFRva2VuVHlwZShcIjpcIiwgYmVmb3JlRXhwciksXG4gIGRvdDogbmV3IFRva2VuVHlwZShcIi5cIiksXG4gIHF1ZXN0aW9uOiBuZXcgVG9rZW5UeXBlKFwiP1wiLCBiZWZvcmVFeHByKSxcbiAgYXJyb3c6IG5ldyBUb2tlblR5cGUoXCI9PlwiLCBiZWZvcmVFeHByKSxcbiAgdGVtcGxhdGU6IG5ldyBUb2tlblR5cGUoXCJ0ZW1wbGF0ZVwiKSxcbiAgaW52YWxpZFRlbXBsYXRlOiBuZXcgVG9rZW5UeXBlKFwiaW52YWxpZFRlbXBsYXRlXCIpLFxuICBlbGxpcHNpczogbmV3IFRva2VuVHlwZShcIi4uLlwiLCBiZWZvcmVFeHByKSxcbiAgYmFja1F1b3RlOiBuZXcgVG9rZW5UeXBlKFwiYFwiLCBzdGFydHNFeHByKSxcbiAgZG9sbGFyQnJhY2VMOiBuZXcgVG9rZW5UeXBlKFwiJHtcIiwge2JlZm9yZUV4cHI6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcblxuXG4gIGVxOiBuZXcgVG9rZW5UeXBlKFwiPVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgaXNBc3NpZ246IHRydWV9KSxcbiAgYXNzaWduOiBuZXcgVG9rZW5UeXBlKFwiXz1cIiwge2JlZm9yZUV4cHI6IHRydWUsIGlzQXNzaWduOiB0cnVlfSksXG4gIGluY0RlYzogbmV3IFRva2VuVHlwZShcIisrLy0tXCIsIHtwcmVmaXg6IHRydWUsIHBvc3RmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgcHJlZml4OiBuZXcgVG9rZW5UeXBlKFwiIS9+XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgbG9naWNhbE9SOiBiaW5vcChcInx8XCIsIDEpLFxuICBsb2dpY2FsQU5EOiBiaW5vcChcIiYmXCIsIDIpLFxuICBiaXR3aXNlT1I6IGJpbm9wKFwifFwiLCAzKSxcbiAgYml0d2lzZVhPUjogYmlub3AoXCJeXCIsIDQpLFxuICBiaXR3aXNlQU5EOiBiaW5vcChcIiZcIiwgNSksXG4gIGVxdWFsaXR5OiBiaW5vcChcIj09LyE9Lz09PS8hPT1cIiwgNiksXG4gIHJlbGF0aW9uYWw6IGJpbm9wKFwiPC8+Lzw9Lz49XCIsIDcpLFxuICBiaXRTaGlmdDogYmlub3AoXCI8PC8+Pi8+Pj5cIiwgOCksXG4gIHBsdXNNaW46IG5ldyBUb2tlblR5cGUoXCIrLy1cIiwge2JlZm9yZUV4cHI6IHRydWUsIGJpbm9wOiA5LCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgbW9kdWxvOiBiaW5vcChcIiVcIiwgMTApLFxuICBzdGFyOiBiaW5vcChcIipcIiwgMTApLFxuICBzbGFzaDogYmlub3AoXCIvXCIsIDEwKSxcbiAgc3RhcnN0YXI6IG5ldyBUb2tlblR5cGUoXCIqKlwiLCB7YmVmb3JlRXhwcjogdHJ1ZX0pLFxuXG4gIF9icmVhazoga3coXCJicmVha1wiKSxcbiAgX2Nhc2U6IGt3KFwiY2FzZVwiLCBiZWZvcmVFeHByKSxcbiAgX2NhdGNoOiBrdyhcImNhdGNoXCIpLFxuICBfY29udGludWU6IGt3KFwiY29udGludWVcIiksXG4gIF9kZWJ1Z2dlcjoga3coXCJkZWJ1Z2dlclwiKSxcbiAgX2RlZmF1bHQ6IGt3KFwiZGVmYXVsdFwiLCBiZWZvcmVFeHByKSxcbiAgX2RvOiBrdyhcImRvXCIsIHtpc0xvb3A6IHRydWUsIGJlZm9yZUV4cHI6IHRydWV9KSxcbiAgX2Vsc2U6IGt3KFwiZWxzZVwiLCBiZWZvcmVFeHByKSxcbiAgX2ZpbmFsbHk6IGt3KFwiZmluYWxseVwiKSxcbiAgX2Zvcjoga3coXCJmb3JcIiwge2lzTG9vcDogdHJ1ZX0pLFxuICBfZnVuY3Rpb246IGt3KFwiZnVuY3Rpb25cIiwgc3RhcnRzRXhwciksXG4gIF9pZjoga3coXCJpZlwiKSxcbiAgX3JldHVybjoga3coXCJyZXR1cm5cIiwgYmVmb3JlRXhwciksXG4gIF9zd2l0Y2g6IGt3KFwic3dpdGNoXCIpLFxuICBfdGhyb3c6IGt3KFwidGhyb3dcIiwgYmVmb3JlRXhwciksXG4gIF90cnk6IGt3KFwidHJ5XCIpLFxuICBfdmFyOiBrdyhcInZhclwiKSxcbiAgX2NvbnN0OiBrdyhcImNvbnN0XCIpLFxuICBfd2hpbGU6IGt3KFwid2hpbGVcIiwge2lzTG9vcDogdHJ1ZX0pLFxuICBfd2l0aDoga3coXCJ3aXRoXCIpLFxuICBfbmV3OiBrdyhcIm5ld1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBfdGhpczoga3coXCJ0aGlzXCIsIHN0YXJ0c0V4cHIpLFxuICBfc3VwZXI6IGt3KFwic3VwZXJcIiwgc3RhcnRzRXhwciksXG4gIF9jbGFzczoga3coXCJjbGFzc1wiLCBzdGFydHNFeHByKSxcbiAgX2V4dGVuZHM6IGt3KFwiZXh0ZW5kc1wiLCBiZWZvcmVFeHByKSxcbiAgX2V4cG9ydDoga3coXCJleHBvcnRcIiksXG4gIF9pbXBvcnQ6IGt3KFwiaW1wb3J0XCIpLFxuICBfbnVsbDoga3coXCJudWxsXCIsIHN0YXJ0c0V4cHIpLFxuICBfdHJ1ZToga3coXCJ0cnVlXCIsIHN0YXJ0c0V4cHIpLFxuICBfZmFsc2U6IGt3KFwiZmFsc2VcIiwgc3RhcnRzRXhwciksXG4gIF9pbjoga3coXCJpblwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDd9KSxcbiAgX2luc3RhbmNlb2Y6IGt3KFwiaW5zdGFuY2VvZlwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDd9KSxcbiAgX3R5cGVvZjoga3coXCJ0eXBlb2ZcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBfdm9pZDoga3coXCJ2b2lkXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBwcmVmaXg6IHRydWUsIHN0YXJ0c0V4cHI6IHRydWV9KSxcbiAgX2RlbGV0ZToga3coXCJkZWxldGVcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pXG59O1xuXG5cbnZhciBsaW5lQnJlYWsgPSAvXFxyXFxuP3xcXG58XFx1MjAyOHxcXHUyMDI5LztcbnZhciBsaW5lQnJlYWtHID0gbmV3IFJlZ0V4cChsaW5lQnJlYWsuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIGlzTmV3TGluZShjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSAxMCB8fCBjb2RlID09PSAxMyB8fCBjb2RlID09PSAweDIwMjggfHwgY29kZSA9PT0gMHgyMDI5XG59XG5cbnZhciBub25BU0NJSXdoaXRlc3BhY2UgPSAvW1xcdTE2ODBcXHUxODBlXFx1MjAwMC1cXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1ZmVmZl0vO1xuXG52YXIgc2tpcFdoaXRlU3BhY2UgPSAvKD86XFxzfFxcL1xcLy4qfFxcL1xcKlteXSo/XFwqXFwvKSovZztcblxudmFyIHJlZiA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgaGFzT3duUHJvcGVydHkgPSByZWYuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSByZWYudG9TdHJpbmc7XG5cblxuZnVuY3Rpb24gaGFzKG9iaiwgcHJvcE5hbWUpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wTmFtZSlcbn1cblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IChmdW5jdGlvbiAob2JqKSB7IHJldHVybiAoXG4gIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiXG4pOyB9KTtcblxuXG52YXIgUG9zaXRpb24gPSBmdW5jdGlvbiBQb3NpdGlvbihsaW5lLCBjb2wpIHtcbiAgdGhpcy5saW5lID0gbGluZTtcbiAgdGhpcy5jb2x1bW4gPSBjb2w7XG59O1xuXG5Qb3NpdGlvbi5wcm90b3R5cGUub2Zmc2V0ID0gZnVuY3Rpb24gb2Zmc2V0IChuKSB7XG4gIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5saW5lLCB0aGlzLmNvbHVtbiArIG4pXG59O1xuXG52YXIgU291cmNlTG9jYXRpb24gPSBmdW5jdGlvbiBTb3VyY2VMb2NhdGlvbihwLCBzdGFydCwgZW5kKSB7XG4gIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgdGhpcy5lbmQgPSBlbmQ7XG4gIGlmIChwLnNvdXJjZUZpbGUgIT09IG51bGwpIHsgdGhpcy5zb3VyY2UgPSBwLnNvdXJjZUZpbGU7IH1cbn07XG5cblxuZnVuY3Rpb24gZ2V0TGluZUluZm8oaW5wdXQsIG9mZnNldCkge1xuICBmb3IgKHZhciBsaW5lID0gMSwgY3VyID0gMDs7KSB7XG4gICAgbGluZUJyZWFrRy5sYXN0SW5kZXggPSBjdXI7XG4gICAgdmFyIG1hdGNoID0gbGluZUJyZWFrRy5leGVjKGlucHV0KTtcbiAgICBpZiAobWF0Y2ggJiYgbWF0Y2guaW5kZXggPCBvZmZzZXQpIHtcbiAgICAgICsrbGluZTtcbiAgICAgIGN1ciA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFBvc2l0aW9uKGxpbmUsIG9mZnNldCAtIGN1cilcbiAgICB9XG4gIH1cbn1cblxuXG52YXIgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGVjbWFWZXJzaW9uOiA3LFxuICBzb3VyY2VUeXBlOiBcInNjcmlwdFwiLFxuICBvbkluc2VydGVkU2VtaWNvbG9uOiBudWxsLFxuICBvblRyYWlsaW5nQ29tbWE6IG51bGwsXG4gIGFsbG93UmVzZXJ2ZWQ6IG51bGwsXG4gIGFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uOiBmYWxzZSxcbiAgYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlOiBmYWxzZSxcbiAgYWxsb3dIYXNoQmFuZzogZmFsc2UsXG4gIGxvY2F0aW9uczogZmFsc2UsXG4gIG9uVG9rZW46IG51bGwsXG4gIG9uQ29tbWVudDogbnVsbCxcbiAgcmFuZ2VzOiBmYWxzZSxcbiAgcHJvZ3JhbTogbnVsbCxcbiAgc291cmNlRmlsZTogbnVsbCxcbiAgZGlyZWN0U291cmNlRmlsZTogbnVsbCxcbiAgcHJlc2VydmVQYXJlbnM6IGZhbHNlLFxuICBwbHVnaW5zOiB7fVxufTtcblxuXG5mdW5jdGlvbiBnZXRPcHRpb25zKG9wdHMpIHtcbiAgdmFyIG9wdGlvbnMgPSB7fTtcblxuICBmb3IgKHZhciBvcHQgaW4gZGVmYXVsdE9wdGlvbnMpXG4gICAgeyBvcHRpb25zW29wdF0gPSBvcHRzICYmIGhhcyhvcHRzLCBvcHQpID8gb3B0c1tvcHRdIDogZGVmYXVsdE9wdGlvbnNbb3B0XTsgfVxuXG4gIGlmIChvcHRpb25zLmVjbWFWZXJzaW9uID49IDIwMTUpXG4gICAgeyBvcHRpb25zLmVjbWFWZXJzaW9uIC09IDIwMDk7IH1cblxuICBpZiAob3B0aW9ucy5hbGxvd1Jlc2VydmVkID09IG51bGwpXG4gICAgeyBvcHRpb25zLmFsbG93UmVzZXJ2ZWQgPSBvcHRpb25zLmVjbWFWZXJzaW9uIDwgNTsgfVxuXG4gIGlmIChpc0FycmF5KG9wdGlvbnMub25Ub2tlbikpIHtcbiAgICB2YXIgdG9rZW5zID0gb3B0aW9ucy5vblRva2VuO1xuICAgIG9wdGlvbnMub25Ub2tlbiA9IGZ1bmN0aW9uICh0b2tlbikgeyByZXR1cm4gdG9rZW5zLnB1c2godG9rZW4pOyB9O1xuICB9XG4gIGlmIChpc0FycmF5KG9wdGlvbnMub25Db21tZW50KSlcbiAgICB7IG9wdGlvbnMub25Db21tZW50ID0gcHVzaENvbW1lbnQob3B0aW9ucywgb3B0aW9ucy5vbkNvbW1lbnQpOyB9XG5cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcHVzaENvbW1lbnQob3B0aW9ucywgYXJyYXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGJsb2NrLCB0ZXh0LCBzdGFydCwgZW5kLCBzdGFydExvYywgZW5kTG9jKSB7XG4gICAgdmFyIGNvbW1lbnQgPSB7XG4gICAgICB0eXBlOiBibG9jayA/IFwiQmxvY2tcIiA6IFwiTGluZVwiLFxuICAgICAgdmFsdWU6IHRleHQsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBlbmQ6IGVuZFxuICAgIH07XG4gICAgaWYgKG9wdGlvbnMubG9jYXRpb25zKVxuICAgICAgeyBjb21tZW50LmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbih0aGlzLCBzdGFydExvYywgZW5kTG9jKTsgfVxuICAgIGlmIChvcHRpb25zLnJhbmdlcylcbiAgICAgIHsgY29tbWVudC5yYW5nZSA9IFtzdGFydCwgZW5kXTsgfVxuICAgIGFycmF5LnB1c2goY29tbWVudCk7XG4gIH1cbn1cblxudmFyIHBsdWdpbnMgPSB7fTtcblxuZnVuY3Rpb24ga2V5d29yZFJlZ2V4cCh3b3Jkcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIHdvcmRzLnJlcGxhY2UoLyAvZywgXCJ8XCIpICsgXCIpJFwiKVxufVxuXG52YXIgUGFyc2VyID0gZnVuY3Rpb24gUGFyc2VyKG9wdGlvbnMsIGlucHV0LCBzdGFydFBvcykge1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zID0gZ2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgdGhpcy5zb3VyY2VGaWxlID0gb3B0aW9ucy5zb3VyY2VGaWxlO1xuICB0aGlzLmtleXdvcmRzID0ga2V5d29yZFJlZ2V4cChrZXl3b3Jkc1tvcHRpb25zLmVjbWFWZXJzaW9uID49IDYgPyA2IDogNV0pO1xuICB2YXIgcmVzZXJ2ZWQgPSBcIlwiO1xuICBpZiAoIW9wdGlvbnMuYWxsb3dSZXNlcnZlZCkge1xuICAgIGZvciAodmFyIHYgPSBvcHRpb25zLmVjbWFWZXJzaW9uOzsgdi0tKVxuICAgICAgeyBpZiAocmVzZXJ2ZWQgPSByZXNlcnZlZFdvcmRzW3ZdKSB7IGJyZWFrIH0gfVxuICAgIGlmIChvcHRpb25zLnNvdXJjZVR5cGUgPT0gXCJtb2R1bGVcIikgeyByZXNlcnZlZCArPSBcIiBhd2FpdFwiOyB9XG4gIH1cbiAgdGhpcy5yZXNlcnZlZFdvcmRzID0ga2V5d29yZFJlZ2V4cChyZXNlcnZlZCk7XG4gIHZhciByZXNlcnZlZFN0cmljdCA9IChyZXNlcnZlZCA/IHJlc2VydmVkICsgXCIgXCIgOiBcIlwiKSArIHJlc2VydmVkV29yZHMuc3RyaWN0O1xuICB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3QgPSBrZXl3b3JkUmVnZXhwKHJlc2VydmVkU3RyaWN0KTtcbiAgdGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0QmluZCA9IGtleXdvcmRSZWdleHAocmVzZXJ2ZWRTdHJpY3QgKyBcIiBcIiArIHJlc2VydmVkV29yZHMuc3RyaWN0QmluZCk7XG4gIHRoaXMuaW5wdXQgPSBTdHJpbmcoaW5wdXQpO1xuXG4gIHRoaXMuY29udGFpbnNFc2MgPSBmYWxzZTtcblxuICB0aGlzLmxvYWRQbHVnaW5zKG9wdGlvbnMucGx1Z2lucyk7XG5cblxuICBpZiAoc3RhcnRQb3MpIHtcbiAgICB0aGlzLnBvcyA9IHN0YXJ0UG9zO1xuICAgIHRoaXMubGluZVN0YXJ0ID0gdGhpcy5pbnB1dC5sYXN0SW5kZXhPZihcIlxcblwiLCBzdGFydFBvcyAtIDEpICsgMTtcbiAgICB0aGlzLmN1ckxpbmUgPSB0aGlzLmlucHV0LnNsaWNlKDAsIHRoaXMubGluZVN0YXJ0KS5zcGxpdChsaW5lQnJlYWspLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnBvcyA9IHRoaXMubGluZVN0YXJ0ID0gMDtcbiAgICB0aGlzLmN1ckxpbmUgPSAxO1xuICB9XG5cbiAgdGhpcy50eXBlID0gdHlwZXMuZW9mO1xuICB0aGlzLnZhbHVlID0gbnVsbDtcbiAgdGhpcy5zdGFydCA9IHRoaXMuZW5kID0gdGhpcy5wb3M7XG4gIHRoaXMuc3RhcnRMb2MgPSB0aGlzLmVuZExvYyA9IHRoaXMuY3VyUG9zaXRpb24oKTtcblxuICB0aGlzLmxhc3RUb2tFbmRMb2MgPSB0aGlzLmxhc3RUb2tTdGFydExvYyA9IG51bGw7XG4gIHRoaXMubGFzdFRva1N0YXJ0ID0gdGhpcy5sYXN0VG9rRW5kID0gdGhpcy5wb3M7XG5cbiAgdGhpcy5jb250ZXh0ID0gdGhpcy5pbml0aWFsQ29udGV4dCgpO1xuICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZTtcblxuICB0aGlzLmluTW9kdWxlID0gb3B0aW9ucy5zb3VyY2VUeXBlID09PSBcIm1vZHVsZVwiO1xuICB0aGlzLnN0cmljdCA9IHRoaXMuaW5Nb2R1bGUgfHwgdGhpcy5zdHJpY3REaXJlY3RpdmUodGhpcy5wb3MpO1xuXG4gIHRoaXMucG90ZW50aWFsQXJyb3dBdCA9IC0xO1xuXG4gIHRoaXMuaW5GdW5jdGlvbiA9IHRoaXMuaW5HZW5lcmF0b3IgPSB0aGlzLmluQXN5bmMgPSBmYWxzZTtcbiAgdGhpcy55aWVsZFBvcyA9IHRoaXMuYXdhaXRQb3MgPSAwO1xuICB0aGlzLmxhYmVscyA9IFtdO1xuXG4gIGlmICh0aGlzLnBvcyA9PT0gMCAmJiBvcHRpb25zLmFsbG93SGFzaEJhbmcgJiYgdGhpcy5pbnB1dC5zbGljZSgwLCAyKSA9PT0gXCIjIVwiKVxuICAgIHsgdGhpcy5za2lwTGluZUNvbW1lbnQoMik7IH1cblxuICB0aGlzLnNjb3BlU3RhY2sgPSBbXTtcbiAgdGhpcy5lbnRlckZ1bmN0aW9uU2NvcGUoKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUuaXNLZXl3b3JkID0gZnVuY3Rpb24gaXNLZXl3b3JkICh3b3JkKSB7IHJldHVybiB0aGlzLmtleXdvcmRzLnRlc3Qod29yZCkgfTtcblBhcnNlci5wcm90b3R5cGUuaXNSZXNlcnZlZFdvcmQgPSBmdW5jdGlvbiBpc1Jlc2VydmVkV29yZCAod29yZCkgeyByZXR1cm4gdGhpcy5yZXNlcnZlZFdvcmRzLnRlc3Qod29yZCkgfTtcblxuUGFyc2VyLnByb3RvdHlwZS5leHRlbmQgPSBmdW5jdGlvbiBleHRlbmQgKG5hbWUsIGYpIHtcbiAgdGhpc1tuYW1lXSA9IGYodGhpc1tuYW1lXSk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLmxvYWRQbHVnaW5zID0gZnVuY3Rpb24gbG9hZFBsdWdpbnMgKHBsdWdpbkNvbmZpZ3MpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbkNvbmZpZ3MpIHtcbiAgICB2YXIgcGx1Z2luID0gcGx1Z2luc1tuYW1lXTtcbiAgICBpZiAoIXBsdWdpbikgeyB0aHJvdyBuZXcgRXJyb3IoXCJQbHVnaW4gJ1wiICsgbmFtZSArIFwiJyBub3QgZm91bmRcIikgfVxuICAgIHBsdWdpbih0aGlzJDEsIHBsdWdpbkNvbmZpZ3NbbmFtZV0pO1xuICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UgKCkge1xuICB2YXIgbm9kZSA9IHRoaXMub3B0aW9ucy5wcm9ncmFtIHx8IHRoaXMuc3RhcnROb2RlKCk7XG4gIHRoaXMubmV4dFRva2VuKCk7XG4gIHJldHVybiB0aGlzLnBhcnNlVG9wTGV2ZWwobm9kZSlcbn07XG5cbnZhciBwcCA9IFBhcnNlci5wcm90b3R5cGU7XG5cblxudmFyIGxpdGVyYWwgPSAvXig/OicoKD86XFxcXC58W14nXSkqPyknfFwiKCg/OlxcXFwufFteXCJdKSo/KVwifDspLztcbnBwLnN0cmljdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKHN0YXJ0KSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAoOzspIHtcbiAgICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSBzdGFydDtcbiAgICBzdGFydCArPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMkMS5pbnB1dClbMF0ubGVuZ3RoO1xuICAgIHZhciBtYXRjaCA9IGxpdGVyYWwuZXhlYyh0aGlzJDEuaW5wdXQuc2xpY2Uoc3RhcnQpKTtcbiAgICBpZiAoIW1hdGNoKSB7IHJldHVybiBmYWxzZSB9XG4gICAgaWYgKChtYXRjaFsxXSB8fCBtYXRjaFsyXSkgPT0gXCJ1c2Ugc3RyaWN0XCIpIHsgcmV0dXJuIHRydWUgfVxuICAgIHN0YXJ0ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxufTtcblxuXG5wcC5lYXQgPSBmdW5jdGlvbih0eXBlKSB7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGUpIHtcbiAgICB0aGlzLm5leHQoKTtcbiAgICByZXR1cm4gdHJ1ZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59O1xuXG5cbnBwLmlzQ29udGV4dHVhbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSAmJiB0aGlzLnZhbHVlID09PSBuYW1lXG59O1xuXG5cbnBwLmVhdENvbnRleHR1YWwgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLnZhbHVlID09PSBuYW1lICYmIHRoaXMuZWF0KHR5cGVzLm5hbWUpXG59O1xuXG5cbnBwLmV4cGVjdENvbnRleHR1YWwgPSBmdW5jdGlvbihuYW1lKSB7XG4gIGlmICghdGhpcy5lYXRDb250ZXh0dWFsKG5hbWUpKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG59O1xuXG5cbnBwLmNhbkluc2VydFNlbWljb2xvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlID09PSB0eXBlcy5lb2YgfHxcbiAgICB0aGlzLnR5cGUgPT09IHR5cGVzLmJyYWNlUiB8fFxuICAgIGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSlcbn07XG5cbnBwLmluc2VydFNlbWljb2xvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub25JbnNlcnRlZFNlbWljb2xvbilcbiAgICAgIHsgdGhpcy5vcHRpb25zLm9uSW5zZXJ0ZWRTZW1pY29sb24odGhpcy5sYXN0VG9rRW5kLCB0aGlzLmxhc3RUb2tFbmRMb2MpOyB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufTtcblxuXG5wcC5zZW1pY29sb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKCF0aGlzLmVhdCh0eXBlcy5zZW1pKSAmJiAhdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxufTtcblxucHAuYWZ0ZXJUcmFpbGluZ0NvbW1hID0gZnVuY3Rpb24odG9rVHlwZSwgbm90TmV4dCkge1xuICBpZiAodGhpcy50eXBlID09IHRva1R5cGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLm9uVHJhaWxpbmdDb21tYSlcbiAgICAgIHsgdGhpcy5vcHRpb25zLm9uVHJhaWxpbmdDb21tYSh0aGlzLmxhc3RUb2tTdGFydCwgdGhpcy5sYXN0VG9rU3RhcnRMb2MpOyB9XG4gICAgaWYgKCFub3ROZXh0KVxuICAgICAgeyB0aGlzLm5leHQoKTsgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cbn07XG5cblxucHAuZXhwZWN0ID0gZnVuY3Rpb24odHlwZSkge1xuICB0aGlzLmVhdCh0eXBlKSB8fCB0aGlzLnVuZXhwZWN0ZWQoKTtcbn07XG5cblxucHAudW5leHBlY3RlZCA9IGZ1bmN0aW9uKHBvcykge1xuICB0aGlzLnJhaXNlKHBvcyAhPSBudWxsID8gcG9zIDogdGhpcy5zdGFydCwgXCJVbmV4cGVjdGVkIHRva2VuXCIpO1xufTtcblxuZnVuY3Rpb24gRGVzdHJ1Y3R1cmluZ0Vycm9ycygpIHtcbiAgdGhpcy5zaG9ydGhhbmRBc3NpZ24gPVxuICB0aGlzLnRyYWlsaW5nQ29tbWEgPVxuICB0aGlzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPVxuICB0aGlzLnBhcmVudGhlc2l6ZWRCaW5kID1cbiAgICAtMTtcbn1cblxucHAuY2hlY2tQYXR0ZXJuRXJyb3JzID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgaXNBc3NpZ24pIHtcbiAgaWYgKCFyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHJldHVybiB9XG4gIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPiAtMSlcbiAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEsIFwiQ29tbWEgaXMgbm90IHBlcm1pdHRlZCBhZnRlciB0aGUgcmVzdCBlbGVtZW50XCIpOyB9XG4gIHZhciBwYXJlbnMgPSBpc0Fzc2lnbiA/IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA6IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQ7XG4gIGlmIChwYXJlbnMgPiAtMSkgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocGFyZW5zLCBcIlBhcmVudGhlc2l6ZWQgcGF0dGVyblwiKTsgfVxufTtcblxucHAuY2hlY2tFeHByZXNzaW9uRXJyb3JzID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgYW5kVGhyb3cpIHtcbiAgdmFyIHBvcyA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA6IC0xO1xuICBpZiAoIWFuZFRocm93KSB7IHJldHVybiBwb3MgPj0gMCB9XG4gIGlmIChwb3MgPiAtMSkgeyB0aGlzLnJhaXNlKHBvcywgXCJTaG9ydGhhbmQgcHJvcGVydHkgYXNzaWdubWVudHMgYXJlIHZhbGlkIG9ubHkgaW4gZGVzdHJ1Y3R1cmluZyBwYXR0ZXJuc1wiKTsgfVxufTtcblxucHAuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnlpZWxkUG9zICYmICghdGhpcy5hd2FpdFBvcyB8fCB0aGlzLnlpZWxkUG9zIDwgdGhpcy5hd2FpdFBvcykpXG4gICAgeyB0aGlzLnJhaXNlKHRoaXMueWllbGRQb3MsIFwiWWllbGQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgYSBkZWZhdWx0IHZhbHVlXCIpOyB9XG4gIGlmICh0aGlzLmF3YWl0UG9zKVxuICAgIHsgdGhpcy5yYWlzZSh0aGlzLmF3YWl0UG9zLCBcIkF3YWl0IGV4cHJlc3Npb24gY2Fubm90IGJlIGEgZGVmYXVsdCB2YWx1ZVwiKTsgfVxufTtcblxucHAuaXNTaW1wbGVBc3NpZ25UYXJnZXQgPSBmdW5jdGlvbihleHByKSB7XG4gIGlmIChleHByLnR5cGUgPT09IFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcbiAgICB7IHJldHVybiB0aGlzLmlzU2ltcGxlQXNzaWduVGFyZ2V0KGV4cHIuZXhwcmVzc2lvbikgfVxuICByZXR1cm4gZXhwci50eXBlID09PSBcIklkZW50aWZpZXJcIiB8fCBleHByLnR5cGUgPT09IFwiTWVtYmVyRXhwcmVzc2lvblwiXG59O1xuXG52YXIgcHAkMSA9IFBhcnNlci5wcm90b3R5cGU7XG5cblxuXG5wcCQxLnBhcnNlVG9wTGV2ZWwgPSBmdW5jdGlvbihub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBleHBvcnRzID0ge307XG4gIGlmICghbm9kZS5ib2R5KSB7IG5vZGUuYm9keSA9IFtdOyB9XG4gIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLmVvZikge1xuICAgIHZhciBzdG10ID0gdGhpcyQxLnBhcnNlU3RhdGVtZW50KHRydWUsIHRydWUsIGV4cG9ydHMpO1xuICAgIG5vZGUuYm9keS5wdXNoKHN0bXQpO1xuICB9XG4gIHRoaXMubmV4dCgpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICBub2RlLnNvdXJjZVR5cGUgPSB0aGlzLm9wdGlvbnMuc291cmNlVHlwZTtcbiAgfVxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiUHJvZ3JhbVwiKVxufTtcblxudmFyIGxvb3BMYWJlbCA9IHtraW5kOiBcImxvb3BcIn07XG52YXIgc3dpdGNoTGFiZWwgPSB7a2luZDogXCJzd2l0Y2hcIn07XG5cbnBwJDEuaXNMZXQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSB8fCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2IHx8IHRoaXMudmFsdWUgIT0gXCJsZXRcIikgeyByZXR1cm4gZmFsc2UgfVxuICBza2lwV2hpdGVTcGFjZS5sYXN0SW5kZXggPSB0aGlzLnBvcztcbiAgdmFyIHNraXAgPSBza2lwV2hpdGVTcGFjZS5leGVjKHRoaXMuaW5wdXQpO1xuICB2YXIgbmV4dCA9IHRoaXMucG9zICsgc2tpcFswXS5sZW5ndGgsIG5leHRDaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdChuZXh0KTtcbiAgaWYgKG5leHRDaCA9PT0gOTEgfHwgbmV4dENoID09IDEyMykgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChpc0lkZW50aWZpZXJTdGFydChuZXh0Q2gsIHRydWUpKSB7XG4gICAgdmFyIHBvcyA9IG5leHQgKyAxO1xuICAgIHdoaWxlIChpc0lkZW50aWZpZXJDaGFyKHRoaXMuaW5wdXQuY2hhckNvZGVBdChwb3MpLCB0cnVlKSkgeyArK3BvczsgfVxuICAgIHZhciBpZGVudCA9IHRoaXMuaW5wdXQuc2xpY2UobmV4dCwgcG9zKTtcbiAgICBpZiAoIXRoaXMuaXNLZXl3b3JkKGlkZW50KSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG5wcCQxLmlzQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy50eXBlICE9PSB0eXBlcy5uYW1lIHx8IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDggfHwgdGhpcy52YWx1ZSAhPSBcImFzeW5jXCIpXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuXG4gIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHRoaXMucG9zO1xuICB2YXIgc2tpcCA9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcy5pbnB1dCk7XG4gIHZhciBuZXh0ID0gdGhpcy5wb3MgKyBza2lwWzBdLmxlbmd0aDtcbiAgcmV0dXJuICFsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMucG9zLCBuZXh0KSkgJiZcbiAgICB0aGlzLmlucHV0LnNsaWNlKG5leHQsIG5leHQgKyA4KSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgKG5leHQgKyA4ID09IHRoaXMuaW5wdXQubGVuZ3RoIHx8ICFpc0lkZW50aWZpZXJDaGFyKHRoaXMuaW5wdXQuY2hhckF0KG5leHQgKyA4KSkpXG59O1xuXG5cbnBwJDEucGFyc2VTdGF0ZW1lbnQgPSBmdW5jdGlvbihkZWNsYXJhdGlvbiwgdG9wTGV2ZWwsIGV4cG9ydHMpIHtcbiAgdmFyIHN0YXJ0dHlwZSA9IHRoaXMudHlwZSwgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIGtpbmQ7XG5cbiAgaWYgKHRoaXMuaXNMZXQoKSkge1xuICAgIHN0YXJ0dHlwZSA9IHR5cGVzLl92YXI7XG4gICAga2luZCA9IFwibGV0XCI7XG4gIH1cblxuXG4gIHN3aXRjaCAoc3RhcnR0eXBlKSB7XG4gIGNhc2UgdHlwZXMuX2JyZWFrOiBjYXNlIHR5cGVzLl9jb250aW51ZTogcmV0dXJuIHRoaXMucGFyc2VCcmVha0NvbnRpbnVlU3RhdGVtZW50KG5vZGUsIHN0YXJ0dHlwZS5rZXl3b3JkKVxuICBjYXNlIHR5cGVzLl9kZWJ1Z2dlcjogcmV0dXJuIHRoaXMucGFyc2VEZWJ1Z2dlclN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9kbzogcmV0dXJuIHRoaXMucGFyc2VEb1N0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9mb3I6IHJldHVybiB0aGlzLnBhcnNlRm9yU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX2Z1bmN0aW9uOlxuICAgIGlmICghZGVjbGFyYXRpb24gJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uU3RhdGVtZW50KG5vZGUsIGZhbHNlKVxuICBjYXNlIHR5cGVzLl9jbGFzczpcbiAgICBpZiAoIWRlY2xhcmF0aW9uKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgcmV0dXJuIHRoaXMucGFyc2VDbGFzcyhub2RlLCB0cnVlKVxuICBjYXNlIHR5cGVzLl9pZjogcmV0dXJuIHRoaXMucGFyc2VJZlN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9yZXR1cm46IHJldHVybiB0aGlzLnBhcnNlUmV0dXJuU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX3N3aXRjaDogcmV0dXJuIHRoaXMucGFyc2VTd2l0Y2hTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fdGhyb3c6IHJldHVybiB0aGlzLnBhcnNlVGhyb3dTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fdHJ5OiByZXR1cm4gdGhpcy5wYXJzZVRyeVN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9jb25zdDogY2FzZSB0eXBlcy5fdmFyOlxuICAgIGtpbmQgPSBraW5kIHx8IHRoaXMudmFsdWU7XG4gICAgaWYgKCFkZWNsYXJhdGlvbiAmJiBraW5kICE9IFwidmFyXCIpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICByZXR1cm4gdGhpcy5wYXJzZVZhclN0YXRlbWVudChub2RlLCBraW5kKVxuICBjYXNlIHR5cGVzLl93aGlsZTogcmV0dXJuIHRoaXMucGFyc2VXaGlsZVN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl93aXRoOiByZXR1cm4gdGhpcy5wYXJzZVdpdGhTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5icmFjZUw6IHJldHVybiB0aGlzLnBhcnNlQmxvY2soKVxuICBjYXNlIHR5cGVzLnNlbWk6IHJldHVybiB0aGlzLnBhcnNlRW1wdHlTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fZXhwb3J0OlxuICBjYXNlIHR5cGVzLl9pbXBvcnQ6XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlKSB7XG4gICAgICBpZiAoIXRvcExldmVsKVxuICAgICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInaW1wb3J0JyBhbmQgJ2V4cG9ydCcgbWF5IG9ubHkgYXBwZWFyIGF0IHRoZSB0b3AgbGV2ZWxcIik7IH1cbiAgICAgIGlmICghdGhpcy5pbk1vZHVsZSlcbiAgICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ2ltcG9ydCcgYW5kICdleHBvcnQnIG1heSBhcHBlYXIgb25seSB3aXRoICdzb3VyY2VUeXBlOiBtb2R1bGUnXCIpOyB9XG4gICAgfVxuICAgIHJldHVybiBzdGFydHR5cGUgPT09IHR5cGVzLl9pbXBvcnQgPyB0aGlzLnBhcnNlSW1wb3J0KG5vZGUpIDogdGhpcy5wYXJzZUV4cG9ydChub2RlLCBleHBvcnRzKVxuXG4gIGRlZmF1bHQ6XG4gICAgaWYgKHRoaXMuaXNBc3luY0Z1bmN0aW9uKCkgJiYgZGVjbGFyYXRpb24pIHtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvblN0YXRlbWVudChub2RlLCB0cnVlKVxuICAgIH1cblxuICAgIHZhciBtYXliZU5hbWUgPSB0aGlzLnZhbHVlLCBleHByID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICBpZiAoc3RhcnR0eXBlID09PSB0eXBlcy5uYW1lICYmIGV4cHIudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgdGhpcy5lYXQodHlwZXMuY29sb24pKVxuICAgICAgeyByZXR1cm4gdGhpcy5wYXJzZUxhYmVsZWRTdGF0ZW1lbnQobm9kZSwgbWF5YmVOYW1lLCBleHByKSB9XG4gICAgZWxzZSB7IHJldHVybiB0aGlzLnBhcnNlRXhwcmVzc2lvblN0YXRlbWVudChub2RlLCBleHByKSB9XG4gIH1cbn07XG5cbnBwJDEucGFyc2VCcmVha0NvbnRpbnVlU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwga2V5d29yZCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgaXNCcmVhayA9IGtleXdvcmQgPT0gXCJicmVha1wiO1xuICB0aGlzLm5leHQoKTtcbiAgaWYgKHRoaXMuZWF0KHR5cGVzLnNlbWkpIHx8IHRoaXMuaW5zZXJ0U2VtaWNvbG9uKCkpIHsgbm9kZS5sYWJlbCA9IG51bGw7IH1cbiAgZWxzZSBpZiAodGhpcy50eXBlICE9PSB0eXBlcy5uYW1lKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gIGVsc2Uge1xuICAgIG5vZGUubGFiZWwgPSB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICB9XG5cbiAgdmFyIGkgPSAwO1xuICBmb3IgKDsgaSA8IHRoaXMubGFiZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGxhYiA9IHRoaXMkMS5sYWJlbHNbaV07XG4gICAgaWYgKG5vZGUubGFiZWwgPT0gbnVsbCB8fCBsYWIubmFtZSA9PT0gbm9kZS5sYWJlbC5uYW1lKSB7XG4gICAgICBpZiAobGFiLmtpbmQgIT0gbnVsbCAmJiAoaXNCcmVhayB8fCBsYWIua2luZCA9PT0gXCJsb29wXCIpKSB7IGJyZWFrIH1cbiAgICAgIGlmIChub2RlLmxhYmVsICYmIGlzQnJlYWspIHsgYnJlYWsgfVxuICAgIH1cbiAgfVxuICBpZiAoaSA9PT0gdGhpcy5sYWJlbHMubGVuZ3RoKSB7IHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJVbnN5bnRhY3RpYyBcIiArIGtleXdvcmQpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNCcmVhayA/IFwiQnJlYWtTdGF0ZW1lbnRcIiA6IFwiQ29udGludWVTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VEZWJ1Z2dlclN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEZWJ1Z2dlclN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZURvU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgdGhpcy5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKTtcbiAgdGhpcy5sYWJlbHMucG9wKCk7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLl93aGlsZSk7XG4gIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KVxuICAgIHsgdGhpcy5lYXQodHlwZXMuc2VtaSk7IH1cbiAgZWxzZVxuICAgIHsgdGhpcy5zZW1pY29sb24oKTsgfVxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRG9XaGlsZVN0YXRlbWVudFwiKVxufTtcblxuXG5wcCQxLnBhcnNlRm9yU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgdGhpcy5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuICB0aGlzLmVudGVyTGV4aWNhbFNjb3BlKCk7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnNlbWkpIHsgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgbnVsbCkgfVxuICB2YXIgaXNMZXQgPSB0aGlzLmlzTGV0KCk7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl92YXIgfHwgdGhpcy50eXBlID09PSB0eXBlcy5fY29uc3QgfHwgaXNMZXQpIHtcbiAgICB2YXIgaW5pdCQxID0gdGhpcy5zdGFydE5vZGUoKSwga2luZCA9IGlzTGV0ID8gXCJsZXRcIiA6IHRoaXMudmFsdWU7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5wYXJzZVZhcihpbml0JDEsIHRydWUsIGtpbmQpO1xuICAgIHRoaXMuZmluaXNoTm9kZShpbml0JDEsIFwiVmFyaWFibGVEZWNsYXJhdGlvblwiKTtcbiAgICBpZiAoKHRoaXMudHlwZSA9PT0gdHlwZXMuX2luIHx8ICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzLmlzQ29udGV4dHVhbChcIm9mXCIpKSkgJiYgaW5pdCQxLmRlY2xhcmF0aW9ucy5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgIShraW5kICE9PSBcInZhclwiICYmIGluaXQkMS5kZWNsYXJhdGlvbnNbMF0uaW5pdCkpXG4gICAgICB7IHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdCQxKSB9XG4gICAgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgaW5pdCQxKVxuICB9XG4gIHZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnM7XG4gIHZhciBpbml0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24odHJ1ZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9pbiB8fCAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJvZlwiKSkpIHtcbiAgICB0aGlzLnRvQXNzaWduYWJsZShpbml0KTtcbiAgICB0aGlzLmNoZWNrTFZhbChpbml0KTtcbiAgICB0aGlzLmNoZWNrUGF0dGVybkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUZvckluKG5vZGUsIGluaXQpXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXMucGFyc2VGb3Iobm9kZSwgaW5pdClcbn07XG5cbnBwJDEucGFyc2VGdW5jdGlvblN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIGlzQXN5bmMpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24obm9kZSwgdHJ1ZSwgZmFsc2UsIGlzQXN5bmMpXG59O1xuXG5wcCQxLmlzRnVuY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudHlwZSA9PT0gdHlwZXMuX2Z1bmN0aW9uIHx8IHRoaXMuaXNBc3luY0Z1bmN0aW9uKClcbn07XG5cbnBwJDEucGFyc2VJZlN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgbm9kZS5jb25zZXF1ZW50ID0gdGhpcy5wYXJzZVN0YXRlbWVudCghdGhpcy5zdHJpY3QgJiYgdGhpcy5pc0Z1bmN0aW9uKCkpO1xuICBub2RlLmFsdGVybmF0ZSA9IHRoaXMuZWF0KHR5cGVzLl9lbHNlKSA/IHRoaXMucGFyc2VTdGF0ZW1lbnQoIXRoaXMuc3RyaWN0ICYmIHRoaXMuaXNGdW5jdGlvbigpKSA6IG51bGw7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJZlN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZVJldHVyblN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgaWYgKCF0aGlzLmluRnVuY3Rpb24gJiYgIXRoaXMub3B0aW9ucy5hbGxvd1JldHVybk91dHNpZGVGdW5jdGlvbilcbiAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCIncmV0dXJuJyBvdXRzaWRlIG9mIGZ1bmN0aW9uXCIpOyB9XG4gIHRoaXMubmV4dCgpO1xuXG5cbiAgaWYgKHRoaXMuZWF0KHR5cGVzLnNlbWkpIHx8IHRoaXMuaW5zZXJ0U2VtaWNvbG9uKCkpIHsgbm9kZS5hcmd1bWVudCA9IG51bGw7IH1cbiAgZWxzZSB7IG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpOyB0aGlzLnNlbWljb2xvbigpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXR1cm5TdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VTd2l0Y2hTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCgpO1xuICBub2RlLmRpc2NyaW1pbmFudCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgbm9kZS5jYXNlcyA9IFtdO1xuICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICB0aGlzLmxhYmVscy5wdXNoKHN3aXRjaExhYmVsKTtcbiAgdGhpcy5lbnRlckxleGljYWxTY29wZSgpO1xuXG5cbiAgdmFyIGN1cjtcbiAgZm9yICh2YXIgc2F3RGVmYXVsdCA9IGZhbHNlOyB0aGlzLnR5cGUgIT0gdHlwZXMuYnJhY2VSOykge1xuICAgIGlmICh0aGlzJDEudHlwZSA9PT0gdHlwZXMuX2Nhc2UgfHwgdGhpcyQxLnR5cGUgPT09IHR5cGVzLl9kZWZhdWx0KSB7XG4gICAgICB2YXIgaXNDYXNlID0gdGhpcyQxLnR5cGUgPT09IHR5cGVzLl9jYXNlO1xuICAgICAgaWYgKGN1cikgeyB0aGlzJDEuZmluaXNoTm9kZShjdXIsIFwiU3dpdGNoQ2FzZVwiKTsgfVxuICAgICAgbm9kZS5jYXNlcy5wdXNoKGN1ciA9IHRoaXMkMS5zdGFydE5vZGUoKSk7XG4gICAgICBjdXIuY29uc2VxdWVudCA9IFtdO1xuICAgICAgdGhpcyQxLm5leHQoKTtcbiAgICAgIGlmIChpc0Nhc2UpIHtcbiAgICAgICAgY3VyLnRlc3QgPSB0aGlzJDEucGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2F3RGVmYXVsdCkgeyB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZSh0aGlzJDEubGFzdFRva1N0YXJ0LCBcIk11bHRpcGxlIGRlZmF1bHQgY2xhdXNlc1wiKTsgfVxuICAgICAgICBzYXdEZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgY3VyLnRlc3QgPSBudWxsO1xuICAgICAgfVxuICAgICAgdGhpcyQxLmV4cGVjdCh0eXBlcy5jb2xvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY3VyKSB7IHRoaXMkMS51bmV4cGVjdGVkKCk7IH1cbiAgICAgIGN1ci5jb25zZXF1ZW50LnB1c2godGhpcyQxLnBhcnNlU3RhdGVtZW50KHRydWUpKTtcbiAgICB9XG4gIH1cbiAgdGhpcy5leGl0TGV4aWNhbFNjb3BlKCk7XG4gIGlmIChjdXIpIHsgdGhpcy5maW5pc2hOb2RlKGN1ciwgXCJTd2l0Y2hDYXNlXCIpOyB9XG4gIHRoaXMubmV4dCgpO1xuICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlN3aXRjaFN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZVRocm93U3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgaWYgKGxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5sYXN0VG9rRW5kLCB0aGlzLnN0YXJ0KSkpXG4gICAgeyB0aGlzLnJhaXNlKHRoaXMubGFzdFRva0VuZCwgXCJJbGxlZ2FsIG5ld2xpbmUgYWZ0ZXIgdGhyb3dcIik7IH1cbiAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUaHJvd1N0YXRlbWVudFwiKVxufTtcblxuXG52YXIgZW1wdHkgPSBbXTtcblxucHAkMS5wYXJzZVRyeVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUuYmxvY2sgPSB0aGlzLnBhcnNlQmxvY2soKTtcbiAgbm9kZS5oYW5kbGVyID0gbnVsbDtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2NhdGNoKSB7XG4gICAgdmFyIGNsYXVzZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5MKTtcbiAgICBjbGF1c2UucGFyYW0gPSB0aGlzLnBhcnNlQmluZGluZ0F0b20oKTtcbiAgICB0aGlzLmVudGVyTGV4aWNhbFNjb3BlKCk7XG4gICAgdGhpcy5jaGVja0xWYWwoY2xhdXNlLnBhcmFtLCBcImxldFwiKTtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlblIpO1xuICAgIGNsYXVzZS5ib2R5ID0gdGhpcy5wYXJzZUJsb2NrKGZhbHNlKTtcbiAgICB0aGlzLmV4aXRMZXhpY2FsU2NvcGUoKTtcbiAgICBub2RlLmhhbmRsZXIgPSB0aGlzLmZpbmlzaE5vZGUoY2xhdXNlLCBcIkNhdGNoQ2xhdXNlXCIpO1xuICB9XG4gIG5vZGUuZmluYWxpemVyID0gdGhpcy5lYXQodHlwZXMuX2ZpbmFsbHkpID8gdGhpcy5wYXJzZUJsb2NrKCkgOiBudWxsO1xuICBpZiAoIW5vZGUuaGFuZGxlciAmJiAhbm9kZS5maW5hbGl6ZXIpXG4gICAgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiTWlzc2luZyBjYXRjaCBvciBmaW5hbGx5IGNsYXVzZVwiKTsgfVxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiVHJ5U3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlVmFyU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwga2luZCkge1xuICB0aGlzLm5leHQoKTtcbiAgdGhpcy5wYXJzZVZhcihub2RlLCBmYWxzZSwga2luZCk7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpXG59O1xuXG5wcCQxLnBhcnNlV2hpbGVTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICBub2RlLnRlc3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG4gIHRoaXMubGFiZWxzLnB1c2gobG9vcExhYmVsKTtcbiAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChmYWxzZSk7XG4gIHRoaXMubGFiZWxzLnBvcCgpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiV2hpbGVTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VXaXRoU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAodGhpcy5zdHJpY3QpIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIid3aXRoJyBpbiBzdHJpY3QgbW9kZVwiKTsgfVxuICB0aGlzLm5leHQoKTtcbiAgbm9kZS5vYmplY3QgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG4gIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoZmFsc2UpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiV2l0aFN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZUVtcHR5U3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkVtcHR5U3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlTGFiZWxlZFN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUsIG1heWJlTmFtZSwgZXhwcikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBmb3IgKHZhciBpJDEgPSAwLCBsaXN0ID0gdGhpcyQxLmxhYmVsczsgaSQxIDwgbGlzdC5sZW5ndGg7IGkkMSArPSAxKVxuICAgIHtcbiAgICB2YXIgbGFiZWwgPSBsaXN0W2kkMV07XG5cbiAgICBpZiAobGFiZWwubmFtZSA9PT0gbWF5YmVOYW1lKVxuICAgICAgeyB0aGlzJDEucmFpc2UoZXhwci5zdGFydCwgXCJMYWJlbCAnXCIgKyBtYXliZU5hbWUgKyBcIicgaXMgYWxyZWFkeSBkZWNsYXJlZFwiKTtcbiAgfSB9XG4gIHZhciBraW5kID0gdGhpcy50eXBlLmlzTG9vcCA/IFwibG9vcFwiIDogdGhpcy50eXBlID09PSB0eXBlcy5fc3dpdGNoID8gXCJzd2l0Y2hcIiA6IG51bGw7XG4gIGZvciAodmFyIGkgPSB0aGlzLmxhYmVscy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIHZhciBsYWJlbCQxID0gdGhpcyQxLmxhYmVsc1tpXTtcbiAgICBpZiAobGFiZWwkMS5zdGF0ZW1lbnRTdGFydCA9PSBub2RlLnN0YXJ0KSB7XG4gICAgICBsYWJlbCQxLnN0YXRlbWVudFN0YXJ0ID0gdGhpcyQxLnN0YXJ0O1xuICAgICAgbGFiZWwkMS5raW5kID0ga2luZDtcbiAgICB9IGVsc2UgeyBicmVhayB9XG4gIH1cbiAgdGhpcy5sYWJlbHMucHVzaCh7bmFtZTogbWF5YmVOYW1lLCBraW5kOiBraW5kLCBzdGF0ZW1lbnRTdGFydDogdGhpcy5zdGFydH0pO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KHRydWUpO1xuICBpZiAobm9kZS5ib2R5LnR5cGUgPT0gXCJDbGFzc0RlY2xhcmF0aW9uXCIgfHxcbiAgICAgIG5vZGUuYm9keS50eXBlID09IFwiVmFyaWFibGVEZWNsYXJhdGlvblwiICYmIG5vZGUuYm9keS5raW5kICE9IFwidmFyXCIgfHxcbiAgICAgIG5vZGUuYm9keS50eXBlID09IFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiICYmICh0aGlzLnN0cmljdCB8fCBub2RlLmJvZHkuZ2VuZXJhdG9yKSlcbiAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLmJvZHkuc3RhcnQsIFwiSW52YWxpZCBsYWJlbGVkIGRlY2xhcmF0aW9uXCIpOyB9XG4gIHRoaXMubGFiZWxzLnBvcCgpO1xuICBub2RlLmxhYmVsID0gZXhwcjtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkxhYmVsZWRTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgZXhwcikge1xuICBub2RlLmV4cHJlc3Npb24gPSBleHByO1xuICB0aGlzLnNlbWljb2xvbigpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRXhwcmVzc2lvblN0YXRlbWVudFwiKVxufTtcblxuXG5wcCQxLnBhcnNlQmxvY2sgPSBmdW5jdGlvbihjcmVhdGVOZXdMZXhpY2FsU2NvcGUpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gIGlmICggY3JlYXRlTmV3TGV4aWNhbFNjb3BlID09PSB2b2lkIDAgKSBjcmVhdGVOZXdMZXhpY2FsU2NvcGUgPSB0cnVlO1xuXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgbm9kZS5ib2R5ID0gW107XG4gIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNlTCk7XG4gIGlmIChjcmVhdGVOZXdMZXhpY2FsU2NvcGUpIHtcbiAgICB0aGlzLmVudGVyTGV4aWNhbFNjb3BlKCk7XG4gIH1cbiAgd2hpbGUgKCF0aGlzLmVhdCh0eXBlcy5icmFjZVIpKSB7XG4gICAgdmFyIHN0bXQgPSB0aGlzJDEucGFyc2VTdGF0ZW1lbnQodHJ1ZSk7XG4gICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG4gIH1cbiAgaWYgKGNyZWF0ZU5ld0xleGljYWxTY29wZSkge1xuICAgIHRoaXMuZXhpdExleGljYWxTY29wZSgpO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJCbG9ja1N0YXRlbWVudFwiKVxufTtcblxuXG5wcCQxLnBhcnNlRm9yID0gZnVuY3Rpb24obm9kZSwgaW5pdCkge1xuICBub2RlLmluaXQgPSBpbml0O1xuICB0aGlzLmV4cGVjdCh0eXBlcy5zZW1pKTtcbiAgbm9kZS50ZXN0ID0gdGhpcy50eXBlID09PSB0eXBlcy5zZW1pID8gbnVsbCA6IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnNlbWkpO1xuICBub2RlLnVwZGF0ZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMucGFyZW5SID8gbnVsbCA6IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gIHRoaXMuZXhpdExleGljYWxTY29wZSgpO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKTtcbiAgdGhpcy5sYWJlbHMucG9wKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGb3JTdGF0ZW1lbnRcIilcbn07XG5cblxucHAkMS5wYXJzZUZvckluID0gZnVuY3Rpb24obm9kZSwgaW5pdCkge1xuICB2YXIgdHlwZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuX2luID8gXCJGb3JJblN0YXRlbWVudFwiIDogXCJGb3JPZlN0YXRlbWVudFwiO1xuICB0aGlzLm5leHQoKTtcbiAgbm9kZS5sZWZ0ID0gaW5pdDtcbiAgbm9kZS5yaWdodCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gIHRoaXMuZXhpdExleGljYWxTY29wZSgpO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKTtcbiAgdGhpcy5sYWJlbHMucG9wKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdHlwZSlcbn07XG5cblxucHAkMS5wYXJzZVZhciA9IGZ1bmN0aW9uKG5vZGUsIGlzRm9yLCBraW5kKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIG5vZGUuZGVjbGFyYXRpb25zID0gW107XG4gIG5vZGUua2luZCA9IGtpbmQ7XG4gIGZvciAoOzspIHtcbiAgICB2YXIgZGVjbCA9IHRoaXMkMS5zdGFydE5vZGUoKTtcbiAgICB0aGlzJDEucGFyc2VWYXJJZChkZWNsLCBraW5kKTtcbiAgICBpZiAodGhpcyQxLmVhdCh0eXBlcy5lcSkpIHtcbiAgICAgIGRlY2wuaW5pdCA9IHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKGlzRm9yKTtcbiAgICB9IGVsc2UgaWYgKGtpbmQgPT09IFwiY29uc3RcIiAmJiAhKHRoaXMkMS50eXBlID09PSB0eXBlcy5faW4gfHwgKHRoaXMkMS5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcyQxLmlzQ29udGV4dHVhbChcIm9mXCIpKSkpIHtcbiAgICAgIHRoaXMkMS51bmV4cGVjdGVkKCk7XG4gICAgfSBlbHNlIGlmIChkZWNsLmlkLnR5cGUgIT0gXCJJZGVudGlmaWVyXCIgJiYgIShpc0ZvciAmJiAodGhpcyQxLnR5cGUgPT09IHR5cGVzLl9pbiB8fCB0aGlzJDEuaXNDb250ZXh0dWFsKFwib2ZcIikpKSkge1xuICAgICAgdGhpcyQxLnJhaXNlKHRoaXMkMS5sYXN0VG9rRW5kLCBcIkNvbXBsZXggYmluZGluZyBwYXR0ZXJucyByZXF1aXJlIGFuIGluaXRpYWxpemF0aW9uIHZhbHVlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWNsLmluaXQgPSBudWxsO1xuICAgIH1cbiAgICBub2RlLmRlY2xhcmF0aW9ucy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKGRlY2wsIFwiVmFyaWFibGVEZWNsYXJhdG9yXCIpKTtcbiAgICBpZiAoIXRoaXMkMS5lYXQodHlwZXMuY29tbWEpKSB7IGJyZWFrIH1cbiAgfVxuICByZXR1cm4gbm9kZVxufTtcblxucHAkMS5wYXJzZVZhcklkID0gZnVuY3Rpb24oZGVjbCwga2luZCkge1xuICBkZWNsLmlkID0gdGhpcy5wYXJzZUJpbmRpbmdBdG9tKGtpbmQpO1xuICB0aGlzLmNoZWNrTFZhbChkZWNsLmlkLCBraW5kLCBmYWxzZSk7XG59O1xuXG5cbnBwJDEucGFyc2VGdW5jdGlvbiA9IGZ1bmN0aW9uKG5vZGUsIGlzU3RhdGVtZW50LCBhbGxvd0V4cHJlc3Npb25Cb2R5LCBpc0FzeW5jKSB7XG4gIHRoaXMuaW5pdEZ1bmN0aW9uKG5vZGUpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgIWlzQXN5bmMpXG4gICAgeyBub2RlLmdlbmVyYXRvciA9IHRoaXMuZWF0KHR5cGVzLnN0YXIpOyB9XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOClcbiAgICB7IG5vZGUuYXN5bmMgPSAhIWlzQXN5bmM7IH1cblxuICBpZiAoaXNTdGF0ZW1lbnQpIHtcbiAgICBub2RlLmlkID0gaXNTdGF0ZW1lbnQgPT09IFwibnVsbGFibGVJRFwiICYmIHRoaXMudHlwZSAhPSB0eXBlcy5uYW1lID8gbnVsbCA6IHRoaXMucGFyc2VJZGVudCgpO1xuICAgIGlmIChub2RlLmlkKSB7XG4gICAgICB0aGlzLmNoZWNrTFZhbChub2RlLmlkLCBcInZhclwiKTtcbiAgICB9XG4gIH1cblxuICB2YXIgb2xkSW5HZW4gPSB0aGlzLmluR2VuZXJhdG9yLCBvbGRJbkFzeW5jID0gdGhpcy5pbkFzeW5jLFxuICAgICAgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEluRnVuYyA9IHRoaXMuaW5GdW5jdGlvbjtcbiAgdGhpcy5pbkdlbmVyYXRvciA9IG5vZGUuZ2VuZXJhdG9yO1xuICB0aGlzLmluQXN5bmMgPSBub2RlLmFzeW5jO1xuICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgdGhpcy5hd2FpdFBvcyA9IDA7XG4gIHRoaXMuaW5GdW5jdGlvbiA9IHRydWU7XG4gIHRoaXMuZW50ZXJGdW5jdGlvblNjb3BlKCk7XG5cbiAgaWYgKCFpc1N0YXRlbWVudClcbiAgICB7IG5vZGUuaWQgPSB0aGlzLnR5cGUgPT0gdHlwZXMubmFtZSA/IHRoaXMucGFyc2VJZGVudCgpIDogbnVsbDsgfVxuXG4gIHRoaXMucGFyc2VGdW5jdGlvblBhcmFtcyhub2RlKTtcbiAgdGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLCBhbGxvd0V4cHJlc3Npb25Cb2R5KTtcblxuICB0aGlzLmluR2VuZXJhdG9yID0gb2xkSW5HZW47XG4gIHRoaXMuaW5Bc3luYyA9IG9sZEluQXN5bmM7XG4gIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICB0aGlzLmluRnVuY3Rpb24gPSBvbGRJbkZ1bmM7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNTdGF0ZW1lbnQgPyBcIkZ1bmN0aW9uRGVjbGFyYXRpb25cIiA6IFwiRnVuY3Rpb25FeHByZXNzaW9uXCIpXG59O1xuXG5wcCQxLnBhcnNlRnVuY3Rpb25QYXJhbXMgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG4gIG5vZGUucGFyYW1zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR5cGVzLnBhcmVuUiwgZmFsc2UsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KTtcbiAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcbn07XG5cblxucHAkMS5wYXJzZUNsYXNzID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0KCk7XG5cbiAgdGhpcy5wYXJzZUNsYXNzSWQobm9kZSwgaXNTdGF0ZW1lbnQpO1xuICB0aGlzLnBhcnNlQ2xhc3NTdXBlcihub2RlKTtcbiAgdmFyIGNsYXNzQm9keSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHZhciBoYWRDb25zdHJ1Y3RvciA9IGZhbHNlO1xuICBjbGFzc0JvZHkuYm9keSA9IFtdO1xuICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICBpZiAodGhpcyQxLmVhdCh0eXBlcy5zZW1pKSkgeyBjb250aW51ZSB9XG4gICAgdmFyIG1ldGhvZCA9IHRoaXMkMS5zdGFydE5vZGUoKTtcbiAgICB2YXIgaXNHZW5lcmF0b3IgPSB0aGlzJDEuZWF0KHR5cGVzLnN0YXIpO1xuICAgIHZhciBpc0FzeW5jID0gZmFsc2U7XG4gICAgdmFyIGlzTWF5YmVTdGF0aWMgPSB0aGlzJDEudHlwZSA9PT0gdHlwZXMubmFtZSAmJiB0aGlzJDEudmFsdWUgPT09IFwic3RhdGljXCI7XG4gICAgdGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKG1ldGhvZCk7XG4gICAgbWV0aG9kLnN0YXRpYyA9IGlzTWF5YmVTdGF0aWMgJiYgdGhpcyQxLnR5cGUgIT09IHR5cGVzLnBhcmVuTDtcbiAgICBpZiAobWV0aG9kLnN0YXRpYykge1xuICAgICAgaWYgKGlzR2VuZXJhdG9yKSB7IHRoaXMkMS51bmV4cGVjdGVkKCk7IH1cbiAgICAgIGlzR2VuZXJhdG9yID0gdGhpcyQxLmVhdCh0eXBlcy5zdGFyKTtcbiAgICAgIHRoaXMkMS5wYXJzZVByb3BlcnR5TmFtZShtZXRob2QpO1xuICAgIH1cbiAgICBpZiAodGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiAhaXNHZW5lcmF0b3IgJiYgIW1ldGhvZC5jb21wdXRlZCAmJlxuICAgICAgICBtZXRob2Qua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIG1ldGhvZC5rZXkubmFtZSA9PT0gXCJhc3luY1wiICYmIHRoaXMkMS50eXBlICE9PSB0eXBlcy5wYXJlbkwgJiZcbiAgICAgICAgIXRoaXMkMS5jYW5JbnNlcnRTZW1pY29sb24oKSkge1xuICAgICAgaXNBc3luYyA9IHRydWU7XG4gICAgICB0aGlzJDEucGFyc2VQcm9wZXJ0eU5hbWUobWV0aG9kKTtcbiAgICB9XG4gICAgbWV0aG9kLmtpbmQgPSBcIm1ldGhvZFwiO1xuICAgIHZhciBpc0dldFNldCA9IGZhbHNlO1xuICAgIGlmICghbWV0aG9kLmNvbXB1dGVkKSB7XG4gICAgICB2YXIga2V5ID0gbWV0aG9kLmtleTtcbiAgICAgIGlmICghaXNHZW5lcmF0b3IgJiYgIWlzQXN5bmMgJiYga2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIHRoaXMkMS50eXBlICE9PSB0eXBlcy5wYXJlbkwgJiYgKGtleS5uYW1lID09PSBcImdldFwiIHx8IGtleS5uYW1lID09PSBcInNldFwiKSkge1xuICAgICAgICBpc0dldFNldCA9IHRydWU7XG4gICAgICAgIG1ldGhvZC5raW5kID0ga2V5Lm5hbWU7XG4gICAgICAgIGtleSA9IHRoaXMkMS5wYXJzZVByb3BlcnR5TmFtZShtZXRob2QpO1xuICAgICAgfVxuICAgICAgaWYgKCFtZXRob2Quc3RhdGljICYmIChrZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYga2V5Lm5hbWUgPT09IFwiY29uc3RydWN0b3JcIiB8fFxuICAgICAgICAgIGtleS50eXBlID09PSBcIkxpdGVyYWxcIiAmJiBrZXkudmFsdWUgPT09IFwiY29uc3RydWN0b3JcIikpIHtcbiAgICAgICAgaWYgKGhhZENvbnN0cnVjdG9yKSB7IHRoaXMkMS5yYWlzZShrZXkuc3RhcnQsIFwiRHVwbGljYXRlIGNvbnN0cnVjdG9yIGluIHRoZSBzYW1lIGNsYXNzXCIpOyB9XG4gICAgICAgIGlmIChpc0dldFNldCkgeyB0aGlzJDEucmFpc2Uoa2V5LnN0YXJ0LCBcIkNvbnN0cnVjdG9yIGNhbid0IGhhdmUgZ2V0L3NldCBtb2RpZmllclwiKTsgfVxuICAgICAgICBpZiAoaXNHZW5lcmF0b3IpIHsgdGhpcyQxLnJhaXNlKGtleS5zdGFydCwgXCJDb25zdHJ1Y3RvciBjYW4ndCBiZSBhIGdlbmVyYXRvclwiKTsgfVxuICAgICAgICBpZiAoaXNBc3luYykgeyB0aGlzJDEucmFpc2Uoa2V5LnN0YXJ0LCBcIkNvbnN0cnVjdG9yIGNhbid0IGJlIGFuIGFzeW5jIG1ldGhvZFwiKTsgfVxuICAgICAgICBtZXRob2Qua2luZCA9IFwiY29uc3RydWN0b3JcIjtcbiAgICAgICAgaGFkQ29uc3RydWN0b3IgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzJDEucGFyc2VDbGFzc01ldGhvZChjbGFzc0JvZHksIG1ldGhvZCwgaXNHZW5lcmF0b3IsIGlzQXN5bmMpO1xuICAgIGlmIChpc0dldFNldCkge1xuICAgICAgdmFyIHBhcmFtQ291bnQgPSBtZXRob2Qua2luZCA9PT0gXCJnZXRcIiA/IDAgOiAxO1xuICAgICAgaWYgKG1ldGhvZC52YWx1ZS5wYXJhbXMubGVuZ3RoICE9PSBwYXJhbUNvdW50KSB7XG4gICAgICAgIHZhciBzdGFydCA9IG1ldGhvZC52YWx1ZS5zdGFydDtcbiAgICAgICAgaWYgKG1ldGhvZC5raW5kID09PSBcImdldFwiKVxuICAgICAgICAgIHsgdGhpcyQxLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiZ2V0dGVyIHNob3VsZCBoYXZlIG5vIHBhcmFtc1wiKTsgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgeyB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJzZXR0ZXIgc2hvdWxkIGhhdmUgZXhhY3RseSBvbmUgcGFyYW1cIik7IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChtZXRob2Qua2luZCA9PT0gXCJzZXRcIiAmJiBtZXRob2QudmFsdWUucGFyYW1zWzBdLnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIilcbiAgICAgICAgICB7IHRoaXMkMS5yYWlzZVJlY292ZXJhYmxlKG1ldGhvZC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsIFwiU2V0dGVyIGNhbm5vdCB1c2UgcmVzdCBwYXJhbXNcIik7IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbm9kZS5ib2R5ID0gdGhpcy5maW5pc2hOb2RlKGNsYXNzQm9keSwgXCJDbGFzc0JvZHlcIik7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNTdGF0ZW1lbnQgPyBcIkNsYXNzRGVjbGFyYXRpb25cIiA6IFwiQ2xhc3NFeHByZXNzaW9uXCIpXG59O1xuXG5wcCQxLnBhcnNlQ2xhc3NNZXRob2QgPSBmdW5jdGlvbihjbGFzc0JvZHksIG1ldGhvZCwgaXNHZW5lcmF0b3IsIGlzQXN5bmMpIHtcbiAgbWV0aG9kLnZhbHVlID0gdGhpcy5wYXJzZU1ldGhvZChpc0dlbmVyYXRvciwgaXNBc3luYyk7XG4gIGNsYXNzQm9keS5ib2R5LnB1c2godGhpcy5maW5pc2hOb2RlKG1ldGhvZCwgXCJNZXRob2REZWZpbml0aW9uXCIpKTtcbn07XG5cbnBwJDEucGFyc2VDbGFzc0lkID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQpIHtcbiAgbm9kZS5pZCA9IHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSA/IHRoaXMucGFyc2VJZGVudCgpIDogaXNTdGF0ZW1lbnQgPT09IHRydWUgPyB0aGlzLnVuZXhwZWN0ZWQoKSA6IG51bGw7XG59O1xuXG5wcCQxLnBhcnNlQ2xhc3NTdXBlciA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgbm9kZS5zdXBlckNsYXNzID0gdGhpcy5lYXQodHlwZXMuX2V4dGVuZHMpID8gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKCkgOiBudWxsO1xufTtcblxuXG5wcCQxLnBhcnNlRXhwb3J0ID0gZnVuY3Rpb24obm9kZSwgZXhwb3J0cykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLm5leHQoKTtcbiAgaWYgKHRoaXMuZWF0KHR5cGVzLnN0YXIpKSB7XG4gICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKFwiZnJvbVwiKTtcbiAgICBub2RlLnNvdXJjZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nID8gdGhpcy5wYXJzZUV4cHJBdG9tKCkgOiB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnRBbGxEZWNsYXJhdGlvblwiKVxuICB9XG4gIGlmICh0aGlzLmVhdCh0eXBlcy5fZGVmYXVsdCkpIHtcbiAgICB0aGlzLmNoZWNrRXhwb3J0KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB0aGlzLmxhc3RUb2tTdGFydCk7XG4gICAgdmFyIGlzQXN5bmM7XG4gICAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2Z1bmN0aW9uIHx8IChpc0FzeW5jID0gdGhpcy5pc0FzeW5jRnVuY3Rpb24oKSkpIHtcbiAgICAgIHZhciBmTm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIGlmIChpc0FzeW5jKSB7IHRoaXMubmV4dCgpOyB9XG4gICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUZ1bmN0aW9uKGZOb2RlLCBcIm51bGxhYmxlSURcIiwgZmFsc2UsIGlzQXN5bmMpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fY2xhc3MpIHtcbiAgICAgIHZhciBjTm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZUNsYXNzKGNOb2RlLCBcIm51bGxhYmxlSURcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnREZWZhdWx0RGVjbGFyYXRpb25cIilcbiAgfVxuICBpZiAodGhpcy5zaG91bGRQYXJzZUV4cG9ydFN0YXRlbWVudCgpKSB7XG4gICAgbm9kZS5kZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VTdGF0ZW1lbnQodHJ1ZSk7XG4gICAgaWYgKG5vZGUuZGVjbGFyYXRpb24udHlwZSA9PT0gXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpXG4gICAgICB7IHRoaXMuY2hlY2tWYXJpYWJsZUV4cG9ydChleHBvcnRzLCBub2RlLmRlY2xhcmF0aW9uLmRlY2xhcmF0aW9ucyk7IH1cbiAgICBlbHNlXG4gICAgICB7IHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgbm9kZS5kZWNsYXJhdGlvbi5pZC5uYW1lLCBub2RlLmRlY2xhcmF0aW9uLmlkLnN0YXJ0KTsgfVxuICAgIG5vZGUuc3BlY2lmaWVycyA9IFtdO1xuICAgIG5vZGUuc291cmNlID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBub2RlLmRlY2xhcmF0aW9uID0gbnVsbDtcbiAgICBub2RlLnNwZWNpZmllcnMgPSB0aGlzLnBhcnNlRXhwb3J0U3BlY2lmaWVycyhleHBvcnRzKTtcbiAgICBpZiAodGhpcy5lYXRDb250ZXh0dWFsKFwiZnJvbVwiKSkge1xuICAgICAgbm9kZS5zb3VyY2UgPSB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gbm9kZS5zcGVjaWZpZXJzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgc3BlYyA9IGxpc3RbaV07XG5cbiAgICAgICAgdGhpcyQxLmNoZWNrVW5yZXNlcnZlZChzcGVjLmxvY2FsKTtcbiAgICAgIH1cblxuICAgICAgbm9kZS5zb3VyY2UgPSBudWxsO1xuICAgIH1cbiAgICB0aGlzLnNlbWljb2xvbigpO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnROYW1lZERlY2xhcmF0aW9uXCIpXG59O1xuXG5wcCQxLmNoZWNrRXhwb3J0ID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgcG9zKSB7XG4gIGlmICghZXhwb3J0cykgeyByZXR1cm4gfVxuICBpZiAoaGFzKGV4cG9ydHMsIG5hbWUpKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHBvcywgXCJEdXBsaWNhdGUgZXhwb3J0ICdcIiArIG5hbWUgKyBcIidcIik7IH1cbiAgZXhwb3J0c1tuYW1lXSA9IHRydWU7XG59O1xuXG5wcCQxLmNoZWNrUGF0dGVybkV4cG9ydCA9IGZ1bmN0aW9uKGV4cG9ydHMsIHBhdCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgdHlwZSA9IHBhdC50eXBlO1xuICBpZiAodHlwZSA9PSBcIklkZW50aWZpZXJcIilcbiAgICB7IHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgcGF0Lm5hbWUsIHBhdC5zdGFydCk7IH1cbiAgZWxzZSBpZiAodHlwZSA9PSBcIk9iamVjdFBhdHRlcm5cIilcbiAgICB7IGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcGF0LnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgICAge1xuICAgICAgICB2YXIgcHJvcCA9IGxpc3RbaV07XG5cbiAgICAgICAgdGhpcyQxLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBwcm9wLnZhbHVlKTtcbiAgICAgIH0gfVxuICBlbHNlIGlmICh0eXBlID09IFwiQXJyYXlQYXR0ZXJuXCIpXG4gICAgeyBmb3IgKHZhciBpJDEgPSAwLCBsaXN0JDEgPSBwYXQuZWxlbWVudHM7IGkkMSA8IGxpc3QkMS5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICB2YXIgZWx0ID0gbGlzdCQxW2kkMV07XG5cbiAgICAgICAgaWYgKGVsdCkgeyB0aGlzJDEuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIGVsdCk7IH1cbiAgICB9IH1cbiAgZWxzZSBpZiAodHlwZSA9PSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpXG4gICAgeyB0aGlzLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBwYXQubGVmdCk7IH1cbiAgZWxzZSBpZiAodHlwZSA9PSBcIlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uXCIpXG4gICAgeyB0aGlzLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBwYXQuZXhwcmVzc2lvbik7IH1cbn07XG5cbnBwJDEuY2hlY2tWYXJpYWJsZUV4cG9ydCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlY2xzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICghZXhwb3J0cykgeyByZXR1cm4gfVxuICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IGRlY2xzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcbiAgICB7XG4gICAgdmFyIGRlY2wgPSBsaXN0W2ldO1xuXG4gICAgdGhpcyQxLmNoZWNrUGF0dGVybkV4cG9ydChleHBvcnRzLCBkZWNsLmlkKTtcbiAgfVxufTtcblxucHAkMS5zaG91bGRQYXJzZUV4cG9ydFN0YXRlbWVudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlLmtleXdvcmQgPT09IFwidmFyXCIgfHxcbiAgICB0aGlzLnR5cGUua2V5d29yZCA9PT0gXCJjb25zdFwiIHx8XG4gICAgdGhpcy50eXBlLmtleXdvcmQgPT09IFwiY2xhc3NcIiB8fFxuICAgIHRoaXMudHlwZS5rZXl3b3JkID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgICB0aGlzLmlzTGV0KCkgfHxcbiAgICB0aGlzLmlzQXN5bmNGdW5jdGlvbigpXG59O1xuXG5cbnBwJDEucGFyc2VFeHBvcnRTcGVjaWZpZXJzID0gZnVuY3Rpb24oZXhwb3J0cykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgbm9kZXMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICBpZiAoIWZpcnN0KSB7XG4gICAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgIGlmICh0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLmJyYWNlUikpIHsgYnJlYWsgfVxuICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuICAgIHZhciBub2RlID0gdGhpcyQxLnN0YXJ0Tm9kZSgpO1xuICAgIG5vZGUubG9jYWwgPSB0aGlzJDEucGFyc2VJZGVudCh0cnVlKTtcbiAgICBub2RlLmV4cG9ydGVkID0gdGhpcyQxLmVhdENvbnRleHR1YWwoXCJhc1wiKSA/IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpIDogbm9kZS5sb2NhbDtcbiAgICB0aGlzJDEuY2hlY2tFeHBvcnQoZXhwb3J0cywgbm9kZS5leHBvcnRlZC5uYW1lLCBub2RlLmV4cG9ydGVkLnN0YXJ0KTtcbiAgICBub2Rlcy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKG5vZGUsIFwiRXhwb3J0U3BlY2lmaWVyXCIpKTtcbiAgfVxuICByZXR1cm4gbm9kZXNcbn07XG5cblxucHAkMS5wYXJzZUltcG9ydCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZykge1xuICAgIG5vZGUuc3BlY2lmaWVycyA9IGVtcHR5O1xuICAgIG5vZGUuc291cmNlID0gdGhpcy5wYXJzZUV4cHJBdG9tKCk7XG4gIH0gZWxzZSB7XG4gICAgbm9kZS5zcGVjaWZpZXJzID0gdGhpcy5wYXJzZUltcG9ydFNwZWNpZmllcnMoKTtcbiAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJmcm9tXCIpO1xuICAgIG5vZGUuc291cmNlID0gdGhpcy50eXBlID09PSB0eXBlcy5zdHJpbmcgPyB0aGlzLnBhcnNlRXhwckF0b20oKSA6IHRoaXMudW5leHBlY3RlZCgpO1xuICB9XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJbXBvcnREZWNsYXJhdGlvblwiKVxufTtcblxuXG5wcCQxLnBhcnNlSW1wb3J0U3BlY2lmaWVycyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgbm9kZXMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5uYW1lKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIG5vZGUubG9jYWwgPSB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICB0aGlzLmNoZWNrTFZhbChub2RlLmxvY2FsLCBcImxldFwiKTtcbiAgICBub2Rlcy5wdXNoKHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlZmF1bHRTcGVjaWZpZXJcIikpO1xuICAgIGlmICghdGhpcy5lYXQodHlwZXMuY29tbWEpKSB7IHJldHVybiBub2RlcyB9XG4gIH1cbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc3Rhcikge1xuICAgIHZhciBub2RlJDEgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImFzXCIpO1xuICAgIG5vZGUkMS5sb2NhbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgIHRoaXMuY2hlY2tMVmFsKG5vZGUkMS5sb2NhbCwgXCJsZXRcIik7XG4gICAgbm9kZXMucHVzaCh0aGlzLmZpbmlzaE5vZGUobm9kZSQxLCBcIkltcG9ydE5hbWVzcGFjZVNwZWNpZmllclwiKSk7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbiAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcbiAgd2hpbGUgKCF0aGlzLmVhdCh0eXBlcy5icmFjZVIpKSB7XG4gICAgaWYgKCFmaXJzdCkge1xuICAgICAgdGhpcyQxLmV4cGVjdCh0eXBlcy5jb21tYSk7XG4gICAgICBpZiAodGhpcyQxLmFmdGVyVHJhaWxpbmdDb21tYSh0eXBlcy5icmFjZVIpKSB7IGJyZWFrIH1cbiAgICB9IGVsc2UgeyBmaXJzdCA9IGZhbHNlOyB9XG5cbiAgICB2YXIgbm9kZSQyID0gdGhpcyQxLnN0YXJ0Tm9kZSgpO1xuICAgIG5vZGUkMi5pbXBvcnRlZCA9IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpO1xuICAgIGlmICh0aGlzJDEuZWF0Q29udGV4dHVhbChcImFzXCIpKSB7XG4gICAgICBub2RlJDIubG9jYWwgPSB0aGlzJDEucGFyc2VJZGVudCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzJDEuY2hlY2tVbnJlc2VydmVkKG5vZGUkMi5pbXBvcnRlZCk7XG4gICAgICBub2RlJDIubG9jYWwgPSBub2RlJDIuaW1wb3J0ZWQ7XG4gICAgfVxuICAgIHRoaXMkMS5jaGVja0xWYWwobm9kZSQyLmxvY2FsLCBcImxldFwiKTtcbiAgICBub2Rlcy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMiwgXCJJbXBvcnRTcGVjaWZpZXJcIikpO1xuICB9XG4gIHJldHVybiBub2Rlc1xufTtcblxudmFyIHBwJDIgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5cbnBwJDIudG9Bc3NpZ25hYmxlID0gZnVuY3Rpb24obm9kZSwgaXNCaW5kaW5nKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiBub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLnR5cGUpIHtcbiAgICBjYXNlIFwiSWRlbnRpZmllclwiOlxuICAgICAgaWYgKHRoaXMuaW5Bc3luYyAmJiBub2RlLm5hbWUgPT09IFwiYXdhaXRcIilcbiAgICAgICAgeyB0aGlzLnJhaXNlKG5vZGUuc3RhcnQsIFwiQ2FuIG5vdCB1c2UgJ2F3YWl0JyBhcyBpZGVudGlmaWVyIGluc2lkZSBhbiBhc3luYyBmdW5jdGlvblwiKTsgfVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XG4gICAgY2FzZSBcIkFycmF5UGF0dGVyblwiOlxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJPYmplY3RFeHByZXNzaW9uXCI6XG4gICAgICBub2RlLnR5cGUgPSBcIk9iamVjdFBhdHRlcm5cIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gbm9kZS5wcm9wZXJ0aWVzOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgcHJvcCA9IGxpc3RbaV07XG5cbiAgICAgIGlmIChwcm9wLmtpbmQgIT09IFwiaW5pdFwiKSB7IHRoaXMkMS5yYWlzZShwcm9wLmtleS5zdGFydCwgXCJPYmplY3QgcGF0dGVybiBjYW4ndCBjb250YWluIGdldHRlciBvciBzZXR0ZXJcIik7IH1cbiAgICAgICAgdGhpcyQxLnRvQXNzaWduYWJsZShwcm9wLnZhbHVlLCBpc0JpbmRpbmcpO1xuICAgICAgfVxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJBcnJheUV4cHJlc3Npb25cIjpcbiAgICAgIG5vZGUudHlwZSA9IFwiQXJyYXlQYXR0ZXJuXCI7XG4gICAgICB0aGlzLnRvQXNzaWduYWJsZUxpc3Qobm9kZS5lbGVtZW50cywgaXNCaW5kaW5nKTtcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIjpcbiAgICAgIGlmIChub2RlLm9wZXJhdG9yID09PSBcIj1cIikge1xuICAgICAgICBub2RlLnR5cGUgPSBcIkFzc2lnbm1lbnRQYXR0ZXJuXCI7XG4gICAgICAgIGRlbGV0ZSBub2RlLm9wZXJhdG9yO1xuICAgICAgICB0aGlzLnRvQXNzaWduYWJsZShub2RlLmxlZnQsIGlzQmluZGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJhaXNlKG5vZGUubGVmdC5lbmQsIFwiT25seSAnPScgb3BlcmF0b3IgY2FuIGJlIHVzZWQgZm9yIHNwZWNpZnlpbmcgZGVmYXVsdCB2YWx1ZS5cIik7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIjpcbiAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUuZXhwcmVzc2lvbiwgaXNCaW5kaW5nKTtcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiTWVtYmVyRXhwcmVzc2lvblwiOlxuICAgICAgaWYgKCFpc0JpbmRpbmcpIHsgYnJlYWsgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJBc3NpZ25pbmcgdG8gcnZhbHVlXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbm9kZVxufTtcblxuXG5wcCQyLnRvQXNzaWduYWJsZUxpc3QgPSBmdW5jdGlvbihleHByTGlzdCwgaXNCaW5kaW5nKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBlbmQgPSBleHByTGlzdC5sZW5ndGg7XG4gIGlmIChlbmQpIHtcbiAgICB2YXIgbGFzdCA9IGV4cHJMaXN0W2VuZCAtIDFdO1xuICAgIGlmIChsYXN0ICYmIGxhc3QudHlwZSA9PSBcIlJlc3RFbGVtZW50XCIpIHtcbiAgICAgIC0tZW5kO1xuICAgIH0gZWxzZSBpZiAobGFzdCAmJiBsYXN0LnR5cGUgPT0gXCJTcHJlYWRFbGVtZW50XCIpIHtcbiAgICAgIGxhc3QudHlwZSA9IFwiUmVzdEVsZW1lbnRcIjtcbiAgICAgIHZhciBhcmcgPSBsYXN0LmFyZ3VtZW50O1xuICAgICAgdGhpcy50b0Fzc2lnbmFibGUoYXJnLCBpc0JpbmRpbmcpO1xuICAgICAgLS1lbmQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA9PT0gNiAmJiBpc0JpbmRpbmcgJiYgbGFzdCAmJiBsYXN0LnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIiAmJiBsYXN0LmFyZ3VtZW50LnR5cGUgIT09IFwiSWRlbnRpZmllclwiKVxuICAgICAgeyB0aGlzLnVuZXhwZWN0ZWQobGFzdC5hcmd1bWVudC5zdGFydCk7IH1cbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGVuZDsgaSsrKSB7XG4gICAgdmFyIGVsdCA9IGV4cHJMaXN0W2ldO1xuICAgIGlmIChlbHQpIHsgdGhpcyQxLnRvQXNzaWduYWJsZShlbHQsIGlzQmluZGluZyk7IH1cbiAgfVxuICByZXR1cm4gZXhwckxpc3Rcbn07XG5cblxucHAkMi5wYXJzZVNwcmVhZCA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB0aGlzLm5leHQoKTtcbiAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJTcHJlYWRFbGVtZW50XCIpXG59O1xuXG5wcCQyLnBhcnNlUmVzdEJpbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB0aGlzLm5leHQoKTtcblxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID09PSA2ICYmIHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSlcbiAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cbiAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuXG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJSZXN0RWxlbWVudFwiKVxufTtcblxuXG5wcCQyLnBhcnNlQmluZGluZ0F0b20gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYpIHsgcmV0dXJuIHRoaXMucGFyc2VJZGVudCgpIH1cbiAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgY2FzZSB0eXBlcy5uYW1lOlxuICAgIHJldHVybiB0aGlzLnBhcnNlSWRlbnQoKVxuXG4gIGNhc2UgdHlwZXMuYnJhY2tldEw6XG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUuZWxlbWVudHMgPSB0aGlzLnBhcnNlQmluZGluZ0xpc3QodHlwZXMuYnJhY2tldFIsIHRydWUsIHRydWUpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJheVBhdHRlcm5cIilcblxuICBjYXNlIHR5cGVzLmJyYWNlTDpcbiAgICByZXR1cm4gdGhpcy5wYXJzZU9iaih0cnVlKVxuXG4gIGRlZmF1bHQ6XG4gICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH1cbn07XG5cbnBwJDIucGFyc2VCaW5kaW5nTGlzdCA9IGZ1bmN0aW9uKGNsb3NlLCBhbGxvd0VtcHR5LCBhbGxvd1RyYWlsaW5nQ29tbWEpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGVsdHMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuICB3aGlsZSAoIXRoaXMuZWF0KGNsb3NlKSkge1xuICAgIGlmIChmaXJzdCkgeyBmaXJzdCA9IGZhbHNlOyB9XG4gICAgZWxzZSB7IHRoaXMkMS5leHBlY3QodHlwZXMuY29tbWEpOyB9XG4gICAgaWYgKGFsbG93RW1wdHkgJiYgdGhpcyQxLnR5cGUgPT09IHR5cGVzLmNvbW1hKSB7XG4gICAgICBlbHRzLnB1c2gobnVsbCk7XG4gICAgfSBlbHNlIGlmIChhbGxvd1RyYWlsaW5nQ29tbWEgJiYgdGhpcyQxLmFmdGVyVHJhaWxpbmdDb21tYShjbG9zZSkpIHtcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIGlmICh0aGlzJDEudHlwZSA9PT0gdHlwZXMuZWxsaXBzaXMpIHtcbiAgICAgIHZhciByZXN0ID0gdGhpcyQxLnBhcnNlUmVzdEJpbmRpbmcoKTtcbiAgICAgIHRoaXMkMS5wYXJzZUJpbmRpbmdMaXN0SXRlbShyZXN0KTtcbiAgICAgIGVsdHMucHVzaChyZXN0KTtcbiAgICAgIGlmICh0aGlzJDEudHlwZSA9PT0gdHlwZXMuY29tbWEpIHsgdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCwgXCJDb21tYSBpcyBub3QgcGVybWl0dGVkIGFmdGVyIHRoZSByZXN0IGVsZW1lbnRcIik7IH1cbiAgICAgIHRoaXMkMS5leHBlY3QoY2xvc2UpO1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGVsZW0gPSB0aGlzJDEucGFyc2VNYXliZURlZmF1bHQodGhpcyQxLnN0YXJ0LCB0aGlzJDEuc3RhcnRMb2MpO1xuICAgICAgdGhpcyQxLnBhcnNlQmluZGluZ0xpc3RJdGVtKGVsZW0pO1xuICAgICAgZWx0cy5wdXNoKGVsZW0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZWx0c1xufTtcblxucHAkMi5wYXJzZUJpbmRpbmdMaXN0SXRlbSA9IGZ1bmN0aW9uKHBhcmFtKSB7XG4gIHJldHVybiBwYXJhbVxufTtcblxuXG5wcCQyLnBhcnNlTWF5YmVEZWZhdWx0ID0gZnVuY3Rpb24oc3RhcnRQb3MsIHN0YXJ0TG9jLCBsZWZ0KSB7XG4gIGxlZnQgPSBsZWZ0IHx8IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNiB8fCAhdGhpcy5lYXQodHlwZXMuZXEpKSB7IHJldHVybiBsZWZ0IH1cbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gIG5vZGUubGVmdCA9IGxlZnQ7XG4gIG5vZGUucmlnaHQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFzc2lnbm1lbnRQYXR0ZXJuXCIpXG59O1xuXG5cbnBwJDIuY2hlY2tMVmFsID0gZnVuY3Rpb24oZXhwciwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBzd2l0Y2ggKGV4cHIudHlwZSkge1xuICBjYXNlIFwiSWRlbnRpZmllclwiOlxuICAgIGlmICh0aGlzLnN0cmljdCAmJiB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3RCaW5kLnRlc3QoZXhwci5uYW1lKSlcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIChiaW5kaW5nVHlwZSA/IFwiQmluZGluZyBcIiA6IFwiQXNzaWduaW5nIHRvIFwiKSArIGV4cHIubmFtZSArIFwiIGluIHN0cmljdCBtb2RlXCIpOyB9XG4gICAgaWYgKGNoZWNrQ2xhc2hlcykge1xuICAgICAgaWYgKGhhcyhjaGVja0NsYXNoZXMsIGV4cHIubmFtZSkpXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIFwiQXJndW1lbnQgbmFtZSBjbGFzaFwiKTsgfVxuICAgICAgY2hlY2tDbGFzaGVzW2V4cHIubmFtZV0gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoYmluZGluZ1R5cGUgJiYgYmluZGluZ1R5cGUgIT09IFwibm9uZVwiKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGJpbmRpbmdUeXBlID09PSBcInZhclwiICYmICF0aGlzLmNhbkRlY2xhcmVWYXJOYW1lKGV4cHIubmFtZSkgfHxcbiAgICAgICAgYmluZGluZ1R5cGUgIT09IFwidmFyXCIgJiYgIXRoaXMuY2FuRGVjbGFyZUxleGljYWxOYW1lKGV4cHIubmFtZSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXhwci5zdGFydCwgKFwiSWRlbnRpZmllciAnXCIgKyAoZXhwci5uYW1lKSArIFwiJyBoYXMgYWxyZWFkeSBiZWVuIGRlY2xhcmVkXCIpKTtcbiAgICAgIH1cbiAgICAgIGlmIChiaW5kaW5nVHlwZSA9PT0gXCJ2YXJcIikge1xuICAgICAgICB0aGlzLmRlY2xhcmVWYXJOYW1lKGV4cHIubmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlY2xhcmVMZXhpY2FsTmFtZShleHByLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBicmVha1xuXG4gIGNhc2UgXCJNZW1iZXJFeHByZXNzaW9uXCI6XG4gICAgaWYgKGJpbmRpbmdUeXBlKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCAoYmluZGluZ1R5cGUgPyBcIkJpbmRpbmdcIiA6IFwiQXNzaWduaW5nIHRvXCIpICsgXCIgbWVtYmVyIGV4cHJlc3Npb25cIik7IH1cbiAgICBicmVha1xuXG4gIGNhc2UgXCJPYmplY3RQYXR0ZXJuXCI6XG4gICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBleHByLnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgICAge1xuICAgIHZhciBwcm9wID0gbGlzdFtpXTtcblxuICAgIHRoaXMkMS5jaGVja0xWYWwocHJvcC52YWx1ZSwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gIH1cbiAgICBicmVha1xuXG4gIGNhc2UgXCJBcnJheVBhdHRlcm5cIjpcbiAgICBmb3IgKHZhciBpJDEgPSAwLCBsaXN0JDEgPSBleHByLmVsZW1lbnRzOyBpJDEgPCBsaXN0JDEubGVuZ3RoOyBpJDEgKz0gMSkge1xuICAgICAgdmFyIGVsZW0gPSBsaXN0JDFbaSQxXTtcblxuICAgIGlmIChlbGVtKSB7IHRoaXMkMS5jaGVja0xWYWwoZWxlbSwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7IH1cbiAgICB9XG4gICAgYnJlYWtcblxuICBjYXNlIFwiQXNzaWdubWVudFBhdHRlcm5cIjpcbiAgICB0aGlzLmNoZWNrTFZhbChleHByLmxlZnQsIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpO1xuICAgIGJyZWFrXG5cbiAgY2FzZSBcIlJlc3RFbGVtZW50XCI6XG4gICAgdGhpcy5jaGVja0xWYWwoZXhwci5hcmd1bWVudCwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gICAgYnJlYWtcblxuICBjYXNlIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIjpcbiAgICB0aGlzLmNoZWNrTFZhbChleHByLmV4cHJlc3Npb24sIGJpbmRpbmdUeXBlLCBjaGVja0NsYXNoZXMpO1xuICAgIGJyZWFrXG5cbiAgZGVmYXVsdDpcbiAgICB0aGlzLnJhaXNlKGV4cHIuc3RhcnQsIChiaW5kaW5nVHlwZSA/IFwiQmluZGluZ1wiIDogXCJBc3NpZ25pbmcgdG9cIikgKyBcIiBydmFsdWVcIik7XG4gIH1cbn07XG5cblxudmFyIHBwJDMgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5cbnBwJDMuY2hlY2tQcm9wQ2xhc2ggPSBmdW5jdGlvbihwcm9wLCBwcm9wSGFzaCkge1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgKHByb3AuY29tcHV0ZWQgfHwgcHJvcC5tZXRob2QgfHwgcHJvcC5zaG9ydGhhbmQpKVxuICAgIHsgcmV0dXJuIH1cbiAgdmFyIGtleSA9IHByb3Aua2V5O1xuICB2YXIgbmFtZTtcbiAgc3dpdGNoIChrZXkudHlwZSkge1xuICBjYXNlIFwiSWRlbnRpZmllclwiOiBuYW1lID0ga2V5Lm5hbWU7IGJyZWFrXG4gIGNhc2UgXCJMaXRlcmFsXCI6IG5hbWUgPSBTdHJpbmcoa2V5LnZhbHVlKTsgYnJlYWtcbiAgZGVmYXVsdDogcmV0dXJuXG4gIH1cbiAgdmFyIGtpbmQgPSBwcm9wLmtpbmQ7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIGlmIChuYW1lID09PSBcIl9fcHJvdG9fX1wiICYmIGtpbmQgPT09IFwiaW5pdFwiKSB7XG4gICAgICBpZiAocHJvcEhhc2gucHJvdG8pIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGtleS5zdGFydCwgXCJSZWRlZmluaXRpb24gb2YgX19wcm90b19fIHByb3BlcnR5XCIpOyB9XG4gICAgICBwcm9wSGFzaC5wcm90byA9IHRydWU7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIG5hbWUgPSBcIiRcIiArIG5hbWU7XG4gIHZhciBvdGhlciA9IHByb3BIYXNoW25hbWVdO1xuICBpZiAob3RoZXIpIHtcbiAgICB2YXIgcmVkZWZpbml0aW9uO1xuICAgIGlmIChraW5kID09PSBcImluaXRcIikge1xuICAgICAgcmVkZWZpbml0aW9uID0gdGhpcy5zdHJpY3QgJiYgb3RoZXIuaW5pdCB8fCBvdGhlci5nZXQgfHwgb3RoZXIuc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZWRlZmluaXRpb24gPSBvdGhlci5pbml0IHx8IG90aGVyW2tpbmRdO1xuICAgIH1cbiAgICBpZiAocmVkZWZpbml0aW9uKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoa2V5LnN0YXJ0LCBcIlJlZGVmaW5pdGlvbiBvZiBwcm9wZXJ0eVwiKTsgfVxuICB9IGVsc2Uge1xuICAgIG90aGVyID0gcHJvcEhhc2hbbmFtZV0gPSB7XG4gICAgICBpbml0OiBmYWxzZSxcbiAgICAgIGdldDogZmFsc2UsXG4gICAgICBzZXQ6IGZhbHNlXG4gICAgfTtcbiAgfVxuICBvdGhlcltraW5kXSA9IHRydWU7XG59O1xuXG5cblxuXG5wcCQzLnBhcnNlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICB2YXIgZXhwciA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuY29tbWEpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBub2RlLmV4cHJlc3Npb25zID0gW2V4cHJdO1xuICAgIHdoaWxlICh0aGlzLmVhdCh0eXBlcy5jb21tYSkpIHsgbm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpKTsgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJTZXF1ZW5jZUV4cHJlc3Npb25cIilcbiAgfVxuICByZXR1cm4gZXhwclxufTtcblxuXG5wcCQzLnBhcnNlTWF5YmVBc3NpZ24gPSBmdW5jdGlvbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBhZnRlckxlZnRQYXJzZSkge1xuICBpZiAodGhpcy5pbkdlbmVyYXRvciAmJiB0aGlzLmlzQ29udGV4dHVhbChcInlpZWxkXCIpKSB7IHJldHVybiB0aGlzLnBhcnNlWWllbGQoKSB9XG5cbiAgdmFyIG93bkRlc3RydWN0dXJpbmdFcnJvcnMgPSBmYWxzZSwgb2xkUGFyZW5Bc3NpZ24gPSAtMSwgb2xkVHJhaWxpbmdDb21tYSA9IC0xO1xuICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgIG9sZFBhcmVuQXNzaWduID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduO1xuICAgIG9sZFRyYWlsaW5nQ29tbWEgPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWE7XG4gICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gLTE7XG4gIH0gZWxzZSB7XG4gICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzO1xuICAgIG93bkRlc3RydWN0dXJpbmdFcnJvcnMgPSB0cnVlO1xuICB9XG5cbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICBpZiAodGhpcy50eXBlID09IHR5cGVzLnBhcmVuTCB8fCB0aGlzLnR5cGUgPT0gdHlwZXMubmFtZSlcbiAgICB7IHRoaXMucG90ZW50aWFsQXJyb3dBdCA9IHRoaXMuc3RhcnQ7IH1cbiAgdmFyIGxlZnQgPSB0aGlzLnBhcnNlTWF5YmVDb25kaXRpb25hbChub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgaWYgKGFmdGVyTGVmdFBhcnNlKSB7IGxlZnQgPSBhZnRlckxlZnRQYXJzZS5jYWxsKHRoaXMsIGxlZnQsIHN0YXJ0UG9zLCBzdGFydExvYyk7IH1cbiAgaWYgKHRoaXMudHlwZS5pc0Fzc2lnbikge1xuICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuICAgIGlmICghb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycykgeyBEZXN0cnVjdHVyaW5nRXJyb3JzLmNhbGwocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7IH1cbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBub2RlLm9wZXJhdG9yID0gdGhpcy52YWx1ZTtcbiAgICBub2RlLmxlZnQgPSB0aGlzLnR5cGUgPT09IHR5cGVzLmVxID8gdGhpcy50b0Fzc2lnbmFibGUobGVmdCkgOiBsZWZ0O1xuICAgIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduID0gLTE7XG4gICAgdGhpcy5jaGVja0xWYWwobGVmdCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS5yaWdodCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXNzaWdubWVudEV4cHJlc3Npb25cIilcbiAgfSBlbHNlIHtcbiAgICBpZiAob3duRGVzdHJ1Y3R1cmluZ0Vycm9ycykgeyB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTsgfVxuICB9XG4gIGlmIChvbGRQYXJlbkFzc2lnbiA+IC0xKSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA9IG9sZFBhcmVuQXNzaWduOyB9XG4gIGlmIChvbGRUcmFpbGluZ0NvbW1hID4gLTEpIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gb2xkVHJhaWxpbmdDb21tYTsgfVxuICByZXR1cm4gbGVmdFxufTtcblxuXG5wcCQzLnBhcnNlTWF5YmVDb25kaXRpb25hbCA9IGZ1bmN0aW9uKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICB2YXIgZXhwciA9IHRoaXMucGFyc2VFeHByT3BzKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpIHsgcmV0dXJuIGV4cHIgfVxuICBpZiAodGhpcy5lYXQodHlwZXMucXVlc3Rpb24pKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgbm9kZS50ZXN0ID0gZXhwcjtcbiAgICBub2RlLmNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5jb2xvbik7XG4gICAgbm9kZS5hbHRlcm5hdGUgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24obm9Jbik7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkNvbmRpdGlvbmFsRXhwcmVzc2lvblwiKVxuICB9XG4gIHJldHVybiBleHByXG59O1xuXG5cbnBwJDMucGFyc2VFeHByT3BzID0gZnVuY3Rpb24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIHZhciBleHByID0gdGhpcy5wYXJzZU1heWJlVW5hcnkocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgZmFsc2UpO1xuICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpIHsgcmV0dXJuIGV4cHIgfVxuICByZXR1cm4gZXhwci5zdGFydCA9PSBzdGFydFBvcyAmJiBleHByLnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiA/IGV4cHIgOiB0aGlzLnBhcnNlRXhwck9wKGV4cHIsIHN0YXJ0UG9zLCBzdGFydExvYywgLTEsIG5vSW4pXG59O1xuXG5cbnBwJDMucGFyc2VFeHByT3AgPSBmdW5jdGlvbihsZWZ0LCBsZWZ0U3RhcnRQb3MsIGxlZnRTdGFydExvYywgbWluUHJlYywgbm9Jbikge1xuICB2YXIgcHJlYyA9IHRoaXMudHlwZS5iaW5vcDtcbiAgaWYgKHByZWMgIT0gbnVsbCAmJiAoIW5vSW4gfHwgdGhpcy50eXBlICE9PSB0eXBlcy5faW4pKSB7XG4gICAgaWYgKHByZWMgPiBtaW5QcmVjKSB7XG4gICAgICB2YXIgbG9naWNhbCA9IHRoaXMudHlwZSA9PT0gdHlwZXMubG9naWNhbE9SIHx8IHRoaXMudHlwZSA9PT0gdHlwZXMubG9naWNhbEFORDtcbiAgICAgIHZhciBvcCA9IHRoaXMudmFsdWU7XG4gICAgICB0aGlzLm5leHQoKTtcbiAgICAgIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICAgIHZhciByaWdodCA9IHRoaXMucGFyc2VFeHByT3AodGhpcy5wYXJzZU1heWJlVW5hcnkobnVsbCwgZmFsc2UpLCBzdGFydFBvcywgc3RhcnRMb2MsIHByZWMsIG5vSW4pO1xuICAgICAgdmFyIG5vZGUgPSB0aGlzLmJ1aWxkQmluYXJ5KGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBsZWZ0LCByaWdodCwgb3AsIGxvZ2ljYWwpO1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByT3Aobm9kZSwgbGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIG1pblByZWMsIG5vSW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBsZWZ0XG59O1xuXG5wcCQzLmJ1aWxkQmluYXJ5ID0gZnVuY3Rpb24oc3RhcnRQb3MsIHN0YXJ0TG9jLCBsZWZ0LCByaWdodCwgb3AsIGxvZ2ljYWwpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gIG5vZGUubGVmdCA9IGxlZnQ7XG4gIG5vZGUub3BlcmF0b3IgPSBvcDtcbiAgbm9kZS5yaWdodCA9IHJpZ2h0O1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGxvZ2ljYWwgPyBcIkxvZ2ljYWxFeHByZXNzaW9uXCIgOiBcIkJpbmFyeUV4cHJlc3Npb25cIilcbn07XG5cblxucHAkMy5wYXJzZU1heWJlVW5hcnkgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBzYXdVbmFyeSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIGV4cHI7XG4gIGlmICh0aGlzLmluQXN5bmMgJiYgdGhpcy5pc0NvbnRleHR1YWwoXCJhd2FpdFwiKSkge1xuICAgIGV4cHIgPSB0aGlzLnBhcnNlQXdhaXQocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgc2F3VW5hcnkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMudHlwZS5wcmVmaXgpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIHVwZGF0ZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuaW5jRGVjO1xuICAgIG5vZGUub3BlcmF0b3IgPSB0aGlzLnZhbHVlO1xuICAgIG5vZGUucHJlZml4ID0gdHJ1ZTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlVW5hcnkobnVsbCwgdHJ1ZSk7XG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7XG4gICAgaWYgKHVwZGF0ZSkgeyB0aGlzLmNoZWNrTFZhbChub2RlLmFyZ3VtZW50KTsgfVxuICAgIGVsc2UgaWYgKHRoaXMuc3RyaWN0ICYmIG5vZGUub3BlcmF0b3IgPT09IFwiZGVsZXRlXCIgJiZcbiAgICAgICAgICAgICBub2RlLmFyZ3VtZW50LnR5cGUgPT09IFwiSWRlbnRpZmllclwiKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJEZWxldGluZyBsb2NhbCB2YXJpYWJsZSBpbiBzdHJpY3QgbW9kZVwiKTsgfVxuICAgIGVsc2UgeyBzYXdVbmFyeSA9IHRydWU7IH1cbiAgICBleHByID0gdGhpcy5maW5pc2hOb2RlKG5vZGUsIHVwZGF0ZSA/IFwiVXBkYXRlRXhwcmVzc2lvblwiIDogXCJVbmFyeUV4cHJlc3Npb25cIik7XG4gIH0gZWxzZSB7XG4gICAgZXhwciA9IHRoaXMucGFyc2VFeHByU3Vic2NyaXB0cyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICBpZiAodGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpIHsgcmV0dXJuIGV4cHIgfVxuICAgIHdoaWxlICh0aGlzLnR5cGUucG9zdGZpeCAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSkge1xuICAgICAgdmFyIG5vZGUkMSA9IHRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZSQxLm9wZXJhdG9yID0gdGhpcyQxLnZhbHVlO1xuICAgICAgbm9kZSQxLnByZWZpeCA9IGZhbHNlO1xuICAgICAgbm9kZSQxLmFyZ3VtZW50ID0gZXhwcjtcbiAgICAgIHRoaXMkMS5jaGVja0xWYWwoZXhwcik7XG4gICAgICB0aGlzJDEubmV4dCgpO1xuICAgICAgZXhwciA9IHRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMSwgXCJVcGRhdGVFeHByZXNzaW9uXCIpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghc2F3VW5hcnkgJiYgdGhpcy5lYXQodHlwZXMuc3RhcnN0YXIpKVxuICAgIHsgcmV0dXJuIHRoaXMuYnVpbGRCaW5hcnkoc3RhcnRQb3MsIHN0YXJ0TG9jLCBleHByLCB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCBmYWxzZSksIFwiKipcIiwgZmFsc2UpIH1cbiAgZWxzZVxuICAgIHsgcmV0dXJuIGV4cHIgfVxufTtcblxuXG5wcCQzLnBhcnNlRXhwclN1YnNjcmlwdHMgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlRXhwckF0b20ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gIHZhciBza2lwQXJyb3dTdWJzY3JpcHRzID0gZXhwci50eXBlID09PSBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIgJiYgdGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tTdGFydCwgdGhpcy5sYXN0VG9rRW5kKSAhPT0gXCIpXCI7XG4gIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB8fCBza2lwQXJyb3dTdWJzY3JpcHRzKSB7IHJldHVybiBleHByIH1cbiAgdmFyIHJlc3VsdCA9IHRoaXMucGFyc2VTdWJzY3JpcHRzKGV4cHIsIHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzICYmIHJlc3VsdC50eXBlID09PSBcIk1lbWJlckV4cHJlc3Npb25cIikge1xuICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPj0gcmVzdWx0LnN0YXJ0KSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA9IC0xOyB9XG4gICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQgPj0gcmVzdWx0LnN0YXJ0KSB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQgPSAtMTsgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn07XG5cbnBwJDMucGFyc2VTdWJzY3JpcHRzID0gZnVuY3Rpb24oYmFzZSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCBub0NhbGxzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBtYXliZUFzeW5jQXJyb3cgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiBiYXNlLnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIGJhc2UubmFtZSA9PT0gXCJhc3luY1wiICYmXG4gICAgICB0aGlzLmxhc3RUb2tFbmQgPT0gYmFzZS5lbmQgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCk7XG4gIGZvciAodmFyIGNvbXB1dGVkID0gKHZvaWQgMCk7Oykge1xuICAgIGlmICgoY29tcHV0ZWQgPSB0aGlzJDEuZWF0KHR5cGVzLmJyYWNrZXRMKSkgfHwgdGhpcyQxLmVhdCh0eXBlcy5kb3QpKSB7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZS5vYmplY3QgPSBiYXNlO1xuICAgICAgbm9kZS5wcm9wZXJ0eSA9IGNvbXB1dGVkID8gdGhpcyQxLnBhcnNlRXhwcmVzc2lvbigpIDogdGhpcyQxLnBhcnNlSWRlbnQodHJ1ZSk7XG4gICAgICBub2RlLmNvbXB1dGVkID0gISFjb21wdXRlZDtcbiAgICAgIGlmIChjb21wdXRlZCkgeyB0aGlzJDEuZXhwZWN0KHR5cGVzLmJyYWNrZXRSKTsgfVxuICAgICAgYmFzZSA9IHRoaXMkMS5maW5pc2hOb2RlKG5vZGUsIFwiTWVtYmVyRXhwcmVzc2lvblwiKTtcbiAgICB9IGVsc2UgaWYgKCFub0NhbGxzICYmIHRoaXMkMS5lYXQodHlwZXMucGFyZW5MKSkge1xuICAgICAgdmFyIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPSBuZXcgRGVzdHJ1Y3R1cmluZ0Vycm9ycywgb2xkWWllbGRQb3MgPSB0aGlzJDEueWllbGRQb3MsIG9sZEF3YWl0UG9zID0gdGhpcyQxLmF3YWl0UG9zO1xuICAgICAgdGhpcyQxLnlpZWxkUG9zID0gMDtcbiAgICAgIHRoaXMkMS5hd2FpdFBvcyA9IDA7XG4gICAgICB2YXIgZXhwckxpc3QgPSB0aGlzJDEucGFyc2VFeHByTGlzdCh0eXBlcy5wYXJlblIsIHRoaXMkMS5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgsIGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgIGlmIChtYXliZUFzeW5jQXJyb3cgJiYgIXRoaXMkMS5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzJDEuZWF0KHR5cGVzLmFycm93KSkge1xuICAgICAgICB0aGlzJDEuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcbiAgICAgICAgdGhpcyQxLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuICAgICAgICB0aGlzJDEueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgICAgICAgdGhpcyQxLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gICAgICAgIHJldHVybiB0aGlzJDEucGFyc2VBcnJvd0V4cHJlc3Npb24odGhpcyQxLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyksIGV4cHJMaXN0LCB0cnVlKVxuICAgICAgfVxuICAgICAgdGhpcyQxLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgICAgIHRoaXMkMS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zIHx8IHRoaXMkMS55aWVsZFBvcztcbiAgICAgIHRoaXMkMS5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zIHx8IHRoaXMkMS5hd2FpdFBvcztcbiAgICAgIHZhciBub2RlJDEgPSB0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIG5vZGUkMS5jYWxsZWUgPSBiYXNlO1xuICAgICAgbm9kZSQxLmFyZ3VtZW50cyA9IGV4cHJMaXN0O1xuICAgICAgYmFzZSA9IHRoaXMkMS5maW5pc2hOb2RlKG5vZGUkMSwgXCJDYWxsRXhwcmVzc2lvblwiKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5iYWNrUXVvdGUpIHtcbiAgICAgIHZhciBub2RlJDIgPSB0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIG5vZGUkMi50YWcgPSBiYXNlO1xuICAgICAgbm9kZSQyLnF1YXNpID0gdGhpcyQxLnBhcnNlVGVtcGxhdGUoe2lzVGFnZ2VkOiB0cnVlfSk7XG4gICAgICBiYXNlID0gdGhpcyQxLmZpbmlzaE5vZGUobm9kZSQyLCBcIlRhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvblwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJhc2VcbiAgICB9XG4gIH1cbn07XG5cblxucHAkMy5wYXJzZUV4cHJBdG9tID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgbm9kZSwgY2FuQmVBcnJvdyA9IHRoaXMucG90ZW50aWFsQXJyb3dBdCA9PSB0aGlzLnN0YXJ0O1xuICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICBjYXNlIHR5cGVzLl9zdXBlcjpcbiAgICBpZiAoIXRoaXMuaW5GdW5jdGlvbilcbiAgICAgIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIidzdXBlcicgb3V0c2lkZSBvZiBmdW5jdGlvbiBvciBjbGFzc1wiKTsgfVxuXG4gIGNhc2UgdHlwZXMuX3RoaXM6XG4gICAgdmFyIHR5cGUgPSB0aGlzLnR5cGUgPT09IHR5cGVzLl90aGlzID8gXCJUaGlzRXhwcmVzc2lvblwiIDogXCJTdXBlclwiO1xuICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdHlwZSlcblxuICBjYXNlIHR5cGVzLm5hbWU6XG4gICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIHZhciBpZCA9IHRoaXMucGFyc2VJZGVudCh0aGlzLnR5cGUgIT09IHR5cGVzLm5hbWUpO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiBpZC5uYW1lID09PSBcImFzeW5jXCIgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgJiYgdGhpcy5lYXQodHlwZXMuX2Z1bmN0aW9uKSlcbiAgICAgIHsgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbih0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyksIGZhbHNlLCBmYWxzZSwgdHJ1ZSkgfVxuICAgIGlmIChjYW5CZUFycm93ICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgICBpZiAodGhpcy5lYXQodHlwZXMuYXJyb3cpKVxuICAgICAgICB7IHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgW2lkXSwgZmFsc2UpIH1cbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiBpZC5uYW1lID09PSBcImFzeW5jXCIgJiYgdGhpcy50eXBlID09PSB0eXBlcy5uYW1lKSB7XG4gICAgICAgIGlkID0gdGhpcy5wYXJzZUlkZW50KCk7XG4gICAgICAgIGlmICh0aGlzLmNhbkluc2VydFNlbWljb2xvbigpIHx8ICF0aGlzLmVhdCh0eXBlcy5hcnJvdykpXG4gICAgICAgICAgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUFycm93RXhwcmVzc2lvbih0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyksIFtpZF0sIHRydWUpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZFxuXG4gIGNhc2UgdHlwZXMucmVnZXhwOlxuICAgIHZhciB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgbm9kZSA9IHRoaXMucGFyc2VMaXRlcmFsKHZhbHVlLnZhbHVlKTtcbiAgICBub2RlLnJlZ2V4ID0ge3BhdHRlcm46IHZhbHVlLnBhdHRlcm4sIGZsYWdzOiB2YWx1ZS5mbGFnc307XG4gICAgcmV0dXJuIG5vZGVcblxuICBjYXNlIHR5cGVzLm51bTogY2FzZSB0eXBlcy5zdHJpbmc6XG4gICAgcmV0dXJuIHRoaXMucGFyc2VMaXRlcmFsKHRoaXMudmFsdWUpXG5cbiAgY2FzZSB0eXBlcy5fbnVsbDogY2FzZSB0eXBlcy5fdHJ1ZTogY2FzZSB0eXBlcy5fZmFsc2U6XG4gICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgbm9kZS52YWx1ZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuX251bGwgPyBudWxsIDogdGhpcy50eXBlID09PSB0eXBlcy5fdHJ1ZTtcbiAgICBub2RlLnJhdyA9IHRoaXMudHlwZS5rZXl3b3JkO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJMaXRlcmFsXCIpXG5cbiAgY2FzZSB0eXBlcy5wYXJlbkw6XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5zdGFydCwgZXhwciA9IHRoaXMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbihjYW5CZUFycm93KTtcbiAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA8IDAgJiYgIXRoaXMuaXNTaW1wbGVBc3NpZ25UYXJnZXQoZXhwcikpXG4gICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gc3RhcnQ7IH1cbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kIDwgMClcbiAgICAgICAgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRCaW5kID0gc3RhcnQ7IH1cbiAgICB9XG4gICAgcmV0dXJuIGV4cHJcblxuICBjYXNlIHR5cGVzLmJyYWNrZXRMOlxuICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUuZWxlbWVudHMgPSB0aGlzLnBhcnNlRXhwckxpc3QodHlwZXMuYnJhY2tldFIsIHRydWUsIHRydWUsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBcnJheUV4cHJlc3Npb25cIilcblxuICBjYXNlIHR5cGVzLmJyYWNlTDpcbiAgICByZXR1cm4gdGhpcy5wYXJzZU9iaihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycylcblxuICBjYXNlIHR5cGVzLl9mdW5jdGlvbjpcbiAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKG5vZGUsIGZhbHNlKVxuXG4gIGNhc2UgdHlwZXMuX2NsYXNzOlxuICAgIHJldHVybiB0aGlzLnBhcnNlQ2xhc3ModGhpcy5zdGFydE5vZGUoKSwgZmFsc2UpXG5cbiAgY2FzZSB0eXBlcy5fbmV3OlxuICAgIHJldHVybiB0aGlzLnBhcnNlTmV3KClcblxuICBjYXNlIHR5cGVzLmJhY2tRdW90ZTpcbiAgICByZXR1cm4gdGhpcy5wYXJzZVRlbXBsYXRlKClcblxuICBkZWZhdWx0OlxuICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICB9XG59O1xuXG5wcCQzLnBhcnNlTGl0ZXJhbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgbm9kZS52YWx1ZSA9IHZhbHVlO1xuICBub2RlLnJhdyA9IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5zdGFydCwgdGhpcy5lbmQpO1xuICB0aGlzLm5leHQoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkxpdGVyYWxcIilcbn07XG5cbnBwJDMucGFyc2VQYXJlbkV4cHJlc3Npb24gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5MKTtcbiAgdmFyIHZhbCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gIHJldHVybiB2YWxcbn07XG5cbnBwJDMucGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKGNhbkJlQXJyb3cpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jLCB2YWwsIGFsbG93VHJhaWxpbmdDb21tYSA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4O1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICB0aGlzLm5leHQoKTtcblxuICAgIHZhciBpbm5lclN0YXJ0UG9zID0gdGhpcy5zdGFydCwgaW5uZXJTdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gICAgdmFyIGV4cHJMaXN0ID0gW10sIGZpcnN0ID0gdHJ1ZSwgbGFzdElzQ29tbWEgPSBmYWxzZTtcbiAgICB2YXIgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzLCBvbGRZaWVsZFBvcyA9IHRoaXMueWllbGRQb3MsIG9sZEF3YWl0UG9zID0gdGhpcy5hd2FpdFBvcywgc3ByZWFkU3RhcnQsIGlubmVyUGFyZW5TdGFydDtcbiAgICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgICB3aGlsZSAodGhpcy50eXBlICE9PSB0eXBlcy5wYXJlblIpIHtcbiAgICAgIGZpcnN0ID8gZmlyc3QgPSBmYWxzZSA6IHRoaXMkMS5leHBlY3QodHlwZXMuY29tbWEpO1xuICAgICAgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiB0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLnBhcmVuUiwgdHJ1ZSkpIHtcbiAgICAgICAgbGFzdElzQ29tbWEgPSB0cnVlO1xuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIGlmICh0aGlzJDEudHlwZSA9PT0gdHlwZXMuZWxsaXBzaXMpIHtcbiAgICAgICAgc3ByZWFkU3RhcnQgPSB0aGlzJDEuc3RhcnQ7XG4gICAgICAgIGV4cHJMaXN0LnB1c2godGhpcyQxLnBhcnNlUGFyZW5JdGVtKHRoaXMkMS5wYXJzZVJlc3RCaW5kaW5nKCkpKTtcbiAgICAgICAgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5jb21tYSkgeyB0aGlzJDEucmFpc2UodGhpcyQxLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuICAgICAgICBicmVha1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5wYXJlbkwgJiYgIWlubmVyUGFyZW5TdGFydCkge1xuICAgICAgICAgIGlubmVyUGFyZW5TdGFydCA9IHRoaXMkMS5zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBleHByTGlzdC5wdXNoKHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0aGlzJDEucGFyc2VQYXJlbkl0ZW0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGlubmVyRW5kUG9zID0gdGhpcy5zdGFydCwgaW5uZXJFbmRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG5cbiAgICBpZiAoY2FuQmVBcnJvdyAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzLmVhdCh0eXBlcy5hcnJvdykpIHtcbiAgICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGZhbHNlKTtcbiAgICAgIHRoaXMuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zKCk7XG4gICAgICBpZiAoaW5uZXJQYXJlblN0YXJ0KSB7IHRoaXMudW5leHBlY3RlZChpbm5lclBhcmVuU3RhcnQpOyB9XG4gICAgICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG4gICAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVBhcmVuQXJyb3dMaXN0KHN0YXJ0UG9zLCBzdGFydExvYywgZXhwckxpc3QpXG4gICAgfVxuXG4gICAgaWYgKCFleHByTGlzdC5sZW5ndGggfHwgbGFzdElzQ29tbWEpIHsgdGhpcy51bmV4cGVjdGVkKHRoaXMubGFzdFRva1N0YXJ0KTsgfVxuICAgIGlmIChzcHJlYWRTdGFydCkgeyB0aGlzLnVuZXhwZWN0ZWQoc3ByZWFkU3RhcnQpOyB9XG4gICAgdGhpcy5jaGVja0V4cHJlc3Npb25FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7XG4gICAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zIHx8IHRoaXMueWllbGRQb3M7XG4gICAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zIHx8IHRoaXMuYXdhaXRQb3M7XG5cbiAgICBpZiAoZXhwckxpc3QubGVuZ3RoID4gMSkge1xuICAgICAgdmFsID0gdGhpcy5zdGFydE5vZGVBdChpbm5lclN0YXJ0UG9zLCBpbm5lclN0YXJ0TG9jKTtcbiAgICAgIHZhbC5leHByZXNzaW9ucyA9IGV4cHJMaXN0O1xuICAgICAgdGhpcy5maW5pc2hOb2RlQXQodmFsLCBcIlNlcXVlbmNlRXhwcmVzc2lvblwiLCBpbm5lckVuZFBvcywgaW5uZXJFbmRMb2MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWwgPSBleHByTGlzdFswXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFsID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICB9XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5wcmVzZXJ2ZVBhcmVucykge1xuICAgIHZhciBwYXIgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgcGFyLmV4cHJlc3Npb24gPSB2YWw7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShwYXIsIFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdmFsXG4gIH1cbn07XG5cbnBwJDMucGFyc2VQYXJlbkl0ZW0gPSBmdW5jdGlvbihpdGVtKSB7XG4gIHJldHVybiBpdGVtXG59O1xuXG5wcCQzLnBhcnNlUGFyZW5BcnJvd0xpc3QgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGV4cHJMaXN0KSB7XG4gIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZXhwckxpc3QpXG59O1xuXG5cbnZhciBlbXB0eSQxID0gW107XG5cbnBwJDMucGFyc2VOZXcgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB2YXIgbWV0YSA9IHRoaXMucGFyc2VJZGVudCh0cnVlKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIHRoaXMuZWF0KHR5cGVzLmRvdCkpIHtcbiAgICBub2RlLm1ldGEgPSBtZXRhO1xuICAgIG5vZGUucHJvcGVydHkgPSB0aGlzLnBhcnNlSWRlbnQodHJ1ZSk7XG4gICAgaWYgKG5vZGUucHJvcGVydHkubmFtZSAhPT0gXCJ0YXJnZXRcIilcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUucHJvcGVydHkuc3RhcnQsIFwiVGhlIG9ubHkgdmFsaWQgbWV0YSBwcm9wZXJ0eSBmb3IgbmV3IGlzIG5ldy50YXJnZXRcIik7IH1cbiAgICBpZiAoIXRoaXMuaW5GdW5jdGlvbilcbiAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwibmV3LnRhcmdldCBjYW4gb25seSBiZSB1c2VkIGluIGZ1bmN0aW9uc1wiKTsgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJNZXRhUHJvcGVydHlcIilcbiAgfVxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIG5vZGUuY2FsbGVlID0gdGhpcy5wYXJzZVN1YnNjcmlwdHModGhpcy5wYXJzZUV4cHJBdG9tKCksIHN0YXJ0UG9zLCBzdGFydExvYywgdHJ1ZSk7XG4gIGlmICh0aGlzLmVhdCh0eXBlcy5wYXJlbkwpKSB7IG5vZGUuYXJndW1lbnRzID0gdGhpcy5wYXJzZUV4cHJMaXN0KHR5cGVzLnBhcmVuUiwgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgsIGZhbHNlKTsgfVxuICBlbHNlIHsgbm9kZS5hcmd1bWVudHMgPSBlbXB0eSQxOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJOZXdFeHByZXNzaW9uXCIpXG59O1xuXG5cbnBwJDMucGFyc2VUZW1wbGF0ZUVsZW1lbnQgPSBmdW5jdGlvbihyZWYpIHtcbiAgdmFyIGlzVGFnZ2VkID0gcmVmLmlzVGFnZ2VkO1xuXG4gIHZhciBlbGVtID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuaW52YWxpZFRlbXBsYXRlKSB7XG4gICAgaWYgKCFpc1RhZ2dlZCkge1xuICAgICAgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHRoaXMuc3RhcnQsIFwiQmFkIGVzY2FwZSBzZXF1ZW5jZSBpbiB1bnRhZ2dlZCB0ZW1wbGF0ZSBsaXRlcmFsXCIpO1xuICAgIH1cbiAgICBlbGVtLnZhbHVlID0ge1xuICAgICAgcmF3OiB0aGlzLnZhbHVlLFxuICAgICAgY29va2VkOiBudWxsXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBlbGVtLnZhbHVlID0ge1xuICAgICAgcmF3OiB0aGlzLmlucHV0LnNsaWNlKHRoaXMuc3RhcnQsIHRoaXMuZW5kKS5yZXBsYWNlKC9cXHJcXG4/L2csIFwiXFxuXCIpLFxuICAgICAgY29va2VkOiB0aGlzLnZhbHVlXG4gICAgfTtcbiAgfVxuICB0aGlzLm5leHQoKTtcbiAgZWxlbS50YWlsID0gdGhpcy50eXBlID09PSB0eXBlcy5iYWNrUXVvdGU7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUoZWxlbSwgXCJUZW1wbGF0ZUVsZW1lbnRcIilcbn07XG5cbnBwJDMucGFyc2VUZW1wbGF0ZSA9IGZ1bmN0aW9uKHJlZikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCByZWYgPT09IHZvaWQgMCApIHJlZiA9IHt9O1xuICB2YXIgaXNUYWdnZWQgPSByZWYuaXNUYWdnZWQ7IGlmICggaXNUYWdnZWQgPT09IHZvaWQgMCApIGlzVGFnZ2VkID0gZmFsc2U7XG5cbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICB0aGlzLm5leHQoKTtcbiAgbm9kZS5leHByZXNzaW9ucyA9IFtdO1xuICB2YXIgY3VyRWx0ID0gdGhpcy5wYXJzZVRlbXBsYXRlRWxlbWVudCh7aXNUYWdnZWQ6IGlzVGFnZ2VkfSk7XG4gIG5vZGUucXVhc2lzID0gW2N1ckVsdF07XG4gIHdoaWxlICghY3VyRWx0LnRhaWwpIHtcbiAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmRvbGxhckJyYWNlTCk7XG4gICAgbm9kZS5leHByZXNzaW9ucy5wdXNoKHRoaXMkMS5wYXJzZUV4cHJlc3Npb24oKSk7XG4gICAgdGhpcyQxLmV4cGVjdCh0eXBlcy5icmFjZVIpO1xuICAgIG5vZGUucXVhc2lzLnB1c2goY3VyRWx0ID0gdGhpcyQxLnBhcnNlVGVtcGxhdGVFbGVtZW50KHtpc1RhZ2dlZDogaXNUYWdnZWR9KSk7XG4gIH1cbiAgdGhpcy5uZXh0KCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUZW1wbGF0ZUxpdGVyYWxcIilcbn07XG5cblxucHAkMy5pc0FzeW5jUHJvcCA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgcmV0dXJuICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmIHByb3Aua2V5Lm5hbWUgPT09IFwiYXN5bmNcIiAmJlxuICAgICh0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUgfHwgdGhpcy50eXBlID09PSB0eXBlcy5udW0gfHwgdGhpcy50eXBlID09PSB0eXBlcy5zdHJpbmcgfHwgdGhpcy50eXBlID09PSB0eXBlcy5icmFja2V0TCB8fCB0aGlzLnR5cGUua2V5d29yZCkgJiZcbiAgICAhbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMuc3RhcnQpKVxufTtcblxucHAkMy5wYXJzZU9iaiA9IGZ1bmN0aW9uKGlzUGF0dGVybiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIGZpcnN0ID0gdHJ1ZSwgcHJvcEhhc2ggPSB7fTtcbiAgbm9kZS5wcm9wZXJ0aWVzID0gW107XG4gIHRoaXMubmV4dCgpO1xuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICBpZiAoIWZpcnN0KSB7XG4gICAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgIGlmICh0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLmJyYWNlUikpIHsgYnJlYWsgfVxuICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuICAgIHZhciBwcm9wID0gdGhpcyQxLnN0YXJ0Tm9kZSgpLCBpc0dlbmVyYXRvciA9ICh2b2lkIDApLCBpc0FzeW5jID0gKHZvaWQgMCksIHN0YXJ0UG9zID0gKHZvaWQgMCksIHN0YXJ0TG9jID0gKHZvaWQgMCk7XG4gICAgaWYgKHRoaXMkMS5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICAgIHByb3AubWV0aG9kID0gZmFsc2U7XG4gICAgICBwcm9wLnNob3J0aGFuZCA9IGZhbHNlO1xuICAgICAgaWYgKGlzUGF0dGVybiB8fCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgICAgIHN0YXJ0UG9zID0gdGhpcyQxLnN0YXJ0O1xuICAgICAgICBzdGFydExvYyA9IHRoaXMkMS5zdGFydExvYztcbiAgICAgIH1cbiAgICAgIGlmICghaXNQYXR0ZXJuKVxuICAgICAgICB7IGlzR2VuZXJhdG9yID0gdGhpcyQxLmVhdCh0eXBlcy5zdGFyKTsgfVxuICAgIH1cbiAgICB0aGlzJDEucGFyc2VQcm9wZXJ0eU5hbWUocHJvcCk7XG4gICAgaWYgKCFpc1BhdHRlcm4gJiYgdGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCAmJiAhaXNHZW5lcmF0b3IgJiYgdGhpcyQxLmlzQXN5bmNQcm9wKHByb3ApKSB7XG4gICAgICBpc0FzeW5jID0gdHJ1ZTtcbiAgICAgIHRoaXMkMS5wYXJzZVByb3BlcnR5TmFtZShwcm9wLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaXNBc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzJDEucGFyc2VQcm9wZXJ0eVZhbHVlKHByb3AsIGlzUGF0dGVybiwgaXNHZW5lcmF0b3IsIGlzQXN5bmMsIHN0YXJ0UG9zLCBzdGFydExvYywgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgdGhpcyQxLmNoZWNrUHJvcENsYXNoKHByb3AsIHByb3BIYXNoKTtcbiAgICBub2RlLnByb3BlcnRpZXMucHVzaCh0aGlzJDEuZmluaXNoTm9kZShwcm9wLCBcIlByb3BlcnR5XCIpKTtcbiAgfVxuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIGlzUGF0dGVybiA/IFwiT2JqZWN0UGF0dGVyblwiIDogXCJPYmplY3RFeHByZXNzaW9uXCIpXG59O1xuXG5wcCQzLnBhcnNlUHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uKHByb3AsIGlzUGF0dGVybiwgaXNHZW5lcmF0b3IsIGlzQXN5bmMsIHN0YXJ0UG9zLCBzdGFydExvYywgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICBpZiAoKGlzR2VuZXJhdG9yIHx8IGlzQXN5bmMpICYmIHRoaXMudHlwZSA9PT0gdHlwZXMuY29sb24pXG4gICAgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuXG4gIGlmICh0aGlzLmVhdCh0eXBlcy5jb2xvbikpIHtcbiAgICBwcm9wLnZhbHVlID0gaXNQYXR0ZXJuID8gdGhpcy5wYXJzZU1heWJlRGVmYXVsdCh0aGlzLnN0YXJ0LCB0aGlzLnN0YXJ0TG9jKSA6IHRoaXMucGFyc2VNYXliZUFzc2lnbihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgcHJvcC5raW5kID0gXCJpbml0XCI7XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy50eXBlID09PSB0eXBlcy5wYXJlbkwpIHtcbiAgICBpZiAoaXNQYXR0ZXJuKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgcHJvcC5raW5kID0gXCJpbml0XCI7XG4gICAgcHJvcC5tZXRob2QgPSB0cnVlO1xuICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGlzR2VuZXJhdG9yLCBpc0FzeW5jKTtcbiAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNSAmJiAhcHJvcC5jb21wdXRlZCAmJiBwcm9wLmtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJlxuICAgICAgICAgICAgIChwcm9wLmtleS5uYW1lID09PSBcImdldFwiIHx8IHByb3Aua2V5Lm5hbWUgPT09IFwic2V0XCIpICYmXG4gICAgICAgICAgICAgKHRoaXMudHlwZSAhPSB0eXBlcy5jb21tYSAmJiB0aGlzLnR5cGUgIT0gdHlwZXMuYnJhY2VSKSkge1xuICAgIGlmIChpc0dlbmVyYXRvciB8fCBpc0FzeW5jIHx8IGlzUGF0dGVybikgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgIHByb3Aua2luZCA9IHByb3Aua2V5Lm5hbWU7XG4gICAgdGhpcy5wYXJzZVByb3BlcnR5TmFtZShwcm9wKTtcbiAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1ldGhvZChmYWxzZSk7XG4gICAgdmFyIHBhcmFtQ291bnQgPSBwcm9wLmtpbmQgPT09IFwiZ2V0XCIgPyAwIDogMTtcbiAgICBpZiAocHJvcC52YWx1ZS5wYXJhbXMubGVuZ3RoICE9PSBwYXJhbUNvdW50KSB7XG4gICAgICB2YXIgc3RhcnQgPSBwcm9wLnZhbHVlLnN0YXJ0O1xuICAgICAgaWYgKHByb3Aua2luZCA9PT0gXCJnZXRcIilcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiZ2V0dGVyIHNob3VsZCBoYXZlIG5vIHBhcmFtc1wiKTsgfVxuICAgICAgZWxzZVxuICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJzZXR0ZXIgc2hvdWxkIGhhdmUgZXhhY3RseSBvbmUgcGFyYW1cIik7IH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByb3Aua2luZCA9PT0gXCJzZXRcIiAmJiBwcm9wLnZhbHVlLnBhcmFtc1swXS50eXBlID09PSBcIlJlc3RFbGVtZW50XCIpXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHByb3AudmFsdWUucGFyYW1zWzBdLnN0YXJ0LCBcIlNldHRlciBjYW5ub3QgdXNlIHJlc3QgcGFyYW1zXCIpOyB9XG4gICAgfVxuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiKSB7XG4gICAgdGhpcy5jaGVja1VucmVzZXJ2ZWQocHJvcC5rZXkpO1xuICAgIHByb3Aua2luZCA9IFwiaW5pdFwiO1xuICAgIGlmIChpc1BhdHRlcm4pIHtcbiAgICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHN0YXJ0UG9zLCBzdGFydExvYywgcHJvcC5rZXkpO1xuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSB0eXBlcy5lcSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPCAwKVxuICAgICAgICB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduID0gdGhpcy5zdGFydDsgfVxuICAgICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQoc3RhcnRQb3MsIHN0YXJ0TG9jLCBwcm9wLmtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3AudmFsdWUgPSBwcm9wLmtleTtcbiAgICB9XG4gICAgcHJvcC5zaG9ydGhhbmQgPSB0cnVlO1xuICB9IGVsc2UgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxufTtcblxucHAkMy5wYXJzZVByb3BlcnR5TmFtZSA9IGZ1bmN0aW9uKHByb3ApIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgaWYgKHRoaXMuZWF0KHR5cGVzLmJyYWNrZXRMKSkge1xuICAgICAgcHJvcC5jb21wdXRlZCA9IHRydWU7XG4gICAgICBwcm9wLmtleSA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgICAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2tldFIpO1xuICAgICAgcmV0dXJuIHByb3Aua2V5XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3AuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHByb3Aua2V5ID0gdGhpcy50eXBlID09PSB0eXBlcy5udW0gfHwgdGhpcy50eXBlID09PSB0eXBlcy5zdHJpbmcgPyB0aGlzLnBhcnNlRXhwckF0b20oKSA6IHRoaXMucGFyc2VJZGVudCh0cnVlKVxufTtcblxuXG5wcCQzLmluaXRGdW5jdGlvbiA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgbm9kZS5pZCA9IG51bGw7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIG5vZGUuZ2VuZXJhdG9yID0gZmFsc2U7XG4gICAgbm9kZS5leHByZXNzaW9uID0gZmFsc2U7XG4gIH1cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KVxuICAgIHsgbm9kZS5hc3luYyA9IGZhbHNlOyB9XG59O1xuXG5cbnBwJDMucGFyc2VNZXRob2QgPSBmdW5jdGlvbihpc0dlbmVyYXRvciwgaXNBc3luYykge1xuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCksIG9sZEluR2VuID0gdGhpcy5pbkdlbmVyYXRvciwgb2xkSW5Bc3luYyA9IHRoaXMuaW5Bc3luYyxcbiAgICAgIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBvbGRJbkZ1bmMgPSB0aGlzLmluRnVuY3Rpb247XG5cbiAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSk7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNilcbiAgICB7IG5vZGUuZ2VuZXJhdG9yID0gaXNHZW5lcmF0b3I7IH1cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KVxuICAgIHsgbm9kZS5hc3luYyA9ICEhaXNBc3luYzsgfVxuXG4gIHRoaXMuaW5HZW5lcmF0b3IgPSBub2RlLmdlbmVyYXRvcjtcbiAgdGhpcy5pbkFzeW5jID0gbm9kZS5hc3luYztcbiAgdGhpcy55aWVsZFBvcyA9IDA7XG4gIHRoaXMuYXdhaXRQb3MgPSAwO1xuICB0aGlzLmluRnVuY3Rpb24gPSB0cnVlO1xuICB0aGlzLmVudGVyRnVuY3Rpb25TY29wZSgpO1xuXG4gIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuTCk7XG4gIG5vZGUucGFyYW1zID0gdGhpcy5wYXJzZUJpbmRpbmdMaXN0KHR5cGVzLnBhcmVuUiwgZmFsc2UsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KTtcbiAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcbiAgdGhpcy5wYXJzZUZ1bmN0aW9uQm9keShub2RlLCBmYWxzZSk7XG5cbiAgdGhpcy5pbkdlbmVyYXRvciA9IG9sZEluR2VuO1xuICB0aGlzLmluQXN5bmMgPSBvbGRJbkFzeW5jO1xuICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG4gIHRoaXMuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcbiAgdGhpcy5pbkZ1bmN0aW9uID0gb2xkSW5GdW5jO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRnVuY3Rpb25FeHByZXNzaW9uXCIpXG59O1xuXG5cbnBwJDMucGFyc2VBcnJvd0V4cHJlc3Npb24gPSBmdW5jdGlvbihub2RlLCBwYXJhbXMsIGlzQXN5bmMpIHtcbiAgdmFyIG9sZEluR2VuID0gdGhpcy5pbkdlbmVyYXRvciwgb2xkSW5Bc3luYyA9IHRoaXMuaW5Bc3luYyxcbiAgICAgIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBvbGRJbkZ1bmMgPSB0aGlzLmluRnVuY3Rpb247XG5cbiAgdGhpcy5lbnRlckZ1bmN0aW9uU2NvcGUoKTtcbiAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSk7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOClcbiAgICB7IG5vZGUuYXN5bmMgPSAhIWlzQXN5bmM7IH1cblxuICB0aGlzLmluR2VuZXJhdG9yID0gZmFsc2U7XG4gIHRoaXMuaW5Bc3luYyA9IG5vZGUuYXN5bmM7XG4gIHRoaXMueWllbGRQb3MgPSAwO1xuICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgdGhpcy5pbkZ1bmN0aW9uID0gdHJ1ZTtcblxuICBub2RlLnBhcmFtcyA9IHRoaXMudG9Bc3NpZ25hYmxlTGlzdChwYXJhbXMsIHRydWUpO1xuICB0aGlzLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIHRydWUpO1xuXG4gIHRoaXMuaW5HZW5lcmF0b3IgPSBvbGRJbkdlbjtcbiAgdGhpcy5pbkFzeW5jID0gb2xkSW5Bc3luYztcbiAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gIHRoaXMuaW5GdW5jdGlvbiA9IG9sZEluRnVuYztcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFycm93RnVuY3Rpb25FeHByZXNzaW9uXCIpXG59O1xuXG5cbnBwJDMucGFyc2VGdW5jdGlvbkJvZHkgPSBmdW5jdGlvbihub2RlLCBpc0Fycm93RnVuY3Rpb24pIHtcbiAgdmFyIGlzRXhwcmVzc2lvbiA9IGlzQXJyb3dGdW5jdGlvbiAmJiB0aGlzLnR5cGUgIT09IHR5cGVzLmJyYWNlTDtcbiAgdmFyIG9sZFN0cmljdCA9IHRoaXMuc3RyaWN0LCB1c2VTdHJpY3QgPSBmYWxzZTtcblxuICBpZiAoaXNFeHByZXNzaW9uKSB7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgbm9kZS5leHByZXNzaW9uID0gdHJ1ZTtcbiAgICB0aGlzLmNoZWNrUGFyYW1zKG5vZGUsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9uU2ltcGxlID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDcgJiYgIXRoaXMuaXNTaW1wbGVQYXJhbUxpc3Qobm9kZS5wYXJhbXMpO1xuICAgIGlmICghb2xkU3RyaWN0IHx8IG5vblNpbXBsZSkge1xuICAgICAgdXNlU3RyaWN0ID0gdGhpcy5zdHJpY3REaXJlY3RpdmUodGhpcy5lbmQpO1xuICAgICAgaWYgKHVzZVN0cmljdCAmJiBub25TaW1wbGUpXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuc3RhcnQsIFwiSWxsZWdhbCAndXNlIHN0cmljdCcgZGlyZWN0aXZlIGluIGZ1bmN0aW9uIHdpdGggbm9uLXNpbXBsZSBwYXJhbWV0ZXIgbGlzdFwiKTsgfVxuICAgIH1cbiAgICB2YXIgb2xkTGFiZWxzID0gdGhpcy5sYWJlbHM7XG4gICAgdGhpcy5sYWJlbHMgPSBbXTtcbiAgICBpZiAodXNlU3RyaWN0KSB7IHRoaXMuc3RyaWN0ID0gdHJ1ZTsgfVxuXG4gICAgdGhpcy5jaGVja1BhcmFtcyhub2RlLCAhb2xkU3RyaWN0ICYmICF1c2VTdHJpY3QgJiYgIWlzQXJyb3dGdW5jdGlvbiAmJiB0aGlzLmlzU2ltcGxlUGFyYW1MaXN0KG5vZGUucGFyYW1zKSk7XG4gICAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZUJsb2NrKGZhbHNlKTtcbiAgICBub2RlLmV4cHJlc3Npb24gPSBmYWxzZTtcbiAgICB0aGlzLmxhYmVscyA9IG9sZExhYmVscztcbiAgfVxuICB0aGlzLmV4aXRGdW5jdGlvblNjb3BlKCk7XG5cbiAgaWYgKHRoaXMuc3RyaWN0ICYmIG5vZGUuaWQpIHtcbiAgICB0aGlzLmNoZWNrTFZhbChub2RlLmlkLCBcIm5vbmVcIik7XG4gIH1cbiAgdGhpcy5zdHJpY3QgPSBvbGRTdHJpY3Q7XG59O1xuXG5wcCQzLmlzU2ltcGxlUGFyYW1MaXN0ID0gZnVuY3Rpb24ocGFyYW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gcGFyYW1zOyBpIDwgbGlzdC5sZW5ndGg7IGkgKz0gMSlcbiAgICB7XG4gICAgdmFyIHBhcmFtID0gbGlzdFtpXTtcblxuICAgIGlmIChwYXJhbS50eXBlICE9PSBcIklkZW50aWZpZXJcIikgeyByZXR1cm4gZmFsc2VcbiAgfSB9XG4gIHJldHVybiB0cnVlXG59O1xuXG5cbnBwJDMuY2hlY2tQYXJhbXMgPSBmdW5jdGlvbihub2RlLCBhbGxvd0R1cGxpY2F0ZXMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG5hbWVIYXNoID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gbm9kZS5wYXJhbXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgIHtcbiAgICB2YXIgcGFyYW0gPSBsaXN0W2ldO1xuXG4gICAgdGhpcyQxLmNoZWNrTFZhbChwYXJhbSwgXCJ2YXJcIiwgYWxsb3dEdXBsaWNhdGVzID8gbnVsbCA6IG5hbWVIYXNoKTtcbiAgfVxufTtcblxuXG5wcCQzLnBhcnNlRXhwckxpc3QgPSBmdW5jdGlvbihjbG9zZSwgYWxsb3dUcmFpbGluZ0NvbW1hLCBhbGxvd0VtcHR5LCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBlbHRzID0gW10sIGZpcnN0ID0gdHJ1ZTtcbiAgd2hpbGUgKCF0aGlzLmVhdChjbG9zZSkpIHtcbiAgICBpZiAoIWZpcnN0KSB7XG4gICAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgIGlmIChhbGxvd1RyYWlsaW5nQ29tbWEgJiYgdGhpcyQxLmFmdGVyVHJhaWxpbmdDb21tYShjbG9zZSkpIHsgYnJlYWsgfVxuICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuICAgIHZhciBlbHQgPSAodm9pZCAwKTtcbiAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzJDEudHlwZSA9PT0gdHlwZXMuY29tbWEpXG4gICAgICB7IGVsdCA9IG51bGw7IH1cbiAgICBlbHNlIGlmICh0aGlzJDEudHlwZSA9PT0gdHlwZXMuZWxsaXBzaXMpIHtcbiAgICAgIGVsdCA9IHRoaXMkMS5wYXJzZVNwcmVhZChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzICYmIHRoaXMkMS50eXBlID09PSB0eXBlcy5jb21tYSAmJiByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPCAwKVxuICAgICAgICB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA9IHRoaXMkMS5zdGFydDsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbHQgPSB0aGlzJDEucGFyc2VNYXliZUFzc2lnbihmYWxzZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgfVxuICAgIGVsdHMucHVzaChlbHQpO1xuICB9XG4gIHJldHVybiBlbHRzXG59O1xuXG5cbnBwJDMuY2hlY2tVbnJlc2VydmVkID0gZnVuY3Rpb24ocmVmKSB7XG4gIHZhciBzdGFydCA9IHJlZi5zdGFydDtcbiAgdmFyIGVuZCA9IHJlZi5lbmQ7XG4gIHZhciBuYW1lID0gcmVmLm5hbWU7XG5cbiAgaWYgKHRoaXMuaW5HZW5lcmF0b3IgJiYgbmFtZSA9PT0gXCJ5aWVsZFwiKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcIkNhbiBub3QgdXNlICd5aWVsZCcgYXMgaWRlbnRpZmllciBpbnNpZGUgYSBnZW5lcmF0b3JcIik7IH1cbiAgaWYgKHRoaXMuaW5Bc3luYyAmJiBuYW1lID09PSBcImF3YWl0XCIpXG4gICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiQ2FuIG5vdCB1c2UgJ2F3YWl0JyBhcyBpZGVudGlmaWVyIGluc2lkZSBhbiBhc3luYyBmdW5jdGlvblwiKTsgfVxuICBpZiAodGhpcy5pc0tleXdvcmQobmFtZSkpXG4gICAgeyB0aGlzLnJhaXNlKHN0YXJ0LCAoXCJVbmV4cGVjdGVkIGtleXdvcmQgJ1wiICsgbmFtZSArIFwiJ1wiKSk7IH1cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYgJiZcbiAgICB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0LCBlbmQpLmluZGV4T2YoXCJcXFxcXCIpICE9IC0xKSB7IHJldHVybiB9XG4gIHZhciByZSA9IHRoaXMuc3RyaWN0ID8gdGhpcy5yZXNlcnZlZFdvcmRzU3RyaWN0IDogdGhpcy5yZXNlcnZlZFdvcmRzO1xuICBpZiAocmUudGVzdChuYW1lKSlcbiAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgKFwiVGhlIGtleXdvcmQgJ1wiICsgbmFtZSArIFwiJyBpcyByZXNlcnZlZFwiKSk7IH1cbn07XG5cbnBwJDMucGFyc2VJZGVudCA9IGZ1bmN0aW9uKGxpYmVyYWwsIGlzQmluZGluZykge1xuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIGlmIChsaWJlcmFsICYmIHRoaXMub3B0aW9ucy5hbGxvd1Jlc2VydmVkID09IFwibmV2ZXJcIikgeyBsaWJlcmFsID0gZmFsc2U7IH1cbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSkge1xuICAgIG5vZGUubmFtZSA9IHRoaXMudmFsdWU7XG4gIH0gZWxzZSBpZiAodGhpcy50eXBlLmtleXdvcmQpIHtcbiAgICBub2RlLm5hbWUgPSB0aGlzLnR5cGUua2V5d29yZDtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgfVxuICB0aGlzLm5leHQoKTtcbiAgdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSWRlbnRpZmllclwiKTtcbiAgaWYgKCFsaWJlcmFsKSB7IHRoaXMuY2hlY2tVbnJlc2VydmVkKG5vZGUpOyB9XG4gIHJldHVybiBub2RlXG59O1xuXG5cbnBwJDMucGFyc2VZaWVsZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMueWllbGRQb3MpIHsgdGhpcy55aWVsZFBvcyA9IHRoaXMuc3RhcnQ7IH1cblxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHRoaXMubmV4dCgpO1xuICBpZiAodGhpcy50eXBlID09IHR5cGVzLnNlbWkgfHwgdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSB8fCAodGhpcy50eXBlICE9IHR5cGVzLnN0YXIgJiYgIXRoaXMudHlwZS5zdGFydHNFeHByKSkge1xuICAgIG5vZGUuZGVsZWdhdGUgPSBmYWxzZTtcbiAgICBub2RlLmFyZ3VtZW50ID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBub2RlLmRlbGVnYXRlID0gdGhpcy5lYXQodHlwZXMuc3Rhcik7XG4gICAgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJZaWVsZEV4cHJlc3Npb25cIilcbn07XG5cbnBwJDMucGFyc2VBd2FpdCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuYXdhaXRQb3MpIHsgdGhpcy5hd2FpdFBvcyA9IHRoaXMuc3RhcnQ7IH1cblxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHRoaXMubmV4dCgpO1xuICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlVW5hcnkobnVsbCwgdHJ1ZSk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBd2FpdEV4cHJlc3Npb25cIilcbn07XG5cbnZhciBwcCQ0ID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXG5wcCQ0LnJhaXNlID0gZnVuY3Rpb24ocG9zLCBtZXNzYWdlKSB7XG4gIHZhciBsb2MgPSBnZXRMaW5lSW5mbyh0aGlzLmlucHV0LCBwb3MpO1xuICBtZXNzYWdlICs9IFwiIChcIiArIGxvYy5saW5lICsgXCI6XCIgKyBsb2MuY29sdW1uICsgXCIpXCI7XG4gIHZhciBlcnIgPSBuZXcgU3ludGF4RXJyb3IobWVzc2FnZSk7XG4gIGVyci5wb3MgPSBwb3M7IGVyci5sb2MgPSBsb2M7IGVyci5yYWlzZWRBdCA9IHRoaXMucG9zO1xuICB0aHJvdyBlcnJcbn07XG5cbnBwJDQucmFpc2VSZWNvdmVyYWJsZSA9IHBwJDQucmFpc2U7XG5cbnBwJDQuY3VyUG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFBvc2l0aW9uKHRoaXMuY3VyTGluZSwgdGhpcy5wb3MgLSB0aGlzLmxpbmVTdGFydClcbiAgfVxufTtcblxudmFyIHBwJDUgPSBQYXJzZXIucHJvdG90eXBlO1xuXG52YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0YXJnZXQpIHtcbiAgdmFyIHNvdXJjZXMgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gIHdoaWxlICggbGVuLS0gPiAwICkgc291cmNlc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiArIDEgXTtcblxuICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IHNvdXJjZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgdmFyIHNvdXJjZSA9IGxpc3RbaV07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICBpZiAoaGFzKHNvdXJjZSwga2V5KSkge1xuICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0XG59O1xuXG5cbnBwJDUuZW50ZXJGdW5jdGlvblNjb3BlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2NvcGVTdGFjay5wdXNoKHt2YXI6IHt9LCBsZXhpY2FsOiB7fSwgY2hpbGRWYXI6IHt9LCBwYXJlbnRMZXhpY2FsOiB7fX0pO1xufTtcblxucHAkNS5leGl0RnVuY3Rpb25TY29wZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLnNjb3BlU3RhY2sucG9wKCk7XG59O1xuXG5wcCQ1LmVudGVyTGV4aWNhbFNjb3BlID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXJlbnRTY29wZSA9IHRoaXMuc2NvcGVTdGFja1t0aGlzLnNjb3BlU3RhY2subGVuZ3RoIC0gMV07XG4gIHZhciBjaGlsZFNjb3BlID0ge3Zhcjoge30sIGxleGljYWw6IHt9LCBjaGlsZFZhcjoge30sIHBhcmVudExleGljYWw6IHt9fTtcblxuICB0aGlzLnNjb3BlU3RhY2sucHVzaChjaGlsZFNjb3BlKTtcbiAgYXNzaWduKGNoaWxkU2NvcGUucGFyZW50TGV4aWNhbCwgcGFyZW50U2NvcGUubGV4aWNhbCwgcGFyZW50U2NvcGUucGFyZW50TGV4aWNhbCk7XG59O1xuXG5wcCQ1LmV4aXRMZXhpY2FsU2NvcGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNoaWxkU2NvcGUgPSB0aGlzLnNjb3BlU3RhY2sucG9wKCk7XG4gIHZhciBwYXJlbnRTY29wZSA9IHRoaXMuc2NvcGVTdGFja1t0aGlzLnNjb3BlU3RhY2subGVuZ3RoIC0gMV07XG5cbiAgYXNzaWduKHBhcmVudFNjb3BlLmNoaWxkVmFyLCBjaGlsZFNjb3BlLnZhciwgY2hpbGRTY29wZS5jaGlsZFZhcik7XG59O1xuXG5wcCQ1LmNhbkRlY2xhcmVWYXJOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3VycmVudFNjb3BlID0gdGhpcy5zY29wZVN0YWNrW3RoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxXTtcblxuICByZXR1cm4gIWhhcyhjdXJyZW50U2NvcGUubGV4aWNhbCwgbmFtZSkgJiYgIWhhcyhjdXJyZW50U2NvcGUucGFyZW50TGV4aWNhbCwgbmFtZSlcbn07XG5cbnBwJDUuY2FuRGVjbGFyZUxleGljYWxOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3VycmVudFNjb3BlID0gdGhpcy5zY29wZVN0YWNrW3RoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxXTtcblxuICByZXR1cm4gIWhhcyhjdXJyZW50U2NvcGUubGV4aWNhbCwgbmFtZSkgJiYgIWhhcyhjdXJyZW50U2NvcGUudmFyLCBuYW1lKSAmJiAhaGFzKGN1cnJlbnRTY29wZS5jaGlsZFZhciwgbmFtZSlcbn07XG5cbnBwJDUuZGVjbGFyZVZhck5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHRoaXMuc2NvcGVTdGFja1t0aGlzLnNjb3BlU3RhY2subGVuZ3RoIC0gMV0udmFyW25hbWVdID0gdHJ1ZTtcbn07XG5cbnBwJDUuZGVjbGFyZUxleGljYWxOYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICB0aGlzLnNjb3BlU3RhY2tbdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDFdLmxleGljYWxbbmFtZV0gPSB0cnVlO1xufTtcblxudmFyIE5vZGUgPSBmdW5jdGlvbiBOb2RlKHBhcnNlciwgcG9zLCBsb2MpIHtcbiAgdGhpcy50eXBlID0gXCJcIjtcbiAgdGhpcy5zdGFydCA9IHBvcztcbiAgdGhpcy5lbmQgPSAwO1xuICBpZiAocGFyc2VyLm9wdGlvbnMubG9jYXRpb25zKVxuICAgIHsgdGhpcy5sb2MgPSBuZXcgU291cmNlTG9jYXRpb24ocGFyc2VyLCBsb2MpOyB9XG4gIGlmIChwYXJzZXIub3B0aW9ucy5kaXJlY3RTb3VyY2VGaWxlKVxuICAgIHsgdGhpcy5zb3VyY2VGaWxlID0gcGFyc2VyLm9wdGlvbnMuZGlyZWN0U291cmNlRmlsZTsgfVxuICBpZiAocGFyc2VyLm9wdGlvbnMucmFuZ2VzKVxuICAgIHsgdGhpcy5yYW5nZSA9IFtwb3MsIDBdOyB9XG59O1xuXG5cbnZhciBwcCQ2ID0gUGFyc2VyLnByb3RvdHlwZTtcblxucHAkNi5zdGFydE5vZGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBOb2RlKHRoaXMsIHRoaXMuc3RhcnQsIHRoaXMuc3RhcnRMb2MpXG59O1xuXG5wcCQ2LnN0YXJ0Tm9kZUF0ID0gZnVuY3Rpb24ocG9zLCBsb2MpIHtcbiAgcmV0dXJuIG5ldyBOb2RlKHRoaXMsIHBvcywgbG9jKVxufTtcblxuXG5mdW5jdGlvbiBmaW5pc2hOb2RlQXQobm9kZSwgdHlwZSwgcG9zLCBsb2MpIHtcbiAgbm9kZS50eXBlID0gdHlwZTtcbiAgbm9kZS5lbmQgPSBwb3M7XG4gIGlmICh0aGlzLm9wdGlvbnMubG9jYXRpb25zKVxuICAgIHsgbm9kZS5sb2MuZW5kID0gbG9jOyB9XG4gIGlmICh0aGlzLm9wdGlvbnMucmFuZ2VzKVxuICAgIHsgbm9kZS5yYW5nZVsxXSA9IHBvczsgfVxuICByZXR1cm4gbm9kZVxufVxuXG5wcCQ2LmZpbmlzaE5vZGUgPSBmdW5jdGlvbihub2RlLCB0eXBlKSB7XG4gIHJldHVybiBmaW5pc2hOb2RlQXQuY2FsbCh0aGlzLCBub2RlLCB0eXBlLCB0aGlzLmxhc3RUb2tFbmQsIHRoaXMubGFzdFRva0VuZExvYylcbn07XG5cblxucHAkNi5maW5pc2hOb2RlQXQgPSBmdW5jdGlvbihub2RlLCB0eXBlLCBwb3MsIGxvYykge1xuICByZXR1cm4gZmluaXNoTm9kZUF0LmNhbGwodGhpcywgbm9kZSwgdHlwZSwgcG9zLCBsb2MpXG59O1xuXG5cbnZhciBUb2tDb250ZXh0ID0gZnVuY3Rpb24gVG9rQ29udGV4dCh0b2tlbiwgaXNFeHByLCBwcmVzZXJ2ZVNwYWNlLCBvdmVycmlkZSwgZ2VuZXJhdG9yKSB7XG4gIHRoaXMudG9rZW4gPSB0b2tlbjtcbiAgdGhpcy5pc0V4cHIgPSAhIWlzRXhwcjtcbiAgdGhpcy5wcmVzZXJ2ZVNwYWNlID0gISFwcmVzZXJ2ZVNwYWNlO1xuICB0aGlzLm92ZXJyaWRlID0gb3ZlcnJpZGU7XG4gIHRoaXMuZ2VuZXJhdG9yID0gISFnZW5lcmF0b3I7XG59O1xuXG52YXIgdHlwZXMkMSA9IHtcbiAgYl9zdGF0OiBuZXcgVG9rQ29udGV4dChcIntcIiwgZmFsc2UpLFxuICBiX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwie1wiLCB0cnVlKSxcbiAgYl90bXBsOiBuZXcgVG9rQ29udGV4dChcIiR7XCIsIGZhbHNlKSxcbiAgcF9zdGF0OiBuZXcgVG9rQ29udGV4dChcIihcIiwgZmFsc2UpLFxuICBwX2V4cHI6IG5ldyBUb2tDb250ZXh0KFwiKFwiLCB0cnVlKSxcbiAgcV90bXBsOiBuZXcgVG9rQ29udGV4dChcImBcIiwgdHJ1ZSwgdHJ1ZSwgZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAudHJ5UmVhZFRlbXBsYXRlVG9rZW4oKTsgfSksXG4gIGZfc3RhdDogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCBmYWxzZSksXG4gIGZfZXhwcjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlKSxcbiAgZl9leHByX2dlbjogbmV3IFRva0NvbnRleHQoXCJmdW5jdGlvblwiLCB0cnVlLCBmYWxzZSwgbnVsbCwgdHJ1ZSksXG4gIGZfZ2VuOiBuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsIGZhbHNlLCBmYWxzZSwgbnVsbCwgdHJ1ZSlcbn07XG5cbnZhciBwcCQ3ID0gUGFyc2VyLnByb3RvdHlwZTtcblxucHAkNy5pbml0aWFsQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gW3R5cGVzJDEuYl9zdGF0XVxufTtcblxucHAkNy5icmFjZUlzQmxvY2sgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5jdXJDb250ZXh0KCk7XG4gIGlmIChwYXJlbnQgPT09IHR5cGVzJDEuZl9leHByIHx8IHBhcmVudCA9PT0gdHlwZXMkMS5mX3N0YXQpXG4gICAgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuY29sb24gJiYgKHBhcmVudCA9PT0gdHlwZXMkMS5iX3N0YXQgfHwgcGFyZW50ID09PSB0eXBlcyQxLmJfZXhwcikpXG4gICAgeyByZXR1cm4gIXBhcmVudC5pc0V4cHIgfVxuXG4gIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuX3JldHVybiB8fCBwcmV2VHlwZSA9PSB0eXBlcy5uYW1lICYmIHRoaXMuZXhwckFsbG93ZWQpXG4gICAgeyByZXR1cm4gbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMuc3RhcnQpKSB9XG4gIGlmIChwcmV2VHlwZSA9PT0gdHlwZXMuX2Vsc2UgfHwgcHJldlR5cGUgPT09IHR5cGVzLnNlbWkgfHwgcHJldlR5cGUgPT09IHR5cGVzLmVvZiB8fCBwcmV2VHlwZSA9PT0gdHlwZXMucGFyZW5SIHx8IHByZXZUeXBlID09IHR5cGVzLmFycm93KVxuICAgIHsgcmV0dXJuIHRydWUgfVxuICBpZiAocHJldlR5cGUgPT0gdHlwZXMuYnJhY2VMKVxuICAgIHsgcmV0dXJuIHBhcmVudCA9PT0gdHlwZXMkMS5iX3N0YXQgfVxuICBpZiAocHJldlR5cGUgPT0gdHlwZXMuX3ZhciB8fCBwcmV2VHlwZSA9PSB0eXBlcy5uYW1lKVxuICAgIHsgcmV0dXJuIGZhbHNlIH1cbiAgcmV0dXJuICF0aGlzLmV4cHJBbGxvd2VkXG59O1xuXG5wcCQ3LmluR2VuZXJhdG9yQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBmb3IgKHZhciBpID0gdGhpcy5jb250ZXh0Lmxlbmd0aCAtIDE7IGkgPj0gMTsgaS0tKSB7XG4gICAgdmFyIGNvbnRleHQgPSB0aGlzJDEuY29udGV4dFtpXTtcbiAgICBpZiAoY29udGV4dC50b2tlbiA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgeyByZXR1cm4gY29udGV4dC5nZW5lcmF0b3IgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufTtcblxucHAkNy51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgdmFyIHVwZGF0ZSwgdHlwZSA9IHRoaXMudHlwZTtcbiAgaWYgKHR5cGUua2V5d29yZCAmJiBwcmV2VHlwZSA9PSB0eXBlcy5kb3QpXG4gICAgeyB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2U7IH1cbiAgZWxzZSBpZiAodXBkYXRlID0gdHlwZS51cGRhdGVDb250ZXh0KVxuICAgIHsgdXBkYXRlLmNhbGwodGhpcywgcHJldlR5cGUpOyB9XG4gIGVsc2VcbiAgICB7IHRoaXMuZXhwckFsbG93ZWQgPSB0eXBlLmJlZm9yZUV4cHI7IH1cbn07XG5cblxudHlwZXMucGFyZW5SLnVwZGF0ZUNvbnRleHQgPSB0eXBlcy5icmFjZVIudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5jb250ZXh0Lmxlbmd0aCA9PSAxKSB7XG4gICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG91dCA9IHRoaXMuY29udGV4dC5wb3AoKTtcbiAgaWYgKG91dCA9PT0gdHlwZXMkMS5iX3N0YXQgJiYgdGhpcy5jdXJDb250ZXh0KCkudG9rZW4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgIG91dCA9IHRoaXMuY29udGV4dC5wb3AoKTtcbiAgfVxuICB0aGlzLmV4cHJBbGxvd2VkID0gIW91dC5pc0V4cHI7XG59O1xuXG50eXBlcy5icmFjZUwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gIHRoaXMuY29udGV4dC5wdXNoKHRoaXMuYnJhY2VJc0Jsb2NrKHByZXZUeXBlKSA/IHR5cGVzJDEuYl9zdGF0IDogdHlwZXMkMS5iX2V4cHIpO1xuICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZTtcbn07XG5cbnR5cGVzLmRvbGxhckJyYWNlTC51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuY29udGV4dC5wdXNoKHR5cGVzJDEuYl90bXBsKTtcbiAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG59O1xuXG50eXBlcy5wYXJlbkwudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gIHZhciBzdGF0ZW1lbnRQYXJlbnMgPSBwcmV2VHlwZSA9PT0gdHlwZXMuX2lmIHx8IHByZXZUeXBlID09PSB0eXBlcy5fZm9yIHx8IHByZXZUeXBlID09PSB0eXBlcy5fd2l0aCB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuX3doaWxlO1xuICB0aGlzLmNvbnRleHQucHVzaChzdGF0ZW1lbnRQYXJlbnMgPyB0eXBlcyQxLnBfc3RhdCA6IHR5cGVzJDEucF9leHByKTtcbiAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG59O1xuXG50eXBlcy5pbmNEZWMudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xufTtcblxudHlwZXMuX2Z1bmN0aW9uLnVwZGF0ZUNvbnRleHQgPSB0eXBlcy5fY2xhc3MudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gIGlmIChwcmV2VHlwZS5iZWZvcmVFeHByICYmIHByZXZUeXBlICE9PSB0eXBlcy5zZW1pICYmIHByZXZUeXBlICE9PSB0eXBlcy5fZWxzZSAmJlxuICAgICAgISgocHJldlR5cGUgPT09IHR5cGVzLmNvbG9uIHx8IHByZXZUeXBlID09PSB0eXBlcy5icmFjZUwpICYmIHRoaXMuY3VyQ29udGV4dCgpID09PSB0eXBlcyQxLmJfc3RhdCkpXG4gICAgeyB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLmZfZXhwcik7IH1cbiAgZWxzZVxuICAgIHsgdGhpcy5jb250ZXh0LnB1c2godHlwZXMkMS5mX3N0YXQpOyB9XG4gIHRoaXMuZXhwckFsbG93ZWQgPSBmYWxzZTtcbn07XG5cbnR5cGVzLmJhY2tRdW90ZS51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmN1ckNvbnRleHQoKSA9PT0gdHlwZXMkMS5xX3RtcGwpXG4gICAgeyB0aGlzLmNvbnRleHQucG9wKCk7IH1cbiAgZWxzZVxuICAgIHsgdGhpcy5jb250ZXh0LnB1c2godHlwZXMkMS5xX3RtcGwpOyB9XG4gIHRoaXMuZXhwckFsbG93ZWQgPSBmYWxzZTtcbn07XG5cbnR5cGVzLnN0YXIudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gIGlmIChwcmV2VHlwZSA9PSB0eXBlcy5fZnVuY3Rpb24pIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmNvbnRleHQubGVuZ3RoIC0gMTtcbiAgICBpZiAodGhpcy5jb250ZXh0W2luZGV4XSA9PT0gdHlwZXMkMS5mX2V4cHIpXG4gICAgICB7IHRoaXMuY29udGV4dFtpbmRleF0gPSB0eXBlcyQxLmZfZXhwcl9nZW47IH1cbiAgICBlbHNlXG4gICAgICB7IHRoaXMuY29udGV4dFtpbmRleF0gPSB0eXBlcyQxLmZfZ2VuOyB9XG4gIH1cbiAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG59O1xuXG50eXBlcy5uYW1lLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB2YXIgYWxsb3dlZCA9IGZhbHNlO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICBpZiAodGhpcy52YWx1ZSA9PSBcIm9mXCIgJiYgIXRoaXMuZXhwckFsbG93ZWQgfHxcbiAgICAgICAgdGhpcy52YWx1ZSA9PSBcInlpZWxkXCIgJiYgdGhpcy5pbkdlbmVyYXRvckNvbnRleHQoKSlcbiAgICAgIHsgYWxsb3dlZCA9IHRydWU7IH1cbiAgfVxuICB0aGlzLmV4cHJBbGxvd2VkID0gYWxsb3dlZDtcbn07XG5cblxudmFyIFRva2VuID0gZnVuY3Rpb24gVG9rZW4ocCkge1xuICB0aGlzLnR5cGUgPSBwLnR5cGU7XG4gIHRoaXMudmFsdWUgPSBwLnZhbHVlO1xuICB0aGlzLnN0YXJ0ID0gcC5zdGFydDtcbiAgdGhpcy5lbmQgPSBwLmVuZDtcbiAgaWYgKHAub3B0aW9ucy5sb2NhdGlvbnMpXG4gICAgeyB0aGlzLmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbihwLCBwLnN0YXJ0TG9jLCBwLmVuZExvYyk7IH1cbiAgaWYgKHAub3B0aW9ucy5yYW5nZXMpXG4gICAgeyB0aGlzLnJhbmdlID0gW3Auc3RhcnQsIHAuZW5kXTsgfVxufTtcblxuXG52YXIgcHAkOCA9IFBhcnNlci5wcm90b3R5cGU7XG5cbnZhciBpc1JoaW5vID0gdHlwZW9mIFBhY2thZ2VzID09IFwib2JqZWN0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFBhY2thZ2VzKSA9PSBcIltvYmplY3QgSmF2YVBhY2thZ2VdXCI7XG5cblxucHAkOC5uZXh0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMub25Ub2tlbilcbiAgICB7IHRoaXMub3B0aW9ucy5vblRva2VuKG5ldyBUb2tlbih0aGlzKSk7IH1cblxuICB0aGlzLmxhc3RUb2tFbmQgPSB0aGlzLmVuZDtcbiAgdGhpcy5sYXN0VG9rU3RhcnQgPSB0aGlzLnN0YXJ0O1xuICB0aGlzLmxhc3RUb2tFbmRMb2MgPSB0aGlzLmVuZExvYztcbiAgdGhpcy5sYXN0VG9rU3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICB0aGlzLm5leHRUb2tlbigpO1xufTtcblxucHAkOC5nZXRUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLm5leHQoKTtcbiAgcmV0dXJuIG5ldyBUb2tlbih0aGlzKVxufTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIpXG4gIHsgcHAkOFtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdG9rZW4gPSB0aGlzJDEuZ2V0VG9rZW4oKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkb25lOiB0b2tlbi50eXBlID09PSB0eXBlcy5lb2YsXG4gICAgICAgICAgdmFsdWU6IHRva2VuXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07IH1cblxuXG5wcCQ4LmN1ckNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuY29udGV4dFt0aGlzLmNvbnRleHQubGVuZ3RoIC0gMV1cbn07XG5cblxucHAkOC5uZXh0VG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN1ckNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQoKTtcbiAgaWYgKCFjdXJDb250ZXh0IHx8ICFjdXJDb250ZXh0LnByZXNlcnZlU3BhY2UpIHsgdGhpcy5za2lwU3BhY2UoKTsgfVxuXG4gIHRoaXMuc3RhcnQgPSB0aGlzLnBvcztcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHsgdGhpcy5zdGFydExvYyA9IHRoaXMuY3VyUG9zaXRpb24oKTsgfVxuICBpZiAodGhpcy5wb3MgPj0gdGhpcy5pbnB1dC5sZW5ndGgpIHsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZW9mKSB9XG5cbiAgaWYgKGN1ckNvbnRleHQub3ZlcnJpZGUpIHsgcmV0dXJuIGN1ckNvbnRleHQub3ZlcnJpZGUodGhpcykgfVxuICBlbHNlIHsgdGhpcy5yZWFkVG9rZW4odGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKTsgfVxufTtcblxucHAkOC5yZWFkVG9rZW4gPSBmdW5jdGlvbihjb2RlKSB7XG4gIGlmIChpc0lkZW50aWZpZXJTdGFydChjb2RlLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikgfHwgY29kZSA9PT0gOTIgKVxuICAgIHsgcmV0dXJuIHRoaXMucmVhZFdvcmQoKSB9XG5cbiAgcmV0dXJuIHRoaXMuZ2V0VG9rZW5Gcm9tQ29kZShjb2RlKVxufTtcblxucHAkOC5mdWxsQ2hhckNvZGVBdFBvcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29kZSA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyk7XG4gIGlmIChjb2RlIDw9IDB4ZDdmZiB8fCBjb2RlID49IDB4ZTAwMCkgeyByZXR1cm4gY29kZSB9XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIHJldHVybiAoY29kZSA8PCAxMCkgKyBuZXh0IC0gMHgzNWZkYzAwXG59O1xuXG5wcCQ4LnNraXBCbG9ja0NvbW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0TG9jID0gdGhpcy5vcHRpb25zLm9uQ29tbWVudCAmJiB0aGlzLmN1clBvc2l0aW9uKCk7XG4gIHZhciBzdGFydCA9IHRoaXMucG9zLCBlbmQgPSB0aGlzLmlucHV0LmluZGV4T2YoXCIqL1wiLCB0aGlzLnBvcyArPSAyKTtcbiAgaWYgKGVuZCA9PT0gLTEpIHsgdGhpcy5yYWlzZSh0aGlzLnBvcyAtIDIsIFwiVW50ZXJtaW5hdGVkIGNvbW1lbnRcIik7IH1cbiAgdGhpcy5wb3MgPSBlbmQgKyAyO1xuICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgIGxpbmVCcmVha0cubGFzdEluZGV4ID0gc3RhcnQ7XG4gICAgdmFyIG1hdGNoO1xuICAgIHdoaWxlICgobWF0Y2ggPSBsaW5lQnJlYWtHLmV4ZWModGhpcy5pbnB1dCkpICYmIG1hdGNoLmluZGV4IDwgdGhpcy5wb3MpIHtcbiAgICAgICsrdGhpcyQxLmN1ckxpbmU7XG4gICAgICB0aGlzJDEubGluZVN0YXJ0ID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgfVxuICB9XG4gIGlmICh0aGlzLm9wdGlvbnMub25Db21tZW50KVxuICAgIHsgdGhpcy5vcHRpb25zLm9uQ29tbWVudCh0cnVlLCB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0ICsgMiwgZW5kKSwgc3RhcnQsIHRoaXMucG9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRMb2MsIHRoaXMuY3VyUG9zaXRpb24oKSk7IH1cbn07XG5cbnBwJDguc2tpcExpbmVDb21tZW50ID0gZnVuY3Rpb24oc3RhcnRTa2lwKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBzdGFydCA9IHRoaXMucG9zO1xuICB2YXIgc3RhcnRMb2MgPSB0aGlzLm9wdGlvbnMub25Db21tZW50ICYmIHRoaXMuY3VyUG9zaXRpb24oKTtcbiAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICs9IHN0YXJ0U2tpcCk7XG4gIHdoaWxlICh0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoICYmICFpc05ld0xpbmUoY2gpKSB7XG4gICAgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMkMS5wb3MpO1xuICB9XG4gIGlmICh0aGlzLm9wdGlvbnMub25Db21tZW50KVxuICAgIHsgdGhpcy5vcHRpb25zLm9uQ29tbWVudChmYWxzZSwgdGhpcy5pbnB1dC5zbGljZShzdGFydCArIHN0YXJ0U2tpcCwgdGhpcy5wb3MpLCBzdGFydCwgdGhpcy5wb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydExvYywgdGhpcy5jdXJQb3NpdGlvbigpKTsgfVxufTtcblxuXG5wcCQ4LnNraXBTcGFjZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBsb29wOiB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCkge1xuICAgIHZhciBjaCA9IHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpO1xuICAgIHN3aXRjaCAoY2gpIHtcbiAgICBjYXNlIDMyOiBjYXNlIDE2MDpcbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgIGJyZWFrXG4gICAgY2FzZSAxMzpcbiAgICAgIGlmICh0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zICsgMSkgPT09IDEwKSB7XG4gICAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgIH1cbiAgICBjYXNlIDEwOiBjYXNlIDgyMzI6IGNhc2UgODIzMzpcbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgIGlmICh0aGlzJDEub3B0aW9ucy5sb2NhdGlvbnMpIHtcbiAgICAgICAgKyt0aGlzJDEuY3VyTGluZTtcbiAgICAgICAgdGhpcyQxLmxpbmVTdGFydCA9IHRoaXMkMS5wb3M7XG4gICAgICB9XG4gICAgICBicmVha1xuICAgIGNhc2UgNDc6XG4gICAgICBzd2l0Y2ggKHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MgKyAxKSkge1xuICAgICAgY2FzZSA0MjpcbiAgICAgICAgdGhpcyQxLnNraXBCbG9ja0NvbW1lbnQoKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgNDc6XG4gICAgICAgIHRoaXMkMS5za2lwTGluZUNvbW1lbnQoMik7XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhayBsb29wXG4gICAgICB9XG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAoY2ggPiA4ICYmIGNoIDwgMTQgfHwgY2ggPj0gNTc2MCAmJiBub25BU0NJSXdoaXRlc3BhY2UudGVzdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKSkpIHtcbiAgICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWsgbG9vcFxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuXG5wcCQ4LmZpbmlzaFRva2VuID0gZnVuY3Rpb24odHlwZSwgdmFsKSB7XG4gIHRoaXMuZW5kID0gdGhpcy5wb3M7XG4gIGlmICh0aGlzLm9wdGlvbnMubG9jYXRpb25zKSB7IHRoaXMuZW5kTG9jID0gdGhpcy5jdXJQb3NpdGlvbigpOyB9XG4gIHZhciBwcmV2VHlwZSA9IHRoaXMudHlwZTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy52YWx1ZSA9IHZhbDtcblxuICB0aGlzLnVwZGF0ZUNvbnRleHQocHJldlR5cGUpO1xufTtcblxuXG5wcCQ4LnJlYWRUb2tlbl9kb3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgaWYgKG5leHQgPj0gNDggJiYgbmV4dCA8PSA1NykgeyByZXR1cm4gdGhpcy5yZWFkTnVtYmVyKHRydWUpIH1cbiAgdmFyIG5leHQyID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMik7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiBuZXh0ID09PSA0NiAmJiBuZXh0MiA9PT0gNDYpIHtcbiAgICB0aGlzLnBvcyArPSAzO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmVsbGlwc2lzKVxuICB9IGVsc2Uge1xuICAgICsrdGhpcy5wb3M7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZG90KVxuICB9XG59O1xuXG5wcCQ4LnJlYWRUb2tlbl9zbGFzaCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICBpZiAodGhpcy5leHByQWxsb3dlZCkgeyArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5yZWFkUmVnZXhwKCkgfVxuICBpZiAobmV4dCA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYXNzaWduLCAyKSB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLnNsYXNoLCAxKVxufTtcblxucHAkOC5yZWFkVG9rZW5fbXVsdF9tb2R1bG9fZXhwID0gZnVuY3Rpb24oY29kZSkge1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICB2YXIgc2l6ZSA9IDE7XG4gIHZhciB0b2tlbnR5cGUgPSBjb2RlID09PSA0MiA/IHR5cGVzLnN0YXIgOiB0eXBlcy5tb2R1bG87XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA3ICYmIG5leHQgPT09IDQyKSB7XG4gICAgKytzaXplO1xuICAgIHRva2VudHlwZSA9IHR5cGVzLnN0YXJzdGFyO1xuICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKTtcbiAgfVxuXG4gIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIHNpemUgKyAxKSB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKHRva2VudHlwZSwgc2l6ZSlcbn07XG5cbnBwJDgucmVhZFRva2VuX3BpcGVfYW1wID0gZnVuY3Rpb24oY29kZSkge1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICBpZiAobmV4dCA9PT0gY29kZSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSAxMjQgPyB0eXBlcy5sb2dpY2FsT1IgOiB0eXBlcy5sb2dpY2FsQU5ELCAyKSB9XG4gIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AoY29kZSA9PT0gMTI0ID8gdHlwZXMuYml0d2lzZU9SIDogdHlwZXMuYml0d2lzZUFORCwgMSlcbn07XG5cbnBwJDgucmVhZFRva2VuX2NhcmV0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYml0d2lzZVhPUiwgMSlcbn07XG5cbnBwJDgucmVhZFRva2VuX3BsdXNfbWluID0gZnVuY3Rpb24oY29kZSkge1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICBpZiAobmV4dCA9PT0gY29kZSkge1xuICAgIGlmIChuZXh0ID09IDQ1ICYmICF0aGlzLmluTW9kdWxlICYmIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpID09IDYyICYmXG4gICAgICAgICh0aGlzLmxhc3RUb2tFbmQgPT09IDAgfHwgbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMucG9zKSkpKSB7XG4gICAgICB0aGlzLnNraXBMaW5lQ29tbWVudCgzKTtcbiAgICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW4oKVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5pbmNEZWMsIDIpXG4gIH1cbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5wbHVzTWluLCAxKVxufTtcblxucHAkOC5yZWFkVG9rZW5fbHRfZ3QgPSBmdW5jdGlvbihjb2RlKSB7XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIHZhciBzaXplID0gMTtcbiAgaWYgKG5leHQgPT09IGNvZGUpIHtcbiAgICBzaXplID0gY29kZSA9PT0gNjIgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYyID8gMyA6IDI7XG4gICAgaWYgKHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIHNpemUpID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIHNpemUgKyAxKSB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYml0U2hpZnQsIHNpemUpXG4gIH1cbiAgaWYgKG5leHQgPT0gMzMgJiYgY29kZSA9PSA2MCAmJiAhdGhpcy5pbk1vZHVsZSAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PSA0NSAmJlxuICAgICAgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMykgPT0gNDUpIHtcbiAgICB0aGlzLnNraXBMaW5lQ29tbWVudCg0KTtcbiAgICB0aGlzLnNraXBTcGFjZSgpO1xuICAgIHJldHVybiB0aGlzLm5leHRUb2tlbigpXG4gIH1cbiAgaWYgKG5leHQgPT09IDYxKSB7IHNpemUgPSAyOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLnJlbGF0aW9uYWwsIHNpemUpXG59O1xuXG5wcCQ4LnJlYWRUb2tlbl9lcV9leGNsID0gZnVuY3Rpb24oY29kZSkge1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICBpZiAobmV4dCA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuZXF1YWxpdHksIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpID09PSA2MSA/IDMgOiAyKSB9XG4gIGlmIChjb2RlID09PSA2MSAmJiBuZXh0ID09PSA2MiAmJiB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIHRoaXMucG9zICs9IDI7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYXJyb3cpXG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AoY29kZSA9PT0gNjEgPyB0eXBlcy5lcSA6IHR5cGVzLnByZWZpeCwgMSlcbn07XG5cbnBwJDguZ2V0VG9rZW5Gcm9tQ29kZSA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgc3dpdGNoIChjb2RlKSB7XG4gIGNhc2UgNDY6XG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2RvdCgpXG5cbiAgY2FzZSA0MDogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMucGFyZW5MKVxuICBjYXNlIDQxOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5wYXJlblIpXG4gIGNhc2UgNTk6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnNlbWkpXG4gIGNhc2UgNDQ6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmNvbW1hKVxuICBjYXNlIDkxOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5icmFja2V0TClcbiAgY2FzZSA5MzogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYnJhY2tldFIpXG4gIGNhc2UgMTIzOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5icmFjZUwpXG4gIGNhc2UgMTI1OiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5icmFjZVIpXG4gIGNhc2UgNTg6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmNvbG9uKVxuICBjYXNlIDYzOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5xdWVzdGlvbilcblxuICBjYXNlIDk2OlxuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2KSB7IGJyZWFrIH1cbiAgICArK3RoaXMucG9zO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmJhY2tRdW90ZSlcblxuICBjYXNlIDQ4OlxuICAgIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gICAgaWYgKG5leHQgPT09IDEyMCB8fCBuZXh0ID09PSA4OCkgeyByZXR1cm4gdGhpcy5yZWFkUmFkaXhOdW1iZXIoMTYpIH1cbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICAgIGlmIChuZXh0ID09PSAxMTEgfHwgbmV4dCA9PT0gNzkpIHsgcmV0dXJuIHRoaXMucmVhZFJhZGl4TnVtYmVyKDgpIH1cbiAgICAgIGlmIChuZXh0ID09PSA5OCB8fCBuZXh0ID09PSA2NikgeyByZXR1cm4gdGhpcy5yZWFkUmFkaXhOdW1iZXIoMikgfVxuICAgIH1cbiAgY2FzZSA0OTogY2FzZSA1MDogY2FzZSA1MTogY2FzZSA1MjogY2FzZSA1MzogY2FzZSA1NDogY2FzZSA1NTogY2FzZSA1NjogY2FzZSA1NzpcbiAgICByZXR1cm4gdGhpcy5yZWFkTnVtYmVyKGZhbHNlKVxuXG4gIGNhc2UgMzQ6IGNhc2UgMzk6XG4gICAgcmV0dXJuIHRoaXMucmVhZFN0cmluZyhjb2RlKVxuXG5cbiAgY2FzZSA0NzpcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fc2xhc2goKVxuXG4gIGNhc2UgMzc6IGNhc2UgNDI6XG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX211bHRfbW9kdWxvX2V4cChjb2RlKVxuXG4gIGNhc2UgMTI0OiBjYXNlIDM4OlxuICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9waXBlX2FtcChjb2RlKVxuXG4gIGNhc2UgOTQ6XG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2NhcmV0KClcblxuICBjYXNlIDQzOiBjYXNlIDQ1OlxuICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9wbHVzX21pbihjb2RlKVxuXG4gIGNhc2UgNjA6IGNhc2UgNjI6XG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX2x0X2d0KGNvZGUpXG5cbiAgY2FzZSA2MTogY2FzZSAzMzpcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZXFfZXhjbChjb2RlKVxuXG4gIGNhc2UgMTI2OlxuICAgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLnByZWZpeCwgMSlcbiAgfVxuXG4gIHRoaXMucmFpc2UodGhpcy5wb3MsIFwiVW5leHBlY3RlZCBjaGFyYWN0ZXIgJ1wiICsgY29kZVBvaW50VG9TdHJpbmcoY29kZSkgKyBcIidcIik7XG59O1xuXG5wcCQ4LmZpbmlzaE9wID0gZnVuY3Rpb24odHlwZSwgc2l6ZSkge1xuICB2YXIgc3RyID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgKyBzaXplKTtcbiAgdGhpcy5wb3MgKz0gc2l6ZTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgc3RyKVxufTtcblxuXG5mdW5jdGlvbiB0cnlDcmVhdGVSZWdleHAoc3JjLCBmbGFncywgdGhyb3dFcnJvckF0LCBwYXJzZXIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChzcmMsIGZsYWdzKVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRocm93RXJyb3JBdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoZSBpbnN0YW5jZW9mIFN5bnRheEVycm9yKSB7IHBhcnNlci5yYWlzZSh0aHJvd0Vycm9yQXQsIFwiRXJyb3IgcGFyc2luZyByZWd1bGFyIGV4cHJlc3Npb246IFwiICsgZS5tZXNzYWdlKTsgfVxuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfVxufVxuXG52YXIgcmVnZXhwVW5pY29kZVN1cHBvcnQgPSAhIXRyeUNyZWF0ZVJlZ2V4cChcIlxcdWZmZmZcIiwgXCJ1XCIpO1xuXG5wcCQ4LnJlYWRSZWdleHAgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGVzY2FwZWQsIGluQ2xhc3MsIHN0YXJ0ID0gdGhpcy5wb3M7XG4gIGZvciAoOzspIHtcbiAgICBpZiAodGhpcyQxLnBvcyA+PSB0aGlzJDEuaW5wdXQubGVuZ3RoKSB7IHRoaXMkMS5yYWlzZShzdGFydCwgXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpOyB9XG4gICAgdmFyIGNoID0gdGhpcyQxLmlucHV0LmNoYXJBdCh0aGlzJDEucG9zKTtcbiAgICBpZiAobGluZUJyZWFrLnRlc3QoY2gpKSB7IHRoaXMkMS5yYWlzZShzdGFydCwgXCJVbnRlcm1pbmF0ZWQgcmVndWxhciBleHByZXNzaW9uXCIpOyB9XG4gICAgaWYgKCFlc2NhcGVkKSB7XG4gICAgICBpZiAoY2ggPT09IFwiW1wiKSB7IGluQ2xhc3MgPSB0cnVlOyB9XG4gICAgICBlbHNlIGlmIChjaCA9PT0gXCJdXCIgJiYgaW5DbGFzcykgeyBpbkNsYXNzID0gZmFsc2U7IH1cbiAgICAgIGVsc2UgaWYgKGNoID09PSBcIi9cIiAmJiAhaW5DbGFzcykgeyBicmVhayB9XG4gICAgICBlc2NhcGVkID0gY2ggPT09IFwiXFxcXFwiO1xuICAgIH0gZWxzZSB7IGVzY2FwZWQgPSBmYWxzZTsgfVxuICAgICsrdGhpcyQxLnBvcztcbiAgfVxuICB2YXIgY29udGVudCA9IHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKTtcbiAgKyt0aGlzLnBvcztcbiAgdmFyIG1vZHMgPSB0aGlzLnJlYWRXb3JkMSgpO1xuICB2YXIgdG1wID0gY29udGVudCwgdG1wRmxhZ3MgPSBcIlwiO1xuICBpZiAobW9kcykge1xuICAgIHZhciB2YWxpZEZsYWdzID0gL15bZ2ltXSokLztcbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHsgdmFsaWRGbGFncyA9IC9eW2dpbXV5XSokLzsgfVxuICAgIGlmICghdmFsaWRGbGFncy50ZXN0KG1vZHMpKSB7IHRoaXMucmFpc2Uoc3RhcnQsIFwiSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb24gZmxhZ1wiKTsgfVxuICAgIGlmIChtb2RzLmluZGV4T2YoXCJ1XCIpID49IDApIHtcbiAgICAgIGlmIChyZWdleHBVbmljb2RlU3VwcG9ydCkge1xuICAgICAgICB0bXBGbGFncyA9IFwidVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG1wID0gdG1wLnJlcGxhY2UoL1xcXFx1XFx7KFswLTlhLWZBLUZdKylcXH0vZywgZnVuY3Rpb24gKF9tYXRjaCwgY29kZSwgb2Zmc2V0KSB7XG4gICAgICAgICAgY29kZSA9IE51bWJlcihcIjB4XCIgKyBjb2RlKTtcbiAgICAgICAgICBpZiAoY29kZSA+IDB4MTBGRkZGKSB7IHRoaXMkMS5yYWlzZShzdGFydCArIG9mZnNldCArIDMsIFwiQ29kZSBwb2ludCBvdXQgb2YgYm91bmRzXCIpOyB9XG4gICAgICAgICAgcmV0dXJuIFwieFwiXG4gICAgICAgIH0pO1xuICAgICAgICB0bXAgPSB0bXAucmVwbGFjZSgvXFxcXHUoW2EtZkEtRjAtOV17NH0pfFtcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZywgXCJ4XCIpO1xuICAgICAgICB0bXBGbGFncyA9IHRtcEZsYWdzLnJlcGxhY2UoXCJ1XCIsIFwiXCIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICB2YXIgdmFsdWUgPSBudWxsO1xuICBpZiAoIWlzUmhpbm8pIHtcbiAgICB0cnlDcmVhdGVSZWdleHAodG1wLCB0bXBGbGFncywgc3RhcnQsIHRoaXMpO1xuICAgIHZhbHVlID0gdHJ5Q3JlYXRlUmVnZXhwKGNvbnRlbnQsIG1vZHMpO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnJlZ2V4cCwge3BhdHRlcm46IGNvbnRlbnQsIGZsYWdzOiBtb2RzLCB2YWx1ZTogdmFsdWV9KVxufTtcblxuXG5wcCQ4LnJlYWRJbnQgPSBmdW5jdGlvbihyYWRpeCwgbGVuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBzdGFydCA9IHRoaXMucG9zLCB0b3RhbCA9IDA7XG4gIGZvciAodmFyIGkgPSAwLCBlID0gbGVuID09IG51bGwgPyBJbmZpbml0eSA6IGxlbjsgaSA8IGU7ICsraSkge1xuICAgIHZhciBjb2RlID0gdGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyksIHZhbCA9ICh2b2lkIDApO1xuICAgIGlmIChjb2RlID49IDk3KSB7IHZhbCA9IGNvZGUgLSA5NyArIDEwOyB9XG4gICAgZWxzZSBpZiAoY29kZSA+PSA2NSkgeyB2YWwgPSBjb2RlIC0gNjUgKyAxMDsgfVxuICAgIGVsc2UgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NykgeyB2YWwgPSBjb2RlIC0gNDg7IH1cbiAgICBlbHNlIHsgdmFsID0gSW5maW5pdHk7IH1cbiAgICBpZiAodmFsID49IHJhZGl4KSB7IGJyZWFrIH1cbiAgICArK3RoaXMkMS5wb3M7XG4gICAgdG90YWwgPSB0b3RhbCAqIHJhZGl4ICsgdmFsO1xuICB9XG4gIGlmICh0aGlzLnBvcyA9PT0gc3RhcnQgfHwgbGVuICE9IG51bGwgJiYgdGhpcy5wb3MgLSBzdGFydCAhPT0gbGVuKSB7IHJldHVybiBudWxsIH1cblxuICByZXR1cm4gdG90YWxcbn07XG5cbnBwJDgucmVhZFJhZGl4TnVtYmVyID0gZnVuY3Rpb24ocmFkaXgpIHtcbiAgdGhpcy5wb3MgKz0gMjtcbiAgdmFyIHZhbCA9IHRoaXMucmVhZEludChyYWRpeCk7XG4gIGlmICh2YWwgPT0gbnVsbCkgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQgKyAyLCBcIkV4cGVjdGVkIG51bWJlciBpbiByYWRpeCBcIiArIHJhZGl4KTsgfVxuICBpZiAoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSkgeyB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIklkZW50aWZpZXIgZGlyZWN0bHkgYWZ0ZXIgbnVtYmVyXCIpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLm51bSwgdmFsKVxufTtcblxuXG5wcCQ4LnJlYWROdW1iZXIgPSBmdW5jdGlvbihzdGFydHNXaXRoRG90KSB7XG4gIHZhciBzdGFydCA9IHRoaXMucG9zLCBpc0Zsb2F0ID0gZmFsc2UsIG9jdGFsID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKSA9PT0gNDg7XG4gIGlmICghc3RhcnRzV2l0aERvdCAmJiB0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB7IHRoaXMucmFpc2Uoc3RhcnQsIFwiSW52YWxpZCBudW1iZXJcIik7IH1cbiAgaWYgKG9jdGFsICYmIHRoaXMucG9zID09IHN0YXJ0ICsgMSkgeyBvY3RhbCA9IGZhbHNlOyB9XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgaWYgKG5leHQgPT09IDQ2ICYmICFvY3RhbCkge1xuICAgICsrdGhpcy5wb3M7XG4gICAgdGhpcy5yZWFkSW50KDEwKTtcbiAgICBpc0Zsb2F0ID0gdHJ1ZTtcbiAgICBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgfVxuICBpZiAoKG5leHQgPT09IDY5IHx8IG5leHQgPT09IDEwMSkgJiYgIW9jdGFsKSB7XG4gICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKTtcbiAgICBpZiAobmV4dCA9PT0gNDMgfHwgbmV4dCA9PT0gNDUpIHsgKyt0aGlzLnBvczsgfVxuICAgIGlmICh0aGlzLnJlYWRJbnQoMTApID09PSBudWxsKSB7IHRoaXMucmFpc2Uoc3RhcnQsIFwiSW52YWxpZCBudW1iZXJcIik7IH1cbiAgICBpc0Zsb2F0ID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNJZGVudGlmaWVyU3RhcnQodGhpcy5mdWxsQ2hhckNvZGVBdFBvcygpKSkgeyB0aGlzLnJhaXNlKHRoaXMucG9zLCBcIklkZW50aWZpZXIgZGlyZWN0bHkgYWZ0ZXIgbnVtYmVyXCIpOyB9XG5cbiAgdmFyIHN0ciA9IHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIHRoaXMucG9zKSwgdmFsO1xuICBpZiAoaXNGbG9hdCkgeyB2YWwgPSBwYXJzZUZsb2F0KHN0cik7IH1cbiAgZWxzZSBpZiAoIW9jdGFsIHx8IHN0ci5sZW5ndGggPT09IDEpIHsgdmFsID0gcGFyc2VJbnQoc3RyLCAxMCk7IH1cbiAgZWxzZSBpZiAodGhpcy5zdHJpY3QpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTsgfVxuICBlbHNlIGlmICgvWzg5XS8udGVzdChzdHIpKSB7IHZhbCA9IHBhcnNlSW50KHN0ciwgMTApOyB9XG4gIGVsc2UgeyB2YWwgPSBwYXJzZUludChzdHIsIDgpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLm51bSwgdmFsKVxufTtcblxuXG5wcCQ4LnJlYWRDb2RlUG9pbnQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKSwgY29kZTtcblxuICBpZiAoY2ggPT09IDEyMykge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2KSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgdmFyIGNvZGVQb3MgPSArK3RoaXMucG9zO1xuICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKHRoaXMuaW5wdXQuaW5kZXhPZihcIn1cIiwgdGhpcy5wb3MpIC0gdGhpcy5wb3MpO1xuICAgICsrdGhpcy5wb3M7XG4gICAgaWYgKGNvZGUgPiAweDEwRkZGRikgeyB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihjb2RlUG9zLCBcIkNvZGUgcG9pbnQgb3V0IG9mIGJvdW5kc1wiKTsgfVxuICB9IGVsc2Uge1xuICAgIGNvZGUgPSB0aGlzLnJlYWRIZXhDaGFyKDQpO1xuICB9XG4gIHJldHVybiBjb2RlXG59O1xuXG5mdW5jdGlvbiBjb2RlUG9pbnRUb1N0cmluZyhjb2RlKSB7XG4gIGlmIChjb2RlIDw9IDB4RkZGRikgeyByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSB9XG4gIGNvZGUgLT0gMHgxMDAwMDtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoKGNvZGUgPj4gMTApICsgMHhEODAwLCAoY29kZSAmIDEwMjMpICsgMHhEQzAwKVxufVxuXG5wcCQ4LnJlYWRTdHJpbmcgPSBmdW5jdGlvbihxdW90ZSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3V0ID0gXCJcIiwgY2h1bmtTdGFydCA9ICsrdGhpcy5wb3M7XG4gIGZvciAoOzspIHtcbiAgICBpZiAodGhpcyQxLnBvcyA+PSB0aGlzJDEuaW5wdXQubGVuZ3RoKSB7IHRoaXMkMS5yYWlzZSh0aGlzJDEuc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHN0cmluZyBjb25zdGFudFwiKTsgfVxuICAgIHZhciBjaCA9IHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpO1xuICAgIGlmIChjaCA9PT0gcXVvdGUpIHsgYnJlYWsgfVxuICAgIGlmIChjaCA9PT0gOTIpIHtcbiAgICAgIG91dCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcyk7XG4gICAgICBvdXQgKz0gdGhpcyQxLnJlYWRFc2NhcGVkQ2hhcihmYWxzZSk7XG4gICAgICBjaHVua1N0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzTmV3TGluZShjaCkpIHsgdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgc3RyaW5nIGNvbnN0YW50XCIpOyB9XG4gICAgICArK3RoaXMkMS5wb3M7XG4gICAgfVxuICB9XG4gIG91dCArPSB0aGlzLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMucG9zKyspO1xuICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5zdHJpbmcsIG91dClcbn07XG5cblxudmFyIElOVkFMSURfVEVNUExBVEVfRVNDQVBFX0VSUk9SID0ge307XG5cbnBwJDgudHJ5UmVhZFRlbXBsYXRlVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5pblRlbXBsYXRlRWxlbWVudCA9IHRydWU7XG4gIHRyeSB7XG4gICAgdGhpcy5yZWFkVG1wbFRva2VuKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgPT09IElOVkFMSURfVEVNUExBVEVfRVNDQVBFX0VSUk9SKSB7XG4gICAgICB0aGlzLnJlYWRJbnZhbGlkVGVtcGxhdGVUb2tlbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cblxuICB0aGlzLmluVGVtcGxhdGVFbGVtZW50ID0gZmFsc2U7XG59O1xuXG5wcCQ4LmludmFsaWRTdHJpbmdUb2tlbiA9IGZ1bmN0aW9uKHBvc2l0aW9uLCBtZXNzYWdlKSB7XG4gIGlmICh0aGlzLmluVGVtcGxhdGVFbGVtZW50ICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA5KSB7XG4gICAgdGhyb3cgSU5WQUxJRF9URU1QTEFURV9FU0NBUEVfRVJST1JcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnJhaXNlKHBvc2l0aW9uLCBtZXNzYWdlKTtcbiAgfVxufTtcblxucHAkOC5yZWFkVG1wbFRva2VuID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvdXQgPSBcIlwiLCBjaHVua1N0YXJ0ID0gdGhpcy5wb3M7XG4gIGZvciAoOzspIHtcbiAgICBpZiAodGhpcyQxLnBvcyA+PSB0aGlzJDEuaW5wdXQubGVuZ3RoKSB7IHRoaXMkMS5yYWlzZSh0aGlzJDEuc3RhcnQsIFwiVW50ZXJtaW5hdGVkIHRlbXBsYXRlXCIpOyB9XG4gICAgdmFyIGNoID0gdGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyk7XG4gICAgaWYgKGNoID09PSA5NiB8fCBjaCA9PT0gMzYgJiYgdGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyArIDEpID09PSAxMjMpIHtcbiAgICAgIGlmICh0aGlzJDEucG9zID09PSB0aGlzJDEuc3RhcnQgJiYgKHRoaXMkMS50eXBlID09PSB0eXBlcy50ZW1wbGF0ZSB8fCB0aGlzJDEudHlwZSA9PT0gdHlwZXMuaW52YWxpZFRlbXBsYXRlKSkge1xuICAgICAgICBpZiAoY2ggPT09IDM2KSB7XG4gICAgICAgICAgdGhpcyQxLnBvcyArPSAyO1xuICAgICAgICAgIHJldHVybiB0aGlzJDEuZmluaXNoVG9rZW4odHlwZXMuZG9sbGFyQnJhY2VMKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgICAgICByZXR1cm4gdGhpcyQxLmZpbmlzaFRva2VuKHR5cGVzLmJhY2tRdW90ZSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0ICs9IHRoaXMkMS5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzJDEucG9zKTtcbiAgICAgIHJldHVybiB0aGlzJDEuZmluaXNoVG9rZW4odHlwZXMudGVtcGxhdGUsIG91dClcbiAgICB9XG4gICAgaWYgKGNoID09PSA5Mikge1xuICAgICAgb3V0ICs9IHRoaXMkMS5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzJDEucG9zKTtcbiAgICAgIG91dCArPSB0aGlzJDEucmVhZEVzY2FwZWRDaGFyKHRydWUpO1xuICAgICAgY2h1bmtTdGFydCA9IHRoaXMkMS5wb3M7XG4gICAgfSBlbHNlIGlmIChpc05ld0xpbmUoY2gpKSB7XG4gICAgICBvdXQgKz0gdGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMkMS5wb3MpO1xuICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgc3dpdGNoIChjaCkge1xuICAgICAgY2FzZSAxMzpcbiAgICAgICAgaWYgKHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MpID09PSAxMCkgeyArK3RoaXMkMS5wb3M7IH1cbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIG91dCArPSBcIlxcblwiO1xuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgb3V0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMkMS5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgICArK3RoaXMkMS5jdXJMaW5lO1xuICAgICAgICB0aGlzJDEubGluZVN0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICAgIH1cbiAgICAgIGNodW5rU3RhcnQgPSB0aGlzJDEucG9zO1xuICAgIH0gZWxzZSB7XG4gICAgICArK3RoaXMkMS5wb3M7XG4gICAgfVxuICB9XG59O1xuXG5wcCQ4LnJlYWRJbnZhbGlkVGVtcGxhdGVUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBmb3IgKDsgdGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aDsgdGhpcy5wb3MrKykge1xuICAgIHN3aXRjaCAodGhpcyQxLmlucHV0W3RoaXMkMS5wb3NdKSB7XG4gICAgY2FzZSBcIlxcXFxcIjpcbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgIGJyZWFrXG5cbiAgICBjYXNlIFwiJFwiOlxuICAgICAgaWYgKHRoaXMkMS5pbnB1dFt0aGlzJDEucG9zICsgMV0gIT09IFwie1wiKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICBjYXNlIFwiYFwiOlxuICAgICAgcmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0eXBlcy5pbnZhbGlkVGVtcGxhdGUsIHRoaXMkMS5pbnB1dC5zbGljZSh0aGlzJDEuc3RhcnQsIHRoaXMkMS5wb3MpKVxuXG4gICAgfVxuICB9XG4gIHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgdGVtcGxhdGVcIik7XG59O1xuXG5cbnBwJDgucmVhZEVzY2FwZWRDaGFyID0gZnVuY3Rpb24oaW5UZW1wbGF0ZSkge1xuICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzLnBvcyk7XG4gICsrdGhpcy5wb3M7XG4gIHN3aXRjaCAoY2gpIHtcbiAgY2FzZSAxMTA6IHJldHVybiBcIlxcblwiXG4gIGNhc2UgMTE0OiByZXR1cm4gXCJcXHJcIlxuICBjYXNlIDEyMDogcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkSGV4Q2hhcigyKSlcbiAgY2FzZSAxMTc6IHJldHVybiBjb2RlUG9pbnRUb1N0cmluZyh0aGlzLnJlYWRDb2RlUG9pbnQoKSlcbiAgY2FzZSAxMTY6IHJldHVybiBcIlxcdFwiXG4gIGNhc2UgOTg6IHJldHVybiBcIlxcYlwiXG4gIGNhc2UgMTE4OiByZXR1cm4gXCJcXHUwMDBiXCJcbiAgY2FzZSAxMDI6IHJldHVybiBcIlxcZlwiXG4gIGNhc2UgMTM6IGlmICh0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSAxMCkgeyArK3RoaXMucG9zOyB9XG4gIGNhc2UgMTA6XG4gICAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHsgdGhpcy5saW5lU3RhcnQgPSB0aGlzLnBvczsgKyt0aGlzLmN1ckxpbmU7IH1cbiAgICByZXR1cm4gXCJcIlxuICBkZWZhdWx0OlxuICAgIGlmIChjaCA+PSA0OCAmJiBjaCA8PSA1NSkge1xuICAgICAgdmFyIG9jdGFsU3RyID0gdGhpcy5pbnB1dC5zdWJzdHIodGhpcy5wb3MgLSAxLCAzKS5tYXRjaCgvXlswLTddKy8pWzBdO1xuICAgICAgdmFyIG9jdGFsID0gcGFyc2VJbnQob2N0YWxTdHIsIDgpO1xuICAgICAgaWYgKG9jdGFsID4gMjU1KSB7XG4gICAgICAgIG9jdGFsU3RyID0gb2N0YWxTdHIuc2xpY2UoMCwgLTEpO1xuICAgICAgICBvY3RhbCA9IHBhcnNlSW50KG9jdGFsU3RyLCA4KTtcbiAgICAgIH1cbiAgICAgIGlmIChvY3RhbFN0ciAhPT0gXCIwXCIgJiYgKHRoaXMuc3RyaWN0IHx8IGluVGVtcGxhdGUpKSB7XG4gICAgICAgIHRoaXMuaW52YWxpZFN0cmluZ1Rva2VuKHRoaXMucG9zIC0gMiwgXCJPY3RhbCBsaXRlcmFsIGluIHN0cmljdCBtb2RlXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5wb3MgKz0gb2N0YWxTdHIubGVuZ3RoIC0gMTtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG9jdGFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaClcbiAgfVxufTtcblxuXG5wcCQ4LnJlYWRIZXhDaGFyID0gZnVuY3Rpb24obGVuKSB7XG4gIHZhciBjb2RlUG9zID0gdGhpcy5wb3M7XG4gIHZhciBuID0gdGhpcy5yZWFkSW50KDE2LCBsZW4pO1xuICBpZiAobiA9PT0gbnVsbCkgeyB0aGlzLmludmFsaWRTdHJpbmdUb2tlbihjb2RlUG9zLCBcIkJhZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlXCIpOyB9XG4gIHJldHVybiBuXG59O1xuXG5cbnBwJDgucmVhZFdvcmQxID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuY29udGFpbnNFc2MgPSBmYWxzZTtcbiAgdmFyIHdvcmQgPSBcIlwiLCBmaXJzdCA9IHRydWUsIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgdmFyIGFzdHJhbCA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2O1xuICB3aGlsZSAodGhpcy5wb3MgPCB0aGlzLmlucHV0Lmxlbmd0aCkge1xuICAgIHZhciBjaCA9IHRoaXMkMS5mdWxsQ2hhckNvZGVBdFBvcygpO1xuICAgIGlmIChpc0lkZW50aWZpZXJDaGFyKGNoLCBhc3RyYWwpKSB7XG4gICAgICB0aGlzJDEucG9zICs9IGNoIDw9IDB4ZmZmZiA/IDEgOiAyO1xuICAgIH0gZWxzZSBpZiAoY2ggPT09IDkyKSB7XG4gICAgICB0aGlzJDEuY29udGFpbnNFc2MgPSB0cnVlO1xuICAgICAgd29yZCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcyk7XG4gICAgICB2YXIgZXNjU3RhcnQgPSB0aGlzJDEucG9zO1xuICAgICAgaWYgKHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcyQxLnBvcykgIT0gMTE3KVxuICAgICAgICB7IHRoaXMkMS5pbnZhbGlkU3RyaW5nVG9rZW4odGhpcyQxLnBvcywgXCJFeHBlY3RpbmcgVW5pY29kZSBlc2NhcGUgc2VxdWVuY2UgXFxcXHVYWFhYXCIpOyB9XG4gICAgICArK3RoaXMkMS5wb3M7XG4gICAgICB2YXIgZXNjID0gdGhpcyQxLnJlYWRDb2RlUG9pbnQoKTtcbiAgICAgIGlmICghKGZpcnN0ID8gaXNJZGVudGlmaWVyU3RhcnQgOiBpc0lkZW50aWZpZXJDaGFyKShlc2MsIGFzdHJhbCkpXG4gICAgICAgIHsgdGhpcyQxLmludmFsaWRTdHJpbmdUb2tlbihlc2NTdGFydCwgXCJJbnZhbGlkIFVuaWNvZGUgZXNjYXBlXCIpOyB9XG4gICAgICB3b3JkICs9IGNvZGVQb2ludFRvU3RyaW5nKGVzYyk7XG4gICAgICBjaHVua1N0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgZmlyc3QgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gd29yZCArIHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpXG59O1xuXG5cbnBwJDgucmVhZFdvcmQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdvcmQgPSB0aGlzLnJlYWRXb3JkMSgpO1xuICB2YXIgdHlwZSA9IHR5cGVzLm5hbWU7XG4gIGlmICh0aGlzLmtleXdvcmRzLnRlc3Qod29yZCkpIHtcbiAgICBpZiAodGhpcy5jb250YWluc0VzYykgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJFc2NhcGUgc2VxdWVuY2UgaW4ga2V5d29yZCBcIiArIHdvcmQpOyB9XG4gICAgdHlwZSA9IGtleXdvcmRzJDFbd29yZF07XG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZSwgd29yZClcbn07XG5cblxudmFyIHZlcnNpb24gPSBcIjUuMS4yXCI7XG5cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBQYXJzZXIob3B0aW9ucywgaW5wdXQpLnBhcnNlKClcbn1cblxuXG5mdW5jdGlvbiBwYXJzZUV4cHJlc3Npb25BdChpbnB1dCwgcG9zLCBvcHRpb25zKSB7XG4gIHZhciBwID0gbmV3IFBhcnNlcihvcHRpb25zLCBpbnB1dCwgcG9zKTtcbiAgcC5uZXh0VG9rZW4oKTtcbiAgcmV0dXJuIHAucGFyc2VFeHByZXNzaW9uKClcbn1cblxuXG5mdW5jdGlvbiB0b2tlbml6ZXIoaW5wdXQsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBQYXJzZXIob3B0aW9ucywgaW5wdXQpXG59XG5cbmZ1bmN0aW9uIGFkZExvb3NlRXhwb3J0cyhwYXJzZSwgUGFyc2VyJCQxLCBwbHVnaW5zJCQxKSB7XG4gIGV4cG9ydHMucGFyc2VfZGFtbWl0ID0gcGFyc2U7XG4gIGV4cG9ydHMuTG9vc2VQYXJzZXIgPSBQYXJzZXIkJDE7XG4gIGV4cG9ydHMucGx1Z2luc0xvb3NlID0gcGx1Z2lucyQkMTtcbn1cblxuZXhwb3J0cy52ZXJzaW9uID0gdmVyc2lvbjtcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbmV4cG9ydHMucGFyc2VFeHByZXNzaW9uQXQgPSBwYXJzZUV4cHJlc3Npb25BdDtcbmV4cG9ydHMudG9rZW5pemVyID0gdG9rZW5pemVyO1xuZXhwb3J0cy5hZGRMb29zZUV4cG9ydHMgPSBhZGRMb29zZUV4cG9ydHM7XG5leHBvcnRzLlBhcnNlciA9IFBhcnNlcjtcbmV4cG9ydHMucGx1Z2lucyA9IHBsdWdpbnM7XG5leHBvcnRzLmRlZmF1bHRPcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG5leHBvcnRzLlBvc2l0aW9uID0gUG9zaXRpb247XG5leHBvcnRzLlNvdXJjZUxvY2F0aW9uID0gU291cmNlTG9jYXRpb247XG5leHBvcnRzLmdldExpbmVJbmZvID0gZ2V0TGluZUluZm87XG5leHBvcnRzLk5vZGUgPSBOb2RlO1xuZXhwb3J0cy5Ub2tlblR5cGUgPSBUb2tlblR5cGU7XG5leHBvcnRzLnRva1R5cGVzID0gdHlwZXM7XG5leHBvcnRzLmtleXdvcmRUeXBlcyA9IGtleXdvcmRzJDE7XG5leHBvcnRzLlRva0NvbnRleHQgPSBUb2tDb250ZXh0O1xuZXhwb3J0cy50b2tDb250ZXh0cyA9IHR5cGVzJDE7XG5leHBvcnRzLmlzSWRlbnRpZmllckNoYXIgPSBpc0lkZW50aWZpZXJDaGFyO1xuZXhwb3J0cy5pc0lkZW50aWZpZXJTdGFydCA9IGlzSWRlbnRpZmllclN0YXJ0O1xuZXhwb3J0cy5Ub2tlbiA9IFRva2VuO1xuZXhwb3J0cy5pc05ld0xpbmUgPSBpc05ld0xpbmU7XG5leHBvcnRzLmxpbmVCcmVhayA9IGxpbmVCcmVhaztcbmV4cG9ydHMubGluZUJyZWFrRyA9IGxpbmVCcmVha0c7XG5leHBvcnRzLm5vbkFTQ0lJd2hpdGVzcGFjZSA9IG5vbkFTQ0lJd2hpdGVzcGFjZTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcblxufSkpKTtcblxufSx7fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuXG59LHt9XX0se30sWzI1XSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGdwdSA9IG5ldyBHUFUoKTtcblxudmFyIGZpbGVzID0gW1wibW9kZWxzXCIsIFwicGVcIiwgXCJjcmVcIl07XG5cbmNvbnN0IERhdGEgPSB7fTtcblxudmFyIFBhcnRpZXMsIFJpZGluZ3MsIFBhcnRpZXNJLCBSaWRpbmdzSTtcblxudmFyIFNsb3Blc0EsIEludGVyY2VwdHNBO1xuXG52YXIgUmVzO1xuXG52YXIgUG9wdWxhclZvdGVzID0ge1xuICBcIkxpYmVyYWxcIjogNDAuMCxcbiAgXCJDb25zZXJ2YXRpdmVcIjogMzAuMCxcbiAgXCJOZXcgRGVtb2NyYXRpY1wiOiAyMC4wLFxuICBcIkdyZWVuXCI6IDUuMCxcbiAgXCJCbG9jIFF1w6liw6ljb2lzXCI6IDUuMCxcbn07XG5cbmZ1bmN0aW9uIFBJKGksIHgpIHsgcmV0dXJuIFBhcnRpZXNbaV07IH1cblxuZnVuY3Rpb24gUkkoaSwgeCkgeyByZXR1cm4gUmlkaW5nc1tpXTsgfVxuXG5mdW5jdGlvbiBvYmpfZnJvbV9hcnIoa2V5cywgYXJyKSB7XG4gIGNvbnN0IHJlcyA9IHt9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIHJlc1trZXlzW2ldXSA9IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBES1IoeHMpIHsgcmV0dXJuIG9ial9mcm9tX2FycihSaWRpbmdzLCB4cyk7IH1cbmZ1bmN0aW9uIERLUCh4cykgeyByZXR1cm4gb2JqX2Zyb21fYXJyKFBhcnRpZXMsIHhzKTsgfVxuZnVuY3Rpb24gRFZQKHhzKSB7IHJldHVybiB4cy5tYXAoUEkpOyB9XG5cbmZ1bmN0aW9uIEVLUChQVikgeyByZXR1cm4gYXJyX2Zyb21fb2JqKFBhcnRpZXNJLCBQVik7IH1cblxuZnVuY3Rpb24gYXJyX2Zyb21fb2JqKGluZGljZXMsIG9iaikge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgZm9yICh2YXIgayBpbiBvYmopIHtcbiAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGspKSB7XG4gICAgICBhcnJbaW5kaWNlc1trXV0gPSBvYmpba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cblxuZnVuY3Rpb24gaW52ZXJ0KHhzKSB7XG5cdGNvbnN0IHJlcyA9IHt9O1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG5cdFx0cmVzW3hzW2ldXSA9IGk7XG5cdH1cblx0cmV0dXJuIHJlcztcbn1cblxuZnVuY3Rpb24gYnlfcmlkaW5nX3BhcnR5KHJpZGluZ19pZHMsIHBhcnR5X25hbWVzLCB4cykge1xuXHRjb25zdCBtYXAgPSB7fTtcblx0Y29uc3QgTiA9IHhzLmxlbmd0aDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBOOyBpKyspIHtcblx0XHRjb25zdCByID0gcmlkaW5nX2lkc1tpXTtcblx0XHRpZiAoIShyIGluIG1hcCkpIHtcblx0XHRcdG1hcFtyXSA9IHt9O1xuXHRcdH1cblxuXHRcdG1hcFtyXVtwYXJ0eV9uYW1lc1tpXV0gPSB4c1tpXTtcblx0fVxuXG5cdHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHJwX3RvX2FycmF5MmQobWFwLCB2MCkge1xuXHRjb25zdCBhcnIgPSBbXTtcblx0Y29uc3QgUiA9IE9iamVjdC5rZXlzKFJpZGluZ3MpLmxlbmd0aDtcblx0Y29uc3QgUCA9IE9iamVjdC5rZXlzKFBhcnRpZXMpLmxlbmd0aDtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBSOyBpKyspIHtcblx0XHRhcnJbaV0gPSBbXTtcblx0XHR2YXIgbSA9IG1hcFtSaWRpbmdzW2ldXSB8fCB7fTtcblx0XHRmb3IgKHZhciBqID0gMDsgaiA8IFA7IGorKykge1xuXHRcdFx0Y29uc3QgdmFsID0gbVtQYXJ0aWVzW2pdXTtcblx0XHRcdGFycltpXS5wdXNoKHZhbCA9PT0gdW5kZWZpbmVkID8gdjAgOiB2YWwpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYXJyO1xufVxuXG4vLyBldmFsdWF0ZSBhdCBzd2luZyBtb2RlbCBhdCBQVj1QVitpKmRQVjEraipkUFYyIGFuZCBnZXQgc2VhdFxuLy8gY291bnQgZm9yIHBhcnR5IGtcbmZ1bmN0aW9uIGV2YWx1YXRlTWFwKFxuICAvKiBQICovIHB2cyxcbiAgLyogUCAqLyBkcHZ4LFxuICAvKiBQICovIGRwdnksXG4gIC8qIFIqUCAqLyBzbG9wZXMsXG4gIC8qIFIqUCAqLyBpbnRlcmNlcHRzLFxuICBwKSB7XG4gIC8vY29uc3QgcCA9IHRoaXMudGhyZWFkLno7XG4gIHZhciBjb3VudCA9IDA7XG4gIGZvciAodmFyIHIgPSAwOyByIDwgdGhpcy5jb25zdGFudHMuUjsgcisrKSB7XG4gICAgdmFyIGJlc3RJID0gMDtcbiAgICB2YXIgYmVzdEUgPSAtMTAwLjA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbnN0YW50cy5QOyBpKyspIHtcbiAgICAgIHZhciBwdiA9ICh0aGlzLmNvbnN0YW50cy54MCArIHRoaXMudGhyZWFkLnggKiB0aGlzLmNvbnN0YW50cy5keCkgKiBkcHZ4W2ldICtcbiAgICAgICAgKHRoaXMuY29uc3RhbnRzLnkwICsgdGhpcy50aHJlYWQueSAqIHRoaXMuY29uc3RhbnRzLmR5KSAqIGRwdnlbaV0gK1xuICAgICAgICBwdnNbaV07XG5cbiAgICAgIHZhciBldiA9IHB2ICogc2xvcGVzW3JdW2ldICsgaW50ZXJjZXB0c1tyXVtpXTtcbiAgICAgIGNvbnN0IHMgPSBzdGVwKGJlc3RFLCBldik7XG4gICAgICBjb25zdCBzMSA9IHN0ZXAoZXYsIGJlc3RFKTtcbiAgICAgIGJlc3RJID0gczEgKiBiZXN0SSArIHMgKiBpO1xuICAgICAgYmVzdEUgPSBzMSAqIGJlc3RFICsgcyAqIGV2O1xuICAgICAgLy9pZiAocyA+IDAgLypldiA+IGJlc3RFKi8pIHtcbiAgICAgIC8vICBiZXN0SSA9IGk7XG4gICAgICAvLyAgYmVzdEUgPSBldjtcbiAgICAgIC8vfVxuICAgIH1cblxuICAgIGlmIChiZXN0SSA9PT0gcCkgY291bnQrKztcbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5cbnZhciBLID0ge1xuICBldmFsdWF0ZU1hcDogZ3B1LmNyZWF0ZUtlcm5lbChldmFsdWF0ZU1hcCksXG5cbiAgcmVuZGVyOiBmdW5jdGlvbihOWCwgTlksIGNvbnN0YW50cykge1xuICAgIGNvbnN0IGtlcm5lbCA9IGdwdS5jcmVhdGVLZXJuZWwoZnVuY3Rpb24oXG4gICAgICAgIC8qIFAgKi8gcHZzLFxuICAgICAgICAvKiBQICovIGRwdngsXG4gICAgICAgIC8qIFAgKi8gZHB2eSxcbiAgICAgICAgLyogUipQICovIHNsb3BlcyxcbiAgICAgICAgLyogUipQICovIGludGVyY2VwdHMpIHtcbiAgICAgIGNvbnN0IEwgPSAoMS4wICogZXZhbHVhdGVNYXAocHZzLCBkcHZ4LCBkcHZ5LCBzbG9wZXMsIGludGVyY2VwdHMsIDMpKSAvIDMzOC4wO1xuICAgICAgY29uc3QgTiA9ICgxLjAgKiBldmFsdWF0ZU1hcChwdnMsIGRwdngsIGRwdnksIHNsb3BlcywgaW50ZXJjZXB0cywgNCkpIC8gMzM4LjA7XG4gICAgICBjb25zdCBDID0gKDEuMCAqIGV2YWx1YXRlTWFwKHB2cywgZHB2eCwgZHB2eSwgc2xvcGVzLCBpbnRlcmNlcHRzLCAxKSkgLyAzMzguMDtcblxuICAgICAgdmFyIGsgPSAwLjA7XG4gICAgICBpZiAoTCA+IE4gJiYgTCA+IEMpIHtcbiAgICAgICAgaWYgKEwgPCAwLjUpIGsgPSAwLjI7XG4gICAgICAgIHRoaXMuY29sb3IoMSwgaywgayk7XG4gICAgICB9IGVsc2UgaWYgKE4gPiBMICYmIE4gPiBDKSB7XG4gICAgICAgIGlmIChOIDwgMC41KSBrID0gMC4yO1xuICAgICAgICB0aGlzLmNvbG9yKDEsIDAuNSArIGssIGspO1xuICAgICAgfSBlbHNlIGlmIChDID4gTCAmJiBDID4gTikge1xuICAgICAgICBpZiAoQyA8IDAuNSkgayA9IDAuMjtcbiAgICAgICAgdGhpcy5jb2xvcihrLCBrLCAwLjc1KTtcbiAgICAgIH0gZWxzZSBpZiAoTCA9PT0gTiAmJiBMID09PSBDKSB7XG4gICAgICAgIHRoaXMuY29sb3IoMSwgMSwgMSk7XG4gICAgICB9IGVsc2UgaWYgKEwgPT09IE4gJiYgTCAhPT0gQykge1xuICAgICAgICB0aGlzLmNvbG9yKDAuNSwgMC41LCAwKTtcbiAgICAgIH0gZWxzZSBpZiAoTCA9PT0gQyAmJiBMICE9PSBOKSB7XG4gICAgICAgIHRoaXMuY29sb3IoMC41LCAwLCAwLjUpO1xuICAgICAgfSBlbHNlIGlmIChOID09PSBDICYmIE4gIT09IEwpIHtcbiAgICAgICAgdGhpcy5jb2xvcigwLjIsIDAuNSwgMC41KTtcbiAgICAgIH1cbiAgICAgIC8vdGhpcy5jb2xvcihMLCBOLCBDKTtcbiAgICB9LFxuICAgIHtcbiAgICAgIGNvbnN0YW50czogY29uc3RhbnRzLFxuICAgICAgb3V0cHV0OiBbTlgsIE5ZXSxcbiAgICAgIGRpbWVuc2lvbnM6IFtOWCwgTlldLFxuICAgICAgZ3JhcGhpY2FsOiB0cnVlLFxuICAgICAgZGVidWc6IGZhbHNlLFxuICAgICAgb3V0cHV0VG9UZXh0dXJlOiB0cnVlLFxuICAgICAgZnVuY3Rpb25zOiBbZXZhbHVhdGVNYXBdXG4gICAgfVxuXG4gICAgKTtcbiAgICAvL2tlcm5lbC5zZXRHcmFwaGljYWwodHJ1ZSk7XG5cbiAgICByZXR1cm4ga2VybmVsO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdGFydCgpIHtcblx0Y29uc3QgcGUgPSBEYXRhLnBlLCBtb2RlbHMgPSBEYXRhLm1vZGVscywgY3JlID0gRGF0YS5jcmU7XG5cblx0UGFydGllc0kgPSBpbnZlcnQoUGFydGllcyA9IF8udW5pcShwZS5wYXJ0eV9uYW1lKSk7XG5cdFJpZGluZ3NJID0gaW52ZXJ0KFJpZGluZ3MgPSBfLnVuaXEobW9kZWxzLnJpZGluZ19pZCkpO1xuXG5cdGNvbnN0IE4gPSBtb2RlbHMuc2xvcGUubGVuZ3RoO1xuXG5cdFNsb3Blc0EgPSBycF90b19hcnJheTJkKGJ5X3JpZGluZ19wYXJ0eShcbiAgICBtb2RlbHMucmlkaW5nX2lkLCBtb2RlbHMucGFydHlfbmFtZSwgbW9kZWxzLnNsb3BlKSwgMC4wKTtcblx0SW50ZXJjZXB0c0EgPSBycF90b19hcnJheTJkKGJ5X3JpZGluZ19wYXJ0eShcbiAgICBtb2RlbHMucmlkaW5nX2lkLCBtb2RlbHMucGFydHlfbmFtZSwgbW9kZWxzLmludGVyY2VwdCksIC0xMDAuMCk7XG5cbiAgY29uc3QgTlggPSA2MDAsIE5ZID0gNjAwO1xuICBjb25zdCBjb25zdGFudHMgPSB7XG4gICAgeDA6IC0zMC4wLCBkeDogNjAuMCAvIE5YLFxuICAgIHkwOiAtMzAuMCwgZHk6IDYwLjAgLyBOWSxcbiAgICBOWDogTlgsXG4gICAgTlk6IE5ZLFxuICAgIFA6IFBhcnRpZXMubGVuZ3RoLFxuICAgIFI6IFJpZGluZ3MubGVuZ3RoLFxuICAgIE46IE5cbiAgfTtcbiAgLy9jb25zdCBlbSA9IEsuZXZhbHVhdGVNYXA7XG4gIC8vZW0uc2V0Q29uc3RhbnRzKGNvbnN0YW50cyk7XG4gIC8vZW0uc2V0T3V0cHV0KFtOWCwgTlksIFBhcnRpZXMubGVuZ3RoXSk7XG4gIC8vY29uc3QgUFYgPSBFS1AoUG9wdWxhclZvdGVzKTtcbiAgLy8oUmVzID0gREtQKEsuZXZhbHVhdGVNYXAoXG4gIC8vICAvL1s1LjAsIDMwLjAsIDUuMCwgNDAuMCwgMjAuMF0sXG4gIC8vICBbNS4wLCAzMC4wLCA1LjAsIDMwLjAsIDMwLjBdLFxuICAvLyAgWzAuMCwgMC4wLCAwLjAsIC0xLjAsIDEuMF0sXG4gIC8vICBbMC4wLCAtMS4wLCAwLjAsIDEuMCwgMC4wXSxcbiAgLy8gIFNsb3Blc0EsXG4gIC8vICBJbnRlcmNlcHRzQVxuICAvLykpKTtcblxuICBjb25zdCByZW5kZXIgPSBLLnJlbmRlcihOWCwgTlksIGNvbnN0YW50cyk7XG4gIC8vcmVuZGVyLnNldE91dHB1dChbTlgsIE5ZXSkuc2V0R3JhcGhpY2FsKHRydWUpO1xuICBjb25zdCBjYW52YXMgPSByZW5kZXIuZ2V0Q2FudmFzKCk7XG4gIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkZXInKVswXS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgY29uc3QgdDAgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAocmVuZGVyKFxuICAgICAgWzUuMCwgMzAuMCwgNS4wLCAzMC4wLCAzMC4wXSxcbiAgICAgIFswLjAsIDAuMCwgMC4wLCAtMS4wLCAxLjBdLFxuICAgICAgWzAuMCwgLTEuMCwgMC4wLCAxLjAsIDAuMF0sXG4gICAgICBTbG9wZXNBLFxuICAgICAgSW50ZXJjZXB0c0FcbiAgICApKTtcbiAgICBjb25zdCB0MSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGNvbnNvbGUubG9nKFwiYWZ0ZXJcIiwgdDEgLSB0MCk7XG4gICAgLy9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZHJhdyk7XG4gIH1cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpO1xuXG5cbiAgaWYgKGZhbHNlKSB7XG4gICAgY29uc3QgZXZhbHVhdGUgPSBncHUuY3JlYXRlS2VybmVsKGZ1bmN0aW9uIGV2YWx1YXRlKHB2cywgc2xvcGVzLCBpbnRlcmNlcHRzKSB7XG4gICAgICB2YXIgYmVzdEkgPSAwO1xuICAgICAgdmFyIGJlc3RFID0gLTEwMC4wO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmNvbnN0YW50cy5QOyBpKyspIHtcbiAgICAgICAgdmFyIGV2ID0gcHZzW2ldICogc2xvcGVzW3RoaXMudGhyZWFkLnhdW2ldICsgaW50ZXJjZXB0c1t0aGlzLnRocmVhZC54XVtpXTtcbiAgICAgICAgaWYgKGV2ID4gYmVzdEUpIHtcbiAgICAgICAgICBiZXN0SSA9IGk7XG4gICAgICAgICAgYmVzdEUgPSBldjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJlc3RJO1xuICAgIH0sIHtcbiAgICAgIGNvbnN0YW50czogeyBQOiBQYXJ0aWVzLmxlbmd0aCwgTjogTiB9LFxuICAgICAgb3V0cHV0OiBbTl1cbiAgICB9KTtcblxuICAgIGNvbnN0IGMgPSBldmFsdWF0ZShQViwgU2xvcGVzQSwgSW50ZXJjZXB0c0EpO1xuICAgIC8vY29uc3QgcmVzdWx0cyA9IERLUihEVlAoQXJyYXkuZnJvbShjKSkpO1xuICAgIC8vUmVzID0gcmVzdWx0cztcbiAgICBjb25zb2xlLmxvZyhyZXN1bHRzKTtcbiAgICBjb25zb2xlLmxvZyhfLm1hcFZhbHVlcyhcImxlbmd0aFwiLCBfLmdyb3VwQnkoXy5pZGVudGl0eSwgXy52YWx1ZXMoUmVzKSkpKTtcbiAgfVxufVxuXG4kLndoZW4uYXBwbHkodGhpcywgZmlsZXMubWFwKGZ1bmN0aW9uKG5hbWUpIHtcblx0cmV0dXJuICQuZ2V0SlNPTihcImRhdGEvXCIrbmFtZStcIi5qc29uXCIsIGZ1bmN0aW9uKHJlcykgeyBEYXRhW25hbWVdID0gcmVzOyB9KTtcbn0pKS50aGVuKHN0YXJ0KTtcbiJdfQ==
