/**
 * gpu.js
 * http://gpu.rocks/
 *
 * GPU Accelerated JavaScript
 *
 * @version 1.0.0-rc.1
 * @date Tue Oct 17 2017 23:41:29 GMT-0700 (PDT)
 *
 * @license MIT
 * The MIT License
 *
 * Copyright (c) 2017 gpu.js Team
 */
"use strict";

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function e(t, n, r) {
	function s(o, u) {
		if (!n[o]) {
			if (!t[o]) {
				var a = typeof require == "function" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error("Cannot find module '" + o + "'");throw f.code = "MODULE_NOT_FOUND", f;
			}var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {
				var n = t[o][1][e];return s(n ? n : e);
			}, l, l.exports, e, t, n, r);
		}return n[o].exports;
	}var i = typeof require == "function" && require;for (var o = 0; o < r.length; o++) {
		s(r[o]);
	}return s;
})({ 1: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var FunctionBuilderBase = require('../function-builder-base');
		var CPUFunctionNode = require('./function-node');

		module.exports = function (_FunctionBuilderBase) {
			_inherits(CPUFunctionBuilder, _FunctionBuilderBase);

			function CPUFunctionBuilder() {
				_classCallCheck(this, CPUFunctionBuilder);

				var _this = _possibleConstructorReturn(this, (CPUFunctionBuilder.__proto__ || Object.getPrototypeOf(CPUFunctionBuilder)).call(this));

				_this.Node = CPUFunctionNode;
				return _this;
			}

			_createClass(CPUFunctionBuilder, [{
				key: 'polyfillStandardFunctions',
				value: function polyfillStandardFunctions() {}
			}]);

			return CPUFunctionBuilder;
		}(FunctionBuilderBase);
	}, { "../function-builder-base": 6, "./function-node": 2 }], 2: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var BaseFunctionNode = require('../function-node-base');
		var utils = require('../../core/utils');

		module.exports = function (_BaseFunctionNode) {
			_inherits(CPUFunctionNode, _BaseFunctionNode);

			function CPUFunctionNode() {
				_classCallCheck(this, CPUFunctionNode);

				return _possibleConstructorReturn(this, (CPUFunctionNode.__proto__ || Object.getPrototypeOf(CPUFunctionNode)).apply(this, arguments));
			}

			_createClass(CPUFunctionNode, [{
				key: 'generate',
				value: function generate() {
					if (this.debug) {
						console.log(this);
					}
					this.functionStringArray = this.astGeneric(this.getJsAST(), [], this);
					this.functionString = this.functionStringArray.join('').trim();
					return this.functionString;
				}

			}, {
				key: 'getFunctionPrototypeString',
				value: function getFunctionPrototypeString() {
					if (this.webGlFunctionPrototypeString) {
						return this.webGlFunctionPrototypeString;
					}
					return this.webGlFunctionPrototypeString = this.generate();
				}

			}, {
				key: 'astGeneric',
				value: function astGeneric(ast, retArr, funcParam) {
					if (ast === null) {
						throw this.astErrorOutput('NULL ast', ast, funcParam);
					} else {
						if (Array.isArray(ast)) {
							for (var i = 0; i < ast.length; i++) {
								this.astGeneric(ast[i], retArr, funcParam);
							}
							return retArr;
						}

						switch (ast.type) {
							case 'FunctionDeclaration':
								return this.astFunctionDeclaration(ast, retArr, funcParam);
							case 'FunctionExpression':
								return this.astFunctionExpression(ast, retArr, funcParam);
							case 'ReturnStatement':
								return this.astReturnStatement(ast, retArr, funcParam);
							case 'Literal':
								return this.astLiteral(ast, retArr, funcParam);
							case 'BinaryExpression':
								return this.astBinaryExpression(ast, retArr, funcParam);
							case 'Identifier':
								return this.astIdentifierExpression(ast, retArr, funcParam);
							case 'AssignmentExpression':
								return this.astAssignmentExpression(ast, retArr, funcParam);
							case 'ExpressionStatement':
								return this.astExpressionStatement(ast, retArr, funcParam);
							case 'EmptyStatement':
								return this.astEmptyStatement(ast, retArr, funcParam);
							case 'BlockStatement':
								return this.astBlockStatement(ast, retArr, funcParam);
							case 'IfStatement':
								return this.astIfStatement(ast, retArr, funcParam);
							case 'BreakStatement':
								return this.astBreakStatement(ast, retArr, funcParam);
							case 'ContinueStatement':
								return this.astContinueStatement(ast, retArr, funcParam);
							case 'ForStatement':
								return this.astForStatement(ast, retArr, funcParam);
							case 'WhileStatement':
								return this.astWhileStatement(ast, retArr, funcParam);
							case 'VariableDeclaration':
								return this.astVariableDeclaration(ast, retArr, funcParam);
							case 'VariableDeclarator':
								return this.astVariableDeclarator(ast, retArr, funcParam);
							case 'ThisExpression':
								return this.astThisExpression(ast, retArr, funcParam);
							case 'SequenceExpression':
								return this.astSequenceExpression(ast, retArr, funcParam);
							case 'UnaryExpression':
								return this.astUnaryExpression(ast, retArr, funcParam);
							case 'UpdateExpression':
								return this.astUpdateExpression(ast, retArr, funcParam);
							case 'LogicalExpression':
								return this.astLogicalExpression(ast, retArr, funcParam);
							case 'MemberExpression':
								return this.astMemberExpression(ast, retArr, funcParam);
							case 'CallExpression':
								return this.astCallExpression(ast, retArr, funcParam);
							case 'ArrayExpression':
								return this.astArrayExpression(ast, retArr, funcParam);
						}

						throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast, funcParam);
					}
				}

			}, {
				key: 'astFunctionDeclaration',
				value: function astFunctionDeclaration(ast, retArr, funcParam) {
					if (this.addFunction) {
						this.addFunction(null, utils.getAstString(this.jsFunctionString, ast));
					}
					return retArr;
				}

			}, {
				key: 'astFunctionExpression',

				value: function astFunctionExpression(ast, retArr, funcParam) {

					if (!funcParam.isRootKernel) {
						retArr.push('function');
						funcParam.kernalAst = ast;
						retArr.push(' ');
						retArr.push(funcParam.functionName);
						retArr.push('(');

						for (var i = 0; i < funcParam.paramNames.length; ++i) {
							var paramName = funcParam.paramNames[i];

							if (i > 0) {
								retArr.push(', ');
							}

							retArr.push(' ');
							retArr.push('user_');
							retArr.push(paramName);
						}

						retArr.push(') {\n');
					}

					for (var _i = 0; _i < ast.body.body.length; ++_i) {
						this.astGeneric(ast.body.body[_i], retArr, funcParam);
						retArr.push('\n');
					}

					if (!funcParam.isRootKernel) {
						retArr.push('}\n');
					}
					return retArr;
				}

			}, {
				key: 'astReturnStatement',
				value: function astReturnStatement(ast, retArr, funcParam) {
					if (funcParam.isRootKernel) {
						retArr.push('kernelResult = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
					} else if (funcParam.isSubKernel) {
						retArr.push(funcParam.functionName + 'Result = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
						retArr.push('return ' + funcParam.functionName + 'Result;');
					} else {
						retArr.push('return ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
					}

					return retArr;
				}

			}, {
				key: 'astLiteral',
				value: function astLiteral(ast, retArr, funcParam) {

					if (isNaN(ast.value)) {
						throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast, funcParam);
					}

					retArr.push(ast.value);

					return retArr;
				}

			}, {
				key: 'astBinaryExpression',
				value: function astBinaryExpression(ast, retArr, funcParam) {
					retArr.push('(');
					this.astGeneric(ast.left, retArr, funcParam);
					retArr.push(ast.operator);
					this.astGeneric(ast.right, retArr, funcParam);
					retArr.push(')');
					return retArr;
				}

			}, {
				key: 'astIdentifierExpression',
				value: function astIdentifierExpression(idtNode, retArr, funcParam) {
					if (idtNode.type !== 'Identifier') {
						throw this.astErrorOutput('IdentifierExpression - not an Identifier', ast, funcParam);
					}

					switch (idtNode.name) {
						case 'gpu_threadX':
							retArr.push('threadId.x');
							break;
						case 'gpu_threadY':
							retArr.push('threadId.y');
							break;
						case 'gpu_threadZ':
							retArr.push('threadId.z');
							break;
						case 'gpu_outputX':
							retArr.push('uOutputDim.x');
							break;
						case 'gpu_outputY':
							retArr.push('uOutputDim.y');
							break;
						case 'gpu_outputZ':
							retArr.push('uOutputDim.z');
							break;
						default:
							if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
								retArr.push('constants_' + idtNode.name);
							} else {
								var userParamName = funcParam.getUserParamName(idtNode.name);
								if (userParamName !== null) {
									retArr.push('user_' + userParamName);
								} else {
									retArr.push('user_' + idtNode.name);
								}
							}
					}

					return retArr;
				}

			}, {
				key: 'astForStatement',
				value: function astForStatement(forNode, retArr, funcParam) {
					if (forNode.type !== 'ForStatement') {
						throw this.astErrorOutput('Invalid for statment', ast, funcParam);
					}

					if (forNode.test && forNode.test.type === 'BinaryExpression') {
						if ((forNode.test.right.type === 'Identifier' || forNode.test.right.type === 'Literal') && forNode.test.operator === '<' && this.isIdentifierConstant(forNode.test.right.name) === false) {

							if (!this.loopMaxIterations) {
								console.warn('Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.');
								console.warn('Set loopMaxIterations or use a for loop of fixed length to silence this message.');
							}

							retArr.push('for (');
							this.astGeneric(forNode.init, retArr, funcParam);
							if (retArr[retArr.length - 1] !== ';') {
								retArr.push(';');
							}
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							retArr.push('LOOP_MAX');
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');

							retArr.push('{\n');
							retArr.push('if (');
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							this.astGeneric(forNode.test.right, retArr, funcParam);
							retArr.push(') {\n');
							if (forNode.body.type === 'BlockStatement') {
								for (var i = 0; i < forNode.body.body.length; i++) {
									this.astGeneric(forNode.body.body[i], retArr, funcParam);
								}
							} else {
								this.astGeneric(forNode.body, retArr, funcParam);
							}
							retArr.push('} else {\n');
							retArr.push('break;\n');
							retArr.push('}\n');
							retArr.push('}\n');

							return retArr;
						} else if (forNode.init.declarations) {
							var declarations = JSON.parse(JSON.stringify(forNode.init.declarations));
							var updateArgument = forNode.update.argument;
							if (!Array.isArray(declarations) || declarations.length < 1) {
								console.log(this.jsFunctionString);
								throw new Error('Error: Incompatible for loop declaration');
							}

							if (declarations.length > 1) {
								var initArgument = null;
								for (var _i2 = 0; _i2 < declarations.length; _i2++) {
									var declaration = declarations[_i2];
									if (declaration.id.name === updateArgument.name) {
										initArgument = declaration;
										declarations.splice(_i2, 1);
									} else {
										retArr.push('var ');
										this.astGeneric(declaration, retArr, funcParam);
										retArr.push(';');
									}
								}

								retArr.push('for (let ');
								this.astGeneric(initArgument, retArr, funcParam);
								retArr.push(';');
							} else {
								retArr.push('for (');
								this.astGeneric(forNode.init, retArr, funcParam);
							}

							this.astGeneric(forNode.test, retArr, funcParam);
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');
							this.astGeneric(forNode.body, retArr, funcParam);
							return retArr;
						}
					}

					throw this.astErrorOutput('Invalid for statement', forNode, funcParam);
				}

			}, {
				key: 'astWhileStatement',
				value: function astWhileStatement(whileNode, retArr, funcParam) {
					if (whileNode.type !== 'WhileStatement') {
						throw this.astErrorOutput('Invalid while statment', ast, funcParam);
					}

					retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
					retArr.push('if (');
					this.astGeneric(whileNode.test, retArr, funcParam);
					retArr.push(') {\n');
					this.astGeneric(whileNode.body, retArr, funcParam);
					retArr.push('} else {\n');
					retArr.push('break;\n');
					retArr.push('}\n');
					retArr.push('}\n');

					return retArr;
				}

			}, {
				key: 'astAssignmentExpression',
				value: function astAssignmentExpression(assNode, retArr, funcParam) {
					this.astGeneric(assNode.left, retArr, funcParam);
					retArr.push(assNode.operator);
					this.astGeneric(assNode.right, retArr, funcParam);
					return retArr;
				}

			}, {
				key: 'astEmptyStatement',
				value: function astEmptyStatement(eNode, retArr, funcParam) {
					return retArr;
				}

			}, {
				key: 'astBlockStatement',
				value: function astBlockStatement(bNode, retArr, funcParam) {
					retArr.push('{\n');
					for (var i = 0; i < bNode.body.length; i++) {
						this.astGeneric(bNode.body[i], retArr, funcParam);
					}
					retArr.push('}\n');
					return retArr;
				}

			}, {
				key: 'astExpressionStatement',
				value: function astExpressionStatement(esNode, retArr, funcParam) {
					this.astGeneric(esNode.expression, retArr, funcParam);
					retArr.push(';\n');
					return retArr;
				}

			}, {
				key: 'astVariableDeclaration',
				value: function astVariableDeclaration(vardecNode, retArr, funcParam) {
					retArr.push('var ');
					for (var i = 0; i < vardecNode.declarations.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(vardecNode.declarations[i], retArr, funcParam);
					}
					retArr.push(';');
					return retArr;
				}

			}, {
				key: 'astVariableDeclarator',
				value: function astVariableDeclarator(ivardecNode, retArr, funcParam) {
					this.astGeneric(ivardecNode.id, retArr, funcParam);
					if (ivardecNode.init !== null) {
						retArr.push('=');
						this.astGeneric(ivardecNode.init, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astIfStatement',
				value: function astIfStatement(ifNode, retArr, funcParam) {
					retArr.push('if (');
					this.astGeneric(ifNode.test, retArr, funcParam);
					retArr.push(')');
					if (ifNode.consequent.type === 'BlockStatement') {
						this.astGeneric(ifNode.consequent, retArr, funcParam);
					} else {
						retArr.push(' {\n');
						this.astGeneric(ifNode.consequent, retArr, funcParam);
						retArr.push('\n}\n');
					}

					if (ifNode.alternate) {
						retArr.push('else ');
						if (ifNode.alternate.type === 'BlockStatement') {
							this.astGeneric(ifNode.alternate, retArr, funcParam);
						} else {
							retArr.push(' {\n');
							this.astGeneric(ifNode.alternate, retArr, funcParam);
							retArr.push('\n}\n');
						}
					}
					return retArr;
				}

			}, {
				key: 'astBreakStatement',
				value: function astBreakStatement(brNode, retArr, funcParam) {
					retArr.push('break;\n');
					return retArr;
				}

			}, {
				key: 'astContinueStatement',
				value: function astContinueStatement(crNode, retArr, funcParam) {
					retArr.push('continue;\n');
					return retArr;
				}

			}, {
				key: 'astLogicalExpression',
				value: function astLogicalExpression(logNode, retArr, funcParam) {
					retArr.push('(');
					this.astGeneric(logNode.left, retArr, funcParam);
					retArr.push(logNode.operator);
					this.astGeneric(logNode.right, retArr, funcParam);
					retArr.push(')');
					return retArr;
				}

			}, {
				key: 'astUpdateExpression',
				value: function astUpdateExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astUnaryExpression',
				value: function astUnaryExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astThisExpression',
				value: function astThisExpression(tNode, retArr, funcParam) {
					retArr.push('this');
					return retArr;
				}

			}, {
				key: 'astMemberExpression',
				value: function astMemberExpression(mNode, retArr, funcParam) {
					var unrolled = this.astMemberExpressionUnroll(mNode.property);
					this.astGeneric(mNode.object, retArr, funcParam);
					if (mNode.property.type === 'Identifier' && mNode.computed) {
						unrolled = 'user_' + unrolled;
					}
					if (mNode.computed) {
						retArr.push('[');
						retArr.push(unrolled);
						retArr.push(']');
					} else {
						retArr.push('.');
						retArr.push(unrolled);
					}

					return retArr;
				}
			}, {
				key: 'astSequenceExpression',
				value: function astSequenceExpression(sNode, retArr, funcParam) {
					for (var i = 0; i < sNode.expressions.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(sNode.expressions, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astMemberExpressionUnroll',
				value: function astMemberExpressionUnroll(ast, funcParam) {
					if (ast.type === 'Identifier') {
						return ast.name;
					} else if (ast.type === 'ThisExpression') {
						return 'this';
					}

					if (ast.type === 'MemberExpression') {
						if (ast.object && ast.property) {
							return this.astMemberExpressionUnroll(ast.object, funcParam) + '.' + this.astMemberExpressionUnroll(ast.property, funcParam);
						}
					}

					if (ast.type === 'Literal') {
						return ast.value;
					}

					throw this.astErrorOutput('Unknown CallExpression_unroll', ast, funcParam);
				}

			}, {
				key: 'astCallExpression',
				value: function astCallExpression(ast, retArr, funcParam) {
					if (ast.callee) {
						var funcName = this.astMemberExpressionUnroll(ast.callee);

						if (funcParam.calledFunctions.indexOf(funcName) < 0) {
							funcParam.calledFunctions.push(funcName);
						}
						if (!funcParam.hasOwnProperty('funcName')) {
							funcParam.calledFunctionsArguments[funcName] = [];
						}

						var functionArguments = [];
						funcParam.calledFunctionsArguments[funcName].push(functionArguments);

						retArr.push(funcName);

						retArr.push('(');

						for (var i = 0; i < ast.arguments.length; ++i) {
							var argument = ast.arguments[i];
							if (i > 0) {
								retArr.push(', ');
							}
							this.astGeneric(argument, retArr, funcParam);
							if (argument.type === 'Identifier') {
								var paramIndex = funcParam.paramNames.indexOf(argument.name);
								if (paramIndex === -1) {
									functionArguments.push(null);
								} else {
									functionArguments.push({
										name: argument.name,
										type: funcParam.paramTypes[paramIndex]
									});
								}
							} else {
								functionArguments.push(null);
							}
						}

						retArr.push(')');

						return retArr;
					}

					throw this.astErrorOutput('Unknown CallExpression', ast, funcParam);

					return retArr;
				}

			}, {
				key: 'astArrayExpression',
				value: function astArrayExpression(arrNode, retArr, funcParam) {
					var arrLen = arrNode.elements.length;

					retArr.push('new Float32Array(');
					for (var i = 0; i < arrLen; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}
						var subNode = arrNode.elements[i];
						this.astGeneric(subNode, retArr, funcParam);
					}
					retArr.push(')');

					return retArr;
				}
			}], [{
				key: 'astFunctionPrototype',
				value: function astFunctionPrototype(ast, retArr, funcParam) {
					if (funcParam.isRootKernel || funcParam.isSubKernel) {
						return retArr;
					}

					retArr.push(funcParam.returnType);
					retArr.push(' ');
					retArr.push(funcParam.functionName);
					retArr.push('(');

					for (var i = 0; i < funcParam.paramNames.length; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}

						retArr.push(funcParam.paramTypes[i]);
						retArr.push(' ');
						retArr.push('user_');
						retArr.push(funcParam.paramNames[i]);
					}

					retArr.push(');\n');

					return retArr;
				}
			}]);

			return CPUFunctionNode;
		}(BaseFunctionNode);
	}, { "../../core/utils": 24, "../function-node-base": 7 }], 3: [function (require, module, exports) {
		'use strict';

		var utils = require('../../core/utils');
		var kernelRunShortcut = require('../kernel-run-shortcut');

		module.exports = function (cpuKernel, name) {
			return '() => {\n    ' + kernelRunShortcut.toString() + ';\n    const utils = {\n      allPropertiesOf: function ' + utils.allPropertiesOf.toString() + ',\n      clone: function ' + utils.clone.toString() + ',\n      /*splitArray: function ' + utils.splitArray.toString() + ',\n      getArgumentType: function ' + utils.getArgumentType.toString() + ',\n      getOutput: function ' + utils.getOutput.toString() + ',\n      dimToTexSize: function ' + utils.dimToTexSize.toString() + ',\n      copyFlatten: function ' + utils.copyFlatten.toString() + ',\n      flatten: function ' + utils.flatten.toString() + ',\n      systemEndianness: \'' + utils.systemEndianness() + '\',\n      initWebGl: function ' + utils.initWebGl.toString() + ',\n      isArray: function ' + utils.isArray.toString() + '*/\n    };\n    class ' + (name || 'Kernel') + ' {\n      constructor() {        \n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = ' + JSON.stringify(cpuKernel.paramNames) + ';\n        this.paramTypes = ' + JSON.stringify(cpuKernel.paramTypes) + ';\n        this.texSize = ' + JSON.stringify(cpuKernel.texSize) + ';\n        this.output = ' + JSON.stringify(cpuKernel.output) + ';\n        this._kernelString = `' + cpuKernel._kernelString + '`;\n        this.output = ' + JSON.stringify(cpuKernel.output) + ';\n\t\t    this.run = function() {\n          this.run = null;\n          this.build();\n          return this.run.apply(this, arguments);\n        }.bind(this);\n        this.thread = {\n          x: 0,\n          y: 0,\n          z: 0\n        };\n      }\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      ' + cpuKernel.build.toString() + '\n      run () { ' + cpuKernel.kernelString + ' }\n      getKernelString() { return this._kernelString; }\n    };\n    return kernelRunShortcut(new Kernel());\n  };';
		};
	}, { "../../core/utils": 24, "../kernel-run-shortcut": 9 }], 4: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var KernelBase = require('../kernel-base');
		var utils = require('../../core/utils');
		var kernelString = require('./kernel-string');

		module.exports = function (_KernelBase) {
			_inherits(CPUKernel, _KernelBase);

			function CPUKernel(fnString, settings) {
				_classCallCheck(this, CPUKernel);

				var _this = _possibleConstructorReturn(this, (CPUKernel.__proto__ || Object.getPrototypeOf(CPUKernel)).call(this, fnString, settings));

				_this._fnBody = utils.getFunctionBodyFromString(fnString);
				_this._fn = null;
				_this.run = null;
				_this._canvasCtx = null;
				_this._imageData = null;
				_this._colorData = null;
				_this._kernelString = null;
				_this.thread = {
					x: 0,
					y: 0,
					z: 0
				};

				_this.run = function () {
					this.run = null;
					this.build();
					return this.run.apply(this, arguments);
				}.bind(_this);
				return _this;
			}

			_createClass(CPUKernel, [{
				key: 'validateOptions',
				value: function validateOptions() {
					if (!this.output || this.output.length === 0) {
						if (arguments.length !== 1) {
							throw 'Auto dimensions only supported for kernels with only one input';
						}

						var argType = utils.getArgumentType(arguments[0]);
						if (argType === 'Array') {
							this.output = utils.getDimensions(argType);
						} else if (argType === 'Texture') {
							this.output = arguments[0].output;
						} else {
							throw 'Auto dimensions not supported for input type: ' + argType;
						}
					}
				}

			}, {
				key: 'build',
				value: function build() {

					var kernelArgs = [];
					for (var i = 0; i < arguments.length; i++) {
						var argType = utils.getArgumentType(arguments[i]);
						if (argType === 'Array' || argType === 'Number') {
							kernelArgs[i] = arguments[i];
						} else if (argType === 'Texture') {
							kernelArgs[i] = arguments[i].toArray();
						} else {
							throw 'Input type not supported (CPU): ' + arguments[i];
						}
					}

					var threadDim = this.threadDim = utils.clone(this.output);

					while (threadDim.length < 3) {
						threadDim.push(1);
					}

					if (this.graphical) {
						var canvas = this.getCanvas();
						canvas.width = threadDim[0];
						canvas.height = threadDim[1];
						this._canvasCtx = canvas.getContext('2d');
						this._imageData = this._canvasCtx.createImageData(threadDim[0], threadDim[1]);
						this._colorData = new Uint8ClampedArray(threadDim[0] * threadDim[1] * 4);
					}

					var kernelString = this.getKernelString();

					if (this.debug) {
						console.log('Options:');
						console.dir(this);
						console.log('Function output:');
						console.log(kernelString);
					}

					this.kernelString = kernelString;
					this.run = new Function([], kernelString).bind(this)();
				}
			}, {
				key: 'color',
				value: function color(r, g, b, a) {
					if (typeof a === 'undefined') {
						a = 1;
					}

					r = Math.floor(r * 255);
					g = Math.floor(g * 255);
					b = Math.floor(b * 255);
					a = Math.floor(a * 255);

					var width = this.output[0];
					var height = this.output[1];

					var x = this.thread.x;
					var y = height - this.thread.y - 1;

					var index = x + y * width;

					this._colorData[index * 4 + 0] = r;
					this._colorData[index * 4 + 1] = g;
					this._colorData[index * 4 + 2] = b;
					this._colorData[index * 4 + 3] = a;
				}

			}, {
				key: 'getKernelString',
				value: function getKernelString() {
					var _this2 = this;

					if (this._kernelString !== null) return this._kernelString;

					var builder = this.functionBuilder;

					var threadDim = this.threadDim || (this.threadDim = utils.clone(this.output));
					while (threadDim.length < 3) {
						threadDim.push(1);
					}

					builder.addKernel(this.fnString, {
						prototypeOnly: false,
						constants: this.constants,
						debug: this.debug,
						loopMaxIterations: this.loopMaxIterations
					}, this.paramNames, this.paramTypes);

					builder.addFunctions(this.functions);

					if (this.subKernels !== null) {
						this.subKernelOutputTextures = [];
						this.subKernelOutputVariableNames = [];
						for (var i = 0; i < this.subKernels.length; i++) {
							var subKernel = this.subKernels[i];
							builder.addSubKernel(subKernel);
							this.subKernelOutputVariableNames.push(subKernel.name + 'Result');
						}
					} else if (this.subKernelProperties !== null) {
						this.subKernelOutputVariableNames = [];
						var _i = 0;
						for (var p in this.subKernelProperties) {
							if (!this.subKernelProperties.hasOwnProperty(p)) continue;
							var _subKernel = this.subKernelProperties[p];
							builder.addSubKernel(_subKernel);
							this.subKernelOutputVariableNames.push(_subKernel.name + 'Result');
							_i++;
						}
					}

					var prototypes = builder.getPrototypes();
					var kernel = prototypes.shift();
					var kernelString = this._kernelString = '\n\t\tvar LOOP_MAX = ' + this._getLoopMaxString() + ';\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '  var ' + name + ' = null;\n';
					}).join('')) + '\n    return function (' + this.paramNames.map(function (paramName) {
						return 'user_' + paramName;
					}).join(', ') + ') {\n    var ret = new Array(' + threadDim[2] + ');\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '  ' + name + 'Z = new Array(' + threadDim[2] + ');\n';
					}).join('')) + '\n    for (this.thread.z = 0; this.thread.z < ' + threadDim[2] + '; this.thread.z++) {\n      ret[this.thread.z] = new Array(' + threadDim[1] + ');\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '    ' + name + 'Z[this.thread.z] = new Array(' + threadDim[1] + ');\n';
					}).join('')) + '\n      for (this.thread.y = 0; this.thread.y < ' + threadDim[1] + '; this.thread.y++) {\n        ret[this.thread.z][this.thread.y] = new Array(' + threadDim[0] + ');\n  ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '      ' + name + 'Z[this.thread.z][this.thread.y] = new Array(' + threadDim[0] + ');\n';
					}).join('')) + '\n        for (this.thread.x = 0; this.thread.x < ' + threadDim[0] + '; this.thread.x++) {\n          var kernelResult;\n          ' + kernel + '\n          ret[this.thread.z][this.thread.y][this.thread.x] = kernelResult;\n' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '        ' + name + 'Z[this.thread.z][this.thread.y][this.thread.x] = ' + name + ';\n';
					}).join('')) + '\n          }\n        }\n      }\n      \n      if (this.graphical) {\n        this._imageData.data.set(this._colorData);\n        this._canvasCtx.putImageData(this._imageData, 0, 0);\n        return;\n      }\n      \n      if (this.output.length === 1) {\n        ret = ret[0][0];\n' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '    ' + name + ' = ' + name + 'Z[0][0];\n';
					}).join('')) + '\n      \n    } else if (this.output.length === 2) {\n      ret = ret[0];\n      ' + (this.subKernelOutputVariableNames === null ? '' : this.subKernelOutputVariableNames.map(function (name) {
						return '    ' + name + ' = ' + name + 'Z[0];\n';
					}).join('')) + '\n    }\n    \n    ' + (this.subKernelOutputVariableNames === null ? 'return ret;\n' : this.subKernels !== null ? 'var result = [\n        ' + this.subKernelOutputVariableNames.map(function (name) {
						return '' + name;
					}).join(',\n') + '\n      ];\n      result.result = ret;\n      return result;\n' : 'return {\n        result: ret,\n        ' + Object.keys(this.subKernelProperties).map(function (name, i) {
						return name + ': ' + _this2.subKernelOutputVariableNames[i];
					}).join(',\n') + '\n      };') + '\n    ' + (prototypes.length > 0 ? prototypes.join('\n') : '') + '\n    }.bind(this);';
					return kernelString;
				}

			}, {
				key: 'toString',
				value: function toString() {
					return kernelString(this);
				}

			}, {
				key: 'precompileKernelObj',
				value: function precompileKernelObj(argTypes) {

					var threadDim = this.threadDim || (this.threadDim = utils.clone(this.output));

					return {
						threadDim: threadDim
					};
				}

			}, {
				key: '_getLoopMaxString',

				value: function _getLoopMaxString() {
					return this.loopMaxIterations ? ' ' + parseInt(this.loopMaxIterations) + ';\n' : ' 1000;\n';
				}
			}], [{
				key: 'compileKernel',
				value: function compileKernel(precompileObj) {

					var threadDim = precompileObj.threadDim;

					while (threadDim.length < 3) {
						threadDim.push(1);
					}
				}
			}]);

			return CPUKernel;
		}(KernelBase);
	}, { "../../core/utils": 24, "../kernel-base": 8, "./kernel-string": 3 }], 5: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var utils = require('../../core/utils');
		var RunnerBase = require('../runner-base');
		var CPUKernel = require('./kernel');
		var CPUFunctionBuilder = require('./function-builder');

		module.exports = function (_RunnerBase) {
			_inherits(CPURunner, _RunnerBase);

			function CPURunner(settings) {
				_classCallCheck(this, CPURunner);

				var _this = _possibleConstructorReturn(this, (CPURunner.__proto__ || Object.getPrototypeOf(CPURunner)).call(this, new CPUFunctionBuilder(), settings));

				_this.Kernel = CPUKernel;
				_this.kernel = null;
				return _this;
			}

			_createClass(CPURunner, [{
				key: 'getMode',
				value: function getMode() {
					return 'cpu';
				}
			}]);

			return CPURunner;
		}(RunnerBase);
	}, { "../../core/utils": 24, "../runner-base": 10, "./function-builder": 1, "./kernel": 4 }], 6: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		module.exports = function () {

			function FunctionBuilderBase(gpu) {
				_classCallCheck(this, FunctionBuilderBase);

				this.nodeMap = {};
				this.nativeFunctions = {};
				this.gpu = gpu;
				this.rootKernel = null;
				this.Node = null;
			}

			_createClass(FunctionBuilderBase, [{
				key: 'addNativeFunction',
				value: function addNativeFunction(functionName, glslFunctionString) {
					this.nativeFunctions[functionName] = glslFunctionString;
				}

			}, {
				key: 'addFunction',
				value: function addFunction(functionName, jsFunction, paramTypes, returnType) {
					this.addFunctionNode(new this.Node(functionName, jsFunction, paramTypes, returnType).setAddFunction(this.addFunction.bind(this)));
				}
			}, {
				key: 'addFunctions',
				value: function addFunctions(functions) {
					if (functions) {
						if (Array.isArray(functions)) {
							for (var i = 0; i < functions.length; i++) {
								this.addFunction(null, functions[i]);
							}
						} else {
							for (var p in functions) {
								this.addFunction(p, functions[p]);
							}
						}
					}
				}
			}, {
				key: 'addNativeFunctions',
				value: function addNativeFunctions(nativeFunctions) {
					for (var functionName in nativeFunctions) {
						if (!nativeFunctions.hasOwnProperty(functionName)) continue;
						this.addNativeFunction(functionName, nativeFunctions[functionName]);
					}
				}

			}, {
				key: 'addFunctionNode',
				value: function addFunctionNode(inNode) {
					this.nodeMap[inNode.functionName] = inNode;
					if (inNode.isRootKernel) {
						this.rootKernel = inNode;
					}
				}

			}, {
				key: 'traceFunctionCalls',
				value: function traceFunctionCalls(functionName, retList, parent) {
					functionName = functionName || 'kernel';
					retList = retList || [];

					var fNode = this.nodeMap[functionName];
					if (fNode) {
						if (retList.indexOf(functionName) >= 0) {} else {
							retList.push(functionName);
							if (parent) {
								fNode.parent = parent;
								fNode.constants = parent.constants;
							}
							fNode.getFunctionString();
							for (var i = 0; i < fNode.calledFunctions.length; ++i) {
								this.traceFunctionCalls(fNode.calledFunctions[i], retList, fNode);
							}
						}
					}

					if (this.nativeFunctions[functionName]) {
						if (retList.indexOf(functionName) >= 0) {} else {
							retList.push(functionName);
						}
					}

					return retList;
				}

			}, {
				key: 'addKernel',
				value: function addKernel(fnString, options, paramNames, paramTypes) {
					var kernelNode = new this.Node('kernel', fnString, options, paramTypes);
					kernelNode.setAddFunction(this.addFunction.bind(this));
					kernelNode.paramNames = paramNames;
					kernelNode.paramTypes = paramTypes;
					kernelNode.isRootKernel = true;
					this.addFunctionNode(kernelNode);
					return kernelNode;
				}

			}, {
				key: 'addSubKernel',
				value: function addSubKernel(jsFunction, options, paramTypes, returnType) {
					var kernelNode = new this.Node(null, jsFunction, options, paramTypes, returnType);
					kernelNode.setAddFunction(this.addFunction.bind(this));
					kernelNode.isSubKernel = true;
					this.addFunctionNode(kernelNode);
					return kernelNode;
				}

			}, {
				key: 'getPrototypeString',
				value: function getPrototypeString(functionName) {
					return this.getPrototypes(functionName).join('\n');
				}

			}, {
				key: 'getPrototypes',
				value: function getPrototypes(functionName) {
					this.rootKernel.generate();
					if (functionName) {
						return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());
					}
					return this.getPrototypesFromFunctionNames(Object.keys(this.nodeMap));
				}

			}, {
				key: 'getStringFromFunctionNames',
				value: function getStringFromFunctionNames(functionList) {
					var ret = [];
					for (var i = 0; i < functionList.length; ++i) {
						var node = this.nodeMap[functionList[i]];
						if (node) {
							ret.push(this.nodeMap[functionList[i]].getFunctionString());
						}
					}
					return ret.join('\n');
				}

			}, {
				key: 'getPrototypesFromFunctionNames',
				value: function getPrototypesFromFunctionNames(functionList, opt) {
					var ret = [];
					for (var i = 0; i < functionList.length; ++i) {
						var functionName = functionList[i];
						var node = this.nodeMap[functionName];
						if (node) {
							ret.push(node.getFunctionPrototypeString(opt));
						} else if (this.nativeFunctions[functionName]) {
							ret.push(this.nativeFunctions[functionName]);
						}
					}
					return ret;
				}

			}, {
				key: 'getPrototypeStringFromFunctionNames',
				value: function getPrototypeStringFromFunctionNames(functionList, opt) {
					return this.getPrototypesFromFunctionNames(functionList, opt).toString();
				}

			}, {
				key: 'getString',
				value: function getString(functionName, opt) {
					if (opt === undefined) {
						opt = {};
					}

					if (functionName) {
						return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName, [], opt).reverse(), opt);
					}
					return this.getStringFromFunctionNames(Object.keys(this.nodeMap), opt);
				}
			}, {
				key: 'polyfillStandardFunctions',
				value: function polyfillStandardFunctions() {
					throw new Error('polyfillStandardFunctions not defined on base function builder');
				}
			}]);

			return FunctionBuilderBase;
		}();
	}, {}], 7: [function (require, module, exports) {
		'use strict';

		var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
			return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
		} : function (obj) {
			return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
		};

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var utils = require('../core/utils');
		var acorn = require('acorn');

		module.exports = function () {

			function BaseFunctionNode(functionName, jsFunction, options, paramTypes, returnType) {
				_classCallCheck(this, BaseFunctionNode);

				this.calledFunctions = [];
				this.calledFunctionsArguments = {};
				this.initVariables = [];
				this.readVariables = [];
				this.writeVariables = [];
				this.addFunction = null;
				this.isRootKernel = false;
				this.isSubKernel = false;
				this.parent = null;
				this.debug = null;
				this.prototypeOnly = null;
				this.constants = null;

				if (options) {
					if (options.hasOwnProperty('debug')) {
						this.debug = options.debug;
					}
					if (options.hasOwnProperty('prototypeOnly')) {
						this.prototypeOnly = options.prototypeOnly;
					}
					if (options.hasOwnProperty('constants')) {
						this.constants = options.constants;
					}
					if (options.hasOwnProperty('loopMaxIterations')) {
						this.loopMaxIterations = options.loopMaxIterations;
					}
				}

				if (!jsFunction) {
					throw 'jsFunction, parameter is missing';
				}

				this.jsFunctionString = jsFunction.toString();
				if (!utils.isFunctionString(this.jsFunctionString)) {
					console.error('jsFunction, to string conversion check failed: not a function?', this.jsFunctionString);
					throw 'jsFunction, to string conversion check failed: not a function?';
				}

				if (!utils.isFunction(jsFunction)) {
					this.jsFunction = null;
				} else {
					this.jsFunction = jsFunction;
				}

				this.functionName = functionName || jsFunction && jsFunction.name || utils.getFunctionNameFromString(this.jsFunctionString);

				if (!this.functionName) {
					throw 'jsFunction, missing name argument or value';
				}

				this.paramNames = utils.getParamNamesFromString(this.jsFunctionString);
				if (paramTypes) {
					if (Array.isArray(paramTypes)) {
						if (paramTypes.length !== this.paramNames.length) {
							throw 'Invalid argument type array length, against function length -> (' + paramTypes.length + ',' + this.paramNames.length + ')';
						}
						this.paramTypes = paramTypes;
					} else if ((typeof paramTypes === 'undefined' ? 'undefined' : _typeof(paramTypes)) === 'object') {
						var paramVariableNames = Object.keys(paramTypes);
						if (paramTypes.hasOwnProperty('returns')) {
							this.returnType = paramTypes.returns;
							paramVariableNames.splice(paramVariableNames.indexOf('returns'), 1);
						}
						if (paramVariableNames.length > 0 && paramVariableNames.length !== this.paramNames.length) {
							throw 'Invalid argument type array length, against function length -> (' + paramVariableNames.length + ',' + this.paramNames.length + ')';
						} else {
							this.paramTypes = this.paramNames.map(function (key) {
								if (paramTypes.hasOwnProperty(key)) {
									return paramTypes[key];
								} else {
									return 'float';
								}
							});
						}
					}
				} else {
					this.paramTypes = [];
				}

				if (!this.returnType) {
					this.returnType = returnType || 'float';
				}
			}

			_createClass(BaseFunctionNode, [{
				key: 'isIdentifierConstant',
				value: function isIdentifierConstant(paramName) {
					if (!this.constants) return false;
					return this.constants.hasOwnProperty(paramName);
				}
			}, {
				key: 'setAddFunction',
				value: function setAddFunction(fn) {
					this.addFunction = fn;
					return this;
				}

			}, {
				key: 'getJsFunction',
				value: function getJsFunction() {
					if (this.jsFunction) {
						return this.jsFunction;
					}

					if (this.jsFunctionString) {
						this.jsFunction = eval(this.jsFunctionString);
						return this.jsFunction;
					}

					throw 'Missing jsFunction, and jsFunctionString parameter';
				}

			}, {
				key: 'getJsAST',
				value: function getJsAST(inParser) {
					if (this.jsFunctionAST) {
						return this.jsFunctionAST;
					}

					inParser = inParser || acorn;
					if (inParser === null) {
						throw 'Missing JS to AST parser';
					}

					var ast = inParser.parse('var ' + this.functionName + ' = ' + this.jsFunctionString + ';', {
						locations: true
					});
					if (ast === null) {
						throw 'Failed to parse JS code';
					}

					var funcAST = ast.body[0].declarations[0].init;
					this.jsFunctionAST = funcAST;

					return funcAST;
				}

			}, {
				key: 'getFunctionString',
				value: function getFunctionString() {
					this.generate();
					return this.functionString;
				}

			}, {
				key: 'setFunctionString',
				value: function setFunctionString(functionString) {
					this.functionString = functionString;
				}

			}, {
				key: 'getParamType',
				value: function getParamType(paramName) {
					var paramIndex = this.paramNames.indexOf(paramName);
					if (paramIndex === -1) return null;
					if (!this.parent) return null;
					if (this.paramTypes[paramIndex]) return this.paramTypes[paramIndex];
					var calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];
					for (var i = 0; i < calledFunctionArguments.length; i++) {
						var calledFunctionArgument = calledFunctionArguments[i];
						if (calledFunctionArgument[paramIndex] !== null) {
							return this.paramTypes[paramIndex] = calledFunctionArgument[paramIndex].type;
						}
					}
					return null;
				}

			}, {
				key: 'getUserParamName',
				value: function getUserParamName(paramName) {
					var paramIndex = this.paramNames.indexOf(paramName);
					if (paramIndex === -1) return null;
					if (!this.parent) return null;
					var calledFunctionArguments = this.parent.calledFunctionsArguments[this.functionName];
					for (var i = 0; i < calledFunctionArguments.length; i++) {
						var calledFunctionArgument = calledFunctionArguments[i];
						if (calledFunctionArgument[paramIndex] !== null) {
							return calledFunctionArgument[paramIndex].name;
						}
					}
					return null;
				}
			}, {
				key: 'generate',
				value: function generate(options) {
					throw new Error('generate not defined on BaseFunctionNode');
				}

			}, {
				key: 'astErrorOutput',
				value: function astErrorOutput(error, ast, funcParam) {
					console.error(utils.getAstString(this.jsFunctionString, ast));
					console.error(error, ast, funcParam);
					return error;
				}
			}]);

			return BaseFunctionNode;
		}();
	}, { "../core/utils": 24, "acorn": 26 }], 8: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var utils = require('../core/utils');

		module.exports = function () {

			function BaseKernel(fnString, settings) {
				_classCallCheck(this, BaseKernel);

				this.paramNames = utils.getParamNamesFromString(fnString);
				this.fnString = fnString;
				this.output = null;
				this.debug = false;
				this.graphical = false;
				this.loopMaxIterations = 0;
				this.constants = null;
				this.wraparound = null;
				this.hardcodeConstants = null;
				this.outputToTexture = null;
				this.texSize = null;
				this._canvas = null;
				this._webGl = null;
				this.threadDim = null;
				this.floatTextures = null;
				this.floatOutput = null;
				this.floatOutputForce = null;
				this.addFunction = null;
				this.functions = null;
				this.nativeFunctions = null;
				this.copyData = true;
				this.subKernels = null;
				this.subKernelProperties = null;
				this.subKernelNames = null;
				this.subKernelOutputVariableNames = null;
				this.functionBuilder = null;

				for (var p in settings) {
					if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;
					this[p] = settings[p];
				}
				if (settings.hasOwnProperty('canvas')) {
					this._canvas = settings.canvas;
				}
				if (settings.hasOwnProperty('output')) {
					this.setOutput(settings.output);
				}

				if (!this._canvas) this._canvas = utils.initCanvas();
			}

			_createClass(BaseKernel, [{
				key: 'build',
				value: function build() {
					throw new Error('"build" not defined on Base');
				}
			}, {
				key: 'setAddFunction',
				value: function setAddFunction(cb) {
					this.addFunction = cb;
					return this;
				}
			}, {
				key: 'setFunctions',
				value: function setFunctions(functions) {
					this.functions = functions;
					return this;
				}

			}, {
				key: 'setOutput',
				value: function setOutput(output) {
					if (output.hasOwnProperty('x')) {
						if (output.hasOwnProperty('y')) {
							if (output.hasOwnProperty('z')) {
								this.output = [output.x, output.y, output.z];
							} else {
								this.output = [output.x, output.y];
							}
						} else {
							this.output = [output.x];
						}
					} else {
						this.output = output;
					}
					return this;
				}

			}, {
				key: 'setDebug',
				value: function setDebug(flag) {
					this.debug = flag;
					return this;
				}

			}, {
				key: 'setGraphical',
				value: function setGraphical(flag) {
					this.graphical = flag;
					return this;
				}

			}, {
				key: 'setLoopMaxIterations',
				value: function setLoopMaxIterations(max) {
					this.loopMaxIterations = max;
					return this;
				}

			}, {
				key: 'setConstants',
				value: function setConstants(constants) {
					this.constants = constants;
					return this;
				}
			}, {
				key: 'setWraparound',
				value: function setWraparound(flag) {
					console.warn('Wraparound mode is not supported and undocumented.');
					this.wraparound = flag;
					return this;
				}
			}, {
				key: 'setHardcodeConstants',
				value: function setHardcodeConstants(flag) {
					this.hardcodeConstants = flag;
					return this;
				}
			}, {
				key: 'setOutputToTexture',
				value: function setOutputToTexture(flag) {
					this.outputToTexture = flag;
					return this;
				}

			}, {
				key: 'setFloatTextures',
				value: function setFloatTextures(flag) {
					this.floatTextures = flag;
					return this;
				}

			}, {
				key: 'setFloatOutput',
				value: function setFloatOutput(flag) {
					this.floatOutput = flag;
					return this;
				}
			}, {
				key: 'setFloatOutputForce',
				value: function setFloatOutputForce(flag) {
					this.floatOutputForce = flag;
					return this;
				}

			}, {
				key: 'setCanvas',
				value: function setCanvas(canvas) {
					this._canvas = canvas;
					return this;
				}

			}, {
				key: 'setWebGl',
				value: function setWebGl(webGl) {
					this._webGl = webGl;
					return this;
				}
			}, {
				key: 'setCopyData',
				value: function setCopyData(copyData) {
					this.copyData = copyData;
					return this;
				}

			}, {
				key: 'getCanvas',
				value: function getCanvas() {
					return this._canvas;
				}

			}, {
				key: 'getWebGl',
				value: function getWebGl() {
					return this._webGl;
				}
			}, {
				key: 'validateOptions',
				value: function validateOptions() {
					throw new Error('validateOptions not defined');
				}
			}, {
				key: 'exec',
				value: function exec() {
					return this.execute.apply(this, arguments);
				}
			}, {
				key: 'execute',
				value: function execute() {
					var _this = this;

					var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);

					return utils.newPromise(function (accept, reject) {
						try {
							accept(_this.run.apply(_this, args));
						} catch (e) {
							reject(e);
						}
					});
				}

			}, {
				key: 'addSubKernel',
				value: function addSubKernel(fnString) {
					if (this.subKernels === null) {
						this.subKernels = [];
						this.subKernelNames = [];
					}
					this.subKernels.push(fnString);
					this.subKernelNames.push(utils.getFunctionNameFromString(fnString));
					return this;
				}

			}, {
				key: 'addSubKernelProperty',
				value: function addSubKernelProperty(property, fnString) {
					if (this.subKernelProperties === null) {
						this.subKernelProperties = {};
						this.subKernelNames = [];
					}
					if (this.subKernelProperties.hasOwnProperty(property)) {
						throw new Error('cannot add sub kernel ' + property + ', already defined');
					}
					this.subKernelProperties[property] = fnString;
					this.subKernelNames.push(utils.getFunctionNameFromString(fnString));
					return this;
				}
			}, {
				key: 'addNativeFunction',
				value: function addNativeFunction(name, source) {
					this.functionBuilder.addNativeFunction(name, source);
				}
			}]);

			return BaseKernel;
		}();
	}, { "../core/utils": 24 }], 9: [function (require, module, exports) {
		'use strict';

		var utils = require('../core/utils');

		module.exports = function kernelRunShortcut(kernel) {
			var shortcut = function shortcut() {
				return kernel.run.apply(kernel, arguments);
			};

			utils.allPropertiesOf(kernel).forEach(function (key) {
				if (key[0] === '_' && key[1] === '_') return;
				if (typeof kernel[key] === 'function') {
					if (key.substring(0, 3) === 'add' || key.substring(0, 3) === 'set') {
						shortcut[key] = function () {
							kernel[key].apply(kernel, arguments);
							return shortcut;
						};
					} else {
						shortcut[key] = kernel[key].bind(kernel);
					}
				} else {
					shortcut.__defineGetter__(key, function () {
						return kernel[key];
					});
					shortcut.__defineSetter__(key, function (value) {
						kernel[key] = value;
					});
				}
			});

			shortcut.kernel = kernel;

			return shortcut;
		};
	}, { "../core/utils": 24 }], 10: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var utils = require('../core/utils');
		var kernelRunShortcut = require('./kernel-run-shortcut');

		module.exports = function () {

			function BaseRunner(functionBuilder, settings) {
				_classCallCheck(this, BaseRunner);

				settings = settings || {};
				this.kernel = settings.kernel;
				this.canvas = settings.canvas;
				this.webGl = settings.webGl;
				this.fn = null;
				this.functionBuilder = functionBuilder;
				this.fnString = null;
				this.endianness = utils.systemEndianness();
				this.functionBuilder.polyfillStandardFunctions();
			}

			_createClass(BaseRunner, [{
				key: 'textureToArray',
				value: function textureToArray(texture) {
					var copy = this.createKernel(function (x) {
						return x[this.thread.z][this.thread.y][this.thread.x];
					});

					return copy(texture);
				}

			}, {
				key: 'deleteTexture',
				value: function deleteTexture(texture) {
					this.webGl.deleteTexture(texture.texture);
				}

			}, {
				key: 'buildPromiseKernel',
				value: function buildPromiseKernel() {
					throw new Error('not yet implemented');
				}
			}, {
				key: 'getMode',
				value: function getMode() {
					throw new Error('"mode" not implemented on BaseRunner');
				}

			}, {
				key: 'buildKernel',
				value: function buildKernel(fn, settings) {
					settings = Object.assign({}, settings || {});
					var fnString = fn.toString();
					if (!settings.functionBuilder) {
						settings.functionBuilder = this.functionBuilder;
					}

					if (!settings.canvas) {
						settings.canvas = this.canvas;
					}

					if (!settings.webGl) {
						settings.webGl = this.webgl;
					}

					return kernelRunShortcut(new this.Kernel(fnString, settings));
				}
			}]);

			return BaseRunner;
		}();
	}, { "../core/utils": 24, "./kernel-run-shortcut": 9 }], 11: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var FunctionBuilderBase = require('../function-builder-base');
		var WebGLFunctionNode = require('./function-node');

		module.exports = function (_FunctionBuilderBase) {
			_inherits(WebGLFunctionBuilder, _FunctionBuilderBase);

			function WebGLFunctionBuilder() {
				_classCallCheck(this, WebGLFunctionBuilder);

				var _this = _possibleConstructorReturn(this, (WebGLFunctionBuilder.__proto__ || Object.getPrototypeOf(WebGLFunctionBuilder)).call(this));

				_this.Node = WebGLFunctionNode;
				return _this;
			}

			_createClass(WebGLFunctionBuilder, [{
				key: 'polyfillStandardFunctions',

				value: function polyfillStandardFunctions() {
					this.addFunction('round', _round);
				}
			}], [{
				key: 'round',
				value: function round(a) {
					return _round(a);
				}
			}]);

			return WebGLFunctionBuilder;
		}(FunctionBuilderBase);

		function _round(a) {
			return Math.floor(a + 0.5);
		}
	}, { "../function-builder-base": 6, "./function-node": 12 }], 12: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var FunctionNodeBase = require('../function-node-base');
		var utils = require('../../core/utils');
		var jsMathPrefix = 'Math.';
		var localPrefix = 'this.';
		var constantsPrefix = 'this.constants.';

		var DECODE32_ENCODE32 = /decode32\(\s+encode32\(/g;
		var ENCODE32_DECODE32 = /encode32\(\s+decode32\(/g;

		module.exports = function (_FunctionNodeBase) {
			_inherits(WebGLFunctionNode, _FunctionNodeBase);

			function WebGLFunctionNode() {
				_classCallCheck(this, WebGLFunctionNode);

				return _possibleConstructorReturn(this, (WebGLFunctionNode.__proto__ || Object.getPrototypeOf(WebGLFunctionNode)).apply(this, arguments));
			}

			_createClass(WebGLFunctionNode, [{
				key: 'generate',
				value: function generate() {
					if (this.debug) {
						console.log(this);
					}
					if (this.prototypeOnly) {
						return WebGLFunctionNode.astFunctionPrototype(this.getJsAST(), [], this).join('').trim();
					} else {
						this.functionStringArray = this.astGeneric(this.getJsAST(), [], this);
					}
					this.functionString = webGlRegexOptimize(this.functionStringArray.join('').trim());
					return this.functionString;
				}

			}, {
				key: 'astGeneric',
				value: function astGeneric(ast, retArr, funcParam) {
					if (ast === null) {
						throw this.astErrorOutput('NULL ast', ast, funcParam);
					} else {
						if (Array.isArray(ast)) {
							for (var i = 0; i < ast.length; i++) {
								this.astGeneric(ast[i], retArr, funcParam);
							}
							return retArr;
						}

						switch (ast.type) {
							case 'FunctionDeclaration':
								return this.astFunctionDeclaration(ast, retArr, funcParam);
							case 'FunctionExpression':
								return this.astFunctionExpression(ast, retArr, funcParam);
							case 'ReturnStatement':
								return this.astReturnStatement(ast, retArr, funcParam);
							case 'Literal':
								return this.astLiteral(ast, retArr, funcParam);
							case 'BinaryExpression':
								return this.astBinaryExpression(ast, retArr, funcParam);
							case 'Identifier':
								return this.astIdentifierExpression(ast, retArr, funcParam);
							case 'AssignmentExpression':
								return this.astAssignmentExpression(ast, retArr, funcParam);
							case 'ExpressionStatement':
								return this.astExpressionStatement(ast, retArr, funcParam);
							case 'EmptyStatement':
								return this.astEmptyStatement(ast, retArr, funcParam);
							case 'BlockStatement':
								return this.astBlockStatement(ast, retArr, funcParam);
							case 'IfStatement':
								return this.astIfStatement(ast, retArr, funcParam);
							case 'BreakStatement':
								return this.astBreakStatement(ast, retArr, funcParam);
							case 'ContinueStatement':
								return this.astContinueStatement(ast, retArr, funcParam);
							case 'ForStatement':
								return this.astForStatement(ast, retArr, funcParam);
							case 'WhileStatement':
								return this.astWhileStatement(ast, retArr, funcParam);
							case 'VariableDeclaration':
								return this.astVariableDeclaration(ast, retArr, funcParam);
							case 'VariableDeclarator':
								return this.astVariableDeclarator(ast, retArr, funcParam);
							case 'ThisExpression':
								return this.astThisExpression(ast, retArr, funcParam);
							case 'SequenceExpression':
								return this.astSequenceExpression(ast, retArr, funcParam);
							case 'UnaryExpression':
								return this.astUnaryExpression(ast, retArr, funcParam);
							case 'UpdateExpression':
								return this.astUpdateExpression(ast, retArr, funcParam);
							case 'LogicalExpression':
								return this.astLogicalExpression(ast, retArr, funcParam);
							case 'MemberExpression':
								return this.astMemberExpression(ast, retArr, funcParam);
							case 'CallExpression':
								return this.astCallExpression(ast, retArr, funcParam);
							case 'ArrayExpression':
								return this.astArrayExpression(ast, retArr, funcParam);
						}

						throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast, funcParam);
					}
				}

			}, {
				key: 'astFunctionDeclaration',
				value: function astFunctionDeclaration(ast, retArr, funcParam) {
					if (this.addFunction) {
						this.addFunction(null, utils.getAstString(this.jsFunctionString, ast));
					}
					return retArr;
				}

			}, {
				key: 'astFunctionExpression',

				value: function astFunctionExpression(ast, retArr, funcParam) {

					if (funcParam.isRootKernel) {
						retArr.push('void');
						funcParam.kernalAst = ast;
					} else {
						retArr.push(funcParam.returnType);
					}
					retArr.push(' ');
					retArr.push(funcParam.functionName);
					retArr.push('(');

					if (!funcParam.isRootKernel) {
						for (var i = 0; i < funcParam.paramNames.length; ++i) {
							var paramName = funcParam.paramNames[i];

							if (i > 0) {
								retArr.push(', ');
							}
							var type = funcParam.getParamType(paramName);
							switch (type) {
								case 'Texture':
								case 'Array':
									retArr.push('sampler2D');
									break;
								default:
									retArr.push('float');
							}

							retArr.push(' ');
							retArr.push('user_');
							retArr.push(paramName);
						}
					}

					retArr.push(') {\n');

					for (var _i = 0; _i < ast.body.body.length; ++_i) {
						this.astGeneric(ast.body.body[_i], retArr, funcParam);
						retArr.push('\n');
					}

					retArr.push('}\n');
					return retArr;
				}

			}, {
				key: 'astReturnStatement',
				value: function astReturnStatement(ast, retArr, funcParam) {
					if (funcParam.isRootKernel) {
						retArr.push('kernelResult = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
						retArr.push('return;');
					} else if (funcParam.isSubKernel) {
						retArr.push(funcParam.functionName + 'Result = ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
						retArr.push('return ' + funcParam.functionName + 'Result;');
					} else {
						retArr.push('return ');
						this.astGeneric(ast.argument, retArr, funcParam);
						retArr.push(';');
					}

					return retArr;
				}

			}, {
				key: 'astLiteral',
				value: function astLiteral(ast, retArr, funcParam) {

					if (isNaN(ast.value)) {
						throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast, funcParam);
					}

					retArr.push(ast.value);

					if (Number.isInteger(ast.value)) {
						retArr.push('.0');
					}

					return retArr;
				}

			}, {
				key: 'astBinaryExpression',
				value: function astBinaryExpression(ast, retArr, funcParam) {
					retArr.push('(');

					if (ast.operator === '%') {
						retArr.push('mod(');
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push(',');
						this.astGeneric(ast.right, retArr, funcParam);
						retArr.push(')');
					} else if (ast.operator === '===') {
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push('==');
						this.astGeneric(ast.right, retArr, funcParam);
					} else if (ast.operator === '!==') {
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push('!=');
						this.astGeneric(ast.right, retArr, funcParam);
					} else {
						this.astGeneric(ast.left, retArr, funcParam);
						retArr.push(ast.operator);
						this.astGeneric(ast.right, retArr, funcParam);
					}

					retArr.push(')');

					return retArr;
				}

			}, {
				key: 'astIdentifierExpression',
				value: function astIdentifierExpression(idtNode, retArr, funcParam) {
					if (idtNode.type !== 'Identifier') {
						throw this.astErrorOutput('IdentifierExpression - not an Identifier', ast, funcParam);
					}

					switch (idtNode.name) {
						case 'gpu_threadX':
							retArr.push('threadId.x');
							break;
						case 'gpu_threadY':
							retArr.push('threadId.y');
							break;
						case 'gpu_threadZ':
							retArr.push('threadId.z');
							break;
						case 'gpu_outputX':
							retArr.push('uOutputDim.x');
							break;
						case 'gpu_outputY':
							retArr.push('uOutputDim.y');
							break;
						case 'gpu_outputZ':
							retArr.push('uOutputDim.z');
							break;
						default:
							if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
								retArr.push('constants_' + idtNode.name);
							} else {
								var userParamName = funcParam.getUserParamName(idtNode.name);
								if (userParamName !== null) {
									retArr.push('user_' + userParamName);
								} else {
									retArr.push('user_' + idtNode.name);
								}
							}
					}

					return retArr;
				}

			}, {
				key: 'astForStatement',
				value: function astForStatement(forNode, retArr, funcParam) {
					if (forNode.type !== 'ForStatement') {
						throw this.astErrorOutput('Invalid for statment', ast, funcParam);
					}

					if (forNode.test && forNode.test.type === 'BinaryExpression') {
						if (forNode.test.right.type === 'Identifier' && forNode.test.operator === '<' && this.isIdentifierConstant(forNode.test.right.name) === false) {

							if (!this.loopMaxIterations) {
								console.warn('Warning: loopMaxIterations is not set! Using default of 1000 which may result in unintended behavior.');
								console.warn('Set loopMaxIterations or use a for loop of fixed length to silence this message.');
							}

							retArr.push('for (');
							this.astGeneric(forNode.init, retArr, funcParam);
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							retArr.push('LOOP_MAX');
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');

							retArr.push('{\n');
							retArr.push('if (');
							this.astGeneric(forNode.test.left, retArr, funcParam);
							retArr.push(forNode.test.operator);
							this.astGeneric(forNode.test.right, retArr, funcParam);
							retArr.push(') {\n');
							if (forNode.body.type === 'BlockStatement') {
								for (var i = 0; i < forNode.body.body.length; i++) {
									this.astGeneric(forNode.body.body[i], retArr, funcParam);
								}
							} else {
								this.astGeneric(forNode.body, retArr, funcParam);
							}
							retArr.push('} else {\n');
							retArr.push('break;\n');
							retArr.push('}\n');
							retArr.push('}\n');

							return retArr;
						} else {
							var declarations = JSON.parse(JSON.stringify(forNode.init.declarations));
							var updateArgument = forNode.update.argument;
							if (!Array.isArray(declarations) || declarations.length < 1) {
								console.log(this.jsFunctionString);
								throw new Error('Error: Incompatible for loop declaration');
							}

							if (declarations.length > 1) {
								var initArgument = null;
								for (var _i2 = 0; _i2 < declarations.length; _i2++) {
									var declaration = declarations[_i2];
									if (declaration.id.name === updateArgument.name) {
										initArgument = declaration;
										declarations.splice(_i2, 1);
									} else {
										retArr.push('float ');
										this.astGeneric(declaration, retArr, funcParam);
										retArr.push(';');
									}
								}

								retArr.push('for (float ');
								this.astGeneric(initArgument, retArr, funcParam);
								retArr.push(';');
							} else {
								retArr.push('for (');
								this.astGeneric(forNode.init, retArr, funcParam);
							}

							this.astGeneric(forNode.test, retArr, funcParam);
							retArr.push(';');
							this.astGeneric(forNode.update, retArr, funcParam);
							retArr.push(')');
							this.astGeneric(forNode.body, retArr, funcParam);
							return retArr;
						}
					}

					throw this.astErrorOutput('Invalid for statement', ast, funcParam);
				}

			}, {
				key: 'astWhileStatement',
				value: function astWhileStatement(whileNode, retArr, funcParam) {
					if (whileNode.type !== 'WhileStatement') {
						throw this.astErrorOutput('Invalid while statment', ast, funcParam);
					}

					retArr.push('for (float i = 0.0; i < LOOP_MAX; i++) {');
					retArr.push('if (');
					this.astGeneric(whileNode.test, retArr, funcParam);
					retArr.push(') {\n');
					this.astGeneric(whileNode.body, retArr, funcParam);
					retArr.push('} else {\n');
					retArr.push('break;\n');
					retArr.push('}\n');
					retArr.push('}\n');

					return retArr;
				}

			}, {
				key: 'astAssignmentExpression',
				value: function astAssignmentExpression(assNode, retArr, funcParam) {
					if (assNode.operator === '%=') {
						this.astGeneric(assNode.left, retArr, funcParam);
						retArr.push('=');
						retArr.push('mod(');
						this.astGeneric(assNode.left, retArr, funcParam);
						retArr.push(',');
						this.astGeneric(assNode.right, retArr, funcParam);
						retArr.push(')');
					} else {
						this.astGeneric(assNode.left, retArr, funcParam);
						retArr.push(assNode.operator);
						this.astGeneric(assNode.right, retArr, funcParam);
						return retArr;
					}
				}

			}, {
				key: 'astEmptyStatement',
				value: function astEmptyStatement(eNode, retArr, funcParam) {
					return retArr;
				}

			}, {
				key: 'astBlockStatement',
				value: function astBlockStatement(bNode, retArr, funcParam) {
					retArr.push('{\n');
					for (var i = 0; i < bNode.body.length; i++) {
						this.astGeneric(bNode.body[i], retArr, funcParam);
					}
					retArr.push('}\n');
					return retArr;
				}

			}, {
				key: 'astExpressionStatement',
				value: function astExpressionStatement(esNode, retArr, funcParam) {
					this.astGeneric(esNode.expression, retArr, funcParam);
					retArr.push(';\n');
					return retArr;
				}

			}, {
				key: 'astVariableDeclaration',
				value: function astVariableDeclaration(vardecNode, retArr, funcParam) {
					retArr.push('float ');
					for (var i = 0; i < vardecNode.declarations.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(vardecNode.declarations[i], retArr, funcParam);
					}
					retArr.push(';');
					return retArr;
				}

			}, {
				key: 'astVariableDeclarator',
				value: function astVariableDeclarator(ivardecNode, retArr, funcParam) {
					this.astGeneric(ivardecNode.id, retArr, funcParam);
					if (ivardecNode.init !== null) {
						retArr.push('=');
						this.astGeneric(ivardecNode.init, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astIfStatement',
				value: function astIfStatement(ifNode, retArr, funcParam) {
					retArr.push('if (');
					this.astGeneric(ifNode.test, retArr, funcParam);
					retArr.push(')');
					if (ifNode.consequent.type === 'BlockStatement') {
						this.astGeneric(ifNode.consequent, retArr, funcParam);
					} else {
						retArr.push(' {\n');
						this.astGeneric(ifNode.consequent, retArr, funcParam);
						retArr.push('\n}\n');
					}

					if (ifNode.alternate) {
						retArr.push('else ');
						if (ifNode.alternate.type === 'BlockStatement') {
							this.astGeneric(ifNode.alternate, retArr, funcParam);
						} else {
							retArr.push(' {\n');
							this.astGeneric(ifNode.alternate, retArr, funcParam);
							retArr.push('\n}\n');
						}
					}
					return retArr;
				}

			}, {
				key: 'astBreakStatement',
				value: function astBreakStatement(brNode, retArr, funcParam) {
					retArr.push('break;\n');
					return retArr;
				}

			}, {
				key: 'astContinueStatement',
				value: function astContinueStatement(crNode, retArr, funcParam) {
					retArr.push('continue;\n');
					return retArr;
				}

			}, {
				key: 'astLogicalExpression',
				value: function astLogicalExpression(logNode, retArr, funcParam) {
					retArr.push('(');
					this.astGeneric(logNode.left, retArr, funcParam);
					retArr.push(logNode.operator);
					this.astGeneric(logNode.right, retArr, funcParam);
					retArr.push(')');
					return retArr;
				}

			}, {
				key: 'astUpdateExpression',
				value: function astUpdateExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astUnaryExpression',
				value: function astUnaryExpression(uNode, retArr, funcParam) {
					if (uNode.prefix) {
						retArr.push(uNode.operator);
						this.astGeneric(uNode.argument, retArr, funcParam);
					} else {
						this.astGeneric(uNode.argument, retArr, funcParam);
						retArr.push(uNode.operator);
					}

					return retArr;
				}

			}, {
				key: 'astThisExpression',
				value: function astThisExpression(tNode, retArr, funcParam) {
					retArr.push('this');
					return retArr;
				}

			}, {
				key: 'astMemberExpression',
				value: function astMemberExpression(mNode, retArr, funcParam) {
					if (mNode.computed) {
						if (mNode.object.type === 'Identifier') {
							var reqName = mNode.object.name;
							var funcName = funcParam.functionName || 'kernel';
							var assumeNotTexture = false;

							if (funcParam.paramNames) {
								var idx = funcParam.paramNames.indexOf(reqName);
								if (idx >= 0 && funcParam.paramTypes[idx] === 'float') {
									assumeNotTexture = true;
								}
							}

							if (assumeNotTexture) {
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('[int(');
								this.astGeneric(mNode.property, retArr, funcParam);
								retArr.push(')]');
							} else {
								retArr.push('get(');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push(', vec2(');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Size[0],');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Size[1]), vec3(');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Dim[0],');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Dim[1],');
								this.astGeneric(mNode.object, retArr, funcParam);
								retArr.push('Dim[2]');
								retArr.push('), ');
								this.astGeneric(mNode.property, retArr, funcParam);
								retArr.push(')');
							}
						} else {
							this.astGeneric(mNode.object, retArr, funcParam);
							var last = retArr.pop();
							retArr.push(',');
							this.astGeneric(mNode.property, retArr, funcParam);
							retArr.push(last);
						}
					} else {

						var unrolled = this.astMemberExpressionUnroll(mNode);
						var unrolled_lc = unrolled.toLowerCase();

						if (unrolled.indexOf(constantsPrefix) === 0) {
							unrolled = 'constants_' + unrolled.slice(constantsPrefix.length);
						}

						if (unrolled_lc === 'this.thread.x') {
							retArr.push('threadId.x');
						} else if (unrolled_lc === 'this.thread.y') {
							retArr.push('threadId.y');
						} else if (unrolled_lc === 'this.thread.z') {
							retArr.push('threadId.z');
						} else if (unrolled_lc === 'this.output.x') {
							retArr.push('uOutputDim.x');
						} else if (unrolled_lc === 'this.output.y') {
							retArr.push('uOutputDim.y');
						} else if (unrolled_lc === 'this.output.z') {
							retArr.push('uOutputDim.z');
						} else {
							retArr.push(unrolled);
						}
					}
					return retArr;
				}
			}, {
				key: 'astSequenceExpression',
				value: function astSequenceExpression(sNode, retArr, funcParam) {
					for (var i = 0; i < sNode.expressions.length; i++) {
						if (i > 0) {
							retArr.push(',');
						}
						this.astGeneric(sNode.expressions, retArr, funcParam);
					}
					return retArr;
				}

			}, {
				key: 'astMemberExpressionUnroll',
				value: function astMemberExpressionUnroll(ast, funcParam) {
					if (ast.type === 'Identifier') {
						return ast.name;
					} else if (ast.type === 'ThisExpression') {
						return 'this';
					}

					if (ast.type === 'MemberExpression') {
						if (ast.object && ast.property) {
							return this.astMemberExpressionUnroll(ast.object, funcParam) + '.' + this.astMemberExpressionUnroll(ast.property, funcParam);
						}
					}

					throw this.astErrorOutput('Unknown CallExpression_unroll', ast, funcParam);
				}

			}, {
				key: 'astCallExpression',
				value: function astCallExpression(ast, retArr, funcParam) {
					if (ast.callee) {
						var funcName = this.astMemberExpressionUnroll(ast.callee);

						if (funcName.indexOf(jsMathPrefix) === 0) {
							funcName = funcName.slice(jsMathPrefix.length);
						}

						if (funcName.indexOf(localPrefix) === 0) {
							funcName = funcName.slice(localPrefix.length);
						}

						if (funcParam.calledFunctions.indexOf(funcName) < 0) {
							funcParam.calledFunctions.push(funcName);
						}
						if (!funcParam.hasOwnProperty('funcName')) {
							funcParam.calledFunctionsArguments[funcName] = [];
						}

						var functionArguments = [];
						funcParam.calledFunctionsArguments[funcName].push(functionArguments);

						retArr.push(funcName);

						retArr.push('(');

						for (var i = 0; i < ast.arguments.length; ++i) {
							var argument = ast.arguments[i];
							if (i > 0) {
								retArr.push(', ');
							}
							this.astGeneric(argument, retArr, funcParam);
							if (argument.type === 'Identifier') {
								var paramIndex = funcParam.paramNames.indexOf(argument.name);
								if (paramIndex === -1) {
									functionArguments.push(null);
								} else {
									functionArguments.push({
										name: argument.name,
										type: funcParam.paramTypes[paramIndex]
									});
								}
							} else {
								functionArguments.push(null);
							}
						}

						retArr.push(')');

						return retArr;
					}

					throw this.astErrorOutput('Unknown CallExpression', ast, funcParam);

					return retArr;
				}

			}, {
				key: 'astArrayExpression',
				value: function astArrayExpression(arrNode, retArr, funcParam) {
					var arrLen = arrNode.elements.length;

					retArr.push('float[' + arrLen + '](');
					for (var i = 0; i < arrLen; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}
						var subNode = arrNode.elements[i];
						this.astGeneric(subNode, retArr, funcParam);
					}
					retArr.push(')');

					return retArr;
				}

			}, {
				key: 'getFunctionPrototypeString',
				value: function getFunctionPrototypeString() {
					if (this.webGlFunctionPrototypeString) {
						return this.webGlFunctionPrototypeString;
					}
					return this.webGlFunctionPrototypeString = this.generate();
				}
			}, {
				key: 'build',
				value: function build() {
					return this.getFunctionPrototypeString().length > 0;
				}
			}], [{
				key: 'astFunctionPrototype',
				value: function astFunctionPrototype(ast, retArr, funcParam) {
					if (funcParam.isRootKernel || funcParam.isSubKernel) {
						return retArr;
					}

					retArr.push(funcParam.returnType);
					retArr.push(' ');
					retArr.push(funcParam.functionName);
					retArr.push('(');

					for (var i = 0; i < funcParam.paramNames.length; ++i) {
						if (i > 0) {
							retArr.push(', ');
						}

						retArr.push(funcParam.paramTypes[i]);
						retArr.push(' ');
						retArr.push('user_');
						retArr.push(funcParam.paramNames[i]);
					}

					retArr.push(');\n');

					return retArr;
				}
			}]);

			return WebGLFunctionNode;
		}(FunctionNodeBase);

		function isIdentifierKernelParam(paramName, ast, funcParam) {
			return funcParam.paramNames.indexOf(paramName) !== -1;
		}

		function ensureIndentifierType(paramName, expectedType, ast, funcParam) {
			var start = ast.loc.start;

			if (!isIdentifierKernelParam(paramName, funcParam) && expectedType !== 'float') {
				throw 'Error unexpected identifier ' + paramName + ' on line ' + start.line;
			} else {
				var actualType = funcParam.paramTypes[funcParam.paramNames.indexOf(paramName)];
				if (actualType !== expectedType) {
					throw 'Error unexpected identifier ' + paramName + ' on line ' + start.line;
				}
			}
		}

		function webGlRegexOptimize(inStr) {
			return inStr.replace(DECODE32_ENCODE32, '((').replace(ENCODE32_DECODE32, '((');
		}
	}, { "../../core/utils": 24, "../function-node-base": 7 }], 13: [function (require, module, exports) {
		'use strict';

		var utils = require('../../core/utils');
		var kernelRunShortcut = require('../kernel-run-shortcut');

		module.exports = function (gpuKernel, name) {
			return '() => {\n    ' + kernelRunShortcut.toString() + ';\n    const utils = {\n      allPropertiesOf: function ' + utils.allPropertiesOf.toString() + ',\n      clone: function ' + utils.clone.toString() + ',\n      splitArray: function ' + utils.splitArray.toString() + ',\n      getArgumentType: function ' + utils.getArgumentType.toString() + ',\n      getDimensions: function ' + utils.getDimensions.toString() + ',\n      dimToTexSize: function ' + utils.dimToTexSize.toString() + ',\n      copyFlatten: function ' + utils.copyFlatten.toString() + ',\n      flatten: function ' + utils.flatten.toString() + ',\n      systemEndianness: \'' + utils.systemEndianness() + '\',\n      initWebGl: function ' + utils.initWebGl.toString() + ',\n      isArray: function ' + utils.isArray.toString() + '\n    };\n    class ' + (name || 'Kernel') + ' {\n      constructor() {\n        this.argumentsLength = 0;\n        this._canvas = null;\n        this._webGl = null;\n        this.built = false;\n        this.program = null;\n        this.paramNames = ' + JSON.stringify(gpuKernel.paramNames) + ';\n        this.paramTypes = ' + JSON.stringify(gpuKernel.paramTypes) + ';\n        this.texSize = ' + JSON.stringify(gpuKernel.texSize) + ';\n        this.output = ' + JSON.stringify(gpuKernel.output) + ';\n        this.compiledFragShaderString = `' + gpuKernel.compiledFragShaderString + '`;\n\t\t    this.compiledVertShaderString = `' + gpuKernel.compiledVertShaderString + '`;\n\t\t    this.programUniformLocationCache = {};\n\t\t    this.textureCache = {};\n\t\t    this.subKernelOutputTextures = null;\n      }\n      ' + gpuKernel._getFragShaderString.toString() + '\n      ' + gpuKernel._getVertShaderString.toString() + '\n      validateOptions() {}\n      setupParams() {}\n      setCanvas(canvas) { this._canvas = canvas; return this; }\n      setWebGl(webGl) { this._webGl = webGl; return this; }\n      ' + gpuKernel.getUniformLocation.toString() + '\n      ' + gpuKernel.setupParams.toString() + '\n      ' + gpuKernel.build.toString() + '\n\t\t  ' + gpuKernel.run.toString() + '\n\t\t  ' + gpuKernel._addArgument.toString() + '\n\t\t  ' + gpuKernel.getArgumentTexture.toString() + '\n\t\t  ' + gpuKernel.getTextureCache.toString() + '\n\t\t  ' + gpuKernel.getOutputTexture.toString() + '\n\t\t  ' + gpuKernel.renderOutput.toString() + '\n    };\n    return kernelRunShortcut(new Kernel());\n  };';
		};
	}, { "../../core/utils": 24, "../kernel-run-shortcut": 9 }], 14: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var fs = require('fs');
		var KernelBase = require('../kernel-base');
		var utils = require('../../core/utils');
		var Texture = require('../../core/texture');
		var fragShaderString = require('./shader-frag');
		var vertShaderString = require('./shader-vert');
		var kernelString = require('./kernel-string');
		var canvases = [];
		var maxTexSizes = {};
		module.exports = function (_KernelBase) {
			_inherits(WebGLKernel, _KernelBase);

			function WebGLKernel(fnString, settings) {
				_classCallCheck(this, WebGLKernel);

				var _this = _possibleConstructorReturn(this, (WebGLKernel.__proto__ || Object.getPrototypeOf(WebGLKernel)).call(this, fnString, settings));

				_this.textureCache = {};
				_this.threadDim = {};
				_this.programUniformLocationCache = {};
				_this.framebuffer = null;

				_this.buffer = null;
				_this.program = null;
				_this.outputToTexture = settings.outputToTexture;
				_this.endianness = utils.systemEndianness();
				_this.subKernelOutputTextures = null;
				_this.subKernelOutputVariableNames = null;
				_this.paramTypes = null;
				_this.argumentsLength = 0;
				_this.ext = null;
				_this.compiledFragShaderString = null;
				_this.compiledVertShaderString = null;
				_this.extDrawBuffersMap = null;
				_this.outputTexture = null;
				_this.maxTexSize = null;
				if (!_this._webGl) _this._webGl = utils.initWebGl(_this.getCanvas());
				return _this;
			}

			_createClass(WebGLKernel, [{
				key: 'validateOptions',
				value: function validateOptions() {
					var isReadPixel = utils.isFloatReadPixelsSupported();
					if (this.floatTextures === true && !utils.OES_texture_float) {
						throw 'Float textures are not supported on this browser';
					} else if (this.floatOutput === true && this.floatOutputForce !== true && !isReadPixel) {
						throw 'Float texture outputs are not supported on this browser';
					} else if (this.floatTextures === null && !isReadPixel && !this.graphical) {
						this.floatTextures = true;
						this.floatOutput = false;
					}

					if (!this.output || this.output.length === 0) {
						if (arguments.length !== 1) {
							throw 'Auto output only supported for kernels with only one input';
						}

						var argType = utils.getArgumentType(arguments[0]);
						if (argType === 'Array') {
							this.output = utils.getDimensions(argType);
						} else if (argType === 'Texture') {
							this.output = arguments[0].output;
						} else {
							throw 'Auto output not supported for input type: ' + argType;
						}
					}

					this.texSize = utils.dimToTexSize({
						floatTextures: this.floatTextures,
						floatOutput: this.floatOutput
					}, this.output, true);

					if (this.graphical) {
						if (this.output.length !== 2) {
							throw 'Output must have 2 dimensions on graphical mode';
						}

						if (this.floatOutput) {
							throw 'Cannot use graphical mode and float output at the same time';
						}

						this.texSize = utils.clone(this.output);
					} else if (this.floatOutput === undefined && utils.OES_texture_float) {
						this.floatOutput = true;
					}
				}
			}, {
				key: 'updateMaxTexSize',
				value: function updateMaxTexSize() {
					var texSize = this.texSize;
					var canvas = this._canvas;
					if (this.maxTexSize === null) {
						var canvasIndex = canvases.indexOf(canvas);
						if (canvasIndex === -1) {
							canvasIndex = canvases.length;
							canvases.push(canvas);
							maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];
						}
						this.maxTexSize = maxTexSizes[canvasIndex];
					}
					if (this.maxTexSize[0] < texSize[0]) {
						this.maxTexSize[0] = texSize[0];
					}
					if (this.maxTexSize[1] < texSize[1]) {
						this.maxTexSize[1] = texSize[1];
					}
				}

			}, {
				key: 'build',
				value: function build() {
					this.validateOptions();
					this.setupParams(arguments);
					this.updateMaxTexSize();
					var texSize = this.texSize;
					var gl = this._webGl;
					var canvas = this._canvas;
					gl.enable(gl.SCISSOR_TEST);
					gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
					// TODO edited to fix suspected bug
					//canvas.width = this.maxTexSize[0];
					//canvas.height = this.maxTexSize[1];
					canvas.width = this.output[0];
					canvas.height = this.output[1];
					var threadDim = this.threadDim = utils.clone(this.output);
					while (threadDim.length < 3) {
						threadDim.push(1);
					}

					if (this.functionBuilder) this._addKernels();

					var compiledVertShaderString = this._getVertShaderString(arguments);
					var vertShader = gl.createShader(gl.VERTEX_SHADER);
					gl.shaderSource(vertShader, compiledVertShaderString);
					gl.compileShader(vertShader);

					var compiledFragShaderString = this._getFragShaderString(arguments);
					var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
					gl.shaderSource(fragShader, compiledFragShaderString);
					gl.compileShader(fragShader);

					if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
						console.log(compiledVertShaderString);
						console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(vertShader));
						throw 'Error compiling vertex shader';
					}
					if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
						console.log(compiledFragShaderString);
						console.error('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(fragShader));
						throw 'Error compiling fragment shader';
					}

					if (this.debug) {
						console.log('Options:');
						console.dir(this);
						console.log('GLSL Shader Output:');
						console.log(compiledFragShaderString);
					}

					var program = this.program = gl.createProgram();
					gl.attachShader(program, vertShader);
					gl.attachShader(program, fragShader);
					gl.linkProgram(program);
					this.framebuffer = gl.createFramebuffer();
					this.framebuffer.width = texSize[0];
					this.framebuffer.height = texSize[1];

					var vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);
					var texCoords = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);

					var texCoordOffset = vertices.byteLength;

					var buffer = this.buffer;
					if (!buffer) {
						buffer = this.buffer = gl.createBuffer();
						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
						gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);
					} else {
						gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
					}

					gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
					gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);

					var aPosLoc = gl.getAttribLocation(this.program, 'aPos');
					gl.enableVertexAttribArray(aPosLoc);
					gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, gl.FALSE, 0, 0);
					var aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');
					gl.enableVertexAttribArray(aTexCoordLoc);
					gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, gl.FALSE, 0, texCoordOffset);

					this.setupOutputTexture();

					if (this.subKernelOutputTextures !== null) {
						var extDrawBuffersMap = this.extDrawBuffersMap = [gl.COLOR_ATTACHMENT0];
						for (var i = 0; i < this.subKernelOutputTextures.length; i++) {
							var subKernelOutputTexture = this.subKernelOutputTextures[i];
							extDrawBuffersMap.push(gl.COLOR_ATTACHMENT0 + i + 1);
							gl.activeTexture(gl.TEXTURE0 + arguments.length + i);
							gl.bindTexture(gl.TEXTURE_2D, subKernelOutputTexture);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
							gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
							if (this.floatOutput) {
								gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
							} else {
								gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
							}
						}
					}
				}

			}, {
				key: 'run',
				value: function run() {
					if (this.program === null) {
						this.build.apply(this, arguments);
					}
					var paramNames = this.paramNames;
					var paramTypes = this.paramTypes;
					var texSize = this.texSize;
					var gl = this._webGl;

					gl.useProgram(this.program);
					gl.scissor(0, 0, texSize[0], texSize[1]);

					if (!this.hardcodeConstants) {
						var uOutputDimLoc = this.getUniformLocation('uOutputDim');
						gl.uniform3fv(uOutputDimLoc, this.threadDim);
						var uTexSizeLoc = this.getUniformLocation('uTexSize');
						gl.uniform2fv(uTexSizeLoc, texSize);
					}

					var ratioLoc = this.getUniformLocation('ratio');
					gl.uniform2f(ratioLoc, texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);

					this.argumentsLength = 0;
					for (var texIndex = 0; texIndex < paramNames.length; texIndex++) {
						this._addArgument(arguments[texIndex], paramTypes[texIndex], paramNames[texIndex]);
					}

					if (this.graphical) {
						gl.bindRenderbuffer(gl.RENDERBUFFER, null);
						gl.bindFramebuffer(gl.FRAMEBUFFER, null);
						gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
						return;
					}

					gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
					var outputTexture = this.outputTexture;
					gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, outputTexture, 0);

					if (this.subKernelOutputTextures !== null) {
						for (var i = 0; i < this.subKernelOutputTextures.length; i++) {
							var subKernelOutputTexture = this.subKernelOutputTextures[i];
							gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, subKernelOutputTexture, 0);
						}
						this.ext.drawBuffersWEBGL(this.extDrawBuffersMap);
					}

					gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

					if (this.subKernelOutputTextures !== null) {
						if (this.subKernels !== null) {
							var output = [];
							output.result = this.renderOutput(outputTexture);
							for (var _i = 0; _i < this.subKernels.length; _i++) {
								output.push(new Texture(this.subKernelOutputTextures[_i], texSize, this.output, this._webGl));
							}
							return output;
						} else if (this.subKernelProperties !== null) {
							var _output = {
								result: this.renderOutput(outputTexture)
							};
							var _i2 = 0;
							for (var p in this.subKernelProperties) {
								if (!this.subKernelProperties.hasOwnProperty(p)) continue;
								_output[p] = new Texture(this.subKernelOutputTextures[_i2], texSize, this.output, this._webGl);
								_i2++;
							}
							return _output;
						}
					}

					return this.renderOutput(outputTexture);
				}

			}, {
				key: 'renderOutput',
				value: function renderOutput(outputTexture) {
					var texSize = this.texSize;
					var gl = this._webGl;
					var threadDim = this.threadDim;
					var output = this.output;
					if (this.outputToTexture) {
						return new Texture(outputTexture, texSize, output, this._webGl);
					} else {
						var result = void 0;
						if (this.floatOutput) {
							result = new Float32Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.FLOAT, result);
						} else {
							var bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, bytes);
							result = new Float32Array(bytes.buffer);
						}

						result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);

						if (output.length === 1) {
							return result;
						} else if (output.length === 2) {
							return utils.splitArray(result, output[0]);
						} else if (output.length === 3) {
							var cube = utils.splitArray(result, output[0] * output[1]);
							return cube.map(function (x) {
								return utils.splitArray(x, output[0]);
							});
						}
					}
				}

			}, {
				key: 'getOutputTexture',
				value: function getOutputTexture() {
					return this.getTextureCache('OUTPUT');
				}

			}, {
				key: 'detachOutputTexture',
				value: function detachOutputTexture() {
					this.detachTextureCache('OUTPUT');
				}

			}, {
				key: 'setupOutputTexture',
				value: function setupOutputTexture() {
					var gl = this._webGl;
					var texSize = this.texSize;
					this.detachOutputTexture();
					this.outputTexture = this.getOutputTexture();
					gl.activeTexture(gl.TEXTURE0 + this.paramNames.length);
					gl.bindTexture(gl.TEXTURE_2D, this.outputTexture);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
					gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
					if (this.floatOutput) {
						gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
					} else {
						gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
					}
				}

			}, {
				key: 'getArgumentTexture',
				value: function getArgumentTexture(name) {
					return this.getTextureCache('ARGUMENT_' + name);
				}

			}, {
				key: 'getSubKernelTexture',
				value: function getSubKernelTexture(name) {
					return this.getTextureCache('SUB_KERNEL_' + name);
				}

			}, {
				key: 'getTextureCache',
				value: function getTextureCache(name) {
					if (this.outputToTexture) {
						return this._webGl.createTexture();
					}
					if (this.textureCache.hasOwnProperty(name)) {
						return this.textureCache[name];
					}
					return this.textureCache[name] = this._webGl.createTexture();
				}

			}, {
				key: 'detachTextureCache',
				value: function detachTextureCache(name) {
					delete this.textureCache[name];
				}

			}, {
				key: 'setupParams',
				value: function setupParams(args) {
					var paramTypes = this.paramTypes = [];
					for (var i = 0; i < args.length; i++) {
						var param = args[i];
						var paramType = utils.getArgumentType(param);
						paramTypes.push(paramType);
					}
				}

			}, {
				key: 'getUniformLocation',
				value: function getUniformLocation(name) {
					var location = this.programUniformLocationCache[name];
					if (!location) {
						location = this._webGl.getUniformLocation(this.program, name);
						this.programUniformLocationCache[name] = location;
					}
					return location;
				}

			}, {
				key: '_getFragShaderArtifactMap',
				value: function _getFragShaderArtifactMap(args) {
					return {
						HEADER: this._getHeaderString(),
						LOOP_MAX: this._getLoopMaxString(),
						CONSTANTS: this._getConstantsString(),
						DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),
						ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),
						GET_WRAPAROUND: this._getGetWraparoundString(),
						GET_TEXTURE_CHANNEL: this._getGetTextureChannelString(),
						GET_TEXTURE_INDEX: this._getGetTextureIndexString(),
						GET_RESULT: this._getGetResultString(),
						MAIN_PARAMS: this._getMainParamsString(args),
						MAIN_CONSTANTS: this._getMainConstantsString(),
						KERNEL: this._getKernelString(),
						MAIN_RESULT: this._getMainResultString()
					};
				}

			}, {
				key: '_addArgument',
				value: function _addArgument(value, type, name) {
					var gl = this._webGl;
					var argumentTexture = this.getArgumentTexture(name);
					if (value instanceof Texture) {
						type = 'Texture';
					}
					switch (type) {
						case 'Array':
							{
								var dim = utils.getDimensions(value, true);
								var size = utils.dimToTexSize({
									floatTextures: this.floatTextures,
									floatOutput: this.floatOutput
								}, dim);
								gl.activeTexture(gl.TEXTURE0 + this.argumentsLength);
								gl.bindTexture(gl.TEXTURE_2D, argumentTexture);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
								gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

								var length = size[0] * size[1];
								if (this.floatTextures) {
									length *= 4;
								}

								var valuesFlat = new Float32Array(length);
								utils.flattenTo(value, valuesFlat);

								var buffer = void 0;
								if (this.floatTextures) {
									buffer = new Float32Array(valuesFlat);
									gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0], size[1], 0, gl.RGBA, gl.FLOAT, buffer);
								} else {
									buffer = new Uint8Array(new Float32Array(valuesFlat).buffer);
									gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, size[0], size[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, buffer);
								}

								var loc = this.getUniformLocation('user_' + name);
								var locSize = this.getUniformLocation('user_' + name + 'Size');
								var dimLoc = this.getUniformLocation('user_' + name + 'Dim');

								if (!this.hardcodeConstants) {
									gl.uniform3fv(dimLoc, dim);
									gl.uniform2fv(locSize, size);
								}
								gl.uniform1i(loc, this.argumentsLength);
								break;
							}
						case 'Number':
							{
								var _loc = this.getUniformLocation('user_' + name);
								gl.uniform1f(_loc, value);
								break;
							}
						case 'Texture':
							{
								var inputTexture = value;
								var _dim = utils.getDimensions(inputTexture, true);

								var _size = inputTexture.size;

								if (inputTexture.texture === this.outputTexture) {
									this.setupOutputTexture();
								}

								gl.activeTexture(gl.TEXTURE0 + this.argumentsLength);
								gl.bindTexture(gl.TEXTURE_2D, inputTexture.texture);

								var _loc2 = this.getUniformLocation('user_' + name);
								var _locSize = this.getUniformLocation('user_' + name + 'Size');
								var _dimLoc = this.getUniformLocation('user_' + name + 'Dim');

								gl.uniform3fv(_dimLoc, _dim);
								gl.uniform2fv(_locSize, _size);
								gl.uniform1i(_loc2, this.argumentsLength);
								break;
							}
						default:
							throw 'Input type not supported (WebGL): ' + value;
					}
					this.argumentsLength++;
				}

			}, {
				key: '_getHeaderString',
				value: function _getHeaderString() {
					return this.subKernels !== null || this.subKernelProperties !== null ? '#extension GL_EXT_draw_buffers : require\n' : '';
				}

			}, {
				key: '_getLoopMaxString',
				value: function _getLoopMaxString() {
					return this.loopMaxIterations ? ' ' + parseInt(this.loopMaxIterations) + '.0;\n' : ' 1000.0;\n';
				}

			}, {
				key: '_getConstantsString',
				value: function _getConstantsString() {
					var result = [];
					var threadDim = this.threadDim;
					var texSize = this.texSize;
					if (this.hardcodeConstants) {
						result.push('highp vec3 uOutputDim = vec3(' + threadDim[0] + ',' + threadDim[1] + ', ' + threadDim[2] + ')', 'highp vec2 uTexSize = vec2(' + texSize[0] + ', ' + texSize[1] + ')');
					} else {
						result.push('uniform highp vec3 uOutputDim', 'uniform highp vec2 uTexSize');
					}

					return this._linesToString(result);
				}

			}, {
				key: '_getTextureCoordinate',
				value: function _getTextureCoordinate() {
					var names = this.subKernelOutputVariableNames;
					if (names === null || names.length < 1) {
						return 'varying highp vec2 vTexCoord;\n';
					} else {
						return 'out highp vec2 vTexCoord;\n';
					}
				}

			}, {
				key: '_getDecode32EndiannessString',
				value: function _getDecode32EndiannessString() {
					return this.endianness === 'LE' ? '' : '  rgba.rgba = rgba.abgr;\n';
				}

			}, {
				key: '_getEncode32EndiannessString',
				value: function _getEncode32EndiannessString() {
					return this.endianness === 'LE' ? '' : '  rgba.rgba = rgba.abgr;\n';
				}

			}, {
				key: '_getGetWraparoundString',
				value: function _getGetWraparoundString() {
					return this.wraparound ? '  xyz = mod(xyz, texDim);\n' : '';
				}

			}, {
				key: '_getGetTextureChannelString',
				value: function _getGetTextureChannelString() {
					if (!this.floatTextures) return '';

					return this._linesToString(['  int channel = int(integerMod(index, 4.0))', '  index = float(int(index) / 4)']);
				}

			}, {
				key: '_getGetTextureIndexString',
				value: function _getGetTextureIndexString() {
					return this.floatTextures ? '  index = float(int(index)/4);\n' : '';
				}

			}, {
				key: '_getGetResultString',
				value: function _getGetResultString() {
					if (!this.floatTextures) return '  return decode32(texel);\n';
					return this._linesToString(['  if (channel == 0) return texel.r', '  if (channel == 1) return texel.g', '  if (channel == 2) return texel.b', '  if (channel == 3) return texel.a']);
				}

			}, {
				key: '_getMainParamsString',
				value: function _getMainParamsString(args) {
					var result = [];
					var paramTypes = this.paramTypes;
					var paramNames = this.paramNames;
					for (var i = 0; i < paramNames.length; i++) {
						var param = args[i];
						var paramName = paramNames[i];
						var paramType = paramTypes[i];
						if (this.hardcodeConstants) {
							if (paramType === 'Array' || paramType === 'Texture') {
								var paramDim = utils.getDimensions(param, true);
								var paramSize = utils.dimToTexSize({
									floatTextures: this.floatTextures,
									floatOutput: this.floatOutput
								}, paramDim);

								result.push('uniform highp sampler2D user_' + paramName, 'highp vec2 user_' + paramName + 'Size = vec2(' + paramSize[0] + '.0, ' + paramSize[1] + '.0)', 'highp vec3 user_' + paramName + 'Dim = vec3(' + paramDim[0] + '.0, ' + paramDim[1] + '.0, ' + paramDim[2] + '.0)');
							} else if (paramType === 'Number' && Number.isInteger(param)) {
								result.push('highp float user_' + paramName + ' = ' + param + '.0');
							} else if (paramType === 'Number') {
								result.push('highp float user_' + paramName + ' = ' + param);
							}
						} else {
							if (paramType === 'Array' || paramType === 'Texture') {
								result.push('uniform highp sampler2D user_' + paramName, 'uniform highp vec2 user_' + paramName + 'Size', 'uniform highp vec3 user_' + paramName + 'Dim');
							} else if (paramType === 'Number') {
								result.push('uniform highp float user_' + paramName);
							}
						}
					}
					return this._linesToString(result);
				}

			}, {
				key: '_getMainConstantsString',
				value: function _getMainConstantsString() {
					var result = [];
					if (this.constants) {
						for (var name in this.constants) {
							if (!this.constants.hasOwnProperty(name)) continue;
							var value = parseFloat(this.constants[name]);

							if (Number.isInteger(value)) {
								result.push('const float constants_' + name + ' = ' + parseInt(value) + '.0');
							} else {
								result.push('const float constants_' + name + ' = ' + parseFloat(value));
							}
						}
					}
					return this._linesToString(result);
				}

			}, {
				key: '_getKernelString',
				value: function _getKernelString() {
					var result = [];
					var names = this.subKernelOutputVariableNames;
					if (names !== null) {
						result.push('highp float kernelResult = 0.0');
						for (var i = 0; i < names.length; i++) {
							result.push('highp float ' + names[i] + ' = 0.0');
						}
					} else {
						result.push('highp float kernelResult = 0.0');
					}

					return this._linesToString(result) + this.functionBuilder.getPrototypeString('kernel');
				}

			}, {
				key: '_getMainResultString',
				value: function _getMainResultString() {
					var names = this.subKernelOutputVariableNames;
					var result = [];
					if (this.floatOutput) {
						result.push('  index *= 4.0');
					}

					if (this.graphical) {
						result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = actualColor');
					} else if (this.floatOutput) {
						result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.r = kernelResult', '  index += 1.0', '  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.g = kernelResult', '  index += 1.0', '  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.b = kernelResult', '  index += 1.0', '  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor.a = kernelResult');
					} else if (names !== null) {
						result.push('  threadId = indexTo3D(index, uOutputDim)');
						result.push('  kernel()');
						result.push('  gl_FragData[0] = encode32(kernelResult)');
						for (var i = 0; i < names.length; i++) {
							result.push('  gl_FragData[' + (i + 1) + '] = encode32(' + names[i] + ')');
						}
					} else {
						result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = encode32(kernelResult)');
					}

					return this._linesToString(result);
				}

			}, {
				key: '_linesToString',
				value: function _linesToString(lines) {
					if (lines.length > 0) {
						return lines.join(';\n') + ';\n';
					} else {
						return '\n';
					}
				}

			}, {
				key: '_replaceArtifacts',
				value: function _replaceArtifacts(src, map) {
					return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z])*)__;\n/g, function (match, artifact) {
						if (map.hasOwnProperty(artifact)) {
							return map[artifact];
						}
						throw 'unhandled artifact ' + artifact;
					});
				}

			}, {
				key: '_addKernels',
				value: function _addKernels() {
					var builder = this.functionBuilder;
					var gl = this._webGl;

					builder.addFunctions(this.functions);
					builder.addNativeFunctions(this.nativeFunctions);

					builder.addKernel(this.fnString, {
						prototypeOnly: false,
						constants: this.constants,
						debug: this.debug,
						loopMaxIterations: this.loopMaxIterations
					}, this.paramNames, this.paramTypes);

					if (this.subKernels !== null) {
						var ext = this.ext = gl.getExtension('WEBGL_draw_buffers');
						if (!ext) throw new Error('could not instantiate draw buffers extension');
						this.subKernelOutputTextures = [];
						this.subKernelOutputVariableNames = [];
						for (var i = 0; i < this.subKernels.length; i++) {
							var subKernel = this.subKernels[i];
							builder.addSubKernel(subKernel, {
								prototypeOnly: false,
								constants: this.constants,
								debug: this.debug,
								loopMaxIterations: this.loopMaxIterations
							});
							this.subKernelOutputTextures.push(this.getSubKernelTexture(i));
							this.subKernelOutputVariableNames.push(subKernel.name + 'Result');
						}
					} else if (this.subKernelProperties !== null) {
						var _ext = this.ext = gl.getExtension('WEBGL_draw_buffers');
						if (!_ext) throw new Error('could not instantiate draw buffers extension');
						this.subKernelOutputTextures = [];
						this.subKernelOutputVariableNames = [];
						var _i3 = 0;
						for (var p in this.subKernelProperties) {
							if (!this.subKernelProperties.hasOwnProperty(p)) continue;
							var _subKernel = this.subKernelProperties[p];
							builder.addSubKernel(_subKernel, {
								prototypeOnly: false,
								constants: this.constants,
								debug: this.debug,
								loopMaxIterations: this.loopMaxIterations
							});
							this.subKernelOutputTextures.push(this.getSubKernelTexture(p));
							this.subKernelOutputVariableNames.push(_subKernel.name + 'Result');
							_i3++;
						}
					}
				}

			}, {
				key: '_getFragShaderString',
				value: function _getFragShaderString(args) {
					if (this.compiledFragShaderString !== null) {
						return this.compiledFragShaderString;
					}
					return this.compiledFragShaderString = this._replaceArtifacts(fragShaderString, this._getFragShaderArtifactMap(args));
				}

			}, {
				key: '_getVertShaderString',
				value: function _getVertShaderString(args) {
					if (this.compiledVertShaderString !== null) {
						return this.compiledVertShaderString;
					}
					return this.compiledVertShaderString = vertShaderString;
				}

			}, {
				key: 'toString',
				value: function toString() {
					return kernelString(this);
				}
			}, {
				key: 'addFunction',
				value: function addFunction(fn) {
					this.functionBuilder.addFunction(null, fn);
				}
			}]);

			return WebGLKernel;
		}(KernelBase);
	}, { "../../core/texture": 22, "../../core/utils": 24, "../kernel-base": 8, "./kernel-string": 13, "./shader-frag": 16, "./shader-vert": 17, "fs": 27 }], 15: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var RunnerBase = require('../runner-base');
		var WebGLKernel = require('./kernel');
		var utils = require('../../core/utils');
		var WebGLFunctionBuilder = require('./function-builder');

		module.exports = function (_RunnerBase) {
			_inherits(WebGLRunner, _RunnerBase);

			function WebGLRunner(settings) {
				_classCallCheck(this, WebGLRunner);

				var _this = _possibleConstructorReturn(this, (WebGLRunner.__proto__ || Object.getPrototypeOf(WebGLRunner)).call(this, new WebGLFunctionBuilder(), settings));

				_this.Kernel = WebGLKernel;
				_this.kernel = null;
				return _this;
			}

			_createClass(WebGLRunner, [{
				key: 'getMode',
				value: function getMode() {
					return 'gpu';
				}
			}]);

			return WebGLRunner;
		}(RunnerBase);
	}, { "../../core/utils": 24, "../runner-base": 10, "./function-builder": 11, "./kernel": 14 }], 16: [function (require, module, exports) {
		"use strict";

		module.exports = "__HEADER__;\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nconst float LOOP_MAX = __LOOP_MAX__;\n#define EPSILON 0.0000001;\n\n__CONSTANTS__;\n\nvarying highp vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nhighp float round(highp float x) {\n  return floor(x + 0.5);\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nhighp float integerMod(highp float x, highp float y) {\n  highp float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nhighp int integerMod(highp int x, highp int y) {\n  return int(integerMod(float(x), float(y)));\n}\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nhighp float decode32(highp vec4 rgba) {\n  __DECODE32_ENDIANNESS__;\n  rgba *= 255.0;\n  vec2 gte128;\n  gte128.x = rgba.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = rgba.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * rgba.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  rgba.b = rgba.b - 128.0 * gte128.x;\n  res = dot(rgba, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nhighp vec4 encode32(highp float f) {\n  highp float F = abs(f);\n  highp float sign = f < 0.0 ? 1.0 : 0.0;\n  highp float exponent = floor(log2(F));\n  highp float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 rgba = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  rgba.rg = integerMod(rgba.rg, 256.0);\n  rgba.b = integerMod(rgba.b, 128.0);\n  rgba.a = exponent*0.5 + 63.5;\n  rgba.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  rgba = floor(rgba);\n  rgba *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return rgba;\n}\n// Dragons end here\n\nhighp float index;\nhighp vec3 threadId;\n\nhighp vec3 indexTo3D(highp float idx, highp vec3 texDim) {\n  highp float z = floor(idx / (texDim.x * texDim.y));\n  idx -= z * texDim.x * texDim.y;\n  highp float y = floor(idx / texDim.x);\n  highp float x = integerMod(idx, texDim.x);\n  return vec3(x, y, z);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float z, highp float y, highp float x) {\n  highp vec3 xyz = vec3(x, y, z);\n  xyz = floor(xyz + 0.5);\n  __GET_WRAPAROUND__;\n  highp float index = round(xyz.x + texDim.x * (xyz.y + texDim.y * xyz.z));\n  __GET_TEXTURE_CHANNEL__;\n  highp float w = round(texSize.x);\n  vec2 st = vec2(integerMod(index, w), float(int(index) / int(w))) + 0.5;\n  __GET_TEXTURE_INDEX__;\n  highp vec4 texel = texture2D(tex, st / texSize);\n  __GET_RESULT__;\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float y, highp float x) {\n  return get(tex, texSize, texDim, 0.0, y, x);\n}\n\nhighp float get(highp sampler2D tex, highp vec2 texSize, highp vec3 texDim, highp float x) {\n  return get(tex, texSize, texDim, 0.0, 0.0, x);\n}\n\nhighp vec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\n__MAIN_PARAMS__;\n__MAIN_CONSTANTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = floor(vTexCoord.s * float(uTexSize.x)) + floor(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}";
	}, {}], 17: [function (require, module, exports) {
		"use strict";

		module.exports = "precision highp float;\nprecision highp int;\nprecision highp sampler2D;\n\nattribute highp vec2 aPos;\nattribute highp vec2 aTexCoord;\n\nvarying highp vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
	}, {}], 18: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var WebGLKernel = require('./kernel');
		var utils = require('../../core/utils');

		module.exports = function (_WebGLKernel) {
			_inherits(WebGLValidatorKernel, _WebGLKernel);

			function WebGLValidatorKernel() {
				_classCallCheck(this, WebGLValidatorKernel);

				return _possibleConstructorReturn(this, (WebGLValidatorKernel.__proto__ || Object.getPrototypeOf(WebGLValidatorKernel)).apply(this, arguments));
			}

			_createClass(WebGLValidatorKernel, [{
				key: 'validateOptions',

				value: function validateOptions() {
					this.texSize = utils.dimToTexSize({
						floatTextures: this.floatTextures,
						floatOutput: this.floatOutput
					}, this.output, true);
				}
			}]);

			return WebGLValidatorKernel;
		}(WebGLKernel);
	}, { "../../core/utils": 24, "./kernel": 14 }], 19: [function (require, module, exports) {
		'use strict';

		var utils = require('./utils');
		module.exports = function alias(name, fn) {
			var fnString = fn.toString();
			return new Function('return function ' + name + ' (' + utils.getParamNamesFromString(fnString).join(', ') + ') {' + utils.getFunctionBodyFromString(fnString) + '}')();
		};
	}, { "./utils": 24 }], 20: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var UtilsCore = require("./utils-core");

		module.exports = function () {
			function GPUCore() {
				_classCallCheck(this, GPUCore);
			}

			_createClass(GPUCore, null, [{
				key: "validateKernelObj",

				value: function validateKernelObj(kernelObj) {

					if (kernelObj === null) {
						throw "KernelObj being validated is NULL";
					}

					if (typeof kernelObj === "string") {
						try {
							kernelObj = JSON.parse(kernelObj);
						} catch (e) {
							console.error(e);
							throw "Failed to convert KernelObj from JSON string";
						}

						if (kernelObj === null) {
							throw "Invalid (NULL) KernelObj JSON string representation";
						}
					}

					if (kernelObj.isKernelObj !== true) {
						throw "Failed missing isKernelObj flag check";
					}

					return kernelObj;
				}

			}, {
				key: "loadKernelObj",
				value: function loadKernelObj(kernelObj, inOpt) {

					kernelObj = validateKernelObj(kernelObj);
				}
			}]);

			return GPUCore;
		}();
	}, { "./utils-core": 23 }], 21: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var utils = require('./utils');
		var WebGLRunner = require('../backend/web-gl/runner');
		var CPURunner = require('../backend/cpu/runner');
		var WebGLValidatorKernel = require('../backend/web-gl/validator-kernel');
		var GPUCore = require("./gpu-core");

		var GPU = function (_GPUCore) {
			_inherits(GPU, _GPUCore);

			function GPU(settings) {
				_classCallCheck(this, GPU);

				var _this = _possibleConstructorReturn(this, (GPU.__proto__ || Object.getPrototypeOf(GPU)).call(this, settings));

				settings = settings || {};
				_this._canvas = settings.canvas || null;
				_this._webGl = settings.webGl || null;
				var mode = settings.mode || 'webgl';
				if (!utils.isWebGlSupported()) {
					console.warn('Warning: gpu not supported, falling back to cpu support');
					mode = 'cpu';
				}

				_this.kernels = [];

				var runnerSettings = {
					canvas: _this._canvas,
					webGl: _this._webGl
				};

				if (mode) {
					switch (mode.toLowerCase()) {
						case 'cpu':
							_this._runner = new CPURunner(runnerSettings);
							break;
						case 'gpu':
						case 'webgl':
							_this._runner = new WebGLRunner(runnerSettings);
							break;
						case 'webgl-validator':
							_this._runner = new WebGLRunner(runnerSettings);
							_this._runner.Kernel = WebGLValidatorKernel;
							break;
						default:
							throw new Error('"' + mode + '" mode is not defined');
					}
				}
				return _this;
			}

			_createClass(GPU, [{
				key: 'createKernel',
				value: function createKernel(fn, settings) {
					if (typeof fn === 'undefined') {
						throw 'Missing fn parameter';
					}
					if (!utils.isFunction(fn) && typeof fn !== 'string') {
						throw 'fn parameter not a function';
					}

					var kernel = this._runner.buildKernel(fn, settings || {});

					if (!this._canvas) {
						this._canvas = kernel.getCanvas();
					}
					if (!this._runner.canvas) {
						this._runner.canvas = kernel.getCanvas();
					}

					this.kernels.push(kernel);

					return kernel;
				}

			}, {
				key: 'createKernelMap',
				value: function createKernelMap() {
					var fn = void 0;
					var settings = void 0;
					if (typeof arguments[arguments.length - 2] === 'function') {
						fn = arguments[arguments.length - 2];
						settings = arguments[arguments.length - 1];
					} else {
						fn = arguments[arguments.length - 1];
					}

					if (!utils.isWebGlDrawBuffersSupported()) {
						this._runner = new CPURunner(settings);
					}

					var kernel = this.createKernel(fn, settings);
					if (Array.isArray(arguments[0])) {
						var functions = arguments[0];
						for (var i = 0; i < functions.length; i++) {
							kernel.addSubKernel(functions[i]);
						}
					} else {
						var _functions = arguments[0];
						for (var p in _functions) {
							if (!_functions.hasOwnProperty(p)) continue;
							kernel.addSubKernelProperty(p, _functions[p]);
						}
					}

					return kernel;
				}

			}, {
				key: 'combineKernels',
				value: function combineKernels() {
					var lastKernel = arguments[arguments.length - 2];
					var combinedKernel = arguments[arguments.length - 1];
					if (this.getMode() === 'cpu') return combinedKernel;

					var canvas = arguments[0].getCanvas();
					var webGl = arguments[0].getWebGl();

					for (var i = 0; i < arguments.length - 1; i++) {
						arguments[i].setCanvas(canvas).setWebGl(webGl).setOutputToTexture(true);
					}

					return function () {
						combinedKernel.apply(null, arguments);
						var texSize = lastKernel.texSize;
						var gl = lastKernel.getWebGl();
						var threadDim = lastKernel.threadDim;
						var result = void 0;
						if (lastKernel.floatOutput) {
							result = new Float32Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.FLOAT, result);
						} else {
							var bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
							gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, bytes);
							result = new Float32Array(bytes.buffer);
						}

						result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);

						if (lastKernel.output.length === 1) {
							return result;
						} else if (lastKernel.output.length === 2) {
							return utils.splitArray(result, lastKernel.output[0]);
						} else if (lastKernel.output.length === 3) {
							var cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);
							return cube.map(function (x) {
								return utils.splitArray(x, lastKernel.output[0]);
							});
						}
					};
				}

			}, {
				key: 'addFunction',
				value: function addFunction(fn, paramTypes, returnType) {
					this._runner.functionBuilder.addFunction(null, fn, paramTypes, returnType);
					return this;
				}

			}, {
				key: 'addNativeFunction',
				value: function addNativeFunction(name, nativeFunction) {
					this._runner.functionBuilder.addNativeFunction(name, nativeFunction);
					return this;
				}

			}, {
				key: 'getMode',
				value: function getMode() {
					return this._runner.getMode();
				}

			}, {
				key: 'isWebGlSupported',
				value: function isWebGlSupported() {
					return utils.isWebGlSupported();
				}

			}, {
				key: 'getCanvas',
				value: function getCanvas() {
					return this._canvas;
				}

			}, {
				key: 'getWebGl',
				value: function getWebGl() {
					return this._webGl;
				}
			}]);

			return GPU;
		}(GPUCore);

		;

		Object.assign(GPU, GPUCore);

		module.exports = GPU;
	}, { "../backend/cpu/runner": 5, "../backend/web-gl/runner": 15, "../backend/web-gl/validator-kernel": 18, "./gpu-core": 20, "./utils": 24 }], 22: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var gpu = null;

		module.exports = function () {

			function Texture(texture, size, output, webGl) {
				_classCallCheck(this, Texture);

				this.texture = texture;
				this.size = size;
				this.output = output;
				this.webGl = webGl;
				this.kernel = null;
			}

			_createClass(Texture, [{
				key: 'toArray',
				value: function toArray(gpu) {
					if (!gpu) throw new Error('You need to pass the GPU object for toArray to work.');
					if (this.kernel) return this.kernel(this);

					this.kernel = gpu.createKernel(function (x) {
						return x[this.thread.z][this.thread.y][this.thread.x];
					}).setOutput(this.output);

					return this.kernel(this);
				}

			}, {
				key: 'delete',
				value: function _delete() {
					return this.webGl.deleteTexture(this.texture);
				}
			}]);

			return Texture;
		}();
	}, {}], 23: [function (require, module, exports) {
		'use strict';

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		var UtilsCore = function () {
			function UtilsCore() {
				_classCallCheck(this, UtilsCore);
			}

			_createClass(UtilsCore, null, [{
				key: 'isCanvas',

				value: function isCanvas(canvasObj) {
					return canvasObj !== null && canvasObj.nodeName && canvasObj.getContext && canvasObj.nodeName.toUpperCase() === 'CANVAS';
				}

			}, {
				key: 'isCanvasSupported',
				value: function isCanvasSupported() {
					return _isCanvasSupported;
				}

			}, {
				key: 'initCanvas',
				value: function initCanvas() {
					if (!_isCanvasSupported) {
						return null;
					}

					var canvas = document.createElement('canvas');

					canvas.width = 2;
					canvas.height = 2;

					return canvas;
				}

			}, {
				key: 'isWebGl',
				value: function isWebGl(webGlObj) {
					return webGlObj && typeof webGlObj.getExtension === 'function';
				}

			}, {
				key: 'isWebGlSupported',
				value: function isWebGlSupported() {
					return _isWebGlSupported;
				}
			}, {
				key: 'isWebGlDrawBuffersSupported',
				value: function isWebGlDrawBuffersSupported() {
					return _isWebGlDrawBuffersSupported;
				}

			}, {
				key: 'initWebGlDefaultOptions',
				value: function initWebGlDefaultOptions() {
					return {
						alpha: false,
						depth: false,
						antialias: false
					};
				}

			}, {
				key: 'initWebGl',
				value: function initWebGl(canvasObj) {

					if (typeof _isCanvasSupported !== 'undefined' || canvasObj === null) {
						if (!_isCanvasSupported) {
							return null;
						}
					}

					if (!UtilsCore.isCanvas(canvasObj)) {
						throw new Error('Invalid canvas object - ' + canvasObj);
					}

					var webGl = canvasObj.getContext('experimental-webgl', UtilsCore.initWebGlDefaultOptions()) || canvasObj.getContext('webgl', UtilsCore.initWebGlDefaultOptions());

					if (webGl) {
						webGl.OES_texture_float = webGl.getExtension('OES_texture_float');
						webGl.OES_texture_float_linear = webGl.getExtension('OES_texture_float_linear');
						webGl.OES_element_index_uint = webGl.getExtension('OES_element_index_uint');
					}

					return webGl;
				}
			}]);

			return UtilsCore;
		}();

		var _isCanvasSupported = typeof document !== 'undefined' ? UtilsCore.isCanvas(document.createElement('canvas')) : false;
		var _testingWebGl = UtilsCore.initWebGl(UtilsCore.initCanvas());
		var _isWebGlSupported = UtilsCore.isWebGl(_testingWebGl);
		var _isWebGlDrawBuffersSupported = _isWebGlSupported && Boolean(_testingWebGl.getExtension('WEBGL_draw_buffers'));

		if (_isWebGlSupported) {
			UtilsCore.OES_texture_float = _testingWebGl.OES_texture_float;
			UtilsCore.OES_texture_float_linear = _testingWebGl.OES_texture_float_linear;
			UtilsCore.OES_element_index_uint = _testingWebGl.OES_element_index_uint;
		} else {
			UtilsCore.OES_texture_float = false;
			UtilsCore.OES_texture_float_linear = false;
			UtilsCore.OES_element_index_uint = false;
		}

		module.exports = UtilsCore;
	}, {}], 24: [function (require, module, exports) {
		'use strict';

		var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
			return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
		} : function (obj) {
			return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
		};

		var _createClass = function () {
			function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
					var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
			}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
			};
		}();

		function _classCallCheck(instance, Constructor) {
			if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
			}
		}

		function _possibleConstructorReturn(self, call) {
			if (!self) {
				throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
			}return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
		}

		function _inherits(subClass, superClass) {
			if (typeof superClass !== "function" && superClass !== null) {
				throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
			}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
		}

		var UtilsCore = require("./utils-core");
		var Texture = require('./texture');
		var FUNCTION_NAME = /function ([^(]*)/;

		var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;

		var ARGUMENT_NAMES = /([^\s,]+)/g;

		var _systemEndianness = function () {
			var b = new ArrayBuffer(4);
			var a = new Uint32Array(b);
			var c = new Uint8Array(b);
			a[0] = 0xdeadbeef;
			if (c[0] === 0xef) return 'LE';
			if (c[0] === 0xde) return 'BE';
			throw new Error('unknown endianness');
		}();

		var _isFloatReadPixelsSupported = null;

		var Utils = function (_UtilsCore) {
			_inherits(Utils, _UtilsCore);

			function Utils() {
				_classCallCheck(this, Utils);

				return _possibleConstructorReturn(this, (Utils.__proto__ || Object.getPrototypeOf(Utils)).apply(this, arguments));
			}

			_createClass(Utils, null, [{
				key: 'systemEndianness',

				value: function systemEndianness() {
					return _systemEndianness;
				}

			}, {
				key: 'isFunction',
				value: function isFunction(funcObj) {
					return typeof funcObj === 'function';
				}

			}, {
				key: 'isFunctionString',
				value: function isFunctionString(funcStr) {
					if (funcStr !== null) {
						return funcStr.toString().slice(0, 'function'.length).toLowerCase() === 'function';
					}
					return false;
				}

			}, {
				key: 'getFunctionNameFromString',
				value: function getFunctionNameFromString(funcStr) {
					return FUNCTION_NAME.exec(funcStr)[1];
				}
			}, {
				key: 'getFunctionBodyFromString',
				value: function getFunctionBodyFromString(funcStr) {
					return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));
				}

			}, {
				key: 'getParamNamesFromString',
				value: function getParamNamesFromString(func) {
					var fnStr = func.toString().replace(STRIP_COMMENTS, '');
					var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
					if (result === null) result = [];
					return result;
				}

			}, {
				key: 'clone',
				value: function clone(obj) {
					if (obj === null || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;

					var temp = obj.constructor();

					for (var key in obj) {
						if (Object.prototype.hasOwnProperty.call(obj, key)) {
							obj.isActiveClone = null;
							temp[key] = Utils.clone(obj[key]);
							delete obj.isActiveClone;
						}
					}

					return temp;
				}

			}, {
				key: 'newPromise',
				value: function newPromise(executor) {
					var simple = Promise || small_promise;
					if (simple === null) {
						throw TypeError('Browser is missing Promise implementation. Consider adding small_promise.js polyfill');
					}
					return new simple(executor);
				}

			}, {
				key: 'functionBinder',
				value: function functionBinder(inFunc, thisObj) {
					if (inFunc.bind) {
						return inFunc.bind(thisObj);
					}

					return function () {
						var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
						return inFunc.apply(thisObj, args);
					};
				}

			}, {
				key: 'isArray',
				value: function isArray(array) {
					if (isNaN(array.length)) {
						return false;
					}

					return true;
				}

			}, {
				key: 'getArgumentType',
				value: function getArgumentType(arg) {
					if (Utils.isArray(arg)) {
						return 'Array';
					} else if (typeof arg === 'number') {
						return 'Number';
					} else if (arg instanceof Texture) {
						return 'Texture';
					} else {
						return 'Unknown';
					}
				}

			}, {
				key: 'isFloatReadPixelsSupported',
				value: function isFloatReadPixelsSupported() {
					if (_isFloatReadPixelsSupported !== null) {
						return _isFloatReadPixelsSupported;
					}

					var GPU = require('../index');
					var x = new GPU({
						mode: 'webgl-validator'
					}).createKernel(function () {
						return 1;
					}, {
						output: [2],
						floatTextures: true,
						floatOutput: true,
						floatOutputForce: true
					})();

					_isFloatReadPixelsSupported = x[0] === 1;

					return _isFloatReadPixelsSupported;
				}
			}, {
				key: 'dimToTexSize',
				value: function dimToTexSize(opt, dimensions, output) {
					var numTexels = dimensions[0];
					for (var i = 1; i < dimensions.length; i++) {
						numTexels *= dimensions[i];
					}

					if (opt.floatTextures && (!output || opt.floatOutput)) {
						numTexels = Math.ceil(numTexels / 4);
					}

					var w = Math.ceil(Math.sqrt(numTexels));
					return [w, w];
				}

			}, {
				key: 'getDimensions',
				value: function getDimensions(x, pad) {
					var ret = void 0;
					if (Utils.isArray(x)) {
						var dim = [];
						var temp = x;
						while (Utils.isArray(temp)) {
							dim.push(temp.length);
							temp = temp[0];
						}
						ret = dim.reverse();
					} else if (x instanceof Texture) {
						ret = x.output;
					} else {
						throw 'Unknown dimensions of ' + x;
					}

					if (pad) {
						ret = Utils.clone(ret);
						while (ret.length < 3) {
							ret.push(1);
						}
					}

					return ret;
				}

			}, {
				key: 'pad',
				value: function pad(arr, padding) {
					function zeros(n) {
						return Array.apply(null, new Array(n)).map(Number.prototype.valueOf, 0);
					}

					var len = arr.length + padding * 2;

					var ret = arr.map(function (x) {
						return [].concat(zeros(padding), x, zeros(padding));
					});

					for (var i = 0; i < padding; i++) {
						ret = [].concat([zeros(len)], ret, [zeros(len)]);
					}

					return ret;
				}

			}, {
				key: 'flatten2dArrayTo',
				value: function flatten2dArrayTo(array, target) {
					var offset = 0;
					for (var y = 0; y < array.length; y++) {
						target.set(array[y], offset);
						offset += array[y].length;
					}
				}

			}, {
				key: 'flatten3dArrayTo',
				value: function flatten3dArrayTo(array, target) {
					var offset = 0;
					for (var z = 0; z < array.length; z++) {
						for (var y = 0; y < array[z].length; y++) {
							target.set(array[z][y], offset);
							offset += array[z][y].length;
						}
					}
				}

			}, {
				key: 'flattenTo',
				value: function flattenTo(array, target) {
					if (Utils.isArray(array[0])) {
						if (Utils.isArray(array[0][0])) {
							Utils.flatten3dArrayTo(array, target);
						} else {
							Utils.flatten2dArrayTo(array, target);
						}
					} else {
						target.set(array);
					}
				}

			}, {
				key: 'splitArray',
				value: function splitArray(array, part) {
					var result = [];
					for (var i = 0; i < array.length; i += part) {
						result.push(Array.prototype.slice.call(array, i, i + part));
					}
					return result;
				}
			}, {
				key: 'getAstString',
				value: function getAstString(source, ast) {
					var lines = Array.isArray(source) ? source : source.split(/\r?\n/g);
					var start = ast.loc.start;
					var end = ast.loc.end;
					var result = [];
					result.push(lines[start.line - 1].slice(start.column));
					for (var i = start.line; i < end.line - 1; i++) {
						result.push(lines[i]);
					}
					result.push(lines[end.line - 1].slice(0, end.column));
					return result.join('\n');
				}
			}, {
				key: 'allPropertiesOf',
				value: function allPropertiesOf(obj) {
					var props = [];

					do {
						props.push.apply(props, Object.getOwnPropertyNames(obj));
					} while (obj = Object.getPrototypeOf(obj));

					return props;
				}
			}]);

			return Utils;
		}(UtilsCore);

		Object.assign(Utils, UtilsCore);

		module.exports = Utils;
	}, { "../index": 25, "./texture": 22, "./utils-core": 23 }], 25: [function (require, module, exports) {
		'use strict';

		var GPU = require('./core/gpu');
		var alias = require('./core/alias');
		var utils = require('./core/utils');

		var CPUFunctionBuilder = require('./backend/cpu/function-builder');
		var CPUFunctionNode = require('./backend/cpu/function-node');
		var CPUKernel = require('./backend/cpu/kernel');
		var CPURunner = require('./backend/cpu/runner');

		var WebGLFunctionBuilder = require('./backend/web-gl/function-builder');
		var WebGLFunctionNode = require('./backend/web-gl/function-node');
		var WebGLKernel = require('./backend/web-gl/kernel');
		var WebGLRunner = require('./backend/web-gl/runner');

		GPU.alias = alias;
		GPU.utils = utils;

		GPU.CPUFunctionBuilder = CPUFunctionBuilder;
		GPU.CPUFunctionNode = CPUFunctionNode;
		GPU.CPUKernel = CPUKernel;
		GPU.CPURunner = CPURunner;

		GPU.WebGLFunctionBuilder = WebGLFunctionBuilder;
		GPU.WebGLFunctionNode = WebGLFunctionNode;
		GPU.WebGLKernel = WebGLKernel;
		GPU.WebGLRunner = WebGLRunner;

		if (typeof module !== 'undefined') {
			module.exports = GPU;
		}
		if (typeof window !== 'undefined') {
			window.GPU = GPU;
		}
	}, { "./backend/cpu/function-builder": 1, "./backend/cpu/function-node": 2, "./backend/cpu/kernel": 4, "./backend/cpu/runner": 5, "./backend/web-gl/function-builder": 11, "./backend/web-gl/function-node": 12, "./backend/web-gl/kernel": 14, "./backend/web-gl/runner": 15, "./core/alias": 19, "./core/gpu": 21, "./core/utils": 24 }], 26: [function (require, module, exports) {
		(function (global, factory) {
			(typeof exports === "undefined" ? "undefined" : _typeof2(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.acorn = global.acorn || {});
		})(this, function (exports) {
			'use strict';

			var reservedWords = {
				3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
				5: "class enum extends super const export import",
				6: "enum",
				strict: "implements interface let package private protected public static yield",
				strictBind: "eval arguments"
			};

			var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

			var keywords = {
				5: ecma5AndLessKeywords,
				6: ecma5AndLessKeywords + " const class extends export import super"
			};

			var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
			var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA900-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";

			var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
			var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

			nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

			var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 785, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 54, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 86, 25, 391, 63, 32, 0, 449, 56, 264, 8, 2, 36, 18, 0, 50, 29, 881, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 65, 0, 32, 6124, 20, 754, 9486, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 60, 67, 1213, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 10591, 541];

			var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 10, 2, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 87, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 423, 9, 838, 7, 2, 7, 17, 9, 57, 21, 2, 13, 19882, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 2214, 6, 110, 6, 6, 9, 792487, 239];

			function isInAstralSet(code, set) {
				var pos = 0x10000;
				for (var i = 0; i < set.length; i += 2) {
					pos += set[i];
					if (pos > code) {
						return false;
					}
					pos += set[i + 1];
					if (pos >= code) {
						return true;
					}
				}
			}

			function isIdentifierStart(code, astral) {
				if (code < 65) {
					return code === 36;
				}
				if (code < 91) {
					return true;
				}
				if (code < 97) {
					return code === 95;
				}
				if (code < 123) {
					return true;
				}
				if (code <= 0xffff) {
					return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
				}
				if (astral === false) {
					return false;
				}
				return isInAstralSet(code, astralIdentifierStartCodes);
			}

			function isIdentifierChar(code, astral) {
				if (code < 48) {
					return code === 36;
				}
				if (code < 58) {
					return true;
				}
				if (code < 65) {
					return false;
				}
				if (code < 91) {
					return true;
				}
				if (code < 97) {
					return code === 95;
				}
				if (code < 123) {
					return true;
				}
				if (code <= 0xffff) {
					return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
				}
				if (astral === false) {
					return false;
				}
				return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
			}

			var TokenType = function TokenType(label, conf) {
				if (conf === void 0) conf = {};

				this.label = label;
				this.keyword = conf.keyword;
				this.beforeExpr = !!conf.beforeExpr;
				this.startsExpr = !!conf.startsExpr;
				this.isLoop = !!conf.isLoop;
				this.isAssign = !!conf.isAssign;
				this.prefix = !!conf.prefix;
				this.postfix = !!conf.postfix;
				this.binop = conf.binop || null;
				this.updateContext = null;
			};

			function binop(name, prec) {
				return new TokenType(name, { beforeExpr: true, binop: prec });
			}
			var beforeExpr = { beforeExpr: true };
			var startsExpr = { startsExpr: true };

			var keywords$1 = {};

			function kw(name, options) {
				if (options === void 0) options = {};

				options.keyword = name;
				return keywords$1[name] = new TokenType(name, options);
			}

			var types = {
				num: new TokenType("num", startsExpr),
				regexp: new TokenType("regexp", startsExpr),
				string: new TokenType("string", startsExpr),
				name: new TokenType("name", startsExpr),
				eof: new TokenType("eof"),

				bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
				bracketR: new TokenType("]"),
				braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
				braceR: new TokenType("}"),
				parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
				parenR: new TokenType(")"),
				comma: new TokenType(",", beforeExpr),
				semi: new TokenType(";", beforeExpr),
				colon: new TokenType(":", beforeExpr),
				dot: new TokenType("."),
				question: new TokenType("?", beforeExpr),
				arrow: new TokenType("=>", beforeExpr),
				template: new TokenType("template"),
				invalidTemplate: new TokenType("invalidTemplate"),
				ellipsis: new TokenType("...", beforeExpr),
				backQuote: new TokenType("`", startsExpr),
				dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),

				eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
				assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
				incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
				prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
				logicalOR: binop("||", 1),
				logicalAND: binop("&&", 2),
				bitwiseOR: binop("|", 3),
				bitwiseXOR: binop("^", 4),
				bitwiseAND: binop("&", 5),
				equality: binop("==/!=/===/!==", 6),
				relational: binop("</>/<=/>=", 7),
				bitShift: binop("<</>>/>>>", 8),
				plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
				modulo: binop("%", 10),
				star: binop("*", 10),
				slash: binop("/", 10),
				starstar: new TokenType("**", { beforeExpr: true }),

				_break: kw("break"),
				_case: kw("case", beforeExpr),
				_catch: kw("catch"),
				_continue: kw("continue"),
				_debugger: kw("debugger"),
				_default: kw("default", beforeExpr),
				_do: kw("do", { isLoop: true, beforeExpr: true }),
				_else: kw("else", beforeExpr),
				_finally: kw("finally"),
				_for: kw("for", { isLoop: true }),
				_function: kw("function", startsExpr),
				_if: kw("if"),
				_return: kw("return", beforeExpr),
				_switch: kw("switch"),
				_throw: kw("throw", beforeExpr),
				_try: kw("try"),
				_var: kw("var"),
				_const: kw("const"),
				_while: kw("while", { isLoop: true }),
				_with: kw("with"),
				_new: kw("new", { beforeExpr: true, startsExpr: true }),
				_this: kw("this", startsExpr),
				_super: kw("super", startsExpr),
				_class: kw("class", startsExpr),
				_extends: kw("extends", beforeExpr),
				_export: kw("export"),
				_import: kw("import"),
				_null: kw("null", startsExpr),
				_true: kw("true", startsExpr),
				_false: kw("false", startsExpr),
				_in: kw("in", { beforeExpr: true, binop: 7 }),
				_instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
				_typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
				_void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
				_delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
			};

			var lineBreak = /\r\n?|\n|\u2028|\u2029/;
			var lineBreakG = new RegExp(lineBreak.source, "g");

			function isNewLine(code) {
				return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
			}

			var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;

			var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;

			var ref = Object.prototype;
			var hasOwnProperty = ref.hasOwnProperty;
			var toString = ref.toString;

			function has(obj, propName) {
				return hasOwnProperty.call(obj, propName);
			}

			var isArray = Array.isArray || function (obj) {
				return toString.call(obj) === "[object Array]";
			};

			var Position = function Position(line, col) {
				this.line = line;
				this.column = col;
			};

			Position.prototype.offset = function offset(n) {
				return new Position(this.line, this.column + n);
			};

			var SourceLocation = function SourceLocation(p, start, end) {
				this.start = start;
				this.end = end;
				if (p.sourceFile !== null) {
					this.source = p.sourceFile;
				}
			};

			function getLineInfo(input, offset) {
				for (var line = 1, cur = 0;;) {
					lineBreakG.lastIndex = cur;
					var match = lineBreakG.exec(input);
					if (match && match.index < offset) {
						++line;
						cur = match.index + match[0].length;
					} else {
						return new Position(line, offset - cur);
					}
				}
			}

			var defaultOptions = {
				ecmaVersion: 7,
				sourceType: "script",
				onInsertedSemicolon: null,
				onTrailingComma: null,
				allowReserved: null,
				allowReturnOutsideFunction: false,
				allowImportExportEverywhere: false,
				allowHashBang: false,
				locations: false,
				onToken: null,
				onComment: null,
				ranges: false,
				program: null,
				sourceFile: null,
				directSourceFile: null,
				preserveParens: false,
				plugins: {}
			};

			function getOptions(opts) {
				var options = {};

				for (var opt in defaultOptions) {
					options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
				}

				if (options.ecmaVersion >= 2015) {
					options.ecmaVersion -= 2009;
				}

				if (options.allowReserved == null) {
					options.allowReserved = options.ecmaVersion < 5;
				}

				if (isArray(options.onToken)) {
					var tokens = options.onToken;
					options.onToken = function (token) {
						return tokens.push(token);
					};
				}
				if (isArray(options.onComment)) {
					options.onComment = pushComment(options, options.onComment);
				}

				return options;
			}

			function pushComment(options, array) {
				return function (block, text, start, end, startLoc, endLoc) {
					var comment = {
						type: block ? "Block" : "Line",
						value: text,
						start: start,
						end: end
					};
					if (options.locations) {
						comment.loc = new SourceLocation(this, startLoc, endLoc);
					}
					if (options.ranges) {
						comment.range = [start, end];
					}
					array.push(comment);
				};
			}

			var plugins = {};

			function keywordRegexp(words) {
				return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
			}

			var Parser = function Parser(options, input, startPos) {
				this.options = options = getOptions(options);
				this.sourceFile = options.sourceFile;
				this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5]);
				var reserved = "";
				if (!options.allowReserved) {
					for (var v = options.ecmaVersion;; v--) {
						if (reserved = reservedWords[v]) {
							break;
						}
					}
					if (options.sourceType == "module") {
						reserved += " await";
					}
				}
				this.reservedWords = keywordRegexp(reserved);
				var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
				this.reservedWordsStrict = keywordRegexp(reservedStrict);
				this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + reservedWords.strictBind);
				this.input = String(input);

				this.containsEsc = false;

				this.loadPlugins(options.plugins);

				if (startPos) {
					this.pos = startPos;
					this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
					this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
				} else {
					this.pos = this.lineStart = 0;
					this.curLine = 1;
				}

				this.type = types.eof;
				this.value = null;
				this.start = this.end = this.pos;
				this.startLoc = this.endLoc = this.curPosition();

				this.lastTokEndLoc = this.lastTokStartLoc = null;
				this.lastTokStart = this.lastTokEnd = this.pos;

				this.context = this.initialContext();
				this.exprAllowed = true;

				this.inModule = options.sourceType === "module";
				this.strict = this.inModule || this.strictDirective(this.pos);

				this.potentialArrowAt = -1;

				this.inFunction = this.inGenerator = this.inAsync = false;
				this.yieldPos = this.awaitPos = 0;
				this.labels = [];

				if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
					this.skipLineComment(2);
				}

				this.scopeStack = [];
				this.enterFunctionScope();
			};

			Parser.prototype.isKeyword = function isKeyword(word) {
				return this.keywords.test(word);
			};
			Parser.prototype.isReservedWord = function isReservedWord(word) {
				return this.reservedWords.test(word);
			};

			Parser.prototype.extend = function extend(name, f) {
				this[name] = f(this[name]);
			};

			Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {
				var this$1 = this;

				for (var name in pluginConfigs) {
					var plugin = plugins[name];
					if (!plugin) {
						throw new Error("Plugin '" + name + "' not found");
					}
					plugin(this$1, pluginConfigs[name]);
				}
			};

			Parser.prototype.parse = function parse() {
				var node = this.options.program || this.startNode();
				this.nextToken();
				return this.parseTopLevel(node);
			};

			var pp = Parser.prototype;

			var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)"|;)/;
			pp.strictDirective = function (start) {
				var this$1 = this;

				for (;;) {
					skipWhiteSpace.lastIndex = start;
					start += skipWhiteSpace.exec(this$1.input)[0].length;
					var match = literal.exec(this$1.input.slice(start));
					if (!match) {
						return false;
					}
					if ((match[1] || match[2]) == "use strict") {
						return true;
					}
					start += match[0].length;
				}
			};

			pp.eat = function (type) {
				if (this.type === type) {
					this.next();
					return true;
				} else {
					return false;
				}
			};

			pp.isContextual = function (name) {
				return this.type === types.name && this.value === name;
			};

			pp.eatContextual = function (name) {
				return this.value === name && this.eat(types.name);
			};

			pp.expectContextual = function (name) {
				if (!this.eatContextual(name)) {
					this.unexpected();
				}
			};

			pp.canInsertSemicolon = function () {
				return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			};

			pp.insertSemicolon = function () {
				if (this.canInsertSemicolon()) {
					if (this.options.onInsertedSemicolon) {
						this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
					}
					return true;
				}
			};

			pp.semicolon = function () {
				if (!this.eat(types.semi) && !this.insertSemicolon()) {
					this.unexpected();
				}
			};

			pp.afterTrailingComma = function (tokType, notNext) {
				if (this.type == tokType) {
					if (this.options.onTrailingComma) {
						this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
					}
					if (!notNext) {
						this.next();
					}
					return true;
				}
			};

			pp.expect = function (type) {
				this.eat(type) || this.unexpected();
			};

			pp.unexpected = function (pos) {
				this.raise(pos != null ? pos : this.start, "Unexpected token");
			};

			function DestructuringErrors() {
				this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1;
			}

			pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
				if (!refDestructuringErrors) {
					return;
				}
				if (refDestructuringErrors.trailingComma > -1) {
					this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
				}
				var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
				if (parens > -1) {
					this.raiseRecoverable(parens, "Parenthesized pattern");
				}
			};

			pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
				var pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1;
				if (!andThrow) {
					return pos >= 0;
				}
				if (pos > -1) {
					this.raise(pos, "Shorthand property assignments are valid only in destructuring patterns");
				}
			};

			pp.checkYieldAwaitInDefaultParams = function () {
				if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
					this.raise(this.yieldPos, "Yield expression cannot be a default value");
				}
				if (this.awaitPos) {
					this.raise(this.awaitPos, "Await expression cannot be a default value");
				}
			};

			pp.isSimpleAssignTarget = function (expr) {
				if (expr.type === "ParenthesizedExpression") {
					return this.isSimpleAssignTarget(expr.expression);
				}
				return expr.type === "Identifier" || expr.type === "MemberExpression";
			};

			var pp$1 = Parser.prototype;

			pp$1.parseTopLevel = function (node) {
				var this$1 = this;

				var exports = {};
				if (!node.body) {
					node.body = [];
				}
				while (this.type !== types.eof) {
					var stmt = this$1.parseStatement(true, true, exports);
					node.body.push(stmt);
				}
				this.next();
				if (this.options.ecmaVersion >= 6) {
					node.sourceType = this.options.sourceType;
				}
				return this.finishNode(node, "Program");
			};

			var loopLabel = { kind: "loop" };
			var switchLabel = { kind: "switch" };

			pp$1.isLet = function () {
				if (this.type !== types.name || this.options.ecmaVersion < 6 || this.value != "let") {
					return false;
				}
				skipWhiteSpace.lastIndex = this.pos;
				var skip = skipWhiteSpace.exec(this.input);
				var next = this.pos + skip[0].length,
				    nextCh = this.input.charCodeAt(next);
				if (nextCh === 91 || nextCh == 123) {
					return true;
				}
				if (isIdentifierStart(nextCh, true)) {
					var pos = next + 1;
					while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
						++pos;
					}
					var ident = this.input.slice(next, pos);
					if (!this.isKeyword(ident)) {
						return true;
					}
				}
				return false;
			};

			pp$1.isAsyncFunction = function () {
				if (this.type !== types.name || this.options.ecmaVersion < 8 || this.value != "async") {
					return false;
				}

				skipWhiteSpace.lastIndex = this.pos;
				var skip = skipWhiteSpace.exec(this.input);
				var next = this.pos + skip[0].length;
				return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 == this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
			};

			pp$1.parseStatement = function (declaration, topLevel, exports) {
				var starttype = this.type,
				    node = this.startNode(),
				    kind;

				if (this.isLet()) {
					starttype = types._var;
					kind = "let";
				}

				switch (starttype) {
					case types._break:case types._continue:
						return this.parseBreakContinueStatement(node, starttype.keyword);
					case types._debugger:
						return this.parseDebuggerStatement(node);
					case types._do:
						return this.parseDoStatement(node);
					case types._for:
						return this.parseForStatement(node);
					case types._function:
						if (!declaration && this.options.ecmaVersion >= 6) {
							this.unexpected();
						}
						return this.parseFunctionStatement(node, false);
					case types._class:
						if (!declaration) {
							this.unexpected();
						}
						return this.parseClass(node, true);
					case types._if:
						return this.parseIfStatement(node);
					case types._return:
						return this.parseReturnStatement(node);
					case types._switch:
						return this.parseSwitchStatement(node);
					case types._throw:
						return this.parseThrowStatement(node);
					case types._try:
						return this.parseTryStatement(node);
					case types._const:case types._var:
						kind = kind || this.value;
						if (!declaration && kind != "var") {
							this.unexpected();
						}
						return this.parseVarStatement(node, kind);
					case types._while:
						return this.parseWhileStatement(node);
					case types._with:
						return this.parseWithStatement(node);
					case types.braceL:
						return this.parseBlock();
					case types.semi:
						return this.parseEmptyStatement(node);
					case types._export:
					case types._import:
						if (!this.options.allowImportExportEverywhere) {
							if (!topLevel) {
								this.raise(this.start, "'import' and 'export' may only appear at the top level");
							}
							if (!this.inModule) {
								this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
							}
						}
						return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);

					default:
						if (this.isAsyncFunction() && declaration) {
							this.next();
							return this.parseFunctionStatement(node, true);
						}

						var maybeName = this.value,
						    expr = this.parseExpression();
						if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
							return this.parseLabeledStatement(node, maybeName, expr);
						} else {
							return this.parseExpressionStatement(node, expr);
						}
				}
			};

			pp$1.parseBreakContinueStatement = function (node, keyword) {
				var this$1 = this;

				var isBreak = keyword == "break";
				this.next();
				if (this.eat(types.semi) || this.insertSemicolon()) {
					node.label = null;
				} else if (this.type !== types.name) {
					this.unexpected();
				} else {
					node.label = this.parseIdent();
					this.semicolon();
				}

				var i = 0;
				for (; i < this.labels.length; ++i) {
					var lab = this$1.labels[i];
					if (node.label == null || lab.name === node.label.name) {
						if (lab.kind != null && (isBreak || lab.kind === "loop")) {
							break;
						}
						if (node.label && isBreak) {
							break;
						}
					}
				}
				if (i === this.labels.length) {
					this.raise(node.start, "Unsyntactic " + keyword);
				}
				return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
			};

			pp$1.parseDebuggerStatement = function (node) {
				this.next();
				this.semicolon();
				return this.finishNode(node, "DebuggerStatement");
			};

			pp$1.parseDoStatement = function (node) {
				this.next();
				this.labels.push(loopLabel);
				node.body = this.parseStatement(false);
				this.labels.pop();
				this.expect(types._while);
				node.test = this.parseParenExpression();
				if (this.options.ecmaVersion >= 6) {
					this.eat(types.semi);
				} else {
					this.semicolon();
				}
				return this.finishNode(node, "DoWhileStatement");
			};

			pp$1.parseForStatement = function (node) {
				this.next();
				this.labels.push(loopLabel);
				this.enterLexicalScope();
				this.expect(types.parenL);
				if (this.type === types.semi) {
					return this.parseFor(node, null);
				}
				var isLet = this.isLet();
				if (this.type === types._var || this.type === types._const || isLet) {
					var init$1 = this.startNode(),
					    kind = isLet ? "let" : this.value;
					this.next();
					this.parseVar(init$1, true, kind);
					this.finishNode(init$1, "VariableDeclaration");
					if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1 && !(kind !== "var" && init$1.declarations[0].init)) {
						return this.parseForIn(node, init$1);
					}
					return this.parseFor(node, init$1);
				}
				var refDestructuringErrors = new DestructuringErrors();
				var init = this.parseExpression(true, refDestructuringErrors);
				if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
					this.toAssignable(init);
					this.checkLVal(init);
					this.checkPatternErrors(refDestructuringErrors, true);
					return this.parseForIn(node, init);
				} else {
					this.checkExpressionErrors(refDestructuringErrors, true);
				}
				return this.parseFor(node, init);
			};

			pp$1.parseFunctionStatement = function (node, isAsync) {
				this.next();
				return this.parseFunction(node, true, false, isAsync);
			};

			pp$1.isFunction = function () {
				return this.type === types._function || this.isAsyncFunction();
			};

			pp$1.parseIfStatement = function (node) {
				this.next();
				node.test = this.parseParenExpression();
				node.consequent = this.parseStatement(!this.strict && this.isFunction());
				node.alternate = this.eat(types._else) ? this.parseStatement(!this.strict && this.isFunction()) : null;
				return this.finishNode(node, "IfStatement");
			};

			pp$1.parseReturnStatement = function (node) {
				if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
					this.raise(this.start, "'return' outside of function");
				}
				this.next();

				if (this.eat(types.semi) || this.insertSemicolon()) {
					node.argument = null;
				} else {
					node.argument = this.parseExpression();this.semicolon();
				}
				return this.finishNode(node, "ReturnStatement");
			};

			pp$1.parseSwitchStatement = function (node) {
				var this$1 = this;

				this.next();
				node.discriminant = this.parseParenExpression();
				node.cases = [];
				this.expect(types.braceL);
				this.labels.push(switchLabel);
				this.enterLexicalScope();

				var cur;
				for (var sawDefault = false; this.type != types.braceR;) {
					if (this$1.type === types._case || this$1.type === types._default) {
						var isCase = this$1.type === types._case;
						if (cur) {
							this$1.finishNode(cur, "SwitchCase");
						}
						node.cases.push(cur = this$1.startNode());
						cur.consequent = [];
						this$1.next();
						if (isCase) {
							cur.test = this$1.parseExpression();
						} else {
							if (sawDefault) {
								this$1.raiseRecoverable(this$1.lastTokStart, "Multiple default clauses");
							}
							sawDefault = true;
							cur.test = null;
						}
						this$1.expect(types.colon);
					} else {
						if (!cur) {
							this$1.unexpected();
						}
						cur.consequent.push(this$1.parseStatement(true));
					}
				}
				this.exitLexicalScope();
				if (cur) {
					this.finishNode(cur, "SwitchCase");
				}
				this.next();
				this.labels.pop();
				return this.finishNode(node, "SwitchStatement");
			};

			pp$1.parseThrowStatement = function (node) {
				this.next();
				if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
					this.raise(this.lastTokEnd, "Illegal newline after throw");
				}
				node.argument = this.parseExpression();
				this.semicolon();
				return this.finishNode(node, "ThrowStatement");
			};

			var empty = [];

			pp$1.parseTryStatement = function (node) {
				this.next();
				node.block = this.parseBlock();
				node.handler = null;
				if (this.type === types._catch) {
					var clause = this.startNode();
					this.next();
					this.expect(types.parenL);
					clause.param = this.parseBindingAtom();
					this.enterLexicalScope();
					this.checkLVal(clause.param, "let");
					this.expect(types.parenR);
					clause.body = this.parseBlock(false);
					this.exitLexicalScope();
					node.handler = this.finishNode(clause, "CatchClause");
				}
				node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
				if (!node.handler && !node.finalizer) {
					this.raise(node.start, "Missing catch or finally clause");
				}
				return this.finishNode(node, "TryStatement");
			};

			pp$1.parseVarStatement = function (node, kind) {
				this.next();
				this.parseVar(node, false, kind);
				this.semicolon();
				return this.finishNode(node, "VariableDeclaration");
			};

			pp$1.parseWhileStatement = function (node) {
				this.next();
				node.test = this.parseParenExpression();
				this.labels.push(loopLabel);
				node.body = this.parseStatement(false);
				this.labels.pop();
				return this.finishNode(node, "WhileStatement");
			};

			pp$1.parseWithStatement = function (node) {
				if (this.strict) {
					this.raise(this.start, "'with' in strict mode");
				}
				this.next();
				node.object = this.parseParenExpression();
				node.body = this.parseStatement(false);
				return this.finishNode(node, "WithStatement");
			};

			pp$1.parseEmptyStatement = function (node) {
				this.next();
				return this.finishNode(node, "EmptyStatement");
			};

			pp$1.parseLabeledStatement = function (node, maybeName, expr) {
				var this$1 = this;

				for (var i$1 = 0, list = this$1.labels; i$1 < list.length; i$1 += 1) {
					var label = list[i$1];

					if (label.name === maybeName) {
						this$1.raise(expr.start, "Label '" + maybeName + "' is already declared");
					}
				}
				var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
				for (var i = this.labels.length - 1; i >= 0; i--) {
					var label$1 = this$1.labels[i];
					if (label$1.statementStart == node.start) {
						label$1.statementStart = this$1.start;
						label$1.kind = kind;
					} else {
						break;
					}
				}
				this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });
				node.body = this.parseStatement(true);
				if (node.body.type == "ClassDeclaration" || node.body.type == "VariableDeclaration" && node.body.kind != "var" || node.body.type == "FunctionDeclaration" && (this.strict || node.body.generator)) {
					this.raiseRecoverable(node.body.start, "Invalid labeled declaration");
				}
				this.labels.pop();
				node.label = expr;
				return this.finishNode(node, "LabeledStatement");
			};

			pp$1.parseExpressionStatement = function (node, expr) {
				node.expression = expr;
				this.semicolon();
				return this.finishNode(node, "ExpressionStatement");
			};

			pp$1.parseBlock = function (createNewLexicalScope) {
				var this$1 = this;
				if (createNewLexicalScope === void 0) createNewLexicalScope = true;

				var node = this.startNode();
				node.body = [];
				this.expect(types.braceL);
				if (createNewLexicalScope) {
					this.enterLexicalScope();
				}
				while (!this.eat(types.braceR)) {
					var stmt = this$1.parseStatement(true);
					node.body.push(stmt);
				}
				if (createNewLexicalScope) {
					this.exitLexicalScope();
				}
				return this.finishNode(node, "BlockStatement");
			};

			pp$1.parseFor = function (node, init) {
				node.init = init;
				this.expect(types.semi);
				node.test = this.type === types.semi ? null : this.parseExpression();
				this.expect(types.semi);
				node.update = this.type === types.parenR ? null : this.parseExpression();
				this.expect(types.parenR);
				this.exitLexicalScope();
				node.body = this.parseStatement(false);
				this.labels.pop();
				return this.finishNode(node, "ForStatement");
			};

			pp$1.parseForIn = function (node, init) {
				var type = this.type === types._in ? "ForInStatement" : "ForOfStatement";
				this.next();
				node.left = init;
				node.right = this.parseExpression();
				this.expect(types.parenR);
				this.exitLexicalScope();
				node.body = this.parseStatement(false);
				this.labels.pop();
				return this.finishNode(node, type);
			};

			pp$1.parseVar = function (node, isFor, kind) {
				var this$1 = this;

				node.declarations = [];
				node.kind = kind;
				for (;;) {
					var decl = this$1.startNode();
					this$1.parseVarId(decl, kind);
					if (this$1.eat(types.eq)) {
						decl.init = this$1.parseMaybeAssign(isFor);
					} else if (kind === "const" && !(this$1.type === types._in || this$1.options.ecmaVersion >= 6 && this$1.isContextual("of"))) {
						this$1.unexpected();
					} else if (decl.id.type != "Identifier" && !(isFor && (this$1.type === types._in || this$1.isContextual("of")))) {
						this$1.raise(this$1.lastTokEnd, "Complex binding patterns require an initialization value");
					} else {
						decl.init = null;
					}
					node.declarations.push(this$1.finishNode(decl, "VariableDeclarator"));
					if (!this$1.eat(types.comma)) {
						break;
					}
				}
				return node;
			};

			pp$1.parseVarId = function (decl, kind) {
				decl.id = this.parseBindingAtom(kind);
				this.checkLVal(decl.id, kind, false);
			};

			pp$1.parseFunction = function (node, isStatement, allowExpressionBody, isAsync) {
				this.initFunction(node);
				if (this.options.ecmaVersion >= 6 && !isAsync) {
					node.generator = this.eat(types.star);
				}
				if (this.options.ecmaVersion >= 8) {
					node.async = !!isAsync;
				}

				if (isStatement) {
					node.id = isStatement === "nullableID" && this.type != types.name ? null : this.parseIdent();
					if (node.id) {
						this.checkLVal(node.id, "var");
					}
				}

				var oldInGen = this.inGenerator,
				    oldInAsync = this.inAsync,
				    oldYieldPos = this.yieldPos,
				    oldAwaitPos = this.awaitPos,
				    oldInFunc = this.inFunction;
				this.inGenerator = node.generator;
				this.inAsync = node.async;
				this.yieldPos = 0;
				this.awaitPos = 0;
				this.inFunction = true;
				this.enterFunctionScope();

				if (!isStatement) {
					node.id = this.type == types.name ? this.parseIdent() : null;
				}

				this.parseFunctionParams(node);
				this.parseFunctionBody(node, allowExpressionBody);

				this.inGenerator = oldInGen;
				this.inAsync = oldInAsync;
				this.yieldPos = oldYieldPos;
				this.awaitPos = oldAwaitPos;
				this.inFunction = oldInFunc;
				return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
			};

			pp$1.parseFunctionParams = function (node) {
				this.expect(types.parenL);
				node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
				this.checkYieldAwaitInDefaultParams();
			};

			pp$1.parseClass = function (node, isStatement) {
				var this$1 = this;

				this.next();

				this.parseClassId(node, isStatement);
				this.parseClassSuper(node);
				var classBody = this.startNode();
				var hadConstructor = false;
				classBody.body = [];
				this.expect(types.braceL);
				while (!this.eat(types.braceR)) {
					if (this$1.eat(types.semi)) {
						continue;
					}
					var method = this$1.startNode();
					var isGenerator = this$1.eat(types.star);
					var isAsync = false;
					var isMaybeStatic = this$1.type === types.name && this$1.value === "static";
					this$1.parsePropertyName(method);
					method.static = isMaybeStatic && this$1.type !== types.parenL;
					if (method.static) {
						if (isGenerator) {
							this$1.unexpected();
						}
						isGenerator = this$1.eat(types.star);
						this$1.parsePropertyName(method);
					}
					if (this$1.options.ecmaVersion >= 8 && !isGenerator && !method.computed && method.key.type === "Identifier" && method.key.name === "async" && this$1.type !== types.parenL && !this$1.canInsertSemicolon()) {
						isAsync = true;
						this$1.parsePropertyName(method);
					}
					method.kind = "method";
					var isGetSet = false;
					if (!method.computed) {
						var key = method.key;
						if (!isGenerator && !isAsync && key.type === "Identifier" && this$1.type !== types.parenL && (key.name === "get" || key.name === "set")) {
							isGetSet = true;
							method.kind = key.name;
							key = this$1.parsePropertyName(method);
						}
						if (!method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
							if (hadConstructor) {
								this$1.raise(key.start, "Duplicate constructor in the same class");
							}
							if (isGetSet) {
								this$1.raise(key.start, "Constructor can't have get/set modifier");
							}
							if (isGenerator) {
								this$1.raise(key.start, "Constructor can't be a generator");
							}
							if (isAsync) {
								this$1.raise(key.start, "Constructor can't be an async method");
							}
							method.kind = "constructor";
							hadConstructor = true;
						}
					}
					this$1.parseClassMethod(classBody, method, isGenerator, isAsync);
					if (isGetSet) {
						var paramCount = method.kind === "get" ? 0 : 1;
						if (method.value.params.length !== paramCount) {
							var start = method.value.start;
							if (method.kind === "get") {
								this$1.raiseRecoverable(start, "getter should have no params");
							} else {
								this$1.raiseRecoverable(start, "setter should have exactly one param");
							}
						} else {
							if (method.kind === "set" && method.value.params[0].type === "RestElement") {
								this$1.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
							}
						}
					}
				}
				node.body = this.finishNode(classBody, "ClassBody");
				return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
			};

			pp$1.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
				method.value = this.parseMethod(isGenerator, isAsync);
				classBody.body.push(this.finishNode(method, "MethodDefinition"));
			};

			pp$1.parseClassId = function (node, isStatement) {
				node.id = this.type === types.name ? this.parseIdent() : isStatement === true ? this.unexpected() : null;
			};

			pp$1.parseClassSuper = function (node) {
				node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
			};

			pp$1.parseExport = function (node, exports) {
				var this$1 = this;

				this.next();
				if (this.eat(types.star)) {
					this.expectContextual("from");
					node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
					this.semicolon();
					return this.finishNode(node, "ExportAllDeclaration");
				}
				if (this.eat(types._default)) {
					this.checkExport(exports, "default", this.lastTokStart);
					var isAsync;
					if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
						var fNode = this.startNode();
						this.next();
						if (isAsync) {
							this.next();
						}
						node.declaration = this.parseFunction(fNode, "nullableID", false, isAsync);
					} else if (this.type === types._class) {
						var cNode = this.startNode();
						node.declaration = this.parseClass(cNode, "nullableID");
					} else {
						node.declaration = this.parseMaybeAssign();
						this.semicolon();
					}
					return this.finishNode(node, "ExportDefaultDeclaration");
				}
				if (this.shouldParseExportStatement()) {
					node.declaration = this.parseStatement(true);
					if (node.declaration.type === "VariableDeclaration") {
						this.checkVariableExport(exports, node.declaration.declarations);
					} else {
						this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
					}
					node.specifiers = [];
					node.source = null;
				} else {
					node.declaration = null;
					node.specifiers = this.parseExportSpecifiers(exports);
					if (this.eatContextual("from")) {
						node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
					} else {
						for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
							var spec = list[i];

							this$1.checkUnreserved(spec.local);
						}

						node.source = null;
					}
					this.semicolon();
				}
				return this.finishNode(node, "ExportNamedDeclaration");
			};

			pp$1.checkExport = function (exports, name, pos) {
				if (!exports) {
					return;
				}
				if (has(exports, name)) {
					this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
				}
				exports[name] = true;
			};

			pp$1.checkPatternExport = function (exports, pat) {
				var this$1 = this;

				var type = pat.type;
				if (type == "Identifier") {
					this.checkExport(exports, pat.name, pat.start);
				} else if (type == "ObjectPattern") {
					for (var i = 0, list = pat.properties; i < list.length; i += 1) {
						var prop = list[i];

						this$1.checkPatternExport(exports, prop.value);
					}
				} else if (type == "ArrayPattern") {
					for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
						var elt = list$1[i$1];

						if (elt) {
							this$1.checkPatternExport(exports, elt);
						}
					}
				} else if (type == "AssignmentPattern") {
					this.checkPatternExport(exports, pat.left);
				} else if (type == "ParenthesizedExpression") {
					this.checkPatternExport(exports, pat.expression);
				}
			};

			pp$1.checkVariableExport = function (exports, decls) {
				var this$1 = this;

				if (!exports) {
					return;
				}
				for (var i = 0, list = decls; i < list.length; i += 1) {
					var decl = list[i];

					this$1.checkPatternExport(exports, decl.id);
				}
			};

			pp$1.shouldParseExportStatement = function () {
				return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
			};

			pp$1.parseExportSpecifiers = function (exports) {
				var this$1 = this;

				var nodes = [],
				    first = true;
				this.expect(types.braceL);
				while (!this.eat(types.braceR)) {
					if (!first) {
						this$1.expect(types.comma);
						if (this$1.afterTrailingComma(types.braceR)) {
							break;
						}
					} else {
						first = false;
					}

					var node = this$1.startNode();
					node.local = this$1.parseIdent(true);
					node.exported = this$1.eatContextual("as") ? this$1.parseIdent(true) : node.local;
					this$1.checkExport(exports, node.exported.name, node.exported.start);
					nodes.push(this$1.finishNode(node, "ExportSpecifier"));
				}
				return nodes;
			};

			pp$1.parseImport = function (node) {
				this.next();
				if (this.type === types.string) {
					node.specifiers = empty;
					node.source = this.parseExprAtom();
				} else {
					node.specifiers = this.parseImportSpecifiers();
					this.expectContextual("from");
					node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
				}
				this.semicolon();
				return this.finishNode(node, "ImportDeclaration");
			};

			pp$1.parseImportSpecifiers = function () {
				var this$1 = this;

				var nodes = [],
				    first = true;
				if (this.type === types.name) {
					var node = this.startNode();
					node.local = this.parseIdent();
					this.checkLVal(node.local, "let");
					nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
					if (!this.eat(types.comma)) {
						return nodes;
					}
				}
				if (this.type === types.star) {
					var node$1 = this.startNode();
					this.next();
					this.expectContextual("as");
					node$1.local = this.parseIdent();
					this.checkLVal(node$1.local, "let");
					nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
					return nodes;
				}
				this.expect(types.braceL);
				while (!this.eat(types.braceR)) {
					if (!first) {
						this$1.expect(types.comma);
						if (this$1.afterTrailingComma(types.braceR)) {
							break;
						}
					} else {
						first = false;
					}

					var node$2 = this$1.startNode();
					node$2.imported = this$1.parseIdent(true);
					if (this$1.eatContextual("as")) {
						node$2.local = this$1.parseIdent();
					} else {
						this$1.checkUnreserved(node$2.imported);
						node$2.local = node$2.imported;
					}
					this$1.checkLVal(node$2.local, "let");
					nodes.push(this$1.finishNode(node$2, "ImportSpecifier"));
				}
				return nodes;
			};

			var pp$2 = Parser.prototype;

			pp$2.toAssignable = function (node, isBinding) {
				var this$1 = this;

				if (this.options.ecmaVersion >= 6 && node) {
					switch (node.type) {
						case "Identifier":
							if (this.inAsync && node.name === "await") {
								this.raise(node.start, "Can not use 'await' as identifier inside an async function");
							}
							break;

						case "ObjectPattern":
						case "ArrayPattern":
							break;

						case "ObjectExpression":
							node.type = "ObjectPattern";
							for (var i = 0, list = node.properties; i < list.length; i += 1) {
								var prop = list[i];

								if (prop.kind !== "init") {
									this$1.raise(prop.key.start, "Object pattern can't contain getter or setter");
								}
								this$1.toAssignable(prop.value, isBinding);
							}
							break;

						case "ArrayExpression":
							node.type = "ArrayPattern";
							this.toAssignableList(node.elements, isBinding);
							break;

						case "AssignmentExpression":
							if (node.operator === "=") {
								node.type = "AssignmentPattern";
								delete node.operator;
								this.toAssignable(node.left, isBinding);
							} else {
								this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
								break;
							}

						case "AssignmentPattern":
							break;

						case "ParenthesizedExpression":
							this.toAssignable(node.expression, isBinding);
							break;

						case "MemberExpression":
							if (!isBinding) {
								break;
							}

						default:
							this.raise(node.start, "Assigning to rvalue");
					}
				}
				return node;
			};

			pp$2.toAssignableList = function (exprList, isBinding) {
				var this$1 = this;

				var end = exprList.length;
				if (end) {
					var last = exprList[end - 1];
					if (last && last.type == "RestElement") {
						--end;
					} else if (last && last.type == "SpreadElement") {
						last.type = "RestElement";
						var arg = last.argument;
						this.toAssignable(arg, isBinding);
						--end;
					}

					if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
						this.unexpected(last.argument.start);
					}
				}
				for (var i = 0; i < end; i++) {
					var elt = exprList[i];
					if (elt) {
						this$1.toAssignable(elt, isBinding);
					}
				}
				return exprList;
			};

			pp$2.parseSpread = function (refDestructuringErrors) {
				var node = this.startNode();
				this.next();
				node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
				return this.finishNode(node, "SpreadElement");
			};

			pp$2.parseRestBinding = function () {
				var node = this.startNode();
				this.next();

				if (this.options.ecmaVersion === 6 && this.type !== types.name) {
					this.unexpected();
				}

				node.argument = this.parseBindingAtom();

				return this.finishNode(node, "RestElement");
			};

			pp$2.parseBindingAtom = function () {
				if (this.options.ecmaVersion < 6) {
					return this.parseIdent();
				}
				switch (this.type) {
					case types.name:
						return this.parseIdent();

					case types.bracketL:
						var node = this.startNode();
						this.next();
						node.elements = this.parseBindingList(types.bracketR, true, true);
						return this.finishNode(node, "ArrayPattern");

					case types.braceL:
						return this.parseObj(true);

					default:
						this.unexpected();
				}
			};

			pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
				var this$1 = this;

				var elts = [],
				    first = true;
				while (!this.eat(close)) {
					if (first) {
						first = false;
					} else {
						this$1.expect(types.comma);
					}
					if (allowEmpty && this$1.type === types.comma) {
						elts.push(null);
					} else if (allowTrailingComma && this$1.afterTrailingComma(close)) {
						break;
					} else if (this$1.type === types.ellipsis) {
						var rest = this$1.parseRestBinding();
						this$1.parseBindingListItem(rest);
						elts.push(rest);
						if (this$1.type === types.comma) {
							this$1.raise(this$1.start, "Comma is not permitted after the rest element");
						}
						this$1.expect(close);
						break;
					} else {
						var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc);
						this$1.parseBindingListItem(elem);
						elts.push(elem);
					}
				}
				return elts;
			};

			pp$2.parseBindingListItem = function (param) {
				return param;
			};

			pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
				left = left || this.parseBindingAtom();
				if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
					return left;
				}
				var node = this.startNodeAt(startPos, startLoc);
				node.left = left;
				node.right = this.parseMaybeAssign();
				return this.finishNode(node, "AssignmentPattern");
			};

			pp$2.checkLVal = function (expr, bindingType, checkClashes) {
				var this$1 = this;

				switch (expr.type) {
					case "Identifier":
						if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
							this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
						}
						if (checkClashes) {
							if (has(checkClashes, expr.name)) {
								this.raiseRecoverable(expr.start, "Argument name clash");
							}
							checkClashes[expr.name] = true;
						}
						if (bindingType && bindingType !== "none") {
							if (bindingType === "var" && !this.canDeclareVarName(expr.name) || bindingType !== "var" && !this.canDeclareLexicalName(expr.name)) {
								this.raiseRecoverable(expr.start, "Identifier '" + expr.name + "' has already been declared");
							}
							if (bindingType === "var") {
								this.declareVarName(expr.name);
							} else {
								this.declareLexicalName(expr.name);
							}
						}
						break;

					case "MemberExpression":
						if (bindingType) {
							this.raiseRecoverable(expr.start, (bindingType ? "Binding" : "Assigning to") + " member expression");
						}
						break;

					case "ObjectPattern":
						for (var i = 0, list = expr.properties; i < list.length; i += 1) {
							var prop = list[i];

							this$1.checkLVal(prop.value, bindingType, checkClashes);
						}
						break;

					case "ArrayPattern":
						for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
							var elem = list$1[i$1];

							if (elem) {
								this$1.checkLVal(elem, bindingType, checkClashes);
							}
						}
						break;

					case "AssignmentPattern":
						this.checkLVal(expr.left, bindingType, checkClashes);
						break;

					case "RestElement":
						this.checkLVal(expr.argument, bindingType, checkClashes);
						break;

					case "ParenthesizedExpression":
						this.checkLVal(expr.expression, bindingType, checkClashes);
						break;

					default:
						this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
				}
			};

			var pp$3 = Parser.prototype;

			pp$3.checkPropClash = function (prop, propHash) {
				if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
					return;
				}
				var key = prop.key;
				var name;
				switch (key.type) {
					case "Identifier":
						name = key.name;break;
					case "Literal":
						name = String(key.value);break;
					default:
						return;
				}
				var kind = prop.kind;
				if (this.options.ecmaVersion >= 6) {
					if (name === "__proto__" && kind === "init") {
						if (propHash.proto) {
							this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
						}
						propHash.proto = true;
					}
					return;
				}
				name = "$" + name;
				var other = propHash[name];
				if (other) {
					var redefinition;
					if (kind === "init") {
						redefinition = this.strict && other.init || other.get || other.set;
					} else {
						redefinition = other.init || other[kind];
					}
					if (redefinition) {
						this.raiseRecoverable(key.start, "Redefinition of property");
					}
				} else {
					other = propHash[name] = {
						init: false,
						get: false,
						set: false
					};
				}
				other[kind] = true;
			};

			pp$3.parseExpression = function (noIn, refDestructuringErrors) {
				var this$1 = this;

				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
				if (this.type === types.comma) {
					var node = this.startNodeAt(startPos, startLoc);
					node.expressions = [expr];
					while (this.eat(types.comma)) {
						node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors));
					}
					return this.finishNode(node, "SequenceExpression");
				}
				return expr;
			};

			pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
				if (this.inGenerator && this.isContextual("yield")) {
					return this.parseYield();
				}

				var ownDestructuringErrors = false,
				    oldParenAssign = -1,
				    oldTrailingComma = -1;
				if (refDestructuringErrors) {
					oldParenAssign = refDestructuringErrors.parenthesizedAssign;
					oldTrailingComma = refDestructuringErrors.trailingComma;
					refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
				} else {
					refDestructuringErrors = new DestructuringErrors();
					ownDestructuringErrors = true;
				}

				var startPos = this.start,
				    startLoc = this.startLoc;
				if (this.type == types.parenL || this.type == types.name) {
					this.potentialArrowAt = this.start;
				}
				var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
				if (afterLeftParse) {
					left = afterLeftParse.call(this, left, startPos, startLoc);
				}
				if (this.type.isAssign) {
					this.checkPatternErrors(refDestructuringErrors, true);
					if (!ownDestructuringErrors) {
						DestructuringErrors.call(refDestructuringErrors);
					}
					var node = this.startNodeAt(startPos, startLoc);
					node.operator = this.value;
					node.left = this.type === types.eq ? this.toAssignable(left) : left;
					refDestructuringErrors.shorthandAssign = -1;
					this.checkLVal(left);
					this.next();
					node.right = this.parseMaybeAssign(noIn);
					return this.finishNode(node, "AssignmentExpression");
				} else {
					if (ownDestructuringErrors) {
						this.checkExpressionErrors(refDestructuringErrors, true);
					}
				}
				if (oldParenAssign > -1) {
					refDestructuringErrors.parenthesizedAssign = oldParenAssign;
				}
				if (oldTrailingComma > -1) {
					refDestructuringErrors.trailingComma = oldTrailingComma;
				}
				return left;
			};

			pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseExprOps(noIn, refDestructuringErrors);
				if (this.checkExpressionErrors(refDestructuringErrors)) {
					return expr;
				}
				if (this.eat(types.question)) {
					var node = this.startNodeAt(startPos, startLoc);
					node.test = expr;
					node.consequent = this.parseMaybeAssign();
					this.expect(types.colon);
					node.alternate = this.parseMaybeAssign(noIn);
					return this.finishNode(node, "ConditionalExpression");
				}
				return expr;
			};

			pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseMaybeUnary(refDestructuringErrors, false);
				if (this.checkExpressionErrors(refDestructuringErrors)) {
					return expr;
				}
				return expr.start == startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
			};

			pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
				var prec = this.type.binop;
				if (prec != null && (!noIn || this.type !== types._in)) {
					if (prec > minPrec) {
						var logical = this.type === types.logicalOR || this.type === types.logicalAND;
						var op = this.value;
						this.next();
						var startPos = this.start,
						    startLoc = this.startLoc;
						var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
						var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
						return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
					}
				}
				return left;
			};

			pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
				var node = this.startNodeAt(startPos, startLoc);
				node.left = left;
				node.operator = op;
				node.right = right;
				return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
			};

			pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
				var this$1 = this;

				var startPos = this.start,
				    startLoc = this.startLoc,
				    expr;
				if (this.inAsync && this.isContextual("await")) {
					expr = this.parseAwait(refDestructuringErrors);
					sawUnary = true;
				} else if (this.type.prefix) {
					var node = this.startNode(),
					    update = this.type === types.incDec;
					node.operator = this.value;
					node.prefix = true;
					this.next();
					node.argument = this.parseMaybeUnary(null, true);
					this.checkExpressionErrors(refDestructuringErrors, true);
					if (update) {
						this.checkLVal(node.argument);
					} else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
						this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
					} else {
						sawUnary = true;
					}
					expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
				} else {
					expr = this.parseExprSubscripts(refDestructuringErrors);
					if (this.checkExpressionErrors(refDestructuringErrors)) {
						return expr;
					}
					while (this.type.postfix && !this.canInsertSemicolon()) {
						var node$1 = this$1.startNodeAt(startPos, startLoc);
						node$1.operator = this$1.value;
						node$1.prefix = false;
						node$1.argument = expr;
						this$1.checkLVal(expr);
						this$1.next();
						expr = this$1.finishNode(node$1, "UpdateExpression");
					}
				}

				if (!sawUnary && this.eat(types.starstar)) {
					return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
				} else {
					return expr;
				}
			};

			pp$3.parseExprSubscripts = function (refDestructuringErrors) {
				var startPos = this.start,
				    startLoc = this.startLoc;
				var expr = this.parseExprAtom(refDestructuringErrors);
				var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
				if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {
					return expr;
				}
				var result = this.parseSubscripts(expr, startPos, startLoc);
				if (refDestructuringErrors && result.type === "MemberExpression") {
					if (refDestructuringErrors.parenthesizedAssign >= result.start) {
						refDestructuringErrors.parenthesizedAssign = -1;
					}
					if (refDestructuringErrors.parenthesizedBind >= result.start) {
						refDestructuringErrors.parenthesizedBind = -1;
					}
				}
				return result;
			};

			pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
				var this$1 = this;

				var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd == base.end && !this.canInsertSemicolon();
				for (var computed = void 0;;) {
					if ((computed = this$1.eat(types.bracketL)) || this$1.eat(types.dot)) {
						var node = this$1.startNodeAt(startPos, startLoc);
						node.object = base;
						node.property = computed ? this$1.parseExpression() : this$1.parseIdent(true);
						node.computed = !!computed;
						if (computed) {
							this$1.expect(types.bracketR);
						}
						base = this$1.finishNode(node, "MemberExpression");
					} else if (!noCalls && this$1.eat(types.parenL)) {
						var refDestructuringErrors = new DestructuringErrors(),
						    oldYieldPos = this$1.yieldPos,
						    oldAwaitPos = this$1.awaitPos;
						this$1.yieldPos = 0;
						this$1.awaitPos = 0;
						var exprList = this$1.parseExprList(types.parenR, this$1.options.ecmaVersion >= 8, false, refDestructuringErrors);
						if (maybeAsyncArrow && !this$1.canInsertSemicolon() && this$1.eat(types.arrow)) {
							this$1.checkPatternErrors(refDestructuringErrors, false);
							this$1.checkYieldAwaitInDefaultParams();
							this$1.yieldPos = oldYieldPos;
							this$1.awaitPos = oldAwaitPos;
							return this$1.parseArrowExpression(this$1.startNodeAt(startPos, startLoc), exprList, true);
						}
						this$1.checkExpressionErrors(refDestructuringErrors, true);
						this$1.yieldPos = oldYieldPos || this$1.yieldPos;
						this$1.awaitPos = oldAwaitPos || this$1.awaitPos;
						var node$1 = this$1.startNodeAt(startPos, startLoc);
						node$1.callee = base;
						node$1.arguments = exprList;
						base = this$1.finishNode(node$1, "CallExpression");
					} else if (this$1.type === types.backQuote) {
						var node$2 = this$1.startNodeAt(startPos, startLoc);
						node$2.tag = base;
						node$2.quasi = this$1.parseTemplate({ isTagged: true });
						base = this$1.finishNode(node$2, "TaggedTemplateExpression");
					} else {
						return base;
					}
				}
			};

			pp$3.parseExprAtom = function (refDestructuringErrors) {
				var node,
				    canBeArrow = this.potentialArrowAt == this.start;
				switch (this.type) {
					case types._super:
						if (!this.inFunction) {
							this.raise(this.start, "'super' outside of function or class");
						}

					case types._this:
						var type = this.type === types._this ? "ThisExpression" : "Super";
						node = this.startNode();
						this.next();
						return this.finishNode(node, type);

					case types.name:
						var startPos = this.start,
						    startLoc = this.startLoc;
						var id = this.parseIdent(this.type !== types.name);
						if (this.options.ecmaVersion >= 8 && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
							return this.parseFunction(this.startNodeAt(startPos, startLoc), false, false, true);
						}
						if (canBeArrow && !this.canInsertSemicolon()) {
							if (this.eat(types.arrow)) {
								return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
							}
							if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name) {
								id = this.parseIdent();
								if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
									this.unexpected();
								}
								return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
							}
						}
						return id;

					case types.regexp:
						var value = this.value;
						node = this.parseLiteral(value.value);
						node.regex = { pattern: value.pattern, flags: value.flags };
						return node;

					case types.num:case types.string:
						return this.parseLiteral(this.value);

					case types._null:case types._true:case types._false:
						node = this.startNode();
						node.value = this.type === types._null ? null : this.type === types._true;
						node.raw = this.type.keyword;
						this.next();
						return this.finishNode(node, "Literal");

					case types.parenL:
						var start = this.start,
						    expr = this.parseParenAndDistinguishExpression(canBeArrow);
						if (refDestructuringErrors) {
							if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
								refDestructuringErrors.parenthesizedAssign = start;
							}
							if (refDestructuringErrors.parenthesizedBind < 0) {
								refDestructuringErrors.parenthesizedBind = start;
							}
						}
						return expr;

					case types.bracketL:
						node = this.startNode();
						this.next();
						node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
						return this.finishNode(node, "ArrayExpression");

					case types.braceL:
						return this.parseObj(false, refDestructuringErrors);

					case types._function:
						node = this.startNode();
						this.next();
						return this.parseFunction(node, false);

					case types._class:
						return this.parseClass(this.startNode(), false);

					case types._new:
						return this.parseNew();

					case types.backQuote:
						return this.parseTemplate();

					default:
						this.unexpected();
				}
			};

			pp$3.parseLiteral = function (value) {
				var node = this.startNode();
				node.value = value;
				node.raw = this.input.slice(this.start, this.end);
				this.next();
				return this.finishNode(node, "Literal");
			};

			pp$3.parseParenExpression = function () {
				this.expect(types.parenL);
				var val = this.parseExpression();
				this.expect(types.parenR);
				return val;
			};

			pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
				var this$1 = this;

				var startPos = this.start,
				    startLoc = this.startLoc,
				    val,
				    allowTrailingComma = this.options.ecmaVersion >= 8;
				if (this.options.ecmaVersion >= 6) {
					this.next();

					var innerStartPos = this.start,
					    innerStartLoc = this.startLoc;
					var exprList = [],
					    first = true,
					    lastIsComma = false;
					var refDestructuringErrors = new DestructuringErrors(),
					    oldYieldPos = this.yieldPos,
					    oldAwaitPos = this.awaitPos,
					    spreadStart,
					    innerParenStart;
					this.yieldPos = 0;
					this.awaitPos = 0;
					while (this.type !== types.parenR) {
						first ? first = false : this$1.expect(types.comma);
						if (allowTrailingComma && this$1.afterTrailingComma(types.parenR, true)) {
							lastIsComma = true;
							break;
						} else if (this$1.type === types.ellipsis) {
							spreadStart = this$1.start;
							exprList.push(this$1.parseParenItem(this$1.parseRestBinding()));
							if (this$1.type === types.comma) {
								this$1.raise(this$1.start, "Comma is not permitted after the rest element");
							}
							break;
						} else {
							if (this$1.type === types.parenL && !innerParenStart) {
								innerParenStart = this$1.start;
							}
							exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem));
						}
					}
					var innerEndPos = this.start,
					    innerEndLoc = this.startLoc;
					this.expect(types.parenR);

					if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
						this.checkPatternErrors(refDestructuringErrors, false);
						this.checkYieldAwaitInDefaultParams();
						if (innerParenStart) {
							this.unexpected(innerParenStart);
						}
						this.yieldPos = oldYieldPos;
						this.awaitPos = oldAwaitPos;
						return this.parseParenArrowList(startPos, startLoc, exprList);
					}

					if (!exprList.length || lastIsComma) {
						this.unexpected(this.lastTokStart);
					}
					if (spreadStart) {
						this.unexpected(spreadStart);
					}
					this.checkExpressionErrors(refDestructuringErrors, true);
					this.yieldPos = oldYieldPos || this.yieldPos;
					this.awaitPos = oldAwaitPos || this.awaitPos;

					if (exprList.length > 1) {
						val = this.startNodeAt(innerStartPos, innerStartLoc);
						val.expressions = exprList;
						this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
					} else {
						val = exprList[0];
					}
				} else {
					val = this.parseParenExpression();
				}

				if (this.options.preserveParens) {
					var par = this.startNodeAt(startPos, startLoc);
					par.expression = val;
					return this.finishNode(par, "ParenthesizedExpression");
				} else {
					return val;
				}
			};

			pp$3.parseParenItem = function (item) {
				return item;
			};

			pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
				return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
			};

			var empty$1 = [];

			pp$3.parseNew = function () {
				var node = this.startNode();
				var meta = this.parseIdent(true);
				if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
					node.meta = meta;
					node.property = this.parseIdent(true);
					if (node.property.name !== "target") {
						this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
					}
					if (!this.inFunction) {
						this.raiseRecoverable(node.start, "new.target can only be used in functions");
					}
					return this.finishNode(node, "MetaProperty");
				}
				var startPos = this.start,
				    startLoc = this.startLoc;
				node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
				if (this.eat(types.parenL)) {
					node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
				} else {
					node.arguments = empty$1;
				}
				return this.finishNode(node, "NewExpression");
			};

			pp$3.parseTemplateElement = function (ref) {
				var isTagged = ref.isTagged;

				var elem = this.startNode();
				if (this.type === types.invalidTemplate) {
					if (!isTagged) {
						this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
					}
					elem.value = {
						raw: this.value,
						cooked: null
					};
				} else {
					elem.value = {
						raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
						cooked: this.value
					};
				}
				this.next();
				elem.tail = this.type === types.backQuote;
				return this.finishNode(elem, "TemplateElement");
			};

			pp$3.parseTemplate = function (ref) {
				var this$1 = this;
				if (ref === void 0) ref = {};
				var isTagged = ref.isTagged;if (isTagged === void 0) isTagged = false;

				var node = this.startNode();
				this.next();
				node.expressions = [];
				var curElt = this.parseTemplateElement({ isTagged: isTagged });
				node.quasis = [curElt];
				while (!curElt.tail) {
					this$1.expect(types.dollarBraceL);
					node.expressions.push(this$1.parseExpression());
					this$1.expect(types.braceR);
					node.quasis.push(curElt = this$1.parseTemplateElement({ isTagged: isTagged }));
				}
				this.next();
				return this.finishNode(node, "TemplateLiteral");
			};

			pp$3.isAsyncProp = function (prop) {
				return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
			};

			pp$3.parseObj = function (isPattern, refDestructuringErrors) {
				var this$1 = this;

				var node = this.startNode(),
				    first = true,
				    propHash = {};
				node.properties = [];
				this.next();
				while (!this.eat(types.braceR)) {
					if (!first) {
						this$1.expect(types.comma);
						if (this$1.afterTrailingComma(types.braceR)) {
							break;
						}
					} else {
						first = false;
					}

					var prop = this$1.startNode(),
					    isGenerator = void 0,
					    isAsync = void 0,
					    startPos = void 0,
					    startLoc = void 0;
					if (this$1.options.ecmaVersion >= 6) {
						prop.method = false;
						prop.shorthand = false;
						if (isPattern || refDestructuringErrors) {
							startPos = this$1.start;
							startLoc = this$1.startLoc;
						}
						if (!isPattern) {
							isGenerator = this$1.eat(types.star);
						}
					}
					this$1.parsePropertyName(prop);
					if (!isPattern && this$1.options.ecmaVersion >= 8 && !isGenerator && this$1.isAsyncProp(prop)) {
						isAsync = true;
						this$1.parsePropertyName(prop, refDestructuringErrors);
					} else {
						isAsync = false;
					}
					this$1.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors);
					this$1.checkPropClash(prop, propHash);
					node.properties.push(this$1.finishNode(prop, "Property"));
				}
				return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
			};

			pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors) {
				if ((isGenerator || isAsync) && this.type === types.colon) {
					this.unexpected();
				}

				if (this.eat(types.colon)) {
					prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
					prop.kind = "init";
				} else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
					if (isPattern) {
						this.unexpected();
					}
					prop.kind = "init";
					prop.method = true;
					prop.value = this.parseMethod(isGenerator, isAsync);
				} else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type != types.comma && this.type != types.braceR) {
					if (isGenerator || isAsync || isPattern) {
						this.unexpected();
					}
					prop.kind = prop.key.name;
					this.parsePropertyName(prop);
					prop.value = this.parseMethod(false);
					var paramCount = prop.kind === "get" ? 0 : 1;
					if (prop.value.params.length !== paramCount) {
						var start = prop.value.start;
						if (prop.kind === "get") {
							this.raiseRecoverable(start, "getter should have no params");
						} else {
							this.raiseRecoverable(start, "setter should have exactly one param");
						}
					} else {
						if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
							this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
						}
					}
				} else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
					this.checkUnreserved(prop.key);
					prop.kind = "init";
					if (isPattern) {
						prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
					} else if (this.type === types.eq && refDestructuringErrors) {
						if (refDestructuringErrors.shorthandAssign < 0) {
							refDestructuringErrors.shorthandAssign = this.start;
						}
						prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
					} else {
						prop.value = prop.key;
					}
					prop.shorthand = true;
				} else {
					this.unexpected();
				}
			};

			pp$3.parsePropertyName = function (prop) {
				if (this.options.ecmaVersion >= 6) {
					if (this.eat(types.bracketL)) {
						prop.computed = true;
						prop.key = this.parseMaybeAssign();
						this.expect(types.bracketR);
						return prop.key;
					} else {
						prop.computed = false;
					}
				}
				return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(true);
			};

			pp$3.initFunction = function (node) {
				node.id = null;
				if (this.options.ecmaVersion >= 6) {
					node.generator = false;
					node.expression = false;
				}
				if (this.options.ecmaVersion >= 8) {
					node.async = false;
				}
			};

			pp$3.parseMethod = function (isGenerator, isAsync) {
				var node = this.startNode(),
				    oldInGen = this.inGenerator,
				    oldInAsync = this.inAsync,
				    oldYieldPos = this.yieldPos,
				    oldAwaitPos = this.awaitPos,
				    oldInFunc = this.inFunction;

				this.initFunction(node);
				if (this.options.ecmaVersion >= 6) {
					node.generator = isGenerator;
				}
				if (this.options.ecmaVersion >= 8) {
					node.async = !!isAsync;
				}

				this.inGenerator = node.generator;
				this.inAsync = node.async;
				this.yieldPos = 0;
				this.awaitPos = 0;
				this.inFunction = true;
				this.enterFunctionScope();

				this.expect(types.parenL);
				node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
				this.checkYieldAwaitInDefaultParams();
				this.parseFunctionBody(node, false);

				this.inGenerator = oldInGen;
				this.inAsync = oldInAsync;
				this.yieldPos = oldYieldPos;
				this.awaitPos = oldAwaitPos;
				this.inFunction = oldInFunc;
				return this.finishNode(node, "FunctionExpression");
			};

			pp$3.parseArrowExpression = function (node, params, isAsync) {
				var oldInGen = this.inGenerator,
				    oldInAsync = this.inAsync,
				    oldYieldPos = this.yieldPos,
				    oldAwaitPos = this.awaitPos,
				    oldInFunc = this.inFunction;

				this.enterFunctionScope();
				this.initFunction(node);
				if (this.options.ecmaVersion >= 8) {
					node.async = !!isAsync;
				}

				this.inGenerator = false;
				this.inAsync = node.async;
				this.yieldPos = 0;
				this.awaitPos = 0;
				this.inFunction = true;

				node.params = this.toAssignableList(params, true);
				this.parseFunctionBody(node, true);

				this.inGenerator = oldInGen;
				this.inAsync = oldInAsync;
				this.yieldPos = oldYieldPos;
				this.awaitPos = oldAwaitPos;
				this.inFunction = oldInFunc;
				return this.finishNode(node, "ArrowFunctionExpression");
			};

			pp$3.parseFunctionBody = function (node, isArrowFunction) {
				var isExpression = isArrowFunction && this.type !== types.braceL;
				var oldStrict = this.strict,
				    useStrict = false;

				if (isExpression) {
					node.body = this.parseMaybeAssign();
					node.expression = true;
					this.checkParams(node, false);
				} else {
					var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
					if (!oldStrict || nonSimple) {
						useStrict = this.strictDirective(this.end);
						if (useStrict && nonSimple) {
							this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
						}
					}
					var oldLabels = this.labels;
					this.labels = [];
					if (useStrict) {
						this.strict = true;
					}

					this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && this.isSimpleParamList(node.params));
					node.body = this.parseBlock(false);
					node.expression = false;
					this.labels = oldLabels;
				}
				this.exitFunctionScope();

				if (this.strict && node.id) {
					this.checkLVal(node.id, "none");
				}
				this.strict = oldStrict;
			};

			pp$3.isSimpleParamList = function (params) {
				for (var i = 0, list = params; i < list.length; i += 1) {
					var param = list[i];

					if (param.type !== "Identifier") {
						return false;
					}
				}
				return true;
			};

			pp$3.checkParams = function (node, allowDuplicates) {
				var this$1 = this;

				var nameHash = {};
				for (var i = 0, list = node.params; i < list.length; i += 1) {
					var param = list[i];

					this$1.checkLVal(param, "var", allowDuplicates ? null : nameHash);
				}
			};

			pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
				var this$1 = this;

				var elts = [],
				    first = true;
				while (!this.eat(close)) {
					if (!first) {
						this$1.expect(types.comma);
						if (allowTrailingComma && this$1.afterTrailingComma(close)) {
							break;
						}
					} else {
						first = false;
					}

					var elt = void 0;
					if (allowEmpty && this$1.type === types.comma) {
						elt = null;
					} else if (this$1.type === types.ellipsis) {
						elt = this$1.parseSpread(refDestructuringErrors);
						if (refDestructuringErrors && this$1.type === types.comma && refDestructuringErrors.trailingComma < 0) {
							refDestructuringErrors.trailingComma = this$1.start;
						}
					} else {
						elt = this$1.parseMaybeAssign(false, refDestructuringErrors);
					}
					elts.push(elt);
				}
				return elts;
			};

			pp$3.checkUnreserved = function (ref) {
				var start = ref.start;
				var end = ref.end;
				var name = ref.name;

				if (this.inGenerator && name === "yield") {
					this.raiseRecoverable(start, "Can not use 'yield' as identifier inside a generator");
				}
				if (this.inAsync && name === "await") {
					this.raiseRecoverable(start, "Can not use 'await' as identifier inside an async function");
				}
				if (this.isKeyword(name)) {
					this.raise(start, "Unexpected keyword '" + name + "'");
				}
				if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") != -1) {
					return;
				}
				var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
				if (re.test(name)) {
					this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
				}
			};

			pp$3.parseIdent = function (liberal, isBinding) {
				var node = this.startNode();
				if (liberal && this.options.allowReserved == "never") {
					liberal = false;
				}
				if (this.type === types.name) {
					node.name = this.value;
				} else if (this.type.keyword) {
					node.name = this.type.keyword;
				} else {
					this.unexpected();
				}
				this.next();
				this.finishNode(node, "Identifier");
				if (!liberal) {
					this.checkUnreserved(node);
				}
				return node;
			};

			pp$3.parseYield = function () {
				if (!this.yieldPos) {
					this.yieldPos = this.start;
				}

				var node = this.startNode();
				this.next();
				if (this.type == types.semi || this.canInsertSemicolon() || this.type != types.star && !this.type.startsExpr) {
					node.delegate = false;
					node.argument = null;
				} else {
					node.delegate = this.eat(types.star);
					node.argument = this.parseMaybeAssign();
				}
				return this.finishNode(node, "YieldExpression");
			};

			pp$3.parseAwait = function () {
				if (!this.awaitPos) {
					this.awaitPos = this.start;
				}

				var node = this.startNode();
				this.next();
				node.argument = this.parseMaybeUnary(null, true);
				return this.finishNode(node, "AwaitExpression");
			};

			var pp$4 = Parser.prototype;

			pp$4.raise = function (pos, message) {
				var loc = getLineInfo(this.input, pos);
				message += " (" + loc.line + ":" + loc.column + ")";
				var err = new SyntaxError(message);
				err.pos = pos;err.loc = loc;err.raisedAt = this.pos;
				throw err;
			};

			pp$4.raiseRecoverable = pp$4.raise;

			pp$4.curPosition = function () {
				if (this.options.locations) {
					return new Position(this.curLine, this.pos - this.lineStart);
				}
			};

			var pp$5 = Parser.prototype;

			var assign = Object.assign || function (target) {
				var sources = [],
				    len = arguments.length - 1;
				while (len-- > 0) {
					sources[len] = arguments[len + 1];
				}for (var i = 0, list = sources; i < list.length; i += 1) {
					var source = list[i];

					for (var key in source) {
						if (has(source, key)) {
							target[key] = source[key];
						}
					}
				}
				return target;
			};

			pp$5.enterFunctionScope = function () {
				this.scopeStack.push({ var: {}, lexical: {}, childVar: {}, parentLexical: {} });
			};

			pp$5.exitFunctionScope = function () {
				this.scopeStack.pop();
			};

			pp$5.enterLexicalScope = function () {
				var parentScope = this.scopeStack[this.scopeStack.length - 1];
				var childScope = { var: {}, lexical: {}, childVar: {}, parentLexical: {} };

				this.scopeStack.push(childScope);
				assign(childScope.parentLexical, parentScope.lexical, parentScope.parentLexical);
			};

			pp$5.exitLexicalScope = function () {
				var childScope = this.scopeStack.pop();
				var parentScope = this.scopeStack[this.scopeStack.length - 1];

				assign(parentScope.childVar, childScope.var, childScope.childVar);
			};

			pp$5.canDeclareVarName = function (name) {
				var currentScope = this.scopeStack[this.scopeStack.length - 1];

				return !has(currentScope.lexical, name) && !has(currentScope.parentLexical, name);
			};

			pp$5.canDeclareLexicalName = function (name) {
				var currentScope = this.scopeStack[this.scopeStack.length - 1];

				return !has(currentScope.lexical, name) && !has(currentScope.var, name) && !has(currentScope.childVar, name);
			};

			pp$5.declareVarName = function (name) {
				this.scopeStack[this.scopeStack.length - 1].var[name] = true;
			};

			pp$5.declareLexicalName = function (name) {
				this.scopeStack[this.scopeStack.length - 1].lexical[name] = true;
			};

			var Node = function Node(parser, pos, loc) {
				this.type = "";
				this.start = pos;
				this.end = 0;
				if (parser.options.locations) {
					this.loc = new SourceLocation(parser, loc);
				}
				if (parser.options.directSourceFile) {
					this.sourceFile = parser.options.directSourceFile;
				}
				if (parser.options.ranges) {
					this.range = [pos, 0];
				}
			};

			var pp$6 = Parser.prototype;

			pp$6.startNode = function () {
				return new Node(this, this.start, this.startLoc);
			};

			pp$6.startNodeAt = function (pos, loc) {
				return new Node(this, pos, loc);
			};

			function finishNodeAt(node, type, pos, loc) {
				node.type = type;
				node.end = pos;
				if (this.options.locations) {
					node.loc.end = loc;
				}
				if (this.options.ranges) {
					node.range[1] = pos;
				}
				return node;
			}

			pp$6.finishNode = function (node, type) {
				return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
			};

			pp$6.finishNodeAt = function (node, type, pos, loc) {
				return finishNodeAt.call(this, node, type, pos, loc);
			};

			var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
				this.token = token;
				this.isExpr = !!isExpr;
				this.preserveSpace = !!preserveSpace;
				this.override = override;
				this.generator = !!generator;
			};

			var types$1 = {
				b_stat: new TokContext("{", false),
				b_expr: new TokContext("{", true),
				b_tmpl: new TokContext("${", false),
				p_stat: new TokContext("(", false),
				p_expr: new TokContext("(", true),
				q_tmpl: new TokContext("`", true, true, function (p) {
					return p.tryReadTemplateToken();
				}),
				f_stat: new TokContext("function", false),
				f_expr: new TokContext("function", true),
				f_expr_gen: new TokContext("function", true, false, null, true),
				f_gen: new TokContext("function", false, false, null, true)
			};

			var pp$7 = Parser.prototype;

			pp$7.initialContext = function () {
				return [types$1.b_stat];
			};

			pp$7.braceIsBlock = function (prevType) {
				var parent = this.curContext();
				if (parent === types$1.f_expr || parent === types$1.f_stat) {
					return true;
				}
				if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
					return !parent.isExpr;
				}

				if (prevType === types._return || prevType == types.name && this.exprAllowed) {
					return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
				}
				if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType == types.arrow) {
					return true;
				}
				if (prevType == types.braceL) {
					return parent === types$1.b_stat;
				}
				if (prevType == types._var || prevType == types.name) {
					return false;
				}
				return !this.exprAllowed;
			};

			pp$7.inGeneratorContext = function () {
				var this$1 = this;

				for (var i = this.context.length - 1; i >= 1; i--) {
					var context = this$1.context[i];
					if (context.token === "function") {
						return context.generator;
					}
				}
				return false;
			};

			pp$7.updateContext = function (prevType) {
				var update,
				    type = this.type;
				if (type.keyword && prevType == types.dot) {
					this.exprAllowed = false;
				} else if (update = type.updateContext) {
					update.call(this, prevType);
				} else {
					this.exprAllowed = type.beforeExpr;
				}
			};

			types.parenR.updateContext = types.braceR.updateContext = function () {
				if (this.context.length == 1) {
					this.exprAllowed = true;
					return;
				}
				var out = this.context.pop();
				if (out === types$1.b_stat && this.curContext().token === "function") {
					out = this.context.pop();
				}
				this.exprAllowed = !out.isExpr;
			};

			types.braceL.updateContext = function (prevType) {
				this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
				this.exprAllowed = true;
			};

			types.dollarBraceL.updateContext = function () {
				this.context.push(types$1.b_tmpl);
				this.exprAllowed = true;
			};

			types.parenL.updateContext = function (prevType) {
				var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
				this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
				this.exprAllowed = true;
			};

			types.incDec.updateContext = function () {};

			types._function.updateContext = types._class.updateContext = function (prevType) {
				if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
					this.context.push(types$1.f_expr);
				} else {
					this.context.push(types$1.f_stat);
				}
				this.exprAllowed = false;
			};

			types.backQuote.updateContext = function () {
				if (this.curContext() === types$1.q_tmpl) {
					this.context.pop();
				} else {
					this.context.push(types$1.q_tmpl);
				}
				this.exprAllowed = false;
			};

			types.star.updateContext = function (prevType) {
				if (prevType == types._function) {
					var index = this.context.length - 1;
					if (this.context[index] === types$1.f_expr) {
						this.context[index] = types$1.f_expr_gen;
					} else {
						this.context[index] = types$1.f_gen;
					}
				}
				this.exprAllowed = true;
			};

			types.name.updateContext = function (prevType) {
				var allowed = false;
				if (this.options.ecmaVersion >= 6) {
					if (this.value == "of" && !this.exprAllowed || this.value == "yield" && this.inGeneratorContext()) {
						allowed = true;
					}
				}
				this.exprAllowed = allowed;
			};

			var Token = function Token(p) {
				this.type = p.type;
				this.value = p.value;
				this.start = p.start;
				this.end = p.end;
				if (p.options.locations) {
					this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
				}
				if (p.options.ranges) {
					this.range = [p.start, p.end];
				}
			};

			var pp$8 = Parser.prototype;

			var isRhino = (typeof Packages === "undefined" ? "undefined" : _typeof2(Packages)) == "object" && Object.prototype.toString.call(Packages) == "[object JavaPackage]";

			pp$8.next = function () {
				if (this.options.onToken) {
					this.options.onToken(new Token(this));
				}

				this.lastTokEnd = this.end;
				this.lastTokStart = this.start;
				this.lastTokEndLoc = this.endLoc;
				this.lastTokStartLoc = this.startLoc;
				this.nextToken();
			};

			pp$8.getToken = function () {
				this.next();
				return new Token(this);
			};

			if (typeof Symbol !== "undefined") {
				pp$8[Symbol.iterator] = function () {
					var this$1 = this;

					return {
						next: function next() {
							var token = this$1.getToken();
							return {
								done: token.type === types.eof,
								value: token
							};
						}
					};
				};
			}

			pp$8.curContext = function () {
				return this.context[this.context.length - 1];
			};

			pp$8.nextToken = function () {
				var curContext = this.curContext();
				if (!curContext || !curContext.preserveSpace) {
					this.skipSpace();
				}

				this.start = this.pos;
				if (this.options.locations) {
					this.startLoc = this.curPosition();
				}
				if (this.pos >= this.input.length) {
					return this.finishToken(types.eof);
				}

				if (curContext.override) {
					return curContext.override(this);
				} else {
					this.readToken(this.fullCharCodeAtPos());
				}
			};

			pp$8.readToken = function (code) {
				if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
					return this.readWord();
				}

				return this.getTokenFromCode(code);
			};

			pp$8.fullCharCodeAtPos = function () {
				var code = this.input.charCodeAt(this.pos);
				if (code <= 0xd7ff || code >= 0xe000) {
					return code;
				}
				var next = this.input.charCodeAt(this.pos + 1);
				return (code << 10) + next - 0x35fdc00;
			};

			pp$8.skipBlockComment = function () {
				var this$1 = this;

				var startLoc = this.options.onComment && this.curPosition();
				var start = this.pos,
				    end = this.input.indexOf("*/", this.pos += 2);
				if (end === -1) {
					this.raise(this.pos - 2, "Unterminated comment");
				}
				this.pos = end + 2;
				if (this.options.locations) {
					lineBreakG.lastIndex = start;
					var match;
					while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
						++this$1.curLine;
						this$1.lineStart = match.index + match[0].length;
					}
				}
				if (this.options.onComment) {
					this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
				}
			};

			pp$8.skipLineComment = function (startSkip) {
				var this$1 = this;

				var start = this.pos;
				var startLoc = this.options.onComment && this.curPosition();
				var ch = this.input.charCodeAt(this.pos += startSkip);
				while (this.pos < this.input.length && !isNewLine(ch)) {
					ch = this$1.input.charCodeAt(++this$1.pos);
				}
				if (this.options.onComment) {
					this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
				}
			};

			pp$8.skipSpace = function () {
				var this$1 = this;

				loop: while (this.pos < this.input.length) {
					var ch = this$1.input.charCodeAt(this$1.pos);
					switch (ch) {
						case 32:case 160:
							++this$1.pos;
							break;
						case 13:
							if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {
								++this$1.pos;
							}
						case 10:case 8232:case 8233:
							++this$1.pos;
							if (this$1.options.locations) {
								++this$1.curLine;
								this$1.lineStart = this$1.pos;
							}
							break;
						case 47:
							switch (this$1.input.charCodeAt(this$1.pos + 1)) {
								case 42:
									this$1.skipBlockComment();
									break;
								case 47:
									this$1.skipLineComment(2);
									break;
								default:
									break loop;
							}
							break;
						default:
							if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
								++this$1.pos;
							} else {
								break loop;
							}
					}
				}
			};

			pp$8.finishToken = function (type, val) {
				this.end = this.pos;
				if (this.options.locations) {
					this.endLoc = this.curPosition();
				}
				var prevType = this.type;
				this.type = type;
				this.value = val;

				this.updateContext(prevType);
			};

			pp$8.readToken_dot = function () {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next >= 48 && next <= 57) {
					return this.readNumber(true);
				}
				var next2 = this.input.charCodeAt(this.pos + 2);
				if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
					this.pos += 3;
					return this.finishToken(types.ellipsis);
				} else {
					++this.pos;
					return this.finishToken(types.dot);
				}
			};

			pp$8.readToken_slash = function () {
				var next = this.input.charCodeAt(this.pos + 1);
				if (this.exprAllowed) {
					++this.pos;return this.readRegexp();
				}
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(types.slash, 1);
			};

			pp$8.readToken_mult_modulo_exp = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				var size = 1;
				var tokentype = code === 42 ? types.star : types.modulo;

				if (this.options.ecmaVersion >= 7 && next === 42) {
					++size;
					tokentype = types.starstar;
					next = this.input.charCodeAt(this.pos + 2);
				}

				if (next === 61) {
					return this.finishOp(types.assign, size + 1);
				}
				return this.finishOp(tokentype, size);
			};

			pp$8.readToken_pipe_amp = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === code) {
					return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
				}
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
			};

			pp$8.readToken_caret = function () {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(types.bitwiseXOR, 1);
			};

			pp$8.readToken_plus_min = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === code) {
					if (next == 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
						this.skipLineComment(3);
						this.skipSpace();
						return this.nextToken();
					}
					return this.finishOp(types.incDec, 2);
				}
				if (next === 61) {
					return this.finishOp(types.assign, 2);
				}
				return this.finishOp(types.plusMin, 1);
			};

			pp$8.readToken_lt_gt = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				var size = 1;
				if (next === code) {
					size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
					if (this.input.charCodeAt(this.pos + size) === 61) {
						return this.finishOp(types.assign, size + 1);
					}
					return this.finishOp(types.bitShift, size);
				}
				if (next == 33 && code == 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {
					this.skipLineComment(4);
					this.skipSpace();
					return this.nextToken();
				}
				if (next === 61) {
					size = 2;
				}
				return this.finishOp(types.relational, size);
			};

			pp$8.readToken_eq_excl = function (code) {
				var next = this.input.charCodeAt(this.pos + 1);
				if (next === 61) {
					return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
				}
				if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
					this.pos += 2;
					return this.finishToken(types.arrow);
				}
				return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
			};

			pp$8.getTokenFromCode = function (code) {
				switch (code) {
					case 46:
						return this.readToken_dot();

					case 40:
						++this.pos;return this.finishToken(types.parenL);
					case 41:
						++this.pos;return this.finishToken(types.parenR);
					case 59:
						++this.pos;return this.finishToken(types.semi);
					case 44:
						++this.pos;return this.finishToken(types.comma);
					case 91:
						++this.pos;return this.finishToken(types.bracketL);
					case 93:
						++this.pos;return this.finishToken(types.bracketR);
					case 123:
						++this.pos;return this.finishToken(types.braceL);
					case 125:
						++this.pos;return this.finishToken(types.braceR);
					case 58:
						++this.pos;return this.finishToken(types.colon);
					case 63:
						++this.pos;return this.finishToken(types.question);

					case 96:
						if (this.options.ecmaVersion < 6) {
							break;
						}
						++this.pos;
						return this.finishToken(types.backQuote);

					case 48:
						var next = this.input.charCodeAt(this.pos + 1);
						if (next === 120 || next === 88) {
							return this.readRadixNumber(16);
						}
						if (this.options.ecmaVersion >= 6) {
							if (next === 111 || next === 79) {
								return this.readRadixNumber(8);
							}
							if (next === 98 || next === 66) {
								return this.readRadixNumber(2);
							}
						}
					case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
						return this.readNumber(false);

					case 34:case 39:
						return this.readString(code);

					case 47:
						return this.readToken_slash();

					case 37:case 42:
						return this.readToken_mult_modulo_exp(code);

					case 124:case 38:
						return this.readToken_pipe_amp(code);

					case 94:
						return this.readToken_caret();

					case 43:case 45:
						return this.readToken_plus_min(code);

					case 60:case 62:
						return this.readToken_lt_gt(code);

					case 61:case 33:
						return this.readToken_eq_excl(code);

					case 126:
						return this.finishOp(types.prefix, 1);
				}

				this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
			};

			pp$8.finishOp = function (type, size) {
				var str = this.input.slice(this.pos, this.pos + size);
				this.pos += size;
				return this.finishToken(type, str);
			};

			function tryCreateRegexp(src, flags, throwErrorAt, parser) {
				try {
					return new RegExp(src, flags);
				} catch (e) {
					if (throwErrorAt !== undefined) {
						if (e instanceof SyntaxError) {
							parser.raise(throwErrorAt, "Error parsing regular expression: " + e.message);
						}
						throw e;
					}
				}
			}

			var regexpUnicodeSupport = !!tryCreateRegexp("\uFFFF", "u");

			pp$8.readRegexp = function () {
				var this$1 = this;

				var escaped,
				    inClass,
				    start = this.pos;
				for (;;) {
					if (this$1.pos >= this$1.input.length) {
						this$1.raise(start, "Unterminated regular expression");
					}
					var ch = this$1.input.charAt(this$1.pos);
					if (lineBreak.test(ch)) {
						this$1.raise(start, "Unterminated regular expression");
					}
					if (!escaped) {
						if (ch === "[") {
							inClass = true;
						} else if (ch === "]" && inClass) {
							inClass = false;
						} else if (ch === "/" && !inClass) {
							break;
						}
						escaped = ch === "\\";
					} else {
						escaped = false;
					}
					++this$1.pos;
				}
				var content = this.input.slice(start, this.pos);
				++this.pos;
				var mods = this.readWord1();
				var tmp = content,
				    tmpFlags = "";
				if (mods) {
					var validFlags = /^[gim]*$/;
					if (this.options.ecmaVersion >= 6) {
						validFlags = /^[gimuy]*$/;
					}
					if (!validFlags.test(mods)) {
						this.raise(start, "Invalid regular expression flag");
					}
					if (mods.indexOf("u") >= 0) {
						if (regexpUnicodeSupport) {
							tmpFlags = "u";
						} else {
							tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
								code = Number("0x" + code);
								if (code > 0x10FFFF) {
									this$1.raise(start + offset + 3, "Code point out of bounds");
								}
								return "x";
							});
							tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
							tmpFlags = tmpFlags.replace("u", "");
						}
					}
				}
				var value = null;
				if (!isRhino) {
					tryCreateRegexp(tmp, tmpFlags, start, this);
					value = tryCreateRegexp(content, mods);
				}
				return this.finishToken(types.regexp, { pattern: content, flags: mods, value: value });
			};

			pp$8.readInt = function (radix, len) {
				var this$1 = this;

				var start = this.pos,
				    total = 0;
				for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
					var code = this$1.input.charCodeAt(this$1.pos),
					    val = void 0;
					if (code >= 97) {
						val = code - 97 + 10;
					} else if (code >= 65) {
						val = code - 65 + 10;
					} else if (code >= 48 && code <= 57) {
						val = code - 48;
					} else {
						val = Infinity;
					}
					if (val >= radix) {
						break;
					}
					++this$1.pos;
					total = total * radix + val;
				}
				if (this.pos === start || len != null && this.pos - start !== len) {
					return null;
				}

				return total;
			};

			pp$8.readRadixNumber = function (radix) {
				this.pos += 2;
				var val = this.readInt(radix);
				if (val == null) {
					this.raise(this.start + 2, "Expected number in radix " + radix);
				}
				if (isIdentifierStart(this.fullCharCodeAtPos())) {
					this.raise(this.pos, "Identifier directly after number");
				}
				return this.finishToken(types.num, val);
			};

			pp$8.readNumber = function (startsWithDot) {
				var start = this.pos,
				    isFloat = false,
				    octal = this.input.charCodeAt(this.pos) === 48;
				if (!startsWithDot && this.readInt(10) === null) {
					this.raise(start, "Invalid number");
				}
				if (octal && this.pos == start + 1) {
					octal = false;
				}
				var next = this.input.charCodeAt(this.pos);
				if (next === 46 && !octal) {
					++this.pos;
					this.readInt(10);
					isFloat = true;
					next = this.input.charCodeAt(this.pos);
				}
				if ((next === 69 || next === 101) && !octal) {
					next = this.input.charCodeAt(++this.pos);
					if (next === 43 || next === 45) {
						++this.pos;
					}
					if (this.readInt(10) === null) {
						this.raise(start, "Invalid number");
					}
					isFloat = true;
				}
				if (isIdentifierStart(this.fullCharCodeAtPos())) {
					this.raise(this.pos, "Identifier directly after number");
				}

				var str = this.input.slice(start, this.pos),
				    val;
				if (isFloat) {
					val = parseFloat(str);
				} else if (!octal || str.length === 1) {
					val = parseInt(str, 10);
				} else if (this.strict) {
					this.raise(start, "Invalid number");
				} else if (/[89]/.test(str)) {
					val = parseInt(str, 10);
				} else {
					val = parseInt(str, 8);
				}
				return this.finishToken(types.num, val);
			};

			pp$8.readCodePoint = function () {
				var ch = this.input.charCodeAt(this.pos),
				    code;

				if (ch === 123) {
					if (this.options.ecmaVersion < 6) {
						this.unexpected();
					}
					var codePos = ++this.pos;
					code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
					++this.pos;
					if (code > 0x10FFFF) {
						this.invalidStringToken(codePos, "Code point out of bounds");
					}
				} else {
					code = this.readHexChar(4);
				}
				return code;
			};

			function codePointToString(code) {
				if (code <= 0xFFFF) {
					return String.fromCharCode(code);
				}
				code -= 0x10000;
				return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
			}

			pp$8.readString = function (quote) {
				var this$1 = this;

				var out = "",
				    chunkStart = ++this.pos;
				for (;;) {
					if (this$1.pos >= this$1.input.length) {
						this$1.raise(this$1.start, "Unterminated string constant");
					}
					var ch = this$1.input.charCodeAt(this$1.pos);
					if (ch === quote) {
						break;
					}
					if (ch === 92) {
						out += this$1.input.slice(chunkStart, this$1.pos);
						out += this$1.readEscapedChar(false);
						chunkStart = this$1.pos;
					} else {
						if (isNewLine(ch)) {
							this$1.raise(this$1.start, "Unterminated string constant");
						}
						++this$1.pos;
					}
				}
				out += this.input.slice(chunkStart, this.pos++);
				return this.finishToken(types.string, out);
			};

			var INVALID_TEMPLATE_ESCAPE_ERROR = {};

			pp$8.tryReadTemplateToken = function () {
				this.inTemplateElement = true;
				try {
					this.readTmplToken();
				} catch (err) {
					if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
						this.readInvalidTemplateToken();
					} else {
						throw err;
					}
				}

				this.inTemplateElement = false;
			};

			pp$8.invalidStringToken = function (position, message) {
				if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
					throw INVALID_TEMPLATE_ESCAPE_ERROR;
				} else {
					this.raise(position, message);
				}
			};

			pp$8.readTmplToken = function () {
				var this$1 = this;

				var out = "",
				    chunkStart = this.pos;
				for (;;) {
					if (this$1.pos >= this$1.input.length) {
						this$1.raise(this$1.start, "Unterminated template");
					}
					var ch = this$1.input.charCodeAt(this$1.pos);
					if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) {
						if (this$1.pos === this$1.start && (this$1.type === types.template || this$1.type === types.invalidTemplate)) {
							if (ch === 36) {
								this$1.pos += 2;
								return this$1.finishToken(types.dollarBraceL);
							} else {
								++this$1.pos;
								return this$1.finishToken(types.backQuote);
							}
						}
						out += this$1.input.slice(chunkStart, this$1.pos);
						return this$1.finishToken(types.template, out);
					}
					if (ch === 92) {
						out += this$1.input.slice(chunkStart, this$1.pos);
						out += this$1.readEscapedChar(true);
						chunkStart = this$1.pos;
					} else if (isNewLine(ch)) {
						out += this$1.input.slice(chunkStart, this$1.pos);
						++this$1.pos;
						switch (ch) {
							case 13:
								if (this$1.input.charCodeAt(this$1.pos) === 10) {
									++this$1.pos;
								}
							case 10:
								out += "\n";
								break;
							default:
								out += String.fromCharCode(ch);
								break;
						}
						if (this$1.options.locations) {
							++this$1.curLine;
							this$1.lineStart = this$1.pos;
						}
						chunkStart = this$1.pos;
					} else {
						++this$1.pos;
					}
				}
			};

			pp$8.readInvalidTemplateToken = function () {
				var this$1 = this;

				for (; this.pos < this.input.length; this.pos++) {
					switch (this$1.input[this$1.pos]) {
						case "\\":
							++this$1.pos;
							break;

						case "$":
							if (this$1.input[this$1.pos + 1] !== "{") {
								break;
							}

						case "`":
							return this$1.finishToken(types.invalidTemplate, this$1.input.slice(this$1.start, this$1.pos));

					}
				}
				this.raise(this.start, "Unterminated template");
			};

			pp$8.readEscapedChar = function (inTemplate) {
				var ch = this.input.charCodeAt(++this.pos);
				++this.pos;
				switch (ch) {
					case 110:
						return "\n";
					case 114:
						return "\r";
					case 120:
						return String.fromCharCode(this.readHexChar(2));
					case 117:
						return codePointToString(this.readCodePoint());
					case 116:
						return "\t";
					case 98:
						return "\b";
					case 118:
						return "\x0B";
					case 102:
						return "\f";
					case 13:
						if (this.input.charCodeAt(this.pos) === 10) {
							++this.pos;
						}
					case 10:
						if (this.options.locations) {
							this.lineStart = this.pos;++this.curLine;
						}
						return "";
					default:
						if (ch >= 48 && ch <= 55) {
							var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
							var octal = parseInt(octalStr, 8);
							if (octal > 255) {
								octalStr = octalStr.slice(0, -1);
								octal = parseInt(octalStr, 8);
							}
							if (octalStr !== "0" && (this.strict || inTemplate)) {
								this.invalidStringToken(this.pos - 2, "Octal literal in strict mode");
							}
							this.pos += octalStr.length - 1;
							return String.fromCharCode(octal);
						}
						return String.fromCharCode(ch);
				}
			};

			pp$8.readHexChar = function (len) {
				var codePos = this.pos;
				var n = this.readInt(16, len);
				if (n === null) {
					this.invalidStringToken(codePos, "Bad character escape sequence");
				}
				return n;
			};

			pp$8.readWord1 = function () {
				var this$1 = this;

				this.containsEsc = false;
				var word = "",
				    first = true,
				    chunkStart = this.pos;
				var astral = this.options.ecmaVersion >= 6;
				while (this.pos < this.input.length) {
					var ch = this$1.fullCharCodeAtPos();
					if (isIdentifierChar(ch, astral)) {
						this$1.pos += ch <= 0xffff ? 1 : 2;
					} else if (ch === 92) {
						this$1.containsEsc = true;
						word += this$1.input.slice(chunkStart, this$1.pos);
						var escStart = this$1.pos;
						if (this$1.input.charCodeAt(++this$1.pos) != 117) {
							this$1.invalidStringToken(this$1.pos, "Expecting Unicode escape sequence \\uXXXX");
						}
						++this$1.pos;
						var esc = this$1.readCodePoint();
						if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
							this$1.invalidStringToken(escStart, "Invalid Unicode escape");
						}
						word += codePointToString(esc);
						chunkStart = this$1.pos;
					} else {
						break;
					}
					first = false;
				}
				return word + this.input.slice(chunkStart, this.pos);
			};

			pp$8.readWord = function () {
				var word = this.readWord1();
				var type = types.name;
				if (this.keywords.test(word)) {
					if (this.containsEsc) {
						this.raiseRecoverable(this.start, "Escape sequence in keyword " + word);
					}
					type = keywords$1[word];
				}
				return this.finishToken(type, word);
			};

			var version = "5.1.2";

			function parse(input, options) {
				return new Parser(options, input).parse();
			}

			function parseExpressionAt(input, pos, options) {
				var p = new Parser(options, input, pos);
				p.nextToken();
				return p.parseExpression();
			}

			function tokenizer(input, options) {
				return new Parser(options, input);
			}

			function addLooseExports(parse, Parser$$1, plugins$$1) {
				exports.parse_dammit = parse;
				exports.LooseParser = Parser$$1;
				exports.pluginsLoose = plugins$$1;
			}

			exports.version = version;
			exports.parse = parse;
			exports.parseExpressionAt = parseExpressionAt;
			exports.tokenizer = tokenizer;
			exports.addLooseExports = addLooseExports;
			exports.Parser = Parser;
			exports.plugins = plugins;
			exports.defaultOptions = defaultOptions;
			exports.Position = Position;
			exports.SourceLocation = SourceLocation;
			exports.getLineInfo = getLineInfo;
			exports.Node = Node;
			exports.TokenType = TokenType;
			exports.tokTypes = types;
			exports.keywordTypes = keywords$1;
			exports.TokContext = TokContext;
			exports.tokContexts = types$1;
			exports.isIdentifierChar = isIdentifierChar;
			exports.isIdentifierStart = isIdentifierStart;
			exports.Token = Token;
			exports.isNewLine = isNewLine;
			exports.lineBreak = lineBreak;
			exports.lineBreakG = lineBreakG;
			exports.nonASCIIwhitespace = nonASCIIwhitespace;

			Object.defineProperty(exports, '__esModule', { value: true });
		});
	}, {}], 27: [function (require, module, exports) {}, {}] }, {}, [25]);

'use strict';

var gpu = new GPU();

var Data = {};

var Parties, Ridings, PartiesI, RidingsI;
var SlopesA, InterceptsA;
var Res;

var dataReady = false;

var PopularVotes = {
	"Liberal": 40.0,
	"Conservative": 30.0,
	"New Democratic": 20.0,
	"Green": 5.0,
	"Bloc Québécois": 5.0
};

var PartyKeys = {
	"Liberal": "LIB",
	"Conservative": "CON",
	"New Democratic": "NDP",
	"Green": "GRN",
	"Bloc Québécois": "BQ"
};

var files = ["models", "pe", "cre"];

function PI(i, x) {
	return Parties[i];
}

function RI(i, x) {
	return Ridings[i];
}

function obj_from_arr(keys, arr) {
	var res = {};
	for (var i = 0; i < arr.length; i++) {
		res[keys[i]] = arr[i];
	}
	return res;
}

function DKR(xs) {
	return obj_from_arr(Ridings, xs);
}
function DKP(xs) {
	return obj_from_arr(Parties, xs);
}
function DVP(xs) {
	return xs.map(PI);
}

function EKP(PV) {
	return arr_from_obj(PartiesI, PV);
}

function arr_from_obj(indices, obj) {
	var arr = [];
	for (var k in obj) {
		if (obj.hasOwnProperty(k)) {
			arr[indices[k]] = obj[k];
		}
	}

	return arr;
}

function invert(xs) {
	var res = {};
	for (var i = 0; i < xs.length; i++) {
		res[xs[i]] = i;
	}
	return res;
}

function by_riding_party(riding_ids, party_names, xs) {
	var map = {};
	var N = xs.length;
	for (var i = 0; i < N; i++) {
		var r = riding_ids[i];
		if (!(r in map)) {
			map[r] = {};
		}

		map[r][party_names[i]] = xs[i];
	}

	return map;
}

function rp_to_array2d(map, v0) {
	var arr = [];
	var R = Object.keys(Ridings).length;
	var P = Object.keys(Parties).length;
	for (var i = 0; i < R; i++) {
		arr[i] = [];
		var m = map[Ridings[i]] || {};
		for (var j = 0; j < P; j++) {
			var val = m[Parties[j]];
			arr[i].push(val === undefined ? v0 : val);
		}
	}
	return arr;
}

// evaluate at swing model at PV=PV+i*dPV1+j*dPV2 and get seat
// count for party k
function evaluateMap(
/* P */pvs,
/* P */dpvx,
/* P */dpvy,
/* R*P */slopes,
/* R*P */intercepts, p) {
	//const p = this.thread.z;
	var count = 0;
	for (var r = 0; r < this.constants.R; r++) {
		var bestI = 0;
		var bestE = -100.0;
		for (var i = 0; i < this.constants.P; i++) {
			var pv = (this.constants.x0 + this.thread.x * this.constants.dx) * dpvx[i] + (this.constants.y0 + this.thread.y * this.constants.dy) * dpvy[i] + pvs[i];

			var ev = pv * slopes[r][i] + intercepts[r][i];
			var s = step(bestE, ev);
			var s1 = step(ev, bestE);
			bestI = s1 * bestI + s * i;
			bestE = s1 * bestE + s * ev;
			//if (s > 0 /*ev > bestE*/) {
			//  bestI = i;
			//  bestE = ev;
			//}
		}

		if (bestI === p) count++;
	}
	return count;
}

var K = {
	evaluateMap: gpu.createKernel(evaluateMap),

	render: function render(NX, NY, constants) {
		var kernel = gpu.createKernel(function (
		/* P */pvs,
		/* P */dpvx,
		/* P */dpvy,
		/* R*P */slopes,
		/* R*P */intercepts) {
			var L = 1.0 * evaluateMap(pvs, dpvx, dpvy, slopes, intercepts, 3) / 338.0;
			var N = 1.0 * evaluateMap(pvs, dpvx, dpvy, slopes, intercepts, 4) / 338.0;
			var C = 1.0 * evaluateMap(pvs, dpvx, dpvy, slopes, intercepts, 1) / 338.0;

			var k = 0.0;
			if (L > N && L > C) {
				if (L < 0.5) k = 0.2;
				this.color(1, k, k);
			} else if (N > L && N > C) {
				if (N < 0.5) k = 0.2;
				this.color(1, 0.5 + k, k);
			} else if (C > L && C > N) {
				if (C < 0.5) k = 0.2;
				this.color(k, k, 0.75);
			} else if (L === N && L === C) {
				this.color(1, 1, 1);
			} else if (L === N && L !== C) {
				this.color(0.5, 0.5, 0);
			} else if (L === C && L !== N) {
				this.color(0.5, 0, 0.5);
			} else if (N === C && N !== L) {
				this.color(0.2, 0.5, 0.5);
			}
			//this.color(L, N, C);
		}, {
			constants: constants,
			output: [NX, NY],
			dimensions: [NX, NY],
			graphical: true,
			debug: false,
			outputToTexture: true,
			functions: [evaluateMap]
		});
		//kernel.setGraphical(true);

		return kernel;
	}
};

function start() {
	if (!dataReady) return;

	console.log(PopularVotes);

	var pe = Data.pe,
	    models = Data.models,
	    cre = Data.cre;

	PartiesI = invert(Parties = _.uniq(pe.party_name));
	RidingsI = invert(Ridings = _.uniq(models.riding_id));

	var N = models.slope.length;

	SlopesA = rp_to_array2d(by_riding_party(models.riding_id, models.party_name, models.slope), 0.0);
	InterceptsA = rp_to_array2d(by_riding_party(models.riding_id, models.party_name, models.intercept), -100.0);

	var NX = 600,
	    NY = 600;
	var constants = {
		x0: -30.0, dx: 60.0 / NX,
		y0: -30.0, dy: 60.0 / NY,
		NX: NX,
		NY: NY,
		P: Parties.length,
		R: Ridings.length,
		N: N
	};
	//const em = K.evaluateMap;
	//em.setConstants(constants);
	//em.setOutput([NX, NY, Parties.length]);
	//const PV = EKP(PopularVotes);
	//(Res = DKP(K.evaluateMap(
	//  //[5.0, 30.0, 5.0, 40.0, 20.0],
	//  [5.0, 30.0, 5.0, 30.0, 30.0],
	//  [0.0, 0.0, 0.0, -1.0, 1.0],
	//  [0.0, -1.0, 0.0, 1.0, 0.0],
	//  SlopesA,
	//  InterceptsA
	//)));

	var render = K.render(NX, NY, constants);
	//render.setOutput([NX, NY]).setGraphical(true);
	var canvas = render.getCanvas();
	$("#plotting_area")[0].appendChild(canvas);

	function draw() {
		var t0 = performance.now();
		render(
		//[5.0, 30.0, 5.0, 30.0, 30.0],
		EKP(PopularVotes), [0.0, 0.0, 0.0, -1.0, 1.0], [0.0, -1.0, 0.0, 1.0, 0.0], SlopesA, InterceptsA);
		var t1 = performance.now();
		console.log("after", t1 - t0);
		//requestAnimationFrame(draw);
	}
	requestAnimationFrame(draw);

	if (false) {
		var evaluate = gpu.createKernel(function evaluate(pvs, slopes, intercepts) {
			var bestI = 0;
			var bestE = -100.0;
			for (var i = 0; i < this.constants.P; i++) {
				var ev = pvs[i] * slopes[this.thread.x][i] + intercepts[this.thread.x][i];
				if (ev > bestE) {
					bestI = i;
					bestE = ev;
				}
			}
			return bestI;
		}, {
			constants: { P: Parties.length, N: N },
			output: [N]
		});

		var c = evaluate(PV, SlopesA, InterceptsA);
		//const results = DKR(DVP(Array.from(c)));
		//Res = results;
		//console.log(results);
		console.log(_.mapValues("length", _.groupBy(_.identity, _.values(Res))));
	}
}

$.when.apply(undefined, files.map(function (name) {
	return $.getJSON("data/" + name + ".json", function (res) {
		Data[name] = res;
	});
})).then(function () {
	dataReady = true;
});

$(document).ready(function () {
	var pv_sliders = $("#pv_sliders");

	_.keys(PopularVotes).forEach(function (key) {
		var party = PartyKeys[key];
		var pvId = "pv_" + party;
		var div = $("<div>", { 'class': 'slider_container' });
		div.append($("<div class='slider_label'>" + key + ": </div>"));
		var sliderElem = $("<div>", { id: pvId, 'class': 'slider' });
		div.append(sliderElem);
		pv_sliders.append(div);

		var slider = sliderElem[0];
		noUiSlider.create(slider, {
			start: PopularVotes[key],
			tooltips: true,
			range: { min: 0, max: 100 },
			'class': 'slider',
			pips: {
				mode: 'positions',
				values: [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 60, 70, 80, 90, 100],
				density: 1
			}
		});
		slider.noUiSlider.on('change', function (value) {
			PopularVotes[key] = parseFloat(value[0]);
		});
	});
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImdwdS5qcyIsImluZGV4LmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwibW9kdWxlIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2luaGVyaXRzIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ2YWx1ZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiRnVuY3Rpb25CdWlsZGVyQmFzZSIsIkNQVUZ1bmN0aW9uTm9kZSIsIl9GdW5jdGlvbkJ1aWxkZXJCYXNlIiwiQ1BVRnVuY3Rpb25CdWlsZGVyIiwiX3RoaXMiLCJnZXRQcm90b3R5cGVPZiIsIk5vZGUiLCJwb2x5ZmlsbFN0YW5kYXJkRnVuY3Rpb25zIiwiQmFzZUZ1bmN0aW9uTm9kZSIsInV0aWxzIiwiX0Jhc2VGdW5jdGlvbk5vZGUiLCJhcHBseSIsImFyZ3VtZW50cyIsImdlbmVyYXRlIiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwiZnVuY3Rpb25TdHJpbmdBcnJheSIsImFzdEdlbmVyaWMiLCJnZXRKc0FTVCIsImZ1bmN0aW9uU3RyaW5nIiwiam9pbiIsInRyaW0iLCJnZXRGdW5jdGlvblByb3RvdHlwZVN0cmluZyIsIndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmciLCJhc3QiLCJyZXRBcnIiLCJmdW5jUGFyYW0iLCJhc3RFcnJvck91dHB1dCIsIkFycmF5IiwiaXNBcnJheSIsInR5cGUiLCJhc3RGdW5jdGlvbkRlY2xhcmF0aW9uIiwiYXN0RnVuY3Rpb25FeHByZXNzaW9uIiwiYXN0UmV0dXJuU3RhdGVtZW50IiwiYXN0TGl0ZXJhbCIsImFzdEJpbmFyeUV4cHJlc3Npb24iLCJhc3RJZGVudGlmaWVyRXhwcmVzc2lvbiIsImFzdEFzc2lnbm1lbnRFeHByZXNzaW9uIiwiYXN0RXhwcmVzc2lvblN0YXRlbWVudCIsImFzdEVtcHR5U3RhdGVtZW50IiwiYXN0QmxvY2tTdGF0ZW1lbnQiLCJhc3RJZlN0YXRlbWVudCIsImFzdEJyZWFrU3RhdGVtZW50IiwiYXN0Q29udGludWVTdGF0ZW1lbnQiLCJhc3RGb3JTdGF0ZW1lbnQiLCJhc3RXaGlsZVN0YXRlbWVudCIsImFzdFZhcmlhYmxlRGVjbGFyYXRpb24iLCJhc3RWYXJpYWJsZURlY2xhcmF0b3IiLCJhc3RUaGlzRXhwcmVzc2lvbiIsImFzdFNlcXVlbmNlRXhwcmVzc2lvbiIsImFzdFVuYXJ5RXhwcmVzc2lvbiIsImFzdFVwZGF0ZUV4cHJlc3Npb24iLCJhc3RMb2dpY2FsRXhwcmVzc2lvbiIsImFzdE1lbWJlckV4cHJlc3Npb24iLCJhc3RDYWxsRXhwcmVzc2lvbiIsImFzdEFycmF5RXhwcmVzc2lvbiIsImFkZEZ1bmN0aW9uIiwiZ2V0QXN0U3RyaW5nIiwianNGdW5jdGlvblN0cmluZyIsImlzUm9vdEtlcm5lbCIsInB1c2giLCJrZXJuYWxBc3QiLCJmdW5jdGlvbk5hbWUiLCJwYXJhbU5hbWVzIiwicGFyYW1OYW1lIiwiX2kiLCJib2R5IiwiYXJndW1lbnQiLCJpc1N1Yktlcm5lbCIsImlzTmFOIiwibGVmdCIsIm9wZXJhdG9yIiwicmlnaHQiLCJpZHROb2RlIiwibmFtZSIsImNvbnN0YW50cyIsImhhc093blByb3BlcnR5IiwidXNlclBhcmFtTmFtZSIsImdldFVzZXJQYXJhbU5hbWUiLCJmb3JOb2RlIiwidGVzdCIsImlzSWRlbnRpZmllckNvbnN0YW50IiwibG9vcE1heEl0ZXJhdGlvbnMiLCJ3YXJuIiwiaW5pdCIsInVwZGF0ZSIsImRlY2xhcmF0aW9ucyIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsInVwZGF0ZUFyZ3VtZW50IiwiaW5pdEFyZ3VtZW50IiwiX2kyIiwiZGVjbGFyYXRpb24iLCJpZCIsInNwbGljZSIsIndoaWxlTm9kZSIsImFzc05vZGUiLCJlTm9kZSIsImJOb2RlIiwiZXNOb2RlIiwiZXhwcmVzc2lvbiIsInZhcmRlY05vZGUiLCJpdmFyZGVjTm9kZSIsImlmTm9kZSIsImNvbnNlcXVlbnQiLCJhbHRlcm5hdGUiLCJick5vZGUiLCJjck5vZGUiLCJsb2dOb2RlIiwidU5vZGUiLCJwcmVmaXgiLCJ0Tm9kZSIsIm1Ob2RlIiwidW5yb2xsZWQiLCJhc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsIiwicHJvcGVydHkiLCJvYmplY3QiLCJjb21wdXRlZCIsInNOb2RlIiwiZXhwcmVzc2lvbnMiLCJjYWxsZWUiLCJmdW5jTmFtZSIsImNhbGxlZEZ1bmN0aW9ucyIsImluZGV4T2YiLCJjYWxsZWRGdW5jdGlvbnNBcmd1bWVudHMiLCJmdW5jdGlvbkFyZ3VtZW50cyIsInBhcmFtSW5kZXgiLCJwYXJhbVR5cGVzIiwiYXJyTm9kZSIsImFyckxlbiIsImVsZW1lbnRzIiwic3ViTm9kZSIsImFzdEZ1bmN0aW9uUHJvdG90eXBlIiwicmV0dXJuVHlwZSIsImtlcm5lbFJ1blNob3J0Y3V0IiwiY3B1S2VybmVsIiwidG9TdHJpbmciLCJhbGxQcm9wZXJ0aWVzT2YiLCJjbG9uZSIsInNwbGl0QXJyYXkiLCJnZXRBcmd1bWVudFR5cGUiLCJnZXRPdXRwdXQiLCJkaW1Ub1RleFNpemUiLCJjb3B5RmxhdHRlbiIsImZsYXR0ZW4iLCJzeXN0ZW1FbmRpYW5uZXNzIiwiaW5pdFdlYkdsIiwidGV4U2l6ZSIsIm91dHB1dCIsIl9rZXJuZWxTdHJpbmciLCJidWlsZCIsImtlcm5lbFN0cmluZyIsIktlcm5lbEJhc2UiLCJfS2VybmVsQmFzZSIsIkNQVUtlcm5lbCIsImZuU3RyaW5nIiwic2V0dGluZ3MiLCJfZm5Cb2R5IiwiZ2V0RnVuY3Rpb25Cb2R5RnJvbVN0cmluZyIsIl9mbiIsInJ1biIsIl9jYW52YXNDdHgiLCJfaW1hZ2VEYXRhIiwiX2NvbG9yRGF0YSIsInRocmVhZCIsIngiLCJ5IiwieiIsImJpbmQiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJhcmdUeXBlIiwiZ2V0RGltZW5zaW9ucyIsImtlcm5lbEFyZ3MiLCJ0b0FycmF5IiwidGhyZWFkRGltIiwiZ3JhcGhpY2FsIiwiY2FudmFzIiwiZ2V0Q2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRDb250ZXh0IiwiY3JlYXRlSW1hZ2VEYXRhIiwiVWludDhDbGFtcGVkQXJyYXkiLCJnZXRLZXJuZWxTdHJpbmciLCJkaXIiLCJGdW5jdGlvbiIsImNvbG9yIiwiZyIsImIiLCJNYXRoIiwiZmxvb3IiLCJpbmRleCIsIl90aGlzMiIsImJ1aWxkZXIiLCJmdW5jdGlvbkJ1aWxkZXIiLCJhZGRLZXJuZWwiLCJwcm90b3R5cGVPbmx5IiwiYWRkRnVuY3Rpb25zIiwiZnVuY3Rpb25zIiwic3ViS2VybmVscyIsInN1Yktlcm5lbE91dHB1dFRleHR1cmVzIiwic3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyIsInN1Yktlcm5lbCIsImFkZFN1Yktlcm5lbCIsInN1Yktlcm5lbFByb3BlcnRpZXMiLCJwIiwiX3N1Yktlcm5lbCIsInByb3RvdHlwZXMiLCJnZXRQcm90b3R5cGVzIiwia2VybmVsIiwic2hpZnQiLCJfZ2V0TG9vcE1heFN0cmluZyIsIm1hcCIsImtleXMiLCJwcmVjb21waWxlS2VybmVsT2JqIiwiYXJnVHlwZXMiLCJwYXJzZUludCIsImNvbXBpbGVLZXJuZWwiLCJwcmVjb21waWxlT2JqIiwiUnVubmVyQmFzZSIsIl9SdW5uZXJCYXNlIiwiQ1BVUnVubmVyIiwiS2VybmVsIiwiZ2V0TW9kZSIsImdwdSIsIm5vZGVNYXAiLCJuYXRpdmVGdW5jdGlvbnMiLCJyb290S2VybmVsIiwiYWRkTmF0aXZlRnVuY3Rpb24iLCJnbHNsRnVuY3Rpb25TdHJpbmciLCJqc0Z1bmN0aW9uIiwiYWRkRnVuY3Rpb25Ob2RlIiwic2V0QWRkRnVuY3Rpb24iLCJhZGROYXRpdmVGdW5jdGlvbnMiLCJpbk5vZGUiLCJ0cmFjZUZ1bmN0aW9uQ2FsbHMiLCJyZXRMaXN0IiwicGFyZW50IiwiZk5vZGUiLCJnZXRGdW5jdGlvblN0cmluZyIsIm9wdGlvbnMiLCJrZXJuZWxOb2RlIiwiZ2V0UHJvdG90eXBlU3RyaW5nIiwiZ2V0UHJvdG90eXBlc0Zyb21GdW5jdGlvbk5hbWVzIiwicmV2ZXJzZSIsImdldFN0cmluZ0Zyb21GdW5jdGlvbk5hbWVzIiwiZnVuY3Rpb25MaXN0IiwicmV0Iiwibm9kZSIsIm9wdCIsImdldFByb3RvdHlwZVN0cmluZ0Zyb21GdW5jdGlvbk5hbWVzIiwiZ2V0U3RyaW5nIiwidW5kZWZpbmVkIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiYWNvcm4iLCJpbml0VmFyaWFibGVzIiwicmVhZFZhcmlhYmxlcyIsIndyaXRlVmFyaWFibGVzIiwiaXNGdW5jdGlvblN0cmluZyIsImVycm9yIiwiaXNGdW5jdGlvbiIsImdldEZ1bmN0aW9uTmFtZUZyb21TdHJpbmciLCJnZXRQYXJhbU5hbWVzRnJvbVN0cmluZyIsInBhcmFtVmFyaWFibGVOYW1lcyIsInJldHVybnMiLCJmbiIsImdldEpzRnVuY3Rpb24iLCJldmFsIiwiaW5QYXJzZXIiLCJqc0Z1bmN0aW9uQVNUIiwibG9jYXRpb25zIiwiZnVuY0FTVCIsInNldEZ1bmN0aW9uU3RyaW5nIiwiZ2V0UGFyYW1UeXBlIiwiY2FsbGVkRnVuY3Rpb25Bcmd1bWVudHMiLCJjYWxsZWRGdW5jdGlvbkFyZ3VtZW50IiwiQmFzZUtlcm5lbCIsIndyYXBhcm91bmQiLCJoYXJkY29kZUNvbnN0YW50cyIsIm91dHB1dFRvVGV4dHVyZSIsIl9jYW52YXMiLCJfd2ViR2wiLCJmbG9hdFRleHR1cmVzIiwiZmxvYXRPdXRwdXQiLCJmbG9hdE91dHB1dEZvcmNlIiwiY29weURhdGEiLCJzdWJLZXJuZWxOYW1lcyIsInNldE91dHB1dCIsImluaXRDYW52YXMiLCJjYiIsInNldEZ1bmN0aW9ucyIsInNldERlYnVnIiwiZmxhZyIsInNldEdyYXBoaWNhbCIsInNldExvb3BNYXhJdGVyYXRpb25zIiwibWF4Iiwic2V0Q29uc3RhbnRzIiwic2V0V3JhcGFyb3VuZCIsInNldEhhcmRjb2RlQ29uc3RhbnRzIiwic2V0T3V0cHV0VG9UZXh0dXJlIiwic2V0RmxvYXRUZXh0dXJlcyIsInNldEZsb2F0T3V0cHV0Iiwic2V0RmxvYXRPdXRwdXRGb3JjZSIsInNldENhbnZhcyIsInNldFdlYkdsIiwid2ViR2wiLCJzZXRDb3B5RGF0YSIsImdldFdlYkdsIiwiZXhlYyIsImV4ZWN1dGUiLCJhcmdzIiwibmV3UHJvbWlzZSIsImFjY2VwdCIsInJlamVjdCIsImFkZFN1Yktlcm5lbFByb3BlcnR5Iiwic291cmNlIiwic2hvcnRjdXQiLCJmb3JFYWNoIiwic3Vic3RyaW5nIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJCYXNlUnVubmVyIiwiZW5kaWFubmVzcyIsInRleHR1cmVUb0FycmF5IiwidGV4dHVyZSIsImNvcHkiLCJjcmVhdGVLZXJuZWwiLCJkZWxldGVUZXh0dXJlIiwiYnVpbGRQcm9taXNlS2VybmVsIiwiYnVpbGRLZXJuZWwiLCJhc3NpZ24iLCJ3ZWJnbCIsIldlYkdMRnVuY3Rpb25Ob2RlIiwiV2ViR0xGdW5jdGlvbkJ1aWxkZXIiLCJfcm91bmQiLCJyb3VuZCIsIkZ1bmN0aW9uTm9kZUJhc2UiLCJqc01hdGhQcmVmaXgiLCJsb2NhbFByZWZpeCIsImNvbnN0YW50c1ByZWZpeCIsIkRFQ09ERTMyX0VOQ09ERTMyIiwiRU5DT0RFMzJfREVDT0RFMzIiLCJfRnVuY3Rpb25Ob2RlQmFzZSIsIndlYkdsUmVnZXhPcHRpbWl6ZSIsIk51bWJlciIsImlzSW50ZWdlciIsInJlcU5hbWUiLCJhc3N1bWVOb3RUZXh0dXJlIiwiaWR4IiwibGFzdCIsInBvcCIsInVucm9sbGVkX2xjIiwidG9Mb3dlckNhc2UiLCJzbGljZSIsImlzSWRlbnRpZmllcktlcm5lbFBhcmFtIiwiZW5zdXJlSW5kZW50aWZpZXJUeXBlIiwiZXhwZWN0ZWRUeXBlIiwic3RhcnQiLCJsb2MiLCJsaW5lIiwiYWN0dWFsVHlwZSIsImluU3RyIiwicmVwbGFjZSIsImdwdUtlcm5lbCIsImNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyIsImNvbXBpbGVkVmVydFNoYWRlclN0cmluZyIsIl9nZXRGcmFnU2hhZGVyU3RyaW5nIiwiX2dldFZlcnRTaGFkZXJTdHJpbmciLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJzZXR1cFBhcmFtcyIsIl9hZGRBcmd1bWVudCIsImdldEFyZ3VtZW50VGV4dHVyZSIsImdldFRleHR1cmVDYWNoZSIsImdldE91dHB1dFRleHR1cmUiLCJyZW5kZXJPdXRwdXQiLCJmcyIsIlRleHR1cmUiLCJmcmFnU2hhZGVyU3RyaW5nIiwidmVydFNoYWRlclN0cmluZyIsImNhbnZhc2VzIiwibWF4VGV4U2l6ZXMiLCJXZWJHTEtlcm5lbCIsInRleHR1cmVDYWNoZSIsInByb2dyYW1Vbmlmb3JtTG9jYXRpb25DYWNoZSIsImZyYW1lYnVmZmVyIiwiYnVmZmVyIiwicHJvZ3JhbSIsImFyZ3VtZW50c0xlbmd0aCIsImV4dCIsImV4dERyYXdCdWZmZXJzTWFwIiwib3V0cHV0VGV4dHVyZSIsIm1heFRleFNpemUiLCJpc1JlYWRQaXhlbCIsImlzRmxvYXRSZWFkUGl4ZWxzU3VwcG9ydGVkIiwiT0VTX3RleHR1cmVfZmxvYXQiLCJ1cGRhdGVNYXhUZXhTaXplIiwiY2FudmFzSW5kZXgiLCJnbCIsImVuYWJsZSIsIlNDSVNTT1JfVEVTVCIsInZpZXdwb3J0IiwiX2FkZEtlcm5lbHMiLCJ2ZXJ0U2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJmcmFnU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwiY3JlYXRlUHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJ2ZXJ0aWNlcyIsIkZsb2F0MzJBcnJheSIsInRleENvb3JkcyIsInRleENvb3JkT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImNyZWF0ZUJ1ZmZlciIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJidWZmZXJTdWJEYXRhIiwiYVBvc0xvYyIsImdldEF0dHJpYkxvY2F0aW9uIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiRkxPQVQiLCJGQUxTRSIsImFUZXhDb29yZExvYyIsInNldHVwT3V0cHV0VGV4dHVyZSIsIkNPTE9SX0FUVEFDSE1FTlQwIiwic3ViS2VybmVsT3V0cHV0VGV4dHVyZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIk5FQVJFU1QiLCJURVhUVVJFX01BR19GSUxURVIiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ1c2VQcm9ncmFtIiwic2Npc3NvciIsInVPdXRwdXREaW1Mb2MiLCJ1bmlmb3JtM2Z2IiwidVRleFNpemVMb2MiLCJ1bmlmb3JtMmZ2IiwicmF0aW9Mb2MiLCJ1bmlmb3JtMmYiLCJ0ZXhJbmRleCIsImJpbmRSZW5kZXJidWZmZXIiLCJSRU5ERVJCVUZGRVIiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImRyYXdBcnJheXMiLCJUUklBTkdMRV9TVFJJUCIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiZHJhd0J1ZmZlcnNXRUJHTCIsInJlc3VsdCIsIl9vdXRwdXQiLCJyZWFkUGl4ZWxzIiwiYnl0ZXMiLCJVaW50OEFycmF5Iiwic3ViYXJyYXkiLCJjdWJlIiwiZGV0YWNoT3V0cHV0VGV4dHVyZSIsImRldGFjaFRleHR1cmVDYWNoZSIsImdldFN1Yktlcm5lbFRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwicGFyYW0iLCJwYXJhbVR5cGUiLCJsb2NhdGlvbiIsIl9nZXRGcmFnU2hhZGVyQXJ0aWZhY3RNYXAiLCJIRUFERVIiLCJfZ2V0SGVhZGVyU3RyaW5nIiwiTE9PUF9NQVgiLCJDT05TVEFOVFMiLCJfZ2V0Q29uc3RhbnRzU3RyaW5nIiwiREVDT0RFMzJfRU5ESUFOTkVTUyIsIl9nZXREZWNvZGUzMkVuZGlhbm5lc3NTdHJpbmciLCJFTkNPREUzMl9FTkRJQU5ORVNTIiwiX2dldEVuY29kZTMyRW5kaWFubmVzc1N0cmluZyIsIkdFVF9XUkFQQVJPVU5EIiwiX2dldEdldFdyYXBhcm91bmRTdHJpbmciLCJHRVRfVEVYVFVSRV9DSEFOTkVMIiwiX2dldEdldFRleHR1cmVDaGFubmVsU3RyaW5nIiwiR0VUX1RFWFRVUkVfSU5ERVgiLCJfZ2V0R2V0VGV4dHVyZUluZGV4U3RyaW5nIiwiR0VUX1JFU1VMVCIsIl9nZXRHZXRSZXN1bHRTdHJpbmciLCJNQUlOX1BBUkFNUyIsIl9nZXRNYWluUGFyYW1zU3RyaW5nIiwiTUFJTl9DT05TVEFOVFMiLCJfZ2V0TWFpbkNvbnN0YW50c1N0cmluZyIsIktFUk5FTCIsIl9nZXRLZXJuZWxTdHJpbmciLCJNQUlOX1JFU1VMVCIsIl9nZXRNYWluUmVzdWx0U3RyaW5nIiwiYXJndW1lbnRUZXh0dXJlIiwiZGltIiwic2l6ZSIsInZhbHVlc0ZsYXQiLCJmbGF0dGVuVG8iLCJsb2NTaXplIiwiZGltTG9jIiwidW5pZm9ybTFpIiwiX2xvYyIsInVuaWZvcm0xZiIsImlucHV0VGV4dHVyZSIsIl9kaW0iLCJfc2l6ZSIsIl9sb2MyIiwiX2xvY1NpemUiLCJfZGltTG9jIiwiX2xpbmVzVG9TdHJpbmciLCJfZ2V0VGV4dHVyZUNvb3JkaW5hdGUiLCJuYW1lcyIsInBhcmFtRGltIiwicGFyYW1TaXplIiwicGFyc2VGbG9hdCIsImxpbmVzIiwiX3JlcGxhY2VBcnRpZmFjdHMiLCJzcmMiLCJtYXRjaCIsImFydGlmYWN0IiwiZ2V0RXh0ZW5zaW9uIiwiX2V4dCIsIl9pMyIsIldlYkdMUnVubmVyIiwiX1dlYkdMS2VybmVsIiwiV2ViR0xWYWxpZGF0b3JLZXJuZWwiLCJhbGlhcyIsIlV0aWxzQ29yZSIsIkdQVUNvcmUiLCJ2YWxpZGF0ZUtlcm5lbE9iaiIsImtlcm5lbE9iaiIsImlzS2VybmVsT2JqIiwibG9hZEtlcm5lbE9iaiIsImluT3B0IiwiR1BVIiwiX0dQVUNvcmUiLCJtb2RlIiwiaXNXZWJHbFN1cHBvcnRlZCIsImtlcm5lbHMiLCJydW5uZXJTZXR0aW5ncyIsIl9ydW5uZXIiLCJjcmVhdGVLZXJuZWxNYXAiLCJpc1dlYkdsRHJhd0J1ZmZlcnNTdXBwb3J0ZWQiLCJfZnVuY3Rpb25zIiwiY29tYmluZUtlcm5lbHMiLCJsYXN0S2VybmVsIiwiY29tYmluZWRLZXJuZWwiLCJuYXRpdmVGdW5jdGlvbiIsIl9kZWxldGUiLCJpc0NhbnZhcyIsImNhbnZhc09iaiIsIm5vZGVOYW1lIiwidG9VcHBlckNhc2UiLCJpc0NhbnZhc1N1cHBvcnRlZCIsIl9pc0NhbnZhc1N1cHBvcnRlZCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImlzV2ViR2wiLCJ3ZWJHbE9iaiIsIl9pc1dlYkdsU3VwcG9ydGVkIiwiX2lzV2ViR2xEcmF3QnVmZmVyc1N1cHBvcnRlZCIsImluaXRXZWJHbERlZmF1bHRPcHRpb25zIiwiYWxwaGEiLCJkZXB0aCIsImFudGlhbGlhcyIsIk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhciIsIk9FU19lbGVtZW50X2luZGV4X3VpbnQiLCJfdGVzdGluZ1dlYkdsIiwiQm9vbGVhbiIsIkZVTkNUSU9OX05BTUUiLCJTVFJJUF9DT01NRU5UUyIsIkFSR1VNRU5UX05BTUVTIiwiX3N5c3RlbUVuZGlhbm5lc3MiLCJBcnJheUJ1ZmZlciIsIlVpbnQzMkFycmF5IiwiYyIsIl9pc0Zsb2F0UmVhZFBpeGVsc1N1cHBvcnRlZCIsIlV0aWxzIiwiX1V0aWxzQ29yZSIsImZ1bmNPYmoiLCJmdW5jU3RyIiwibGFzdEluZGV4T2YiLCJmdW5jIiwiZm5TdHIiLCJ0ZW1wIiwiaXNBY3RpdmVDbG9uZSIsImV4ZWN1dG9yIiwic2ltcGxlIiwiUHJvbWlzZSIsInNtYWxsX3Byb21pc2UiLCJmdW5jdGlvbkJpbmRlciIsImluRnVuYyIsInRoaXNPYmoiLCJhcnJheSIsImFyZyIsImRpbWVuc2lvbnMiLCJudW1UZXhlbHMiLCJjZWlsIiwidyIsInNxcnQiLCJwYWQiLCJhcnIiLCJwYWRkaW5nIiwiemVyb3MiLCJ2YWx1ZU9mIiwibGVuIiwiY29uY2F0IiwiZmxhdHRlbjJkQXJyYXlUbyIsIm9mZnNldCIsInNldCIsImZsYXR0ZW4zZEFycmF5VG8iLCJwYXJ0Iiwic3BsaXQiLCJlbmQiLCJjb2x1bW4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwid2luZG93IiwiZ2xvYmFsIiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsInJlc2VydmVkV29yZHMiLCJzdHJpY3QiLCJzdHJpY3RCaW5kIiwiZWNtYTVBbmRMZXNzS2V5d29yZHMiLCJrZXl3b3JkcyIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMiLCJub25BU0NJSWlkZW50aWZpZXJDaGFycyIsIm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0IiwiUmVnRXhwIiwibm9uQVNDSUlpZGVudGlmaWVyIiwiYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMiLCJhc3RyYWxJZGVudGlmaWVyQ29kZXMiLCJpc0luQXN0cmFsU2V0IiwicG9zIiwiaXNJZGVudGlmaWVyU3RhcnQiLCJhc3RyYWwiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJpc0lkZW50aWZpZXJDaGFyIiwiVG9rZW5UeXBlIiwibGFiZWwiLCJjb25mIiwia2V5d29yZCIsImJlZm9yZUV4cHIiLCJzdGFydHNFeHByIiwiaXNMb29wIiwiaXNBc3NpZ24iLCJwb3N0Zml4IiwiYmlub3AiLCJ1cGRhdGVDb250ZXh0IiwicHJlYyIsImtleXdvcmRzJDEiLCJrdyIsInR5cGVzIiwibnVtIiwicmVnZXhwIiwic3RyaW5nIiwiZW9mIiwiYnJhY2tldEwiLCJicmFja2V0UiIsImJyYWNlTCIsImJyYWNlUiIsInBhcmVuTCIsInBhcmVuUiIsImNvbW1hIiwic2VtaSIsImNvbG9uIiwiZG90IiwicXVlc3Rpb24iLCJhcnJvdyIsInRlbXBsYXRlIiwiaW52YWxpZFRlbXBsYXRlIiwiZWxsaXBzaXMiLCJiYWNrUXVvdGUiLCJkb2xsYXJCcmFjZUwiLCJlcSIsImluY0RlYyIsImxvZ2ljYWxPUiIsImxvZ2ljYWxBTkQiLCJiaXR3aXNlT1IiLCJiaXR3aXNlWE9SIiwiYml0d2lzZUFORCIsImVxdWFsaXR5IiwicmVsYXRpb25hbCIsImJpdFNoaWZ0IiwicGx1c01pbiIsIm1vZHVsbyIsInN0YXIiLCJzbGFzaCIsInN0YXJzdGFyIiwiX2JyZWFrIiwiX2Nhc2UiLCJfY2F0Y2giLCJfY29udGludWUiLCJfZGVidWdnZXIiLCJfZGVmYXVsdCIsIl9kbyIsIl9lbHNlIiwiX2ZpbmFsbHkiLCJfZm9yIiwiX2Z1bmN0aW9uIiwiX2lmIiwiX3JldHVybiIsIl9zd2l0Y2giLCJfdGhyb3ciLCJfdHJ5IiwiX3ZhciIsIl9jb25zdCIsIl93aGlsZSIsIl93aXRoIiwiX25ldyIsIl9zdXBlciIsIl9jbGFzcyIsIl9leHRlbmRzIiwiX2V4cG9ydCIsIl9pbXBvcnQiLCJfbnVsbCIsIl90cnVlIiwiX2ZhbHNlIiwiX2luIiwiX2luc3RhbmNlb2YiLCJfdm9pZCIsImxpbmVCcmVhayIsImxpbmVCcmVha0ciLCJpc05ld0xpbmUiLCJub25BU0NJSXdoaXRlc3BhY2UiLCJza2lwV2hpdGVTcGFjZSIsInJlZiIsImhhcyIsInByb3BOYW1lIiwiUG9zaXRpb24iLCJjb2wiLCJTb3VyY2VMb2NhdGlvbiIsInNvdXJjZUZpbGUiLCJnZXRMaW5lSW5mbyIsImlucHV0IiwiY3VyIiwibGFzdEluZGV4IiwiZGVmYXVsdE9wdGlvbnMiLCJlY21hVmVyc2lvbiIsInNvdXJjZVR5cGUiLCJvbkluc2VydGVkU2VtaWNvbG9uIiwib25UcmFpbGluZ0NvbW1hIiwiYWxsb3dSZXNlcnZlZCIsImFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uIiwiYWxsb3dJbXBvcnRFeHBvcnRFdmVyeXdoZXJlIiwiYWxsb3dIYXNoQmFuZyIsIm9uVG9rZW4iLCJvbkNvbW1lbnQiLCJyYW5nZXMiLCJkaXJlY3RTb3VyY2VGaWxlIiwicHJlc2VydmVQYXJlbnMiLCJwbHVnaW5zIiwiZ2V0T3B0aW9ucyIsIm9wdHMiLCJ0b2tlbnMiLCJ0b2tlbiIsInB1c2hDb21tZW50IiwiYmxvY2siLCJ0ZXh0Iiwic3RhcnRMb2MiLCJlbmRMb2MiLCJjb21tZW50IiwicmFuZ2UiLCJrZXl3b3JkUmVnZXhwIiwid29yZHMiLCJQYXJzZXIiLCJzdGFydFBvcyIsInJlc2VydmVkIiwidiIsInJlc2VydmVkU3RyaWN0IiwicmVzZXJ2ZWRXb3Jkc1N0cmljdCIsInJlc2VydmVkV29yZHNTdHJpY3RCaW5kIiwiY29udGFpbnNFc2MiLCJsb2FkUGx1Z2lucyIsImxpbmVTdGFydCIsImN1ckxpbmUiLCJjdXJQb3NpdGlvbiIsImxhc3RUb2tFbmRMb2MiLCJsYXN0VG9rU3RhcnRMb2MiLCJsYXN0VG9rU3RhcnQiLCJsYXN0VG9rRW5kIiwiY29udGV4dCIsImluaXRpYWxDb250ZXh0IiwiZXhwckFsbG93ZWQiLCJpbk1vZHVsZSIsInN0cmljdERpcmVjdGl2ZSIsInBvdGVudGlhbEFycm93QXQiLCJpbkZ1bmN0aW9uIiwiaW5HZW5lcmF0b3IiLCJpbkFzeW5jIiwieWllbGRQb3MiLCJhd2FpdFBvcyIsImxhYmVscyIsInNraXBMaW5lQ29tbWVudCIsInNjb3BlU3RhY2siLCJlbnRlckZ1bmN0aW9uU2NvcGUiLCJpc0tleXdvcmQiLCJ3b3JkIiwiaXNSZXNlcnZlZFdvcmQiLCJleHRlbmQiLCJwbHVnaW5Db25maWdzIiwidGhpcyQxIiwicGx1Z2luIiwic3RhcnROb2RlIiwibmV4dFRva2VuIiwicGFyc2VUb3BMZXZlbCIsInBwIiwibGl0ZXJhbCIsImVhdCIsIm5leHQiLCJpc0NvbnRleHR1YWwiLCJlYXRDb250ZXh0dWFsIiwiZXhwZWN0Q29udGV4dHVhbCIsInVuZXhwZWN0ZWQiLCJjYW5JbnNlcnRTZW1pY29sb24iLCJpbnNlcnRTZW1pY29sb24iLCJzZW1pY29sb24iLCJhZnRlclRyYWlsaW5nQ29tbWEiLCJ0b2tUeXBlIiwibm90TmV4dCIsImV4cGVjdCIsInJhaXNlIiwiRGVzdHJ1Y3R1cmluZ0Vycm9ycyIsInNob3J0aGFuZEFzc2lnbiIsInRyYWlsaW5nQ29tbWEiLCJwYXJlbnRoZXNpemVkQXNzaWduIiwicGFyZW50aGVzaXplZEJpbmQiLCJjaGVja1BhdHRlcm5FcnJvcnMiLCJyZWZEZXN0cnVjdHVyaW5nRXJyb3JzIiwicmFpc2VSZWNvdmVyYWJsZSIsInBhcmVucyIsImNoZWNrRXhwcmVzc2lvbkVycm9ycyIsImFuZFRocm93IiwiY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zIiwiaXNTaW1wbGVBc3NpZ25UYXJnZXQiLCJleHByIiwicHAkMSIsInN0bXQiLCJwYXJzZVN0YXRlbWVudCIsImZpbmlzaE5vZGUiLCJsb29wTGFiZWwiLCJraW5kIiwic3dpdGNoTGFiZWwiLCJpc0xldCIsInNraXAiLCJuZXh0Q2giLCJjaGFyQ29kZUF0IiwiaWRlbnQiLCJpc0FzeW5jRnVuY3Rpb24iLCJjaGFyQXQiLCJ0b3BMZXZlbCIsInN0YXJ0dHlwZSIsInBhcnNlQnJlYWtDb250aW51ZVN0YXRlbWVudCIsInBhcnNlRGVidWdnZXJTdGF0ZW1lbnQiLCJwYXJzZURvU3RhdGVtZW50IiwicGFyc2VGb3JTdGF0ZW1lbnQiLCJwYXJzZUZ1bmN0aW9uU3RhdGVtZW50IiwicGFyc2VDbGFzcyIsInBhcnNlSWZTdGF0ZW1lbnQiLCJwYXJzZVJldHVyblN0YXRlbWVudCIsInBhcnNlU3dpdGNoU3RhdGVtZW50IiwicGFyc2VUaHJvd1N0YXRlbWVudCIsInBhcnNlVHJ5U3RhdGVtZW50IiwicGFyc2VWYXJTdGF0ZW1lbnQiLCJwYXJzZVdoaWxlU3RhdGVtZW50IiwicGFyc2VXaXRoU3RhdGVtZW50IiwicGFyc2VCbG9jayIsInBhcnNlRW1wdHlTdGF0ZW1lbnQiLCJwYXJzZUltcG9ydCIsInBhcnNlRXhwb3J0IiwibWF5YmVOYW1lIiwicGFyc2VFeHByZXNzaW9uIiwicGFyc2VMYWJlbGVkU3RhdGVtZW50IiwicGFyc2VFeHByZXNzaW9uU3RhdGVtZW50IiwiaXNCcmVhayIsInBhcnNlSWRlbnQiLCJsYWIiLCJwYXJzZVBhcmVuRXhwcmVzc2lvbiIsImVudGVyTGV4aWNhbFNjb3BlIiwicGFyc2VGb3IiLCJpbml0JDEiLCJwYXJzZVZhciIsInBhcnNlRm9ySW4iLCJ0b0Fzc2lnbmFibGUiLCJjaGVja0xWYWwiLCJpc0FzeW5jIiwicGFyc2VGdW5jdGlvbiIsImRpc2NyaW1pbmFudCIsImNhc2VzIiwic2F3RGVmYXVsdCIsImlzQ2FzZSIsImV4aXRMZXhpY2FsU2NvcGUiLCJlbXB0eSIsImhhbmRsZXIiLCJjbGF1c2UiLCJwYXJzZUJpbmRpbmdBdG9tIiwiZmluYWxpemVyIiwiaSQxIiwibGlzdCIsImxhYmVsJDEiLCJzdGF0ZW1lbnRTdGFydCIsImdlbmVyYXRvciIsImNyZWF0ZU5ld0xleGljYWxTY29wZSIsImlzRm9yIiwiZGVjbCIsInBhcnNlVmFySWQiLCJwYXJzZU1heWJlQXNzaWduIiwiaXNTdGF0ZW1lbnQiLCJhbGxvd0V4cHJlc3Npb25Cb2R5IiwiaW5pdEZ1bmN0aW9uIiwiYXN5bmMiLCJvbGRJbkdlbiIsIm9sZEluQXN5bmMiLCJvbGRZaWVsZFBvcyIsIm9sZEF3YWl0UG9zIiwib2xkSW5GdW5jIiwicGFyc2VGdW5jdGlvblBhcmFtcyIsInBhcnNlRnVuY3Rpb25Cb2R5IiwicGFyYW1zIiwicGFyc2VCaW5kaW5nTGlzdCIsInBhcnNlQ2xhc3NJZCIsInBhcnNlQ2xhc3NTdXBlciIsImNsYXNzQm9keSIsImhhZENvbnN0cnVjdG9yIiwibWV0aG9kIiwiaXNHZW5lcmF0b3IiLCJpc01heWJlU3RhdGljIiwicGFyc2VQcm9wZXJ0eU5hbWUiLCJzdGF0aWMiLCJpc0dldFNldCIsInBhcnNlQ2xhc3NNZXRob2QiLCJwYXJhbUNvdW50IiwicGFyc2VNZXRob2QiLCJwYXJzZUV4cHJTdWJzY3JpcHRzIiwicGFyc2VFeHByQXRvbSIsImNoZWNrRXhwb3J0IiwiY05vZGUiLCJzaG91bGRQYXJzZUV4cG9ydFN0YXRlbWVudCIsImNoZWNrVmFyaWFibGVFeHBvcnQiLCJzcGVjaWZpZXJzIiwicGFyc2VFeHBvcnRTcGVjaWZpZXJzIiwic3BlYyIsImNoZWNrVW5yZXNlcnZlZCIsImxvY2FsIiwiY2hlY2tQYXR0ZXJuRXhwb3J0IiwicGF0IiwicHJvcGVydGllcyIsInByb3AiLCJsaXN0JDEiLCJlbHQiLCJkZWNscyIsIm5vZGVzIiwiZmlyc3QiLCJleHBvcnRlZCIsInBhcnNlSW1wb3J0U3BlY2lmaWVycyIsIm5vZGUkMSIsIm5vZGUkMiIsImltcG9ydGVkIiwicHAkMiIsImlzQmluZGluZyIsInRvQXNzaWduYWJsZUxpc3QiLCJleHByTGlzdCIsInBhcnNlU3ByZWFkIiwicGFyc2VSZXN0QmluZGluZyIsInBhcnNlT2JqIiwiY2xvc2UiLCJhbGxvd0VtcHR5IiwiYWxsb3dUcmFpbGluZ0NvbW1hIiwiZWx0cyIsInJlc3QiLCJwYXJzZUJpbmRpbmdMaXN0SXRlbSIsImVsZW0iLCJwYXJzZU1heWJlRGVmYXVsdCIsInN0YXJ0Tm9kZUF0IiwiYmluZGluZ1R5cGUiLCJjaGVja0NsYXNoZXMiLCJjYW5EZWNsYXJlVmFyTmFtZSIsImNhbkRlY2xhcmVMZXhpY2FsTmFtZSIsImRlY2xhcmVWYXJOYW1lIiwiZGVjbGFyZUxleGljYWxOYW1lIiwicHAkMyIsImNoZWNrUHJvcENsYXNoIiwicHJvcEhhc2giLCJzaG9ydGhhbmQiLCJwcm90byIsIm90aGVyIiwicmVkZWZpbml0aW9uIiwiZ2V0Iiwibm9JbiIsImFmdGVyTGVmdFBhcnNlIiwicGFyc2VZaWVsZCIsIm93bkRlc3RydWN0dXJpbmdFcnJvcnMiLCJvbGRQYXJlbkFzc2lnbiIsIm9sZFRyYWlsaW5nQ29tbWEiLCJwYXJzZU1heWJlQ29uZGl0aW9uYWwiLCJwYXJzZUV4cHJPcHMiLCJwYXJzZU1heWJlVW5hcnkiLCJwYXJzZUV4cHJPcCIsImxlZnRTdGFydFBvcyIsImxlZnRTdGFydExvYyIsIm1pblByZWMiLCJsb2dpY2FsIiwib3AiLCJidWlsZEJpbmFyeSIsInNhd1VuYXJ5IiwicGFyc2VBd2FpdCIsInNraXBBcnJvd1N1YnNjcmlwdHMiLCJwYXJzZVN1YnNjcmlwdHMiLCJiYXNlIiwibm9DYWxscyIsIm1heWJlQXN5bmNBcnJvdyIsInBhcnNlRXhwckxpc3QiLCJwYXJzZUFycm93RXhwcmVzc2lvbiIsInRhZyIsInF1YXNpIiwicGFyc2VUZW1wbGF0ZSIsImlzVGFnZ2VkIiwiY2FuQmVBcnJvdyIsInBhcnNlTGl0ZXJhbCIsInJlZ2V4IiwicGF0dGVybiIsImZsYWdzIiwicmF3IiwicGFyc2VQYXJlbkFuZERpc3Rpbmd1aXNoRXhwcmVzc2lvbiIsInBhcnNlTmV3IiwidmFsIiwiaW5uZXJTdGFydFBvcyIsImlubmVyU3RhcnRMb2MiLCJsYXN0SXNDb21tYSIsInNwcmVhZFN0YXJ0IiwiaW5uZXJQYXJlblN0YXJ0IiwicGFyc2VQYXJlbkl0ZW0iLCJpbm5lckVuZFBvcyIsImlubmVyRW5kTG9jIiwicGFyc2VQYXJlbkFycm93TGlzdCIsImZpbmlzaE5vZGVBdCIsInBhciIsIml0ZW0iLCJlbXB0eSQxIiwibWV0YSIsInBhcnNlVGVtcGxhdGVFbGVtZW50IiwiY29va2VkIiwidGFpbCIsImN1ckVsdCIsInF1YXNpcyIsImlzQXN5bmNQcm9wIiwiaXNQYXR0ZXJuIiwicGFyc2VQcm9wZXJ0eVZhbHVlIiwiaXNBcnJvd0Z1bmN0aW9uIiwiaXNFeHByZXNzaW9uIiwib2xkU3RyaWN0IiwidXNlU3RyaWN0IiwiY2hlY2tQYXJhbXMiLCJub25TaW1wbGUiLCJpc1NpbXBsZVBhcmFtTGlzdCIsIm9sZExhYmVscyIsImV4aXRGdW5jdGlvblNjb3BlIiwiYWxsb3dEdXBsaWNhdGVzIiwibmFtZUhhc2giLCJyZSIsImxpYmVyYWwiLCJkZWxlZ2F0ZSIsInBwJDQiLCJtZXNzYWdlIiwiZXJyIiwiU3ludGF4RXJyb3IiLCJyYWlzZWRBdCIsInBwJDUiLCJzb3VyY2VzIiwidmFyIiwibGV4aWNhbCIsImNoaWxkVmFyIiwicGFyZW50TGV4aWNhbCIsInBhcmVudFNjb3BlIiwiY2hpbGRTY29wZSIsImN1cnJlbnRTY29wZSIsInBhcnNlciIsInBwJDYiLCJUb2tDb250ZXh0IiwiaXNFeHByIiwicHJlc2VydmVTcGFjZSIsIm92ZXJyaWRlIiwidHlwZXMkMSIsImJfc3RhdCIsImJfZXhwciIsImJfdG1wbCIsInBfc3RhdCIsInBfZXhwciIsInFfdG1wbCIsInRyeVJlYWRUZW1wbGF0ZVRva2VuIiwiZl9zdGF0IiwiZl9leHByIiwiZl9leHByX2dlbiIsImZfZ2VuIiwicHAkNyIsImJyYWNlSXNCbG9jayIsInByZXZUeXBlIiwiY3VyQ29udGV4dCIsImluR2VuZXJhdG9yQ29udGV4dCIsIm91dCIsInN0YXRlbWVudFBhcmVucyIsImFsbG93ZWQiLCJUb2tlbiIsInBwJDgiLCJpc1JoaW5vIiwiUGFja2FnZXMiLCJnZXRUb2tlbiIsImRvbmUiLCJza2lwU3BhY2UiLCJmaW5pc2hUb2tlbiIsInJlYWRUb2tlbiIsImZ1bGxDaGFyQ29kZUF0UG9zIiwicmVhZFdvcmQiLCJnZXRUb2tlbkZyb21Db2RlIiwic2tpcEJsb2NrQ29tbWVudCIsInN0YXJ0U2tpcCIsImNoIiwibG9vcCIsInJlYWRUb2tlbl9kb3QiLCJyZWFkTnVtYmVyIiwibmV4dDIiLCJyZWFkVG9rZW5fc2xhc2giLCJyZWFkUmVnZXhwIiwiZmluaXNoT3AiLCJyZWFkVG9rZW5fbXVsdF9tb2R1bG9fZXhwIiwidG9rZW50eXBlIiwicmVhZFRva2VuX3BpcGVfYW1wIiwicmVhZFRva2VuX2NhcmV0IiwicmVhZFRva2VuX3BsdXNfbWluIiwicmVhZFRva2VuX2x0X2d0IiwicmVhZFRva2VuX2VxX2V4Y2wiLCJyZWFkUmFkaXhOdW1iZXIiLCJyZWFkU3RyaW5nIiwiY29kZVBvaW50VG9TdHJpbmciLCJzdHIiLCJ0cnlDcmVhdGVSZWdleHAiLCJ0aHJvd0Vycm9yQXQiLCJyZWdleHBVbmljb2RlU3VwcG9ydCIsImVzY2FwZWQiLCJpbkNsYXNzIiwiY29udGVudCIsIm1vZHMiLCJyZWFkV29yZDEiLCJ0bXAiLCJ0bXBGbGFncyIsInZhbGlkRmxhZ3MiLCJfbWF0Y2giLCJyZWFkSW50IiwicmFkaXgiLCJ0b3RhbCIsIkluZmluaXR5Iiwic3RhcnRzV2l0aERvdCIsImlzRmxvYXQiLCJvY3RhbCIsInJlYWRDb2RlUG9pbnQiLCJjb2RlUG9zIiwicmVhZEhleENoYXIiLCJpbnZhbGlkU3RyaW5nVG9rZW4iLCJxdW90ZSIsImNodW5rU3RhcnQiLCJyZWFkRXNjYXBlZENoYXIiLCJJTlZBTElEX1RFTVBMQVRFX0VTQ0FQRV9FUlJPUiIsImluVGVtcGxhdGVFbGVtZW50IiwicmVhZFRtcGxUb2tlbiIsInJlYWRJbnZhbGlkVGVtcGxhdGVUb2tlbiIsInBvc2l0aW9uIiwiaW5UZW1wbGF0ZSIsIm9jdGFsU3RyIiwic3Vic3RyIiwiZXNjU3RhcnQiLCJlc2MiLCJ2ZXJzaW9uIiwicGFyc2VFeHByZXNzaW9uQXQiLCJ0b2tlbml6ZXIiLCJhZGRMb29zZUV4cG9ydHMiLCJQYXJzZXIkJDEiLCJwbHVnaW5zJCQxIiwicGFyc2VfZGFtbWl0IiwiTG9vc2VQYXJzZXIiLCJwbHVnaW5zTG9vc2UiLCJ0b2tUeXBlcyIsImtleXdvcmRUeXBlcyIsInRva0NvbnRleHRzIiwiRGF0YSIsIlBhcnRpZXMiLCJSaWRpbmdzIiwiUGFydGllc0kiLCJSaWRpbmdzSSIsIlNsb3Blc0EiLCJJbnRlcmNlcHRzQSIsIlJlcyIsImRhdGFSZWFkeSIsIlBvcHVsYXJWb3RlcyIsIlBhcnR5S2V5cyIsImZpbGVzIiwiUEkiLCJSSSIsIm9ial9mcm9tX2FyciIsInJlcyIsIkRLUiIsInhzIiwiREtQIiwiRFZQIiwiRUtQIiwiUFYiLCJhcnJfZnJvbV9vYmoiLCJpbmRpY2VzIiwiayIsImludmVydCIsImJ5X3JpZGluZ19wYXJ0eSIsInJpZGluZ19pZHMiLCJwYXJ0eV9uYW1lcyIsIk4iLCJycF90b19hcnJheTJkIiwidjAiLCJSIiwiUCIsIm0iLCJqIiwiZXZhbHVhdGVNYXAiLCJwdnMiLCJkcHZ4IiwiZHB2eSIsInNsb3BlcyIsImludGVyY2VwdHMiLCJjb3VudCIsImJlc3RJIiwiYmVzdEUiLCJwdiIsIngwIiwiZHgiLCJ5MCIsImR5IiwiZXYiLCJzdGVwIiwiczEiLCJLIiwicmVuZGVyIiwiTlgiLCJOWSIsIkwiLCJDIiwicGUiLCJtb2RlbHMiLCJjcmUiLCJfIiwidW5pcSIsInBhcnR5X25hbWUiLCJyaWRpbmdfaWQiLCJzbG9wZSIsImludGVyY2VwdCIsIiQiLCJhcHBlbmRDaGlsZCIsImRyYXciLCJ0MCIsInBlcmZvcm1hbmNlIiwibm93IiwidDEiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJldmFsdWF0ZSIsIm1hcFZhbHVlcyIsImdyb3VwQnkiLCJpZGVudGl0eSIsInZhbHVlcyIsIndoZW4iLCJnZXRKU09OIiwidGhlbiIsInJlYWR5IiwicHZfc2xpZGVycyIsInBhcnR5IiwicHZJZCIsImRpdiIsImFwcGVuZCIsInNsaWRlckVsZW0iLCJzbGlkZXIiLCJub1VpU2xpZGVyIiwidG9vbHRpcHMiLCJtaW4iLCJwaXBzIiwiZGVuc2l0eSIsIm9uIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7OztBQUFBLENBQUEsU0FBQUEsQ0FBQSxDQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQUMsQ0FBQSxFQUFBO0FBQUEsVUFBQUMsQ0FBQSxDQUFBQyxDQUFBLEVBQUFDLENBQUEsRUFBQTtBQUFBLE1BQUEsQ0FBQUosRUFBQUcsQ0FBQSxDQUFBLEVBQUE7QUFBQSxPQUFBLENBQUFKLEVBQUFJLENBQUEsQ0FBQSxFQUFBO0FBQUEsUUFBQUUsSUFBQSxPQUFBQyxPQUFBLElBQUEsVUFBQSxJQUFBQSxPQUFBLENBQUEsSUFBQSxDQUFBRixDQUFBLElBQUFDLENBQUEsRUFBQSxPQUFBQSxFQUFBRixDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsQ0FBQSxJQUFBSSxDQUFBLEVBQUEsT0FBQUEsRUFBQUosQ0FBQSxFQUFBLENBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQUssSUFBQSxJQUFBQyxLQUFBLENBQUEseUJBQUFOLENBQUEsR0FBQSxHQUFBLENBQUEsQ0FBQSxNQUFBSyxFQUFBRSxJQUFBLEdBQUEsa0JBQUEsRUFBQUYsQ0FBQTtBQUFBLFFBQUFHLElBQUFYLEVBQUFHLENBQUEsSUFBQSxFQUFBUyxTQUFBLEVBQUEsRUFBQSxDQUFBYixFQUFBSSxDQUFBLEVBQUEsQ0FBQSxFQUFBVSxJQUFBLENBQUFGLEVBQUFDLE9BQUEsRUFBQSxVQUFBZCxDQUFBLEVBQUE7QUFBQSxRQUFBRSxJQUFBRCxFQUFBSSxDQUFBLEVBQUEsQ0FBQSxFQUFBTCxDQUFBLENBQUEsQ0FBQSxPQUFBSSxFQUFBRixJQUFBQSxDQUFBLEdBQUFGLENBQUEsQ0FBQTtBQUFBLElBQUEsRUFBQWEsQ0FBQSxFQUFBQSxFQUFBQyxPQUFBLEVBQUFkLENBQUEsRUFBQUMsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUE7QUFBQSxVQUFBRCxFQUFBRyxDQUFBLEVBQUFTLE9BQUE7QUFBQSxNQUFBTCxJQUFBLE9BQUFELE9BQUEsSUFBQSxVQUFBLElBQUFBLE9BQUEsQ0FBQSxLQUFBLElBQUFILElBQUEsQ0FBQSxFQUFBQSxJQUFBRixFQUFBYSxNQUFBLEVBQUFYLEdBQUE7QUFBQUQsSUFBQUQsRUFBQUUsQ0FBQSxDQUFBO0FBQUEsRUFBQSxPQUFBRCxDQUFBO0FBQUEsQ0FBQSxFQUFBLEVBQUEsR0FBQSxDQUFBLFVBQUFJLE9BQUEsRUFBQVMsTUFBQSxFQUFBSCxPQUFBLEVBQUE7QUFDQTs7QUFFQSxNQUFBSSxlQUFBLFlBQUE7QUFBQSxZQUFBQyxnQkFBQSxDQUFB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QUFBLHFySUFBQTtBQUNBLE9BQUFDLDBCQUFBLCtnRkFBQTs7QUFFQSxPQUFBQywwQkFBQSxJQUFBQyxNQUFBLENBQUEsTUFBQUgsNEJBQUEsR0FBQSxHQUFBLENBQUE7QUFDQSxPQUFBSSxxQkFBQSxJQUFBRCxNQUFBLENBQUEsTUFBQUgsNEJBQUEsR0FBQUMsdUJBQUEsR0FBQSxHQUFBLENBQUE7O0FBRUFELGtDQUFBQywwQkFBQSxJQUFBOztBQUdBLE9BQUFJLDZCQUFBLENBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsSUFBQSxFQUFBLEVBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLEVBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxHQUFBLENBQUE7O0FBRUEsT0FBQUMsd0JBQUEsQ0FBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsR0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxFQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUEsRUFBQSxDQUFBLEVBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxD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LEtBQUEsRUFBQTtBQUFBaXNDLGdCQUFBanRDLEdBQUEsSUFBQXlpQixXQUFBemhCLE1BQUEsQ0FBQSxDQUFBLENBQUE7QUFBQSxHQUFBO0FBQ0EsRUF0QkE7QUF1QkEsQ0ExQkEiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBncHUuanNcbiAqIGh0dHA6Ly9ncHUucm9ja3MvXG4gKlxuICogR1BVIEFjY2VsZXJhdGVkIEphdmFTY3JpcHRcbiAqXG4gKiBAdmVyc2lvbiAxLjAuMC1yYy4xXG4gKiBAZGF0ZSBUdWUgT2N0IDE3IDIwMTcgMjM6NDE6MjkgR01ULTA3MDAgKFBEVClcbiAqXG4gKiBAbGljZW5zZSBNSVRcbiAqIFRoZSBNSVQgTGljZW5zZVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxNyBncHUuanMgVGVhbVxuICovXG5cInVzZSBzdHJpY3RcIjsoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSh7MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEZ1bmN0aW9uQnVpbGRlckJhc2UgPSByZXF1aXJlKCcuLi9mdW5jdGlvbi1idWlsZGVyLWJhc2UnKTtcbnZhciBDUFVGdW5jdGlvbk5vZGUgPSByZXF1aXJlKCcuL2Z1bmN0aW9uLW5vZGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX0Z1bmN0aW9uQnVpbGRlckJhc2UpIHtcbiAgX2luaGVyaXRzKENQVUZ1bmN0aW9uQnVpbGRlciwgX0Z1bmN0aW9uQnVpbGRlckJhc2UpO1xuXG4gIGZ1bmN0aW9uIENQVUZ1bmN0aW9uQnVpbGRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1BVRnVuY3Rpb25CdWlsZGVyKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDUFVGdW5jdGlvbkJ1aWxkZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDUFVGdW5jdGlvbkJ1aWxkZXIpKS5jYWxsKHRoaXMpKTtcblxuICAgIF90aGlzLk5vZGUgPSBDUFVGdW5jdGlvbk5vZGU7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKENQVUZ1bmN0aW9uQnVpbGRlciwgW3tcbiAgICBrZXk6ICdwb2x5ZmlsbFN0YW5kYXJkRnVuY3Rpb25zJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9seWZpbGxTdGFuZGFyZEZ1bmN0aW9ucygpIHt9XG4gIH1dKTtcblxuICByZXR1cm4gQ1BVRnVuY3Rpb25CdWlsZGVyO1xufShGdW5jdGlvbkJ1aWxkZXJCYXNlKTtcbn0se1wiLi4vZnVuY3Rpb24tYnVpbGRlci1iYXNlXCI6NixcIi4vZnVuY3Rpb24tbm9kZVwiOjJ9XSwyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgQmFzZUZ1bmN0aW9uTm9kZSA9IHJlcXVpcmUoJy4uL2Z1bmN0aW9uLW5vZGUtYmFzZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vY29yZS91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfQmFzZUZ1bmN0aW9uTm9kZSkge1xuXHRfaW5oZXJpdHMoQ1BVRnVuY3Rpb25Ob2RlLCBfQmFzZUZ1bmN0aW9uTm9kZSk7XG5cblx0ZnVuY3Rpb24gQ1BVRnVuY3Rpb25Ob2RlKCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDUFVGdW5jdGlvbk5vZGUpO1xuXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDUFVGdW5jdGlvbk5vZGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDUFVGdW5jdGlvbk5vZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhDUFVGdW5jdGlvbk5vZGUsIFt7XG5cdFx0a2V5OiAnZ2VuZXJhdGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZSgpIHtcblx0XHRcdGlmICh0aGlzLmRlYnVnKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKHRoaXMpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5mdW5jdGlvblN0cmluZ0FycmF5ID0gdGhpcy5hc3RHZW5lcmljKHRoaXMuZ2V0SnNBU1QoKSwgW10sIHRoaXMpO1xuXHRcdFx0dGhpcy5mdW5jdGlvblN0cmluZyA9IHRoaXMuZnVuY3Rpb25TdHJpbmdBcnJheS5qb2luKCcnKS50cmltKCk7XG5cdFx0XHRyZXR1cm4gdGhpcy5mdW5jdGlvblN0cmluZztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0RnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRGdW5jdGlvblByb3RvdHlwZVN0cmluZygpIHtcblx0XHRcdGlmICh0aGlzLndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMud2ViR2xGdW5jdGlvblByb3RvdHlwZVN0cmluZztcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcgPSB0aGlzLmdlbmVyYXRlKCk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEdlbmVyaWMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RHZW5lcmljKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChhc3QgPT09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnTlVMTCBhc3QnLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAoQXJyYXkuaXNBcnJheShhc3QpKSB7XG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3RbaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHN3aXRjaCAoYXN0LnR5cGUpIHtcblx0XHRcdFx0XHRjYXNlICdGdW5jdGlvbkRlY2xhcmF0aW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEZ1bmN0aW9uRGVjbGFyYXRpb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnRnVuY3Rpb25FeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEZ1bmN0aW9uRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdSZXR1cm5TdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0UmV0dXJuU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0xpdGVyYWwnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0TGl0ZXJhbChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdCaW5hcnlFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEJpbmFyeUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnSWRlbnRpZmllcic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RJZGVudGlmaWVyRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdBc3NpZ25tZW50RXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RBc3NpZ25tZW50RXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdFeHByZXNzaW9uU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEV4cHJlc3Npb25TdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnRW1wdHlTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0RW1wdHlTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQmxvY2tTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QmxvY2tTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnSWZTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0SWZTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQnJlYWtTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QnJlYWtTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnQ29udGludWVTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0Q29udGludWVTdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnRm9yU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEZvclN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdXaGlsZVN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RXaGlsZVN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdWYXJpYWJsZURlY2xhcmF0aW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFZhcmlhYmxlRGVjbGFyYXRpb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnVmFyaWFibGVEZWNsYXJhdG9yJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFZhcmlhYmxlRGVjbGFyYXRvcihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdUaGlzRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RUaGlzRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdTZXF1ZW5jZUV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0U2VxdWVuY2VFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1VuYXJ5RXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RVbmFyeUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnVXBkYXRlRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RVcGRhdGVFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0xvZ2ljYWxFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdExvZ2ljYWxFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ01lbWJlckV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0TWVtYmVyRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdDYWxsRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RDYWxsRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdBcnJheUV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QXJyYXlFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnVW5rbm93biBhc3QgdHlwZSA6ICcgKyBhc3QudHlwZSwgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RGdW5jdGlvbkRlY2xhcmF0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RnVuY3Rpb25EZWNsYXJhdGlvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAodGhpcy5hZGRGdW5jdGlvbikge1xuXHRcdFx0XHR0aGlzLmFkZEZ1bmN0aW9uKG51bGwsIHV0aWxzLmdldEFzdFN0cmluZyh0aGlzLmpzRnVuY3Rpb25TdHJpbmcsIGFzdCkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0RnVuY3Rpb25FeHByZXNzaW9uJyxcblxuXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEZ1bmN0aW9uRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cblx0XHRcdGlmICghZnVuY1BhcmFtLmlzUm9vdEtlcm5lbCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnZnVuY3Rpb24nKTtcblx0XHRcdFx0ZnVuY1BhcmFtLmtlcm5hbEFzdCA9IGFzdDtcblx0XHRcdFx0cmV0QXJyLnB1c2goJyAnKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jUGFyYW0ucGFyYW1OYW1lcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdHZhciBwYXJhbU5hbWUgPSBmdW5jUGFyYW0ucGFyYW1OYW1lc1tpXTtcblxuXHRcdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJywgJyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJyAnKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndXNlcl8nKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaChwYXJhbU5hbWUpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0QXJyLnB1c2goJykge1xcbicpO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXN0LmJvZHkuYm9keS5sZW5ndGg7ICsrX2kpIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5ib2R5LmJvZHlbX2ldLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdcXG4nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFmdW5jUGFyYW0uaXNSb290S2VybmVsKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RSZXR1cm5TdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RSZXR1cm5TdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGZ1bmNQYXJhbS5pc1Jvb3RLZXJuZWwpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ2tlcm5lbFJlc3VsdCA9ICcpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHR9IGVsc2UgaWYgKGZ1bmNQYXJhbS5pc1N1Yktlcm5lbCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0uZnVuY3Rpb25OYW1lICsgJ1Jlc3VsdCA9ICcpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdyZXR1cm4gJyArIGZ1bmNQYXJhbS5mdW5jdGlvbk5hbWUgKyAnUmVzdWx0OycpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ3JldHVybiAnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0fVxuXG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdExpdGVyYWwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RMaXRlcmFsKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblxuXHRcdFx0aWYgKGlzTmFOKGFzdC52YWx1ZSkpIHtcblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnTm9uLW51bWVyaWMgbGl0ZXJhbCBub3Qgc3VwcG9ydGVkIDogJyArIGFzdC52YWx1ZSwgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaChhc3QudmFsdWUpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RCaW5hcnlFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0QmluYXJ5RXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaChhc3Qub3BlcmF0b3IpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdElkZW50aWZpZXJFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0SWRlbnRpZmllckV4cHJlc3Npb24oaWR0Tm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChpZHROb2RlLnR5cGUgIT09ICdJZGVudGlmaWVyJykge1xuXHRcdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdJZGVudGlmaWVyRXhwcmVzc2lvbiAtIG5vdCBhbiBJZGVudGlmaWVyJywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRzd2l0Y2ggKGlkdE5vZGUubmFtZSkge1xuXHRcdFx0XHRjYXNlICdncHVfdGhyZWFkWCc6XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3RocmVhZElkLngnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X3RocmVhZFknOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd0aHJlYWRJZC55Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dwdV90aHJlYWRaJzpcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndGhyZWFkSWQueicpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHVfb3V0cHV0WCc6XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VPdXRwdXREaW0ueCcpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHVfb3V0cHV0WSc6XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VPdXRwdXREaW0ueScpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHVfb3V0cHV0Wic6XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VPdXRwdXREaW0ueicpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdGlmICh0aGlzLmNvbnN0YW50cyAmJiB0aGlzLmNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eShpZHROb2RlLm5hbWUpKSB7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnY29uc3RhbnRzXycgKyBpZHROb2RlLm5hbWUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR2YXIgdXNlclBhcmFtTmFtZSA9IGZ1bmNQYXJhbS5nZXRVc2VyUGFyYW1OYW1lKGlkdE5vZGUubmFtZSk7XG5cdFx0XHRcdFx0XHRpZiAodXNlclBhcmFtTmFtZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgndXNlcl8nICsgdXNlclBhcmFtTmFtZSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgndXNlcl8nICsgaWR0Tm9kZS5uYW1lKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEZvclN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEZvclN0YXRlbWVudChmb3JOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGZvck5vZGUudHlwZSAhPT0gJ0ZvclN0YXRlbWVudCcpIHtcblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnSW52YWxpZCBmb3Igc3RhdG1lbnQnLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmb3JOb2RlLnRlc3QgJiYgZm9yTm9kZS50ZXN0LnR5cGUgPT09ICdCaW5hcnlFeHByZXNzaW9uJykge1xuXHRcdFx0XHRpZiAoKGZvck5vZGUudGVzdC5yaWdodC50eXBlID09PSAnSWRlbnRpZmllcicgfHwgZm9yTm9kZS50ZXN0LnJpZ2h0LnR5cGUgPT09ICdMaXRlcmFsJykgJiYgZm9yTm9kZS50ZXN0Lm9wZXJhdG9yID09PSAnPCcgJiYgdGhpcy5pc0lkZW50aWZpZXJDb25zdGFudChmb3JOb2RlLnRlc3QucmlnaHQubmFtZSkgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRpZiAoIXRoaXMubG9vcE1heEl0ZXJhdGlvbnMpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignV2FybmluZzogbG9vcE1heEl0ZXJhdGlvbnMgaXMgbm90IHNldCEgVXNpbmcgZGVmYXVsdCBvZiAxMDAwIHdoaWNoIG1heSByZXN1bHQgaW4gdW5pbnRlbmRlZCBiZWhhdmlvci4nKTtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignU2V0IGxvb3BNYXhJdGVyYXRpb25zIG9yIHVzZSBhIGZvciBsb29wIG9mIGZpeGVkIGxlbmd0aCB0byBzaWxlbmNlIHRoaXMgbWVzc2FnZS4nKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnZm9yICgnKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5pbml0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0aWYgKHJldEFycltyZXRBcnIubGVuZ3RoIC0gMV0gIT09ICc7Jykge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goZm9yTm9kZS50ZXN0Lm9wZXJhdG9yKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnTE9PUF9NQVgnKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnVwZGF0ZSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cblx0XHRcdFx0XHRyZXRBcnIucHVzaCgne1xcbicpO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCdpZiAoJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goZm9yTm9kZS50ZXN0Lm9wZXJhdG9yKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS50ZXN0LnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJykge1xcbicpO1xuXHRcdFx0XHRcdGlmIChmb3JOb2RlLmJvZHkudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50Jykge1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmb3JOb2RlLmJvZHkuYm9keS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5ib2R5LmJvZHlbaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuYm9keSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnfSBlbHNlIHtcXG4nKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnYnJlYWs7XFxuJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnfVxcbicpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdFx0fSBlbHNlIGlmIChmb3JOb2RlLmluaXQuZGVjbGFyYXRpb25zKSB7XG5cdFx0XHRcdFx0dmFyIGRlY2xhcmF0aW9ucyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZm9yTm9kZS5pbml0LmRlY2xhcmF0aW9ucykpO1xuXHRcdFx0XHRcdHZhciB1cGRhdGVBcmd1bWVudCA9IGZvck5vZGUudXBkYXRlLmFyZ3VtZW50O1xuXHRcdFx0XHRcdGlmICghQXJyYXkuaXNBcnJheShkZWNsYXJhdGlvbnMpIHx8IGRlY2xhcmF0aW9ucy5sZW5ndGggPCAxKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyh0aGlzLmpzRnVuY3Rpb25TdHJpbmcpO1xuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFcnJvcjogSW5jb21wYXRpYmxlIGZvciBsb29wIGRlY2xhcmF0aW9uJyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGRlY2xhcmF0aW9ucy5sZW5ndGggPiAxKSB7XG5cdFx0XHRcdFx0XHR2YXIgaW5pdEFyZ3VtZW50ID0gbnVsbDtcblx0XHRcdFx0XHRcdGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGRlY2xhcmF0aW9ucy5sZW5ndGg7IF9pMisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZWNsYXJhdGlvbiA9IGRlY2xhcmF0aW9uc1tfaTJdO1xuXHRcdFx0XHRcdFx0XHRpZiAoZGVjbGFyYXRpb24uaWQubmFtZSA9PT0gdXBkYXRlQXJndW1lbnQubmFtZSkge1xuXHRcdFx0XHRcdFx0XHRcdGluaXRBcmd1bWVudCA9IGRlY2xhcmF0aW9uO1xuXHRcdFx0XHRcdFx0XHRcdGRlY2xhcmF0aW9ucy5zcGxpY2UoX2kyLCAxKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgndmFyICcpO1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhkZWNsYXJhdGlvbiwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2ZvciAobGV0ICcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGluaXRBcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2ZvciAoJyk7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5pbml0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudXBkYXRlLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5ib2R5LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdJbnZhbGlkIGZvciBzdGF0ZW1lbnQnLCBmb3JOb2RlLCBmdW5jUGFyYW0pO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RXaGlsZVN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFdoaWxlU3RhdGVtZW50KHdoaWxlTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmICh3aGlsZU5vZGUudHlwZSAhPT0gJ1doaWxlU3RhdGVtZW50Jykge1xuXHRcdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdJbnZhbGlkIHdoaWxlIHN0YXRtZW50JywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaCgnZm9yIChsZXQgaSA9IDA7IGkgPCBMT09QX01BWDsgaSsrKSB7Jyk7XG5cdFx0XHRyZXRBcnIucHVzaCgnaWYgKCcpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKHdoaWxlTm9kZS50ZXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKSB7XFxuJyk7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMod2hpbGVOb2RlLmJvZHksIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKCd9IGVsc2Uge1xcbicpO1xuXHRcdFx0cmV0QXJyLnB1c2goJ2JyZWFrO1xcbicpO1xuXHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEFzc2lnbm1lbnRFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0QXNzaWdubWVudEV4cHJlc3Npb24oYXNzTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3NOb2RlLmxlZnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKGFzc05vZGUub3BlcmF0b3IpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzc05vZGUucmlnaHQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEVtcHR5U3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RW1wdHlTdGF0ZW1lbnQoZU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RCbG9ja1N0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEJsb2NrU3RhdGVtZW50KGJOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ3tcXG4nKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYk5vZGUuYm9keS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYk5vZGUuYm9keVtpXSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEV4cHJlc3Npb25TdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RFeHByZXNzaW9uU3RhdGVtZW50KGVzTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhlc05vZGUuZXhwcmVzc2lvbiwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goJztcXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFZhcmlhYmxlRGVjbGFyYXRpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RWYXJpYWJsZURlY2xhcmF0aW9uKHZhcmRlY05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgndmFyICcpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2YXJkZWNOb2RlLmRlY2xhcmF0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyh2YXJkZWNOb2RlLmRlY2xhcmF0aW9uc1tpXSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFZhcmlhYmxlRGVjbGFyYXRvcicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFZhcmlhYmxlRGVjbGFyYXRvcihpdmFyZGVjTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpdmFyZGVjTm9kZS5pZCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0aWYgKGl2YXJkZWNOb2RlLmluaXQgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJz0nKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGl2YXJkZWNOb2RlLmluaXQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdElmU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0SWZTdGF0ZW1lbnQoaWZOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ2lmICgnKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpZk5vZGUudGVzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblx0XHRcdGlmIChpZk5vZGUuY29uc2VxdWVudC50eXBlID09PSAnQmxvY2tTdGF0ZW1lbnQnKSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpZk5vZGUuY29uc2VxdWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJyB7XFxuJyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpZk5vZGUuY29uc2VxdWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnXFxufVxcbicpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaWZOb2RlLmFsdGVybmF0ZSkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnZWxzZSAnKTtcblx0XHRcdFx0aWYgKGlmTm9kZS5hbHRlcm5hdGUudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50Jykge1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpZk5vZGUuYWx0ZXJuYXRlLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJyB7XFxuJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGlmTm9kZS5hbHRlcm5hdGUsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnXFxufVxcbicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RCcmVha1N0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEJyZWFrU3RhdGVtZW50KGJyTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCdicmVhaztcXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdENvbnRpbnVlU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0Q29udGludWVTdGF0ZW1lbnQoY3JOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ2NvbnRpbnVlO1xcbicpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0TG9naWNhbEV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RMb2dpY2FsRXhwcmVzc2lvbihsb2dOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJygnKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhsb2dOb2RlLmxlZnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKGxvZ05vZGUub3BlcmF0b3IpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGxvZ05vZGUucmlnaHQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RVcGRhdGVFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0VXBkYXRlRXhwcmVzc2lvbih1Tm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmICh1Tm9kZS5wcmVmaXgpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2godU5vZGUub3BlcmF0b3IpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModU5vZGUuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyh1Tm9kZS5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCh1Tm9kZS5vcGVyYXRvcik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFVuYXJ5RXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFVuYXJ5RXhwcmVzc2lvbih1Tm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmICh1Tm9kZS5wcmVmaXgpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2godU5vZGUub3BlcmF0b3IpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModU5vZGUuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyh1Tm9kZS5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCh1Tm9kZS5vcGVyYXRvcik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFRoaXNFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0VGhpc0V4cHJlc3Npb24odE5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgndGhpcycpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0TWVtYmVyRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdE1lbWJlckV4cHJlc3Npb24obU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHR2YXIgdW5yb2xsZWQgPSB0aGlzLmFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwobU5vZGUucHJvcGVydHkpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLm9iamVjdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0aWYgKG1Ob2RlLnByb3BlcnR5LnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJiBtTm9kZS5jb21wdXRlZCkge1xuXHRcdFx0XHR1bnJvbGxlZCA9ICd1c2VyXycgKyB1bnJvbGxlZDtcblx0XHRcdH1cblx0XHRcdGlmIChtTm9kZS5jb21wdXRlZCkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnWycpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCh1bnJvbGxlZCk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCddJyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnLicpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCh1bnJvbGxlZCk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0U2VxdWVuY2VFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0U2VxdWVuY2VFeHByZXNzaW9uKHNOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzTm9kZS5leHByZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhzTm9kZS5leHByZXNzaW9ucywgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0TWVtYmVyRXhwcmVzc2lvblVucm9sbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwoYXN0LCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChhc3QudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdFx0XHRcdHJldHVybiBhc3QubmFtZTtcblx0XHRcdH0gZWxzZSBpZiAoYXN0LnR5cGUgPT09ICdUaGlzRXhwcmVzc2lvbicpIHtcblx0XHRcdFx0cmV0dXJuICd0aGlzJztcblx0XHRcdH1cblxuXHRcdFx0aWYgKGFzdC50eXBlID09PSAnTWVtYmVyRXhwcmVzc2lvbicpIHtcblx0XHRcdFx0aWYgKGFzdC5vYmplY3QgJiYgYXN0LnByb3BlcnR5KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0TWVtYmVyRXhwcmVzc2lvblVucm9sbChhc3Qub2JqZWN0LCBmdW5jUGFyYW0pICsgJy4nICsgdGhpcy5hc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsKGFzdC5wcm9wZXJ0eSwgZnVuY1BhcmFtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYXN0LnR5cGUgPT09ICdMaXRlcmFsJykge1xuXHRcdFx0XHRyZXR1cm4gYXN0LnZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdVbmtub3duIENhbGxFeHByZXNzaW9uX3Vucm9sbCcsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0Q2FsbEV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RDYWxsRXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoYXN0LmNhbGxlZSkge1xuXHRcdFx0XHR2YXIgZnVuY05hbWUgPSB0aGlzLmFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwoYXN0LmNhbGxlZSk7XG5cblx0XHRcdFx0aWYgKGZ1bmNQYXJhbS5jYWxsZWRGdW5jdGlvbnMuaW5kZXhPZihmdW5jTmFtZSkgPCAwKSB7XG5cdFx0XHRcdFx0ZnVuY1BhcmFtLmNhbGxlZEZ1bmN0aW9ucy5wdXNoKGZ1bmNOYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIWZ1bmNQYXJhbS5oYXNPd25Qcm9wZXJ0eSgnZnVuY05hbWUnKSkge1xuXHRcdFx0XHRcdGZ1bmNQYXJhbS5jYWxsZWRGdW5jdGlvbnNBcmd1bWVudHNbZnVuY05hbWVdID0gW107XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgZnVuY3Rpb25Bcmd1bWVudHMgPSBbXTtcblx0XHRcdFx0ZnVuY1BhcmFtLmNhbGxlZEZ1bmN0aW9uc0FyZ3VtZW50c1tmdW5jTmFtZV0ucHVzaChmdW5jdGlvbkFyZ3VtZW50cyk7XG5cblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY05hbWUpO1xuXG5cdFx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhc3QuYXJndW1lbnRzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0dmFyIGFyZ3VtZW50ID0gYXN0LmFyZ3VtZW50c1tpXTtcblx0XHRcdFx0XHRpZiAoaSA+IDApIHtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCcsICcpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRpZiAoYXJndW1lbnQudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdFx0XHRcdFx0XHR2YXIgcGFyYW1JbmRleCA9IGZ1bmNQYXJhbS5wYXJhbU5hbWVzLmluZGV4T2YoYXJndW1lbnQubmFtZSk7XG5cdFx0XHRcdFx0XHRpZiAocGFyYW1JbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0XHRcdFx0ZnVuY3Rpb25Bcmd1bWVudHMucHVzaChudWxsKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uQXJndW1lbnRzLnB1c2goe1xuXHRcdFx0XHRcdFx0XHRcdG5hbWU6IGFyZ3VtZW50Lm5hbWUsXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogZnVuY1BhcmFtLnBhcmFtVHlwZXNbcGFyYW1JbmRleF1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGZ1bmN0aW9uQXJndW1lbnRzLnB1c2gobnVsbCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblxuXHRcdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdFx0fVxuXG5cdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdVbmtub3duIENhbGxFeHByZXNzaW9uJywgYXN0LCBmdW5jUGFyYW0pO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RBcnJheUV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RBcnJheUV4cHJlc3Npb24oYXJyTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHZhciBhcnJMZW4gPSBhcnJOb2RlLmVsZW1lbnRzLmxlbmd0aDtcblxuXHRcdFx0cmV0QXJyLnB1c2goJ25ldyBGbG9hdDMyQXJyYXkoJyk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG5cdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcsICcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBzdWJOb2RlID0gYXJyTm9kZS5lbGVtZW50c1tpXTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHN1Yk5vZGUsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cblx0XHR9XG5cdH1dLCBbe1xuXHRcdGtleTogJ2FzdEZ1bmN0aW9uUHJvdG90eXBlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RnVuY3Rpb25Qcm90b3R5cGUoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGZ1bmNQYXJhbS5pc1Jvb3RLZXJuZWwgfHwgZnVuY1BhcmFtLmlzU3ViS2VybmVsKSB7XG5cdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHR9XG5cblx0XHRcdHJldEFyci5wdXNoKGZ1bmNQYXJhbS5yZXR1cm5UeXBlKTtcblx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0uZnVuY3Rpb25OYW1lKTtcblx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY1BhcmFtLnBhcmFtTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJywgJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0ucGFyYW1UeXBlc1tpXSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCd1c2VyXycpO1xuXHRcdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0ucGFyYW1OYW1lc1tpXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldEFyci5wdXNoKCcpO1xcbicpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBDUFVGdW5jdGlvbk5vZGU7XG59KEJhc2VGdW5jdGlvbk5vZGUpO1xufSx7XCIuLi8uLi9jb3JlL3V0aWxzXCI6MjQsXCIuLi9mdW5jdGlvbi1ub2RlLWJhc2VcIjo3fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcbnZhciBrZXJuZWxSdW5TaG9ydGN1dCA9IHJlcXVpcmUoJy4uL2tlcm5lbC1ydW4tc2hvcnRjdXQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3B1S2VybmVsLCBuYW1lKSB7XG4gIHJldHVybiAnKCkgPT4ge1xcbiAgICAnICsga2VybmVsUnVuU2hvcnRjdXQudG9TdHJpbmcoKSArICc7XFxuICAgIGNvbnN0IHV0aWxzID0ge1xcbiAgICAgIGFsbFByb3BlcnRpZXNPZjogZnVuY3Rpb24gJyArIHV0aWxzLmFsbFByb3BlcnRpZXNPZi50b1N0cmluZygpICsgJyxcXG4gICAgICBjbG9uZTogZnVuY3Rpb24gJyArIHV0aWxzLmNsb25lLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIC8qc3BsaXRBcnJheTogZnVuY3Rpb24gJyArIHV0aWxzLnNwbGl0QXJyYXkudG9TdHJpbmcoKSArICcsXFxuICAgICAgZ2V0QXJndW1lbnRUeXBlOiBmdW5jdGlvbiAnICsgdXRpbHMuZ2V0QXJndW1lbnRUeXBlLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGdldE91dHB1dDogZnVuY3Rpb24gJyArIHV0aWxzLmdldE91dHB1dC50b1N0cmluZygpICsgJyxcXG4gICAgICBkaW1Ub1RleFNpemU6IGZ1bmN0aW9uICcgKyB1dGlscy5kaW1Ub1RleFNpemUudG9TdHJpbmcoKSArICcsXFxuICAgICAgY29weUZsYXR0ZW46IGZ1bmN0aW9uICcgKyB1dGlscy5jb3B5RmxhdHRlbi50b1N0cmluZygpICsgJyxcXG4gICAgICBmbGF0dGVuOiBmdW5jdGlvbiAnICsgdXRpbHMuZmxhdHRlbi50b1N0cmluZygpICsgJyxcXG4gICAgICBzeXN0ZW1FbmRpYW5uZXNzOiBcXCcnICsgdXRpbHMuc3lzdGVtRW5kaWFubmVzcygpICsgJ1xcJyxcXG4gICAgICBpbml0V2ViR2w6IGZ1bmN0aW9uICcgKyB1dGlscy5pbml0V2ViR2wudG9TdHJpbmcoKSArICcsXFxuICAgICAgaXNBcnJheTogZnVuY3Rpb24gJyArIHV0aWxzLmlzQXJyYXkudG9TdHJpbmcoKSArICcqL1xcbiAgICB9O1xcbiAgICBjbGFzcyAnICsgKG5hbWUgfHwgJ0tlcm5lbCcpICsgJyB7XFxuICAgICAgY29uc3RydWN0b3IoKSB7ICAgICAgICBcXG4gICAgICAgIHRoaXMuYXJndW1lbnRzTGVuZ3RoID0gMDtcXG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IG51bGw7XFxuICAgICAgICB0aGlzLl93ZWJHbCA9IG51bGw7XFxuICAgICAgICB0aGlzLmJ1aWx0ID0gZmFsc2U7XFxuICAgICAgICB0aGlzLnByb2dyYW0gPSBudWxsO1xcbiAgICAgICAgdGhpcy5wYXJhbU5hbWVzID0gJyArIEpTT04uc3RyaW5naWZ5KGNwdUtlcm5lbC5wYXJhbU5hbWVzKSArICc7XFxuICAgICAgICB0aGlzLnBhcmFtVHlwZXMgPSAnICsgSlNPTi5zdHJpbmdpZnkoY3B1S2VybmVsLnBhcmFtVHlwZXMpICsgJztcXG4gICAgICAgIHRoaXMudGV4U2l6ZSA9ICcgKyBKU09OLnN0cmluZ2lmeShjcHVLZXJuZWwudGV4U2l6ZSkgKyAnO1xcbiAgICAgICAgdGhpcy5vdXRwdXQgPSAnICsgSlNPTi5zdHJpbmdpZnkoY3B1S2VybmVsLm91dHB1dCkgKyAnO1xcbiAgICAgICAgdGhpcy5fa2VybmVsU3RyaW5nID0gYCcgKyBjcHVLZXJuZWwuX2tlcm5lbFN0cmluZyArICdgO1xcbiAgICAgICAgdGhpcy5vdXRwdXQgPSAnICsgSlNPTi5zdHJpbmdpZnkoY3B1S2VybmVsLm91dHB1dCkgKyAnO1xcblxcdFxcdCAgICB0aGlzLnJ1biA9IGZ1bmN0aW9uKCkge1xcbiAgICAgICAgICB0aGlzLnJ1biA9IG51bGw7XFxuICAgICAgICAgIHRoaXMuYnVpbGQoKTtcXG4gICAgICAgICAgcmV0dXJuIHRoaXMucnVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XFxuICAgICAgICB9LmJpbmQodGhpcyk7XFxuICAgICAgICB0aGlzLnRocmVhZCA9IHtcXG4gICAgICAgICAgeDogMCxcXG4gICAgICAgICAgeTogMCxcXG4gICAgICAgICAgejogMFxcbiAgICAgICAgfTtcXG4gICAgICB9XFxuICAgICAgc2V0Q2FudmFzKGNhbnZhcykgeyB0aGlzLl9jYW52YXMgPSBjYW52YXM7IHJldHVybiB0aGlzOyB9XFxuICAgICAgc2V0V2ViR2wod2ViR2wpIHsgdGhpcy5fd2ViR2wgPSB3ZWJHbDsgcmV0dXJuIHRoaXM7IH1cXG4gICAgICAnICsgY3B1S2VybmVsLmJ1aWxkLnRvU3RyaW5nKCkgKyAnXFxuICAgICAgcnVuICgpIHsgJyArIGNwdUtlcm5lbC5rZXJuZWxTdHJpbmcgKyAnIH1cXG4gICAgICBnZXRLZXJuZWxTdHJpbmcoKSB7IHJldHVybiB0aGlzLl9rZXJuZWxTdHJpbmc7IH1cXG4gICAgfTtcXG4gICAgcmV0dXJuIGtlcm5lbFJ1blNob3J0Y3V0KG5ldyBLZXJuZWwoKSk7XFxuICB9Oyc7XG59O1xufSx7XCIuLi8uLi9jb3JlL3V0aWxzXCI6MjQsXCIuLi9rZXJuZWwtcnVuLXNob3J0Y3V0XCI6OX1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBLZXJuZWxCYXNlID0gcmVxdWlyZSgnLi4va2VybmVsLWJhc2UnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcbnZhciBrZXJuZWxTdHJpbmcgPSByZXF1aXJlKCcuL2tlcm5lbC1zdHJpbmcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX0tlcm5lbEJhc2UpIHtcblx0X2luaGVyaXRzKENQVUtlcm5lbCwgX0tlcm5lbEJhc2UpO1xuXG5cdGZ1bmN0aW9uIENQVUtlcm5lbChmblN0cmluZywgc2V0dGluZ3MpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1BVS2VybmVsKTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDUFVLZXJuZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDUFVLZXJuZWwpKS5jYWxsKHRoaXMsIGZuU3RyaW5nLCBzZXR0aW5ncykpO1xuXG5cdFx0X3RoaXMuX2ZuQm9keSA9IHV0aWxzLmdldEZ1bmN0aW9uQm9keUZyb21TdHJpbmcoZm5TdHJpbmcpO1xuXHRcdF90aGlzLl9mbiA9IG51bGw7XG5cdFx0X3RoaXMucnVuID0gbnVsbDtcblx0XHRfdGhpcy5fY2FudmFzQ3R4ID0gbnVsbDtcblx0XHRfdGhpcy5faW1hZ2VEYXRhID0gbnVsbDtcblx0XHRfdGhpcy5fY29sb3JEYXRhID0gbnVsbDtcblx0XHRfdGhpcy5fa2VybmVsU3RyaW5nID0gbnVsbDtcblx0XHRfdGhpcy50aHJlYWQgPSB7XG5cdFx0XHR4OiAwLFxuXHRcdFx0eTogMCxcblx0XHRcdHo6IDBcblx0XHR9O1xuXG5cdFx0X3RoaXMucnVuID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhpcy5ydW4gPSBudWxsO1xuXHRcdFx0dGhpcy5idWlsZCgpO1xuXHRcdFx0cmV0dXJuIHRoaXMucnVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0fS5iaW5kKF90aGlzKTtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXG5cblx0X2NyZWF0ZUNsYXNzKENQVUtlcm5lbCwgW3tcblx0XHRrZXk6ICd2YWxpZGF0ZU9wdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoKSB7XG5cdFx0XHRpZiAoIXRoaXMub3V0cHV0IHx8IHRoaXMub3V0cHV0Lmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuXHRcdFx0XHRcdHRocm93ICdBdXRvIGRpbWVuc2lvbnMgb25seSBzdXBwb3J0ZWQgZm9yIGtlcm5lbHMgd2l0aCBvbmx5IG9uZSBpbnB1dCc7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgYXJnVHlwZSA9IHV0aWxzLmdldEFyZ3VtZW50VHlwZShhcmd1bWVudHNbMF0pO1xuXHRcdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ0FycmF5Jykge1xuXHRcdFx0XHRcdHRoaXMub3V0cHV0ID0gdXRpbHMuZ2V0RGltZW5zaW9ucyhhcmdUeXBlKTtcblx0XHRcdFx0fSBlbHNlIGlmIChhcmdUeXBlID09PSAnVGV4dHVyZScpIHtcblx0XHRcdFx0XHR0aGlzLm91dHB1dCA9IGFyZ3VtZW50c1swXS5vdXRwdXQ7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhyb3cgJ0F1dG8gZGltZW5zaW9ucyBub3Qgc3VwcG9ydGVkIGZvciBpbnB1dCB0eXBlOiAnICsgYXJnVHlwZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdidWlsZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGJ1aWxkKCkge1xuXG5cdFx0XHR2YXIga2VybmVsQXJncyA9IFtdO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0dmFyIGFyZ1R5cGUgPSB1dGlscy5nZXRBcmd1bWVudFR5cGUoYXJndW1lbnRzW2ldKTtcblx0XHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdBcnJheScgfHwgYXJnVHlwZSA9PT0gJ051bWJlcicpIHtcblx0XHRcdFx0XHRrZXJuZWxBcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdUZXh0dXJlJykge1xuXHRcdFx0XHRcdGtlcm5lbEFyZ3NbaV0gPSBhcmd1bWVudHNbaV0udG9BcnJheSgpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93ICdJbnB1dCB0eXBlIG5vdCBzdXBwb3J0ZWQgKENQVSk6ICcgKyBhcmd1bWVudHNbaV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0dmFyIHRocmVhZERpbSA9IHRoaXMudGhyZWFkRGltID0gdXRpbHMuY2xvbmUodGhpcy5vdXRwdXQpO1xuXG5cdFx0XHR3aGlsZSAodGhyZWFkRGltLmxlbmd0aCA8IDMpIHtcblx0XHRcdFx0dGhyZWFkRGltLnB1c2goMSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmdyYXBoaWNhbCkge1xuXHRcdFx0XHR2YXIgY2FudmFzID0gdGhpcy5nZXRDYW52YXMoKTtcblx0XHRcdFx0Y2FudmFzLndpZHRoID0gdGhyZWFkRGltWzBdO1xuXHRcdFx0XHRjYW52YXMuaGVpZ2h0ID0gdGhyZWFkRGltWzFdO1xuXHRcdFx0XHR0aGlzLl9jYW52YXNDdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblx0XHRcdFx0dGhpcy5faW1hZ2VEYXRhID0gdGhpcy5fY2FudmFzQ3R4LmNyZWF0ZUltYWdlRGF0YSh0aHJlYWREaW1bMF0sIHRocmVhZERpbVsxXSk7XG5cdFx0XHRcdHRoaXMuX2NvbG9yRGF0YSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSh0aHJlYWREaW1bMF0gKiB0aHJlYWREaW1bMV0gKiA0KTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGtlcm5lbFN0cmluZyA9IHRoaXMuZ2V0S2VybmVsU3RyaW5nKCk7XG5cblx0XHRcdGlmICh0aGlzLmRlYnVnKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdPcHRpb25zOicpO1xuXHRcdFx0XHRjb25zb2xlLmRpcih0aGlzKTtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0Z1bmN0aW9uIG91dHB1dDonKTtcblx0XHRcdFx0Y29uc29sZS5sb2coa2VybmVsU3RyaW5nKTtcblx0XHRcdH1cblxuXHRcdFx0dGhpcy5rZXJuZWxTdHJpbmcgPSBrZXJuZWxTdHJpbmc7XG5cdFx0XHR0aGlzLnJ1biA9IG5ldyBGdW5jdGlvbihbXSwga2VybmVsU3RyaW5nKS5iaW5kKHRoaXMpKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnY29sb3InLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjb2xvcihyLCBnLCBiLCBhKSB7XG5cdFx0XHRpZiAodHlwZW9mIGEgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGEgPSAxO1xuXHRcdFx0fVxuXG5cdFx0XHRyID0gTWF0aC5mbG9vcihyICogMjU1KTtcblx0XHRcdGcgPSBNYXRoLmZsb29yKGcgKiAyNTUpO1xuXHRcdFx0YiA9IE1hdGguZmxvb3IoYiAqIDI1NSk7XG5cdFx0XHRhID0gTWF0aC5mbG9vcihhICogMjU1KTtcblxuXHRcdFx0dmFyIHdpZHRoID0gdGhpcy5vdXRwdXRbMF07XG5cdFx0XHR2YXIgaGVpZ2h0ID0gdGhpcy5vdXRwdXRbMV07XG5cblx0XHRcdHZhciB4ID0gdGhpcy50aHJlYWQueDtcblx0XHRcdHZhciB5ID0gaGVpZ2h0IC0gdGhpcy50aHJlYWQueSAtIDE7XG5cblx0XHRcdHZhciBpbmRleCA9IHggKyB5ICogd2lkdGg7XG5cblx0XHRcdHRoaXMuX2NvbG9yRGF0YVtpbmRleCAqIDQgKyAwXSA9IHI7XG5cdFx0XHR0aGlzLl9jb2xvckRhdGFbaW5kZXggKiA0ICsgMV0gPSBnO1xuXHRcdFx0dGhpcy5fY29sb3JEYXRhW2luZGV4ICogNCArIDJdID0gYjtcblx0XHRcdHRoaXMuX2NvbG9yRGF0YVtpbmRleCAqIDQgKyAzXSA9IGE7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldEtlcm5lbFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEtlcm5lbFN0cmluZygpIHtcblx0XHRcdHZhciBfdGhpczIgPSB0aGlzO1xuXG5cdFx0XHRpZiAodGhpcy5fa2VybmVsU3RyaW5nICE9PSBudWxsKSByZXR1cm4gdGhpcy5fa2VybmVsU3RyaW5nO1xuXG5cdFx0XHR2YXIgYnVpbGRlciA9IHRoaXMuZnVuY3Rpb25CdWlsZGVyO1xuXG5cdFx0XHR2YXIgdGhyZWFkRGltID0gdGhpcy50aHJlYWREaW0gfHwgKHRoaXMudGhyZWFkRGltID0gdXRpbHMuY2xvbmUodGhpcy5vdXRwdXQpKTtcblx0XHRcdHdoaWxlICh0aHJlYWREaW0ubGVuZ3RoIDwgMykge1xuXHRcdFx0XHR0aHJlYWREaW0ucHVzaCgxKTtcblx0XHRcdH1cblxuXHRcdFx0YnVpbGRlci5hZGRLZXJuZWwodGhpcy5mblN0cmluZywge1xuXHRcdFx0XHRwcm90b3R5cGVPbmx5OiBmYWxzZSxcblx0XHRcdFx0Y29uc3RhbnRzOiB0aGlzLmNvbnN0YW50cyxcblx0XHRcdFx0ZGVidWc6IHRoaXMuZGVidWcsXG5cdFx0XHRcdGxvb3BNYXhJdGVyYXRpb25zOiB0aGlzLmxvb3BNYXhJdGVyYXRpb25zXG5cdFx0XHR9LCB0aGlzLnBhcmFtTmFtZXMsIHRoaXMucGFyYW1UeXBlcyk7XG5cblx0XHRcdGJ1aWxkZXIuYWRkRnVuY3Rpb25zKHRoaXMuZnVuY3Rpb25zKTtcblxuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVscyAhPT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzID0gW107XG5cdFx0XHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9IFtdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3ViS2VybmVscy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBzdWJLZXJuZWwgPSB0aGlzLnN1Yktlcm5lbHNbaV07XG5cdFx0XHRcdFx0YnVpbGRlci5hZGRTdWJLZXJuZWwoc3ViS2VybmVsKTtcblx0XHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMucHVzaChzdWJLZXJuZWwubmFtZSArICdSZXN1bHQnKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmICh0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMgIT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID0gW107XG5cdFx0XHRcdHZhciBfaSA9IDA7XG5cdFx0XHRcdGZvciAodmFyIHAgaW4gdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzKSB7XG5cdFx0XHRcdFx0aWYgKCF0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocCkpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdHZhciBfc3ViS2VybmVsID0gdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzW3BdO1xuXHRcdFx0XHRcdGJ1aWxkZXIuYWRkU3ViS2VybmVsKF9zdWJLZXJuZWwpO1xuXHRcdFx0XHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcy5wdXNoKF9zdWJLZXJuZWwubmFtZSArICdSZXN1bHQnKTtcblx0XHRcdFx0XHRfaSsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwcm90b3R5cGVzID0gYnVpbGRlci5nZXRQcm90b3R5cGVzKCk7XG5cdFx0XHR2YXIga2VybmVsID0gcHJvdG90eXBlcy5zaGlmdCgpO1xuXHRcdFx0dmFyIGtlcm5lbFN0cmluZyA9IHRoaXMuX2tlcm5lbFN0cmluZyA9ICdcXG5cXHRcXHR2YXIgTE9PUF9NQVggPSAnICsgdGhpcy5fZ2V0TG9vcE1heFN0cmluZygpICsgJztcXG4gICcgKyAodGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID09PSBudWxsID8gJycgOiB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRcdHJldHVybiAnICB2YXIgJyArIG5hbWUgKyAnID0gbnVsbDtcXG4nO1xuXHRcdFx0fSkuam9pbignJykpICsgJ1xcbiAgICByZXR1cm4gZnVuY3Rpb24gKCcgKyB0aGlzLnBhcmFtTmFtZXMubWFwKGZ1bmN0aW9uIChwYXJhbU5hbWUpIHtcblx0XHRcdFx0cmV0dXJuICd1c2VyXycgKyBwYXJhbU5hbWU7XG5cdFx0XHR9KS5qb2luKCcsICcpICsgJykge1xcbiAgICB2YXIgcmV0ID0gbmV3IEFycmF5KCcgKyB0aHJlYWREaW1bMl0gKyAnKTtcXG4gICcgKyAodGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID09PSBudWxsID8gJycgOiB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRcdHJldHVybiAnICAnICsgbmFtZSArICdaID0gbmV3IEFycmF5KCcgKyB0aHJlYWREaW1bMl0gKyAnKTtcXG4nO1xuXHRcdFx0fSkuam9pbignJykpICsgJ1xcbiAgICBmb3IgKHRoaXMudGhyZWFkLnogPSAwOyB0aGlzLnRocmVhZC56IDwgJyArIHRocmVhZERpbVsyXSArICc7IHRoaXMudGhyZWFkLnorKykge1xcbiAgICAgIHJldFt0aGlzLnRocmVhZC56XSA9IG5ldyBBcnJheSgnICsgdGhyZWFkRGltWzFdICsgJyk7XFxuICAnICsgKHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9PT0gbnVsbCA/ICcnIDogdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbiAobmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gJyAgICAnICsgbmFtZSArICdaW3RoaXMudGhyZWFkLnpdID0gbmV3IEFycmF5KCcgKyB0aHJlYWREaW1bMV0gKyAnKTtcXG4nO1xuXHRcdFx0fSkuam9pbignJykpICsgJ1xcbiAgICAgIGZvciAodGhpcy50aHJlYWQueSA9IDA7IHRoaXMudGhyZWFkLnkgPCAnICsgdGhyZWFkRGltWzFdICsgJzsgdGhpcy50aHJlYWQueSsrKSB7XFxuICAgICAgICByZXRbdGhpcy50aHJlYWQuel1bdGhpcy50aHJlYWQueV0gPSBuZXcgQXJyYXkoJyArIHRocmVhZERpbVswXSArICcpO1xcbiAgJyArICh0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPT09IG51bGwgPyAnJyA6IHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdFx0cmV0dXJuICcgICAgICAnICsgbmFtZSArICdaW3RoaXMudGhyZWFkLnpdW3RoaXMudGhyZWFkLnldID0gbmV3IEFycmF5KCcgKyB0aHJlYWREaW1bMF0gKyAnKTtcXG4nO1xuXHRcdFx0fSkuam9pbignJykpICsgJ1xcbiAgICAgICAgZm9yICh0aGlzLnRocmVhZC54ID0gMDsgdGhpcy50aHJlYWQueCA8ICcgKyB0aHJlYWREaW1bMF0gKyAnOyB0aGlzLnRocmVhZC54KyspIHtcXG4gICAgICAgICAgdmFyIGtlcm5lbFJlc3VsdDtcXG4gICAgICAgICAgJyArIGtlcm5lbCArICdcXG4gICAgICAgICAgcmV0W3RoaXMudGhyZWFkLnpdW3RoaXMudGhyZWFkLnldW3RoaXMudGhyZWFkLnhdID0ga2VybmVsUmVzdWx0O1xcbicgKyAodGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID09PSBudWxsID8gJycgOiB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRcdHJldHVybiAnICAgICAgICAnICsgbmFtZSArICdaW3RoaXMudGhyZWFkLnpdW3RoaXMudGhyZWFkLnldW3RoaXMudGhyZWFkLnhdID0gJyArIG5hbWUgKyAnO1xcbic7XG5cdFx0XHR9KS5qb2luKCcnKSkgKyAnXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgICAgXFxuICAgICAgaWYgKHRoaXMuZ3JhcGhpY2FsKSB7XFxuICAgICAgICB0aGlzLl9pbWFnZURhdGEuZGF0YS5zZXQodGhpcy5fY29sb3JEYXRhKTtcXG4gICAgICAgIHRoaXMuX2NhbnZhc0N0eC5wdXRJbWFnZURhdGEodGhpcy5faW1hZ2VEYXRhLCAwLCAwKTtcXG4gICAgICAgIHJldHVybjtcXG4gICAgICB9XFxuICAgICAgXFxuICAgICAgaWYgKHRoaXMub3V0cHV0Lmxlbmd0aCA9PT0gMSkge1xcbiAgICAgICAgcmV0ID0gcmV0WzBdWzBdO1xcbicgKyAodGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID09PSBudWxsID8gJycgOiB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRcdHJldHVybiAnICAgICcgKyBuYW1lICsgJyA9ICcgKyBuYW1lICsgJ1pbMF1bMF07XFxuJztcblx0XHRcdH0pLmpvaW4oJycpKSArICdcXG4gICAgICBcXG4gICAgfSBlbHNlIGlmICh0aGlzLm91dHB1dC5sZW5ndGggPT09IDIpIHtcXG4gICAgICByZXQgPSByZXRbMF07XFxuICAgICAgJyArICh0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPT09IG51bGwgPyAnJyA6IHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdFx0cmV0dXJuICcgICAgJyArIG5hbWUgKyAnID0gJyArIG5hbWUgKyAnWlswXTtcXG4nO1xuXHRcdFx0fSkuam9pbignJykpICsgJ1xcbiAgICB9XFxuICAgIFxcbiAgICAnICsgKHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9PT0gbnVsbCA/ICdyZXR1cm4gcmV0O1xcbicgOiB0aGlzLnN1Yktlcm5lbHMgIT09IG51bGwgPyAndmFyIHJlc3VsdCA9IFtcXG4gICAgICAgICcgKyB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0XHRcdHJldHVybiAnJyArIG5hbWU7XG5cdFx0XHR9KS5qb2luKCcsXFxuJykgKyAnXFxuICAgICAgXTtcXG4gICAgICByZXN1bHQucmVzdWx0ID0gcmV0O1xcbiAgICAgIHJldHVybiByZXN1bHQ7XFxuJyA6ICdyZXR1cm4ge1xcbiAgICAgICAgcmVzdWx0OiByZXQsXFxuICAgICAgICAnICsgT2JqZWN0LmtleXModGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzKS5tYXAoZnVuY3Rpb24gKG5hbWUsIGkpIHtcblx0XHRcdFx0cmV0dXJuIG5hbWUgKyAnOiAnICsgX3RoaXMyLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXNbaV07XG5cdFx0XHR9KS5qb2luKCcsXFxuJykgKyAnXFxuICAgICAgfTsnKSArICdcXG4gICAgJyArIChwcm90b3R5cGVzLmxlbmd0aCA+IDAgPyBwcm90b3R5cGVzLmpvaW4oJ1xcbicpIDogJycpICsgJ1xcbiAgICB9LmJpbmQodGhpcyk7Jztcblx0XHRcdHJldHVybiBrZXJuZWxTdHJpbmc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3RvU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0XHRyZXR1cm4ga2VybmVsU3RyaW5nKHRoaXMpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdwcmVjb21waWxlS2VybmVsT2JqJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcHJlY29tcGlsZUtlcm5lbE9iaihhcmdUeXBlcykge1xuXG5cdFx0XHR2YXIgdGhyZWFkRGltID0gdGhpcy50aHJlYWREaW0gfHwgKHRoaXMudGhyZWFkRGltID0gdXRpbHMuY2xvbmUodGhpcy5vdXRwdXQpKTtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dGhyZWFkRGltOiB0aHJlYWREaW1cblx0XHRcdH07XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRMb29wTWF4U3RyaW5nJyxcblxuXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRMb29wTWF4U3RyaW5nKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMubG9vcE1heEl0ZXJhdGlvbnMgPyAnICcgKyBwYXJzZUludCh0aGlzLmxvb3BNYXhJdGVyYXRpb25zKSArICc7XFxuJyA6ICcgMTAwMDtcXG4nO1xuXHRcdH1cblx0fV0sIFt7XG5cdFx0a2V5OiAnY29tcGlsZUtlcm5lbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNvbXBpbGVLZXJuZWwocHJlY29tcGlsZU9iaikge1xuXG5cdFx0XHR2YXIgdGhyZWFkRGltID0gcHJlY29tcGlsZU9iai50aHJlYWREaW07XG5cblx0XHRcdHdoaWxlICh0aHJlYWREaW0ubGVuZ3RoIDwgMykge1xuXHRcdFx0XHR0aHJlYWREaW0ucHVzaCgxKTtcblx0XHRcdH1cblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gQ1BVS2VybmVsO1xufShLZXJuZWxCYXNlKTtcbn0se1wiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4va2VybmVsLWJhc2VcIjo4LFwiLi9rZXJuZWwtc3RyaW5nXCI6M31dLDU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcbnZhciBSdW5uZXJCYXNlID0gcmVxdWlyZSgnLi4vcnVubmVyLWJhc2UnKTtcbnZhciBDUFVLZXJuZWwgPSByZXF1aXJlKCcuL2tlcm5lbCcpO1xudmFyIENQVUZ1bmN0aW9uQnVpbGRlciA9IHJlcXVpcmUoJy4vZnVuY3Rpb24tYnVpbGRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfUnVubmVyQmFzZSkge1xuXHRfaW5oZXJpdHMoQ1BVUnVubmVyLCBfUnVubmVyQmFzZSk7XG5cblxuXHRmdW5jdGlvbiBDUFVSdW5uZXIoc2V0dGluZ3MpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ1BVUnVubmVyKTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChDUFVSdW5uZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDUFVSdW5uZXIpKS5jYWxsKHRoaXMsIG5ldyBDUFVGdW5jdGlvbkJ1aWxkZXIoKSwgc2V0dGluZ3MpKTtcblxuXHRcdF90aGlzLktlcm5lbCA9IENQVUtlcm5lbDtcblx0XHRfdGhpcy5rZXJuZWwgPSBudWxsO1xuXHRcdHJldHVybiBfdGhpcztcblx0fVxuXG5cblxuXHRfY3JlYXRlQ2xhc3MoQ1BVUnVubmVyLCBbe1xuXHRcdGtleTogJ2dldE1vZGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRNb2RlKCkge1xuXHRcdFx0cmV0dXJuICdjcHUnO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBDUFVSdW5uZXI7XG59KFJ1bm5lckJhc2UpO1xufSx7XCIuLi8uLi9jb3JlL3V0aWxzXCI6MjQsXCIuLi9ydW5uZXItYmFzZVwiOjEwLFwiLi9mdW5jdGlvbi1idWlsZGVyXCI6MSxcIi4va2VybmVsXCI6NH1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRmdW5jdGlvbiBGdW5jdGlvbkJ1aWxkZXJCYXNlKGdwdSkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGdW5jdGlvbkJ1aWxkZXJCYXNlKTtcblxuXHRcdHRoaXMubm9kZU1hcCA9IHt9O1xuXHRcdHRoaXMubmF0aXZlRnVuY3Rpb25zID0ge307XG5cdFx0dGhpcy5ncHUgPSBncHU7XG5cdFx0dGhpcy5yb290S2VybmVsID0gbnVsbDtcblx0XHR0aGlzLk5vZGUgPSBudWxsO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKEZ1bmN0aW9uQnVpbGRlckJhc2UsIFt7XG5cdFx0a2V5OiAnYWRkTmF0aXZlRnVuY3Rpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhZGROYXRpdmVGdW5jdGlvbihmdW5jdGlvbk5hbWUsIGdsc2xGdW5jdGlvblN0cmluZykge1xuXHRcdFx0dGhpcy5uYXRpdmVGdW5jdGlvbnNbZnVuY3Rpb25OYW1lXSA9IGdsc2xGdW5jdGlvblN0cmluZztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYWRkRnVuY3Rpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhZGRGdW5jdGlvbihmdW5jdGlvbk5hbWUsIGpzRnVuY3Rpb24sIHBhcmFtVHlwZXMsIHJldHVyblR5cGUpIHtcblx0XHRcdHRoaXMuYWRkRnVuY3Rpb25Ob2RlKG5ldyB0aGlzLk5vZGUoZnVuY3Rpb25OYW1lLCBqc0Z1bmN0aW9uLCBwYXJhbVR5cGVzLCByZXR1cm5UeXBlKS5zZXRBZGRGdW5jdGlvbih0aGlzLmFkZEZ1bmN0aW9uLmJpbmQodGhpcykpKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhZGRGdW5jdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhZGRGdW5jdGlvbnMoZnVuY3Rpb25zKSB7XG5cdFx0XHRpZiAoZnVuY3Rpb25zKSB7XG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGZ1bmN0aW9ucykpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0dGhpcy5hZGRGdW5jdGlvbihudWxsLCBmdW5jdGlvbnNbaV0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRmb3IgKHZhciBwIGluIGZ1bmN0aW9ucykge1xuXHRcdFx0XHRcdFx0dGhpcy5hZGRGdW5jdGlvbihwLCBmdW5jdGlvbnNbcF0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2FkZE5hdGl2ZUZ1bmN0aW9ucycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZE5hdGl2ZUZ1bmN0aW9ucyhuYXRpdmVGdW5jdGlvbnMpIHtcblx0XHRcdGZvciAodmFyIGZ1bmN0aW9uTmFtZSBpbiBuYXRpdmVGdW5jdGlvbnMpIHtcblx0XHRcdFx0aWYgKCFuYXRpdmVGdW5jdGlvbnMuaGFzT3duUHJvcGVydHkoZnVuY3Rpb25OYW1lKSkgY29udGludWU7XG5cdFx0XHRcdHRoaXMuYWRkTmF0aXZlRnVuY3Rpb24oZnVuY3Rpb25OYW1lLCBuYXRpdmVGdW5jdGlvbnNbZnVuY3Rpb25OYW1lXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZEZ1bmN0aW9uTm9kZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZEZ1bmN0aW9uTm9kZShpbk5vZGUpIHtcblx0XHRcdHRoaXMubm9kZU1hcFtpbk5vZGUuZnVuY3Rpb25OYW1lXSA9IGluTm9kZTtcblx0XHRcdGlmIChpbk5vZGUuaXNSb290S2VybmVsKSB7XG5cdFx0XHRcdHRoaXMucm9vdEtlcm5lbCA9IGluTm9kZTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAndHJhY2VGdW5jdGlvbkNhbGxzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdHJhY2VGdW5jdGlvbkNhbGxzKGZ1bmN0aW9uTmFtZSwgcmV0TGlzdCwgcGFyZW50KSB7XG5cdFx0XHRmdW5jdGlvbk5hbWUgPSBmdW5jdGlvbk5hbWUgfHwgJ2tlcm5lbCc7XG5cdFx0XHRyZXRMaXN0ID0gcmV0TGlzdCB8fCBbXTtcblxuXHRcdFx0dmFyIGZOb2RlID0gdGhpcy5ub2RlTWFwW2Z1bmN0aW9uTmFtZV07XG5cdFx0XHRpZiAoZk5vZGUpIHtcblx0XHRcdFx0aWYgKHJldExpc3QuaW5kZXhPZihmdW5jdGlvbk5hbWUpID49IDApIHtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXRMaXN0LnB1c2goZnVuY3Rpb25OYW1lKTtcblx0XHRcdFx0XHRpZiAocGFyZW50KSB7XG5cdFx0XHRcdFx0XHRmTm9kZS5wYXJlbnQgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRmTm9kZS5jb25zdGFudHMgPSBwYXJlbnQuY29uc3RhbnRzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRmTm9kZS5nZXRGdW5jdGlvblN0cmluZygpO1xuXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZk5vZGUuY2FsbGVkRnVuY3Rpb25zLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRyYWNlRnVuY3Rpb25DYWxscyhmTm9kZS5jYWxsZWRGdW5jdGlvbnNbaV0sIHJldExpc3QsIGZOb2RlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMubmF0aXZlRnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0pIHtcblx0XHRcdFx0aWYgKHJldExpc3QuaW5kZXhPZihmdW5jdGlvbk5hbWUpID49IDApIHtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXRMaXN0LnB1c2goZnVuY3Rpb25OYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0TGlzdDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYWRkS2VybmVsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkS2VybmVsKGZuU3RyaW5nLCBvcHRpb25zLCBwYXJhbU5hbWVzLCBwYXJhbVR5cGVzKSB7XG5cdFx0XHR2YXIga2VybmVsTm9kZSA9IG5ldyB0aGlzLk5vZGUoJ2tlcm5lbCcsIGZuU3RyaW5nLCBvcHRpb25zLCBwYXJhbVR5cGVzKTtcblx0XHRcdGtlcm5lbE5vZGUuc2V0QWRkRnVuY3Rpb24odGhpcy5hZGRGdW5jdGlvbi5iaW5kKHRoaXMpKTtcblx0XHRcdGtlcm5lbE5vZGUucGFyYW1OYW1lcyA9IHBhcmFtTmFtZXM7XG5cdFx0XHRrZXJuZWxOb2RlLnBhcmFtVHlwZXMgPSBwYXJhbVR5cGVzO1xuXHRcdFx0a2VybmVsTm9kZS5pc1Jvb3RLZXJuZWwgPSB0cnVlO1xuXHRcdFx0dGhpcy5hZGRGdW5jdGlvbk5vZGUoa2VybmVsTm9kZSk7XG5cdFx0XHRyZXR1cm4ga2VybmVsTm9kZTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYWRkU3ViS2VybmVsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkU3ViS2VybmVsKGpzRnVuY3Rpb24sIG9wdGlvbnMsIHBhcmFtVHlwZXMsIHJldHVyblR5cGUpIHtcblx0XHRcdHZhciBrZXJuZWxOb2RlID0gbmV3IHRoaXMuTm9kZShudWxsLCBqc0Z1bmN0aW9uLCBvcHRpb25zLCBwYXJhbVR5cGVzLCByZXR1cm5UeXBlKTtcblx0XHRcdGtlcm5lbE5vZGUuc2V0QWRkRnVuY3Rpb24odGhpcy5hZGRGdW5jdGlvbi5iaW5kKHRoaXMpKTtcblx0XHRcdGtlcm5lbE5vZGUuaXNTdWJLZXJuZWwgPSB0cnVlO1xuXHRcdFx0dGhpcy5hZGRGdW5jdGlvbk5vZGUoa2VybmVsTm9kZSk7XG5cdFx0XHRyZXR1cm4ga2VybmVsTm9kZTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0UHJvdG90eXBlU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvdG90eXBlU3RyaW5nKGZ1bmN0aW9uTmFtZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UHJvdG90eXBlcyhmdW5jdGlvbk5hbWUpLmpvaW4oJ1xcbicpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRQcm90b3R5cGVzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0UHJvdG90eXBlcyhmdW5jdGlvbk5hbWUpIHtcblx0XHRcdHRoaXMucm9vdEtlcm5lbC5nZW5lcmF0ZSgpO1xuXHRcdFx0aWYgKGZ1bmN0aW9uTmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRQcm90b3R5cGVzRnJvbUZ1bmN0aW9uTmFtZXModGhpcy50cmFjZUZ1bmN0aW9uQ2FsbHMoZnVuY3Rpb25OYW1lLCBbXSkucmV2ZXJzZSgpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmdldFByb3RvdHlwZXNGcm9tRnVuY3Rpb25OYW1lcyhPYmplY3Qua2V5cyh0aGlzLm5vZGVNYXApKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0U3RyaW5nRnJvbUZ1bmN0aW9uTmFtZXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRTdHJpbmdGcm9tRnVuY3Rpb25OYW1lcyhmdW5jdGlvbkxpc3QpIHtcblx0XHRcdHZhciByZXQgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY3Rpb25MaXN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdGhpcy5ub2RlTWFwW2Z1bmN0aW9uTGlzdFtpXV07XG5cdFx0XHRcdGlmIChub2RlKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2godGhpcy5ub2RlTWFwW2Z1bmN0aW9uTGlzdFtpXV0uZ2V0RnVuY3Rpb25TdHJpbmcoKSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQuam9pbignXFxuJyk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFByb3RvdHlwZXNGcm9tRnVuY3Rpb25OYW1lcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFByb3RvdHlwZXNGcm9tRnVuY3Rpb25OYW1lcyhmdW5jdGlvbkxpc3QsIG9wdCkge1xuXHRcdFx0dmFyIHJldCA9IFtdO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmdW5jdGlvbkxpc3QubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0dmFyIGZ1bmN0aW9uTmFtZSA9IGZ1bmN0aW9uTGlzdFtpXTtcblx0XHRcdFx0dmFyIG5vZGUgPSB0aGlzLm5vZGVNYXBbZnVuY3Rpb25OYW1lXTtcblx0XHRcdFx0aWYgKG5vZGUpIHtcblx0XHRcdFx0XHRyZXQucHVzaChub2RlLmdldEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nKG9wdCkpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMubmF0aXZlRnVuY3Rpb25zW2Z1bmN0aW9uTmFtZV0pIHtcblx0XHRcdFx0XHRyZXQucHVzaCh0aGlzLm5hdGl2ZUZ1bmN0aW9uc1tmdW5jdGlvbk5hbWVdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0UHJvdG90eXBlU3RyaW5nRnJvbUZ1bmN0aW9uTmFtZXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVTdHJpbmdGcm9tRnVuY3Rpb25OYW1lcyhmdW5jdGlvbkxpc3QsIG9wdCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UHJvdG90eXBlc0Zyb21GdW5jdGlvbk5hbWVzKGZ1bmN0aW9uTGlzdCwgb3B0KS50b1N0cmluZygpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRTdHJpbmcoZnVuY3Rpb25OYW1lLCBvcHQpIHtcblx0XHRcdGlmIChvcHQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRvcHQgPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGZ1bmN0aW9uTmFtZSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5nZXRTdHJpbmdGcm9tRnVuY3Rpb25OYW1lcyh0aGlzLnRyYWNlRnVuY3Rpb25DYWxscyhmdW5jdGlvbk5hbWUsIFtdLCBvcHQpLnJldmVyc2UoKSwgb3B0KTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLmdldFN0cmluZ0Zyb21GdW5jdGlvbk5hbWVzKE9iamVjdC5rZXlzKHRoaXMubm9kZU1hcCksIG9wdCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAncG9seWZpbGxTdGFuZGFyZEZ1bmN0aW9ucycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHBvbHlmaWxsU3RhbmRhcmRGdW5jdGlvbnMoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ3BvbHlmaWxsU3RhbmRhcmRGdW5jdGlvbnMgbm90IGRlZmluZWQgb24gYmFzZSBmdW5jdGlvbiBidWlsZGVyJyk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEZ1bmN0aW9uQnVpbGRlckJhc2U7XG59KCk7XG59LHt9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi9jb3JlL3V0aWxzJyk7XG52YXIgYWNvcm4gPSByZXF1aXJlKCdhY29ybicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRmdW5jdGlvbiBCYXNlRnVuY3Rpb25Ob2RlKGZ1bmN0aW9uTmFtZSwganNGdW5jdGlvbiwgb3B0aW9ucywgcGFyYW1UeXBlcywgcmV0dXJuVHlwZSkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlRnVuY3Rpb25Ob2RlKTtcblxuXHRcdHRoaXMuY2FsbGVkRnVuY3Rpb25zID0gW107XG5cdFx0dGhpcy5jYWxsZWRGdW5jdGlvbnNBcmd1bWVudHMgPSB7fTtcblx0XHR0aGlzLmluaXRWYXJpYWJsZXMgPSBbXTtcblx0XHR0aGlzLnJlYWRWYXJpYWJsZXMgPSBbXTtcblx0XHR0aGlzLndyaXRlVmFyaWFibGVzID0gW107XG5cdFx0dGhpcy5hZGRGdW5jdGlvbiA9IG51bGw7XG5cdFx0dGhpcy5pc1Jvb3RLZXJuZWwgPSBmYWxzZTtcblx0XHR0aGlzLmlzU3ViS2VybmVsID0gZmFsc2U7XG5cdFx0dGhpcy5wYXJlbnQgPSBudWxsO1xuXHRcdHRoaXMuZGVidWcgPSBudWxsO1xuXHRcdHRoaXMucHJvdG90eXBlT25seSA9IG51bGw7XG5cdFx0dGhpcy5jb25zdGFudHMgPSBudWxsO1xuXG5cdFx0aWYgKG9wdGlvbnMpIHtcblx0XHRcdGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdkZWJ1ZycpKSB7XG5cdFx0XHRcdHRoaXMuZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3Byb3RvdHlwZU9ubHknKSkge1xuXHRcdFx0XHR0aGlzLnByb3RvdHlwZU9ubHkgPSBvcHRpb25zLnByb3RvdHlwZU9ubHk7XG5cdFx0XHR9XG5cdFx0XHRpZiAob3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnY29uc3RhbnRzJykpIHtcblx0XHRcdFx0dGhpcy5jb25zdGFudHMgPSBvcHRpb25zLmNvbnN0YW50cztcblx0XHRcdH1cblx0XHRcdGlmIChvcHRpb25zLmhhc093blByb3BlcnR5KCdsb29wTWF4SXRlcmF0aW9ucycpKSB7XG5cdFx0XHRcdHRoaXMubG9vcE1heEl0ZXJhdGlvbnMgPSBvcHRpb25zLmxvb3BNYXhJdGVyYXRpb25zO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICghanNGdW5jdGlvbikge1xuXHRcdFx0dGhyb3cgJ2pzRnVuY3Rpb24sIHBhcmFtZXRlciBpcyBtaXNzaW5nJztcblx0XHR9XG5cblx0XHR0aGlzLmpzRnVuY3Rpb25TdHJpbmcgPSBqc0Z1bmN0aW9uLnRvU3RyaW5nKCk7XG5cdFx0aWYgKCF1dGlscy5pc0Z1bmN0aW9uU3RyaW5nKHRoaXMuanNGdW5jdGlvblN0cmluZykpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ2pzRnVuY3Rpb24sIHRvIHN0cmluZyBjb252ZXJzaW9uIGNoZWNrIGZhaWxlZDogbm90IGEgZnVuY3Rpb24/JywgdGhpcy5qc0Z1bmN0aW9uU3RyaW5nKTtcblx0XHRcdHRocm93ICdqc0Z1bmN0aW9uLCB0byBzdHJpbmcgY29udmVyc2lvbiBjaGVjayBmYWlsZWQ6IG5vdCBhIGZ1bmN0aW9uPyc7XG5cdFx0fVxuXG5cdFx0aWYgKCF1dGlscy5pc0Z1bmN0aW9uKGpzRnVuY3Rpb24pKSB7XG5cdFx0XHR0aGlzLmpzRnVuY3Rpb24gPSBudWxsO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmpzRnVuY3Rpb24gPSBqc0Z1bmN0aW9uO1xuXHRcdH1cblxuXHRcdHRoaXMuZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25OYW1lIHx8IGpzRnVuY3Rpb24gJiYganNGdW5jdGlvbi5uYW1lIHx8IHV0aWxzLmdldEZ1bmN0aW9uTmFtZUZyb21TdHJpbmcodGhpcy5qc0Z1bmN0aW9uU3RyaW5nKTtcblxuXHRcdGlmICghdGhpcy5mdW5jdGlvbk5hbWUpIHtcblx0XHRcdHRocm93ICdqc0Z1bmN0aW9uLCBtaXNzaW5nIG5hbWUgYXJndW1lbnQgb3IgdmFsdWUnO1xuXHRcdH1cblxuXHRcdHRoaXMucGFyYW1OYW1lcyA9IHV0aWxzLmdldFBhcmFtTmFtZXNGcm9tU3RyaW5nKHRoaXMuanNGdW5jdGlvblN0cmluZyk7XG5cdFx0aWYgKHBhcmFtVHlwZXMpIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KHBhcmFtVHlwZXMpKSB7XG5cdFx0XHRcdGlmIChwYXJhbVR5cGVzLmxlbmd0aCAhPT0gdGhpcy5wYXJhbU5hbWVzLmxlbmd0aCkge1xuXHRcdFx0XHRcdHRocm93ICdJbnZhbGlkIGFyZ3VtZW50IHR5cGUgYXJyYXkgbGVuZ3RoLCBhZ2FpbnN0IGZ1bmN0aW9uIGxlbmd0aCAtPiAoJyArIHBhcmFtVHlwZXMubGVuZ3RoICsgJywnICsgdGhpcy5wYXJhbU5hbWVzLmxlbmd0aCArICcpJztcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLnBhcmFtVHlwZXMgPSBwYXJhbVR5cGVzO1xuXHRcdFx0fSBlbHNlIGlmICgodHlwZW9mIHBhcmFtVHlwZXMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhcmFtVHlwZXMpKSA9PT0gJ29iamVjdCcpIHtcblx0XHRcdFx0dmFyIHBhcmFtVmFyaWFibGVOYW1lcyA9IE9iamVjdC5rZXlzKHBhcmFtVHlwZXMpO1xuXHRcdFx0XHRpZiAocGFyYW1UeXBlcy5oYXNPd25Qcm9wZXJ0eSgncmV0dXJucycpKSB7XG5cdFx0XHRcdFx0dGhpcy5yZXR1cm5UeXBlID0gcGFyYW1UeXBlcy5yZXR1cm5zO1xuXHRcdFx0XHRcdHBhcmFtVmFyaWFibGVOYW1lcy5zcGxpY2UocGFyYW1WYXJpYWJsZU5hbWVzLmluZGV4T2YoJ3JldHVybnMnKSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHBhcmFtVmFyaWFibGVOYW1lcy5sZW5ndGggPiAwICYmIHBhcmFtVmFyaWFibGVOYW1lcy5sZW5ndGggIT09IHRoaXMucGFyYW1OYW1lcy5sZW5ndGgpIHtcblx0XHRcdFx0XHR0aHJvdyAnSW52YWxpZCBhcmd1bWVudCB0eXBlIGFycmF5IGxlbmd0aCwgYWdhaW5zdCBmdW5jdGlvbiBsZW5ndGggLT4gKCcgKyBwYXJhbVZhcmlhYmxlTmFtZXMubGVuZ3RoICsgJywnICsgdGhpcy5wYXJhbU5hbWVzLmxlbmd0aCArICcpJztcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLnBhcmFtVHlwZXMgPSB0aGlzLnBhcmFtTmFtZXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdGlmIChwYXJhbVR5cGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHBhcmFtVHlwZXNba2V5XTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAnZmxvYXQnO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMucGFyYW1UeXBlcyA9IFtdO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5yZXR1cm5UeXBlKSB7XG5cdFx0XHR0aGlzLnJldHVyblR5cGUgPSByZXR1cm5UeXBlIHx8ICdmbG9hdCc7XG5cdFx0fVxuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKEJhc2VGdW5jdGlvbk5vZGUsIFt7XG5cdFx0a2V5OiAnaXNJZGVudGlmaWVyQ29uc3RhbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc0lkZW50aWZpZXJDb25zdGFudChwYXJhbU5hbWUpIHtcblx0XHRcdGlmICghdGhpcy5jb25zdGFudHMpIHJldHVybiBmYWxzZTtcblx0XHRcdHJldHVybiB0aGlzLmNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eShwYXJhbU5hbWUpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3NldEFkZEZ1bmN0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0QWRkRnVuY3Rpb24oZm4pIHtcblx0XHRcdHRoaXMuYWRkRnVuY3Rpb24gPSBmbjtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRKc0Z1bmN0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0SnNGdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLmpzRnVuY3Rpb24pIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuanNGdW5jdGlvbjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuanNGdW5jdGlvblN0cmluZykge1xuXHRcdFx0XHR0aGlzLmpzRnVuY3Rpb24gPSBldmFsKHRoaXMuanNGdW5jdGlvblN0cmluZyk7XG5cdFx0XHRcdHJldHVybiB0aGlzLmpzRnVuY3Rpb247XG5cdFx0XHR9XG5cblx0XHRcdHRocm93ICdNaXNzaW5nIGpzRnVuY3Rpb24sIGFuZCBqc0Z1bmN0aW9uU3RyaW5nIHBhcmFtZXRlcic7XG5cdFx0fVxuXG5cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRKc0FTVCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEpzQVNUKGluUGFyc2VyKSB7XG5cdFx0XHRpZiAodGhpcy5qc0Z1bmN0aW9uQVNUKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmpzRnVuY3Rpb25BU1Q7XG5cdFx0XHR9XG5cblx0XHRcdGluUGFyc2VyID0gaW5QYXJzZXIgfHwgYWNvcm47XG5cdFx0XHRpZiAoaW5QYXJzZXIgPT09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgJ01pc3NpbmcgSlMgdG8gQVNUIHBhcnNlcic7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBhc3QgPSBpblBhcnNlci5wYXJzZSgndmFyICcgKyB0aGlzLmZ1bmN0aW9uTmFtZSArICcgPSAnICsgdGhpcy5qc0Z1bmN0aW9uU3RyaW5nICsgJzsnLCB7XG5cdFx0XHRcdGxvY2F0aW9uczogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0XHRpZiAoYXN0ID09PSBudWxsKSB7XG5cdFx0XHRcdHRocm93ICdGYWlsZWQgdG8gcGFyc2UgSlMgY29kZSc7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBmdW5jQVNUID0gYXN0LmJvZHlbMF0uZGVjbGFyYXRpb25zWzBdLmluaXQ7XG5cdFx0XHR0aGlzLmpzRnVuY3Rpb25BU1QgPSBmdW5jQVNUO1xuXG5cdFx0XHRyZXR1cm4gZnVuY0FTVDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0RnVuY3Rpb25TdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRGdW5jdGlvblN0cmluZygpIHtcblx0XHRcdHRoaXMuZ2VuZXJhdGUoKTtcblx0XHRcdHJldHVybiB0aGlzLmZ1bmN0aW9uU3RyaW5nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRGdW5jdGlvblN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEZ1bmN0aW9uU3RyaW5nKGZ1bmN0aW9uU3RyaW5nKSB7XG5cdFx0XHR0aGlzLmZ1bmN0aW9uU3RyaW5nID0gZnVuY3Rpb25TdHJpbmc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFBhcmFtVHlwZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFBhcmFtVHlwZShwYXJhbU5hbWUpIHtcblx0XHRcdHZhciBwYXJhbUluZGV4ID0gdGhpcy5wYXJhbU5hbWVzLmluZGV4T2YocGFyYW1OYW1lKTtcblx0XHRcdGlmIChwYXJhbUluZGV4ID09PSAtMSkgcmV0dXJuIG51bGw7XG5cdFx0XHRpZiAoIXRoaXMucGFyZW50KSByZXR1cm4gbnVsbDtcblx0XHRcdGlmICh0aGlzLnBhcmFtVHlwZXNbcGFyYW1JbmRleF0pIHJldHVybiB0aGlzLnBhcmFtVHlwZXNbcGFyYW1JbmRleF07XG5cdFx0XHR2YXIgY2FsbGVkRnVuY3Rpb25Bcmd1bWVudHMgPSB0aGlzLnBhcmVudC5jYWxsZWRGdW5jdGlvbnNBcmd1bWVudHNbdGhpcy5mdW5jdGlvbk5hbWVdO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsZWRGdW5jdGlvbkFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgY2FsbGVkRnVuY3Rpb25Bcmd1bWVudCA9IGNhbGxlZEZ1bmN0aW9uQXJndW1lbnRzW2ldO1xuXHRcdFx0XHRpZiAoY2FsbGVkRnVuY3Rpb25Bcmd1bWVudFtwYXJhbUluZGV4XSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLnBhcmFtVHlwZXNbcGFyYW1JbmRleF0gPSBjYWxsZWRGdW5jdGlvbkFyZ3VtZW50W3BhcmFtSW5kZXhdLnR5cGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRVc2VyUGFyYW1OYW1lJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlclBhcmFtTmFtZShwYXJhbU5hbWUpIHtcblx0XHRcdHZhciBwYXJhbUluZGV4ID0gdGhpcy5wYXJhbU5hbWVzLmluZGV4T2YocGFyYW1OYW1lKTtcblx0XHRcdGlmIChwYXJhbUluZGV4ID09PSAtMSkgcmV0dXJuIG51bGw7XG5cdFx0XHRpZiAoIXRoaXMucGFyZW50KSByZXR1cm4gbnVsbDtcblx0XHRcdHZhciBjYWxsZWRGdW5jdGlvbkFyZ3VtZW50cyA9IHRoaXMucGFyZW50LmNhbGxlZEZ1bmN0aW9uc0FyZ3VtZW50c1t0aGlzLmZ1bmN0aW9uTmFtZV07XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxlZEZ1bmN0aW9uQXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBjYWxsZWRGdW5jdGlvbkFyZ3VtZW50ID0gY2FsbGVkRnVuY3Rpb25Bcmd1bWVudHNbaV07XG5cdFx0XHRcdGlmIChjYWxsZWRGdW5jdGlvbkFyZ3VtZW50W3BhcmFtSW5kZXhdICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNhbGxlZEZ1bmN0aW9uQXJndW1lbnRbcGFyYW1JbmRleF0ubmFtZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnZ2VuZXJhdGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZW5lcmF0ZShvcHRpb25zKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2dlbmVyYXRlIG5vdCBkZWZpbmVkIG9uIEJhc2VGdW5jdGlvbk5vZGUnKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0RXJyb3JPdXRwdXQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RFcnJvck91dHB1dChlcnJvciwgYXN0LCBmdW5jUGFyYW0pIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IodXRpbHMuZ2V0QXN0U3RyaW5nKHRoaXMuanNGdW5jdGlvblN0cmluZywgYXN0KSk7XG5cdFx0XHRjb25zb2xlLmVycm9yKGVycm9yLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXR1cm4gZXJyb3I7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEJhc2VGdW5jdGlvbk5vZGU7XG59KCk7XG59LHtcIi4uL2NvcmUvdXRpbHNcIjoyNCxcImFjb3JuXCI6MjZ9XSw4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vY29yZS91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRmdW5jdGlvbiBCYXNlS2VybmVsKGZuU3RyaW5nLCBzZXR0aW5ncykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlS2VybmVsKTtcblxuXHRcdHRoaXMucGFyYW1OYW1lcyA9IHV0aWxzLmdldFBhcmFtTmFtZXNGcm9tU3RyaW5nKGZuU3RyaW5nKTtcblx0XHR0aGlzLmZuU3RyaW5nID0gZm5TdHJpbmc7XG5cdFx0dGhpcy5vdXRwdXQgPSBudWxsO1xuXHRcdHRoaXMuZGVidWcgPSBmYWxzZTtcblx0XHR0aGlzLmdyYXBoaWNhbCA9IGZhbHNlO1xuXHRcdHRoaXMubG9vcE1heEl0ZXJhdGlvbnMgPSAwO1xuXHRcdHRoaXMuY29uc3RhbnRzID0gbnVsbDtcblx0XHR0aGlzLndyYXBhcm91bmQgPSBudWxsO1xuXHRcdHRoaXMuaGFyZGNvZGVDb25zdGFudHMgPSBudWxsO1xuXHRcdHRoaXMub3V0cHV0VG9UZXh0dXJlID0gbnVsbDtcblx0XHR0aGlzLnRleFNpemUgPSBudWxsO1xuXHRcdHRoaXMuX2NhbnZhcyA9IG51bGw7XG5cdFx0dGhpcy5fd2ViR2wgPSBudWxsO1xuXHRcdHRoaXMudGhyZWFkRGltID0gbnVsbDtcblx0XHR0aGlzLmZsb2F0VGV4dHVyZXMgPSBudWxsO1xuXHRcdHRoaXMuZmxvYXRPdXRwdXQgPSBudWxsO1xuXHRcdHRoaXMuZmxvYXRPdXRwdXRGb3JjZSA9IG51bGw7XG5cdFx0dGhpcy5hZGRGdW5jdGlvbiA9IG51bGw7XG5cdFx0dGhpcy5mdW5jdGlvbnMgPSBudWxsO1xuXHRcdHRoaXMubmF0aXZlRnVuY3Rpb25zID0gbnVsbDtcblx0XHR0aGlzLmNvcHlEYXRhID0gdHJ1ZTtcblx0XHR0aGlzLnN1Yktlcm5lbHMgPSBudWxsO1xuXHRcdHRoaXMuc3ViS2VybmVsUHJvcGVydGllcyA9IG51bGw7XG5cdFx0dGhpcy5zdWJLZXJuZWxOYW1lcyA9IG51bGw7XG5cdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzID0gbnVsbDtcblx0XHR0aGlzLmZ1bmN0aW9uQnVpbGRlciA9IG51bGw7XG5cblx0XHRmb3IgKHZhciBwIGluIHNldHRpbmdzKSB7XG5cdFx0XHRpZiAoIXNldHRpbmdzLmhhc093blByb3BlcnR5KHApIHx8ICF0aGlzLmhhc093blByb3BlcnR5KHApKSBjb250aW51ZTtcblx0XHRcdHRoaXNbcF0gPSBzZXR0aW5nc1twXTtcblx0XHR9XG5cdFx0aWYgKHNldHRpbmdzLmhhc093blByb3BlcnR5KCdjYW52YXMnKSkge1xuXHRcdFx0dGhpcy5fY2FudmFzID0gc2V0dGluZ3MuY2FudmFzO1xuXHRcdH1cblx0XHRpZiAoc2V0dGluZ3MuaGFzT3duUHJvcGVydHkoJ291dHB1dCcpKSB7XG5cdFx0XHR0aGlzLnNldE91dHB1dChzZXR0aW5ncy5vdXRwdXQpO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5fY2FudmFzKSB0aGlzLl9jYW52YXMgPSB1dGlscy5pbml0Q2FudmFzKCk7XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoQmFzZUtlcm5lbCwgW3tcblx0XHRrZXk6ICdidWlsZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGJ1aWxkKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdcImJ1aWxkXCIgbm90IGRlZmluZWQgb24gQmFzZScpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3NldEFkZEZ1bmN0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0QWRkRnVuY3Rpb24oY2IpIHtcblx0XHRcdHRoaXMuYWRkRnVuY3Rpb24gPSBjYjtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3NldEZ1bmN0aW9ucycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEZ1bmN0aW9ucyhmdW5jdGlvbnMpIHtcblx0XHRcdHRoaXMuZnVuY3Rpb25zID0gZnVuY3Rpb25zO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3NldE91dHB1dCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldE91dHB1dChvdXRwdXQpIHtcblx0XHRcdGlmIChvdXRwdXQuaGFzT3duUHJvcGVydHkoJ3gnKSkge1xuXHRcdFx0XHRpZiAob3V0cHV0Lmhhc093blByb3BlcnR5KCd5JykpIHtcblx0XHRcdFx0XHRpZiAob3V0cHV0Lmhhc093blByb3BlcnR5KCd6JykpIHtcblx0XHRcdFx0XHRcdHRoaXMub3V0cHV0ID0gW291dHB1dC54LCBvdXRwdXQueSwgb3V0cHV0LnpdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0aGlzLm91dHB1dCA9IFtvdXRwdXQueCwgb3V0cHV0LnldO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLm91dHB1dCA9IFtvdXRwdXQueF07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMub3V0cHV0ID0gb3V0cHV0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3NldERlYnVnJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0RGVidWcoZmxhZykge1xuXHRcdFx0dGhpcy5kZWJ1ZyA9IGZsYWc7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0R3JhcGhpY2FsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0R3JhcGhpY2FsKGZsYWcpIHtcblx0XHRcdHRoaXMuZ3JhcGhpY2FsID0gZmxhZztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRMb29wTWF4SXRlcmF0aW9ucycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldExvb3BNYXhJdGVyYXRpb25zKG1heCkge1xuXHRcdFx0dGhpcy5sb29wTWF4SXRlcmF0aW9ucyA9IG1heDtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRDb25zdGFudHMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRDb25zdGFudHMoY29uc3RhbnRzKSB7XG5cdFx0XHR0aGlzLmNvbnN0YW50cyA9IGNvbnN0YW50cztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3NldFdyYXBhcm91bmQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRXcmFwYXJvdW5kKGZsYWcpIHtcblx0XHRcdGNvbnNvbGUud2FybignV3JhcGFyb3VuZCBtb2RlIGlzIG5vdCBzdXBwb3J0ZWQgYW5kIHVuZG9jdW1lbnRlZC4nKTtcblx0XHRcdHRoaXMud3JhcGFyb3VuZCA9IGZsYWc7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZXRIYXJkY29kZUNvbnN0YW50cycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldEhhcmRjb2RlQ29uc3RhbnRzKGZsYWcpIHtcblx0XHRcdHRoaXMuaGFyZGNvZGVDb25zdGFudHMgPSBmbGFnO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0T3V0cHV0VG9UZXh0dXJlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0T3V0cHV0VG9UZXh0dXJlKGZsYWcpIHtcblx0XHRcdHRoaXMub3V0cHV0VG9UZXh0dXJlID0gZmxhZztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRGbG9hdFRleHR1cmVzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0RmxvYXRUZXh0dXJlcyhmbGFnKSB7XG5cdFx0XHR0aGlzLmZsb2F0VGV4dHVyZXMgPSBmbGFnO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3NldEZsb2F0T3V0cHV0Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0RmxvYXRPdXRwdXQoZmxhZykge1xuXHRcdFx0dGhpcy5mbG9hdE91dHB1dCA9IGZsYWc7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdzZXRGbG9hdE91dHB1dEZvcmNlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0RmxvYXRPdXRwdXRGb3JjZShmbGFnKSB7XG5cdFx0XHR0aGlzLmZsb2F0T3V0cHV0Rm9yY2UgPSBmbGFnO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3NldENhbnZhcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldENhbnZhcyhjYW52YXMpIHtcblx0XHRcdHRoaXMuX2NhbnZhcyA9IGNhbnZhcztcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXRXZWJHbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNldFdlYkdsKHdlYkdsKSB7XG5cdFx0XHR0aGlzLl93ZWJHbCA9IHdlYkdsO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnc2V0Q29weURhdGEnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXRDb3B5RGF0YShjb3B5RGF0YSkge1xuXHRcdFx0dGhpcy5jb3B5RGF0YSA9IGNvcHlEYXRhO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldENhbnZhcycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldENhbnZhcygpIHtcblx0XHRcdHJldHVybiB0aGlzLl9jYW52YXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFdlYkdsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0V2ViR2woKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fd2ViR2w7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAndmFsaWRhdGVPcHRpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCd2YWxpZGF0ZU9wdGlvbnMgbm90IGRlZmluZWQnKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdleGVjJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZXhlYygpIHtcblx0XHRcdHJldHVybiB0aGlzLmV4ZWN1dGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdleGVjdXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZSgpIHtcblx0XHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cblx0XHRcdHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IFthcmd1bWVudHNbMF1dIDogQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblxuXHRcdFx0cmV0dXJuIHV0aWxzLm5ld1Byb21pc2UoZnVuY3Rpb24gKGFjY2VwdCwgcmVqZWN0KSB7XG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0YWNjZXB0KF90aGlzLnJ1bi5hcHBseShfdGhpcywgYXJncykpO1xuXHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0cmVqZWN0KGUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYWRkU3ViS2VybmVsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkU3ViS2VybmVsKGZuU3RyaW5nKSB7XG5cdFx0XHRpZiAodGhpcy5zdWJLZXJuZWxzID09PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuc3ViS2VybmVscyA9IFtdO1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbE5hbWVzID0gW107XG5cdFx0XHR9XG5cdFx0XHR0aGlzLnN1Yktlcm5lbHMucHVzaChmblN0cmluZyk7XG5cdFx0XHR0aGlzLnN1Yktlcm5lbE5hbWVzLnB1c2godXRpbHMuZ2V0RnVuY3Rpb25OYW1lRnJvbVN0cmluZyhmblN0cmluZykpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZFN1Yktlcm5lbFByb3BlcnR5Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkU3ViS2VybmVsUHJvcGVydHkocHJvcGVydHksIGZuU3RyaW5nKSB7XG5cdFx0XHRpZiAodGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzID09PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuc3ViS2VybmVsUHJvcGVydGllcyA9IHt9O1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbE5hbWVzID0gW107XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ2Nhbm5vdCBhZGQgc3ViIGtlcm5lbCAnICsgcHJvcGVydHkgKyAnLCBhbHJlYWR5IGRlZmluZWQnKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuc3ViS2VybmVsUHJvcGVydGllc1twcm9wZXJ0eV0gPSBmblN0cmluZztcblx0XHRcdHRoaXMuc3ViS2VybmVsTmFtZXMucHVzaCh1dGlscy5nZXRGdW5jdGlvbk5hbWVGcm9tU3RyaW5nKGZuU3RyaW5nKSk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhZGROYXRpdmVGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZE5hdGl2ZUZ1bmN0aW9uKG5hbWUsIHNvdXJjZSkge1xuXHRcdFx0dGhpcy5mdW5jdGlvbkJ1aWxkZXIuYWRkTmF0aXZlRnVuY3Rpb24obmFtZSwgc291cmNlKTtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gQmFzZUtlcm5lbDtcbn0oKTtcbn0se1wiLi4vY29yZS91dGlsc1wiOjI0fV0sOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL2NvcmUvdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBrZXJuZWxSdW5TaG9ydGN1dChrZXJuZWwpIHtcblx0dmFyIHNob3J0Y3V0ID0gZnVuY3Rpb24gc2hvcnRjdXQoKSB7XG5cdFx0cmV0dXJuIGtlcm5lbC5ydW4uYXBwbHkoa2VybmVsLCBhcmd1bWVudHMpO1xuXHR9O1xuXG5cdHV0aWxzLmFsbFByb3BlcnRpZXNPZihrZXJuZWwpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdGlmIChrZXlbMF0gPT09ICdfJyAmJiBrZXlbMV0gPT09ICdfJykgcmV0dXJuO1xuXHRcdGlmICh0eXBlb2Yga2VybmVsW2tleV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdGlmIChrZXkuc3Vic3RyaW5nKDAsIDMpID09PSAnYWRkJyB8fCBrZXkuc3Vic3RyaW5nKDAsIDMpID09PSAnc2V0Jykge1xuXHRcdFx0XHRzaG9ydGN1dFtrZXldID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdGtlcm5lbFtrZXldLmFwcGx5KGtlcm5lbCwgYXJndW1lbnRzKTtcblx0XHRcdFx0XHRyZXR1cm4gc2hvcnRjdXQ7XG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzaG9ydGN1dFtrZXldID0ga2VybmVsW2tleV0uYmluZChrZXJuZWwpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRzaG9ydGN1dC5fX2RlZmluZUdldHRlcl9fKGtleSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRyZXR1cm4ga2VybmVsW2tleV07XG5cdFx0XHR9KTtcblx0XHRcdHNob3J0Y3V0Ll9fZGVmaW5lU2V0dGVyX18oa2V5LCBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0a2VybmVsW2tleV0gPSB2YWx1ZTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG5cblx0c2hvcnRjdXQua2VybmVsID0ga2VybmVsO1xuXG5cdHJldHVybiBzaG9ydGN1dDtcbn07XG59LHtcIi4uL2NvcmUvdXRpbHNcIjoyNH1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vY29yZS91dGlscycpO1xudmFyIGtlcm5lbFJ1blNob3J0Y3V0ID0gcmVxdWlyZSgnLi9rZXJuZWwtcnVuLXNob3J0Y3V0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG5cblx0ZnVuY3Rpb24gQmFzZVJ1bm5lcihmdW5jdGlvbkJ1aWxkZXIsIHNldHRpbmdzKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJhc2VSdW5uZXIpO1xuXG5cdFx0c2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB7fTtcblx0XHR0aGlzLmtlcm5lbCA9IHNldHRpbmdzLmtlcm5lbDtcblx0XHR0aGlzLmNhbnZhcyA9IHNldHRpbmdzLmNhbnZhcztcblx0XHR0aGlzLndlYkdsID0gc2V0dGluZ3Mud2ViR2w7XG5cdFx0dGhpcy5mbiA9IG51bGw7XG5cdFx0dGhpcy5mdW5jdGlvbkJ1aWxkZXIgPSBmdW5jdGlvbkJ1aWxkZXI7XG5cdFx0dGhpcy5mblN0cmluZyA9IG51bGw7XG5cdFx0dGhpcy5lbmRpYW5uZXNzID0gdXRpbHMuc3lzdGVtRW5kaWFubmVzcygpO1xuXHRcdHRoaXMuZnVuY3Rpb25CdWlsZGVyLnBvbHlmaWxsU3RhbmRhcmRGdW5jdGlvbnMoKTtcblx0fVxuXG5cblxuXHRfY3JlYXRlQ2xhc3MoQmFzZVJ1bm5lciwgW3tcblx0XHRrZXk6ICd0ZXh0dXJlVG9BcnJheScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHRleHR1cmVUb0FycmF5KHRleHR1cmUpIHtcblx0XHRcdHZhciBjb3B5ID0gdGhpcy5jcmVhdGVLZXJuZWwoZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0cmV0dXJuIHhbdGhpcy50aHJlYWQuel1bdGhpcy50aHJlYWQueV1bdGhpcy50aHJlYWQueF07XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGNvcHkodGV4dHVyZSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2RlbGV0ZVRleHR1cmUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBkZWxldGVUZXh0dXJlKHRleHR1cmUpIHtcblx0XHRcdHRoaXMud2ViR2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlLnRleHR1cmUpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdidWlsZFByb21pc2VLZXJuZWwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBidWlsZFByb21pc2VLZXJuZWwoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ25vdCB5ZXQgaW1wbGVtZW50ZWQnKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdnZXRNb2RlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0TW9kZSgpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignXCJtb2RlXCIgbm90IGltcGxlbWVudGVkIG9uIEJhc2VSdW5uZXInKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYnVpbGRLZXJuZWwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBidWlsZEtlcm5lbChmbiwgc2V0dGluZ3MpIHtcblx0XHRcdHNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgc2V0dGluZ3MgfHwge30pO1xuXHRcdFx0dmFyIGZuU3RyaW5nID0gZm4udG9TdHJpbmcoKTtcblx0XHRcdGlmICghc2V0dGluZ3MuZnVuY3Rpb25CdWlsZGVyKSB7XG5cdFx0XHRcdHNldHRpbmdzLmZ1bmN0aW9uQnVpbGRlciA9IHRoaXMuZnVuY3Rpb25CdWlsZGVyO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXNldHRpbmdzLmNhbnZhcykge1xuXHRcdFx0XHRzZXR0aW5ncy5jYW52YXMgPSB0aGlzLmNhbnZhcztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFzZXR0aW5ncy53ZWJHbCkge1xuXHRcdFx0XHRzZXR0aW5ncy53ZWJHbCA9IHRoaXMud2ViZ2w7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBrZXJuZWxSdW5TaG9ydGN1dChuZXcgdGhpcy5LZXJuZWwoZm5TdHJpbmcsIHNldHRpbmdzKSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIEJhc2VSdW5uZXI7XG59KCk7XG59LHtcIi4uL2NvcmUvdXRpbHNcIjoyNCxcIi4va2VybmVsLXJ1bi1zaG9ydGN1dFwiOjl9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEZ1bmN0aW9uQnVpbGRlckJhc2UgPSByZXF1aXJlKCcuLi9mdW5jdGlvbi1idWlsZGVyLWJhc2UnKTtcbnZhciBXZWJHTEZ1bmN0aW9uTm9kZSA9IHJlcXVpcmUoJy4vZnVuY3Rpb24tbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfRnVuY3Rpb25CdWlsZGVyQmFzZSkge1xuXHRfaW5oZXJpdHMoV2ViR0xGdW5jdGlvbkJ1aWxkZXIsIF9GdW5jdGlvbkJ1aWxkZXJCYXNlKTtcblxuXHRmdW5jdGlvbiBXZWJHTEZ1bmN0aW9uQnVpbGRlcigpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViR0xGdW5jdGlvbkJ1aWxkZXIpO1xuXG5cdFx0dmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdlYkdMRnVuY3Rpb25CdWlsZGVyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoV2ViR0xGdW5jdGlvbkJ1aWxkZXIpKS5jYWxsKHRoaXMpKTtcblxuXHRcdF90aGlzLk5vZGUgPSBXZWJHTEZ1bmN0aW9uTm9kZTtcblx0XHRyZXR1cm4gX3RoaXM7XG5cdH1cblxuXG5cblxuXHRfY3JlYXRlQ2xhc3MoV2ViR0xGdW5jdGlvbkJ1aWxkZXIsIFt7XG5cdFx0a2V5OiAncG9seWZpbGxTdGFuZGFyZEZ1bmN0aW9ucycsXG5cblxuXHRcdHZhbHVlOiBmdW5jdGlvbiBwb2x5ZmlsbFN0YW5kYXJkRnVuY3Rpb25zKCkge1xuXHRcdFx0dGhpcy5hZGRGdW5jdGlvbigncm91bmQnLCBfcm91bmQpO1xuXHRcdH1cblx0fV0sIFt7XG5cdFx0a2V5OiAncm91bmQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiByb3VuZChhKSB7XG5cdFx0XHRyZXR1cm4gX3JvdW5kKGEpO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBXZWJHTEZ1bmN0aW9uQnVpbGRlcjtcbn0oRnVuY3Rpb25CdWlsZGVyQmFzZSk7XG5cbmZ1bmN0aW9uIF9yb3VuZChhKSB7XG5cdHJldHVybiBNYXRoLmZsb29yKGEgKyAwLjUpO1xufVxufSx7XCIuLi9mdW5jdGlvbi1idWlsZGVyLWJhc2VcIjo2LFwiLi9mdW5jdGlvbi1ub2RlXCI6MTJ9XSwxMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIEZ1bmN0aW9uTm9kZUJhc2UgPSByZXF1aXJlKCcuLi9mdW5jdGlvbi1ub2RlLWJhc2UnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcbnZhciBqc01hdGhQcmVmaXggPSAnTWF0aC4nO1xudmFyIGxvY2FsUHJlZml4ID0gJ3RoaXMuJztcbnZhciBjb25zdGFudHNQcmVmaXggPSAndGhpcy5jb25zdGFudHMuJztcblxudmFyIERFQ09ERTMyX0VOQ09ERTMyID0gL2RlY29kZTMyXFwoXFxzK2VuY29kZTMyXFwoL2c7XG52YXIgRU5DT0RFMzJfREVDT0RFMzIgPSAvZW5jb2RlMzJcXChcXHMrZGVjb2RlMzJcXCgvZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX0Z1bmN0aW9uTm9kZUJhc2UpIHtcblx0X2luaGVyaXRzKFdlYkdMRnVuY3Rpb25Ob2RlLCBfRnVuY3Rpb25Ob2RlQmFzZSk7XG5cblx0ZnVuY3Rpb24gV2ViR0xGdW5jdGlvbk5vZGUoKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYkdMRnVuY3Rpb25Ob2RlKTtcblxuXHRcdHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoV2ViR0xGdW5jdGlvbk5vZGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXZWJHTEZ1bmN0aW9uTm9kZSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKFdlYkdMRnVuY3Rpb25Ob2RlLCBbe1xuXHRcdGtleTogJ2dlbmVyYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGUoKSB7XG5cdFx0XHRpZiAodGhpcy5kZWJ1Zykge1xuXHRcdFx0XHRjb25zb2xlLmxvZyh0aGlzKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnByb3RvdHlwZU9ubHkpIHtcblx0XHRcdFx0cmV0dXJuIFdlYkdMRnVuY3Rpb25Ob2RlLmFzdEZ1bmN0aW9uUHJvdG90eXBlKHRoaXMuZ2V0SnNBU1QoKSwgW10sIHRoaXMpLmpvaW4oJycpLnRyaW0oKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMuZnVuY3Rpb25TdHJpbmdBcnJheSA9IHRoaXMuYXN0R2VuZXJpYyh0aGlzLmdldEpzQVNUKCksIFtdLCB0aGlzKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuZnVuY3Rpb25TdHJpbmcgPSB3ZWJHbFJlZ2V4T3B0aW1pemUodGhpcy5mdW5jdGlvblN0cmluZ0FycmF5LmpvaW4oJycpLnRyaW0oKSk7XG5cdFx0XHRyZXR1cm4gdGhpcy5mdW5jdGlvblN0cmluZztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0R2VuZXJpYycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEdlbmVyaWMoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGFzdCA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdOVUxMIGFzdCcsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFzdCkpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdFtpXSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0c3dpdGNoIChhc3QudHlwZSkge1xuXHRcdFx0XHRcdGNhc2UgJ0Z1bmN0aW9uRGVjbGFyYXRpb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0RnVuY3Rpb25EZWNsYXJhdGlvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdGdW5jdGlvbkV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0RnVuY3Rpb25FeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1JldHVyblN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RSZXR1cm5TdGF0ZW1lbnQoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnTGl0ZXJhbCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RMaXRlcmFsKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0JpbmFyeUV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0QmluYXJ5RXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdJZGVudGlmaWVyJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdElkZW50aWZpZXJFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0Fzc2lnbm1lbnRFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdEFzc2lnbm1lbnRFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0V4cHJlc3Npb25TdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0RXhwcmVzc2lvblN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdFbXB0eVN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RFbXB0eVN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdCbG9ja1N0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RCbG9ja1N0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdJZlN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RJZlN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdCcmVha1N0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RCcmVha1N0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdDb250aW51ZVN0YXRlbWVudCc6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RDb250aW51ZVN0YXRlbWVudChhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdGb3JTdGF0ZW1lbnQnOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0Rm9yU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1doaWxlU3RhdGVtZW50Jzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFdoaWxlU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1ZhcmlhYmxlRGVjbGFyYXRpb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0VmFyaWFibGVEZWNsYXJhdGlvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdWYXJpYWJsZURlY2xhcmF0b3InOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0VmFyaWFibGVEZWNsYXJhdG9yKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1RoaXNFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFRoaXNFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ1NlcXVlbmNlRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RTZXF1ZW5jZUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnVW5hcnlFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFVuYXJ5RXhwcmVzc2lvbihhc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRjYXNlICdVcGRhdGVFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdFVwZGF0ZUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnTG9naWNhbEV4cHJlc3Npb24nOlxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuYXN0TG9naWNhbEV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0Y2FzZSAnTWVtYmVyRXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RNZW1iZXJFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0NhbGxFeHByZXNzaW9uJzpcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLmFzdENhbGxFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdGNhc2UgJ0FycmF5RXhwcmVzc2lvbic6XG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RBcnJheUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdVbmtub3duIGFzdCB0eXBlIDogJyArIGFzdC50eXBlLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEZ1bmN0aW9uRGVjbGFyYXRpb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RGdW5jdGlvbkRlY2xhcmF0aW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmICh0aGlzLmFkZEZ1bmN0aW9uKSB7XG5cdFx0XHRcdHRoaXMuYWRkRnVuY3Rpb24obnVsbCwgdXRpbHMuZ2V0QXN0U3RyaW5nKHRoaXMuanNGdW5jdGlvblN0cmluZywgYXN0KSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RGdW5jdGlvbkV4cHJlc3Npb24nLFxuXG5cblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RnVuY3Rpb25FeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblxuXHRcdFx0aWYgKGZ1bmNQYXJhbS5pc1Jvb3RLZXJuZWwpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ3ZvaWQnKTtcblx0XHRcdFx0ZnVuY1BhcmFtLmtlcm5hbEFzdCA9IGFzdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKGZ1bmNQYXJhbS5yZXR1cm5UeXBlKTtcblx0XHRcdH1cblx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0uZnVuY3Rpb25OYW1lKTtcblx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cblx0XHRcdGlmICghZnVuY1BhcmFtLmlzUm9vdEtlcm5lbCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmNQYXJhbS5wYXJhbU5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdFx0dmFyIHBhcmFtTmFtZSA9IGZ1bmNQYXJhbS5wYXJhbU5hbWVzW2ldO1xuXG5cdFx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCAnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIHR5cGUgPSBmdW5jUGFyYW0uZ2V0UGFyYW1UeXBlKHBhcmFtTmFtZSk7XG5cdFx0XHRcdFx0c3dpdGNoICh0eXBlKSB7XG5cdFx0XHRcdFx0XHRjYXNlICdUZXh0dXJlJzpcblx0XHRcdFx0XHRcdGNhc2UgJ0FycmF5Jzpcblx0XHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3NhbXBsZXIyRCcpO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdmbG9hdCcpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VzZXJfJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2gocGFyYW1OYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaCgnKSB7XFxuJyk7XG5cblx0XHRcdGZvciAodmFyIF9pID0gMDsgX2kgPCBhc3QuYm9keS5ib2R5Lmxlbmd0aDsgKytfaSkge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LmJvZHkuYm9keVtfaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ1xcbicpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaCgnfVxcbicpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0UmV0dXJuU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0UmV0dXJuU3RhdGVtZW50KGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChmdW5jUGFyYW0uaXNSb290S2VybmVsKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdrZXJuZWxSZXN1bHQgPSAnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgncmV0dXJuOycpO1xuXHRcdFx0fSBlbHNlIGlmIChmdW5jUGFyYW0uaXNTdWJLZXJuZWwpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goZnVuY1BhcmFtLmZ1bmN0aW9uTmFtZSArICdSZXN1bHQgPSAnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5hcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgncmV0dXJuICcgKyBmdW5jUGFyYW0uZnVuY3Rpb25OYW1lICsgJ1Jlc3VsdDsnKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdyZXR1cm4gJyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdH1cblxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RMaXRlcmFsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0TGl0ZXJhbChhc3QsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cblx0XHRcdGlmIChpc05hTihhc3QudmFsdWUpKSB7XG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ05vbi1udW1lcmljIGxpdGVyYWwgbm90IHN1cHBvcnRlZCA6ICcgKyBhc3QudmFsdWUsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0QXJyLnB1c2goYXN0LnZhbHVlKTtcblxuXHRcdFx0aWYgKE51bWJlci5pc0ludGVnZXIoYXN0LnZhbHVlKSkge1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnLjAnKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0QmluYXJ5RXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEJpbmFyeUV4cHJlc3Npb24oYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJygnKTtcblxuXHRcdFx0aWYgKGFzdC5vcGVyYXRvciA9PT0gJyUnKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCdtb2QoJyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3QubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnLCcpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cdFx0XHR9IGVsc2UgaWYgKGFzdC5vcGVyYXRvciA9PT0gJz09PScpIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCc9PScpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2UgaWYgKGFzdC5vcGVyYXRvciA9PT0gJyE9PScpIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCchPScpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXN0LmxlZnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goYXN0Lm9wZXJhdG9yKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzdC5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RJZGVudGlmaWVyRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdElkZW50aWZpZXJFeHByZXNzaW9uKGlkdE5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAoaWR0Tm9kZS50eXBlICE9PSAnSWRlbnRpZmllcicpIHtcblx0XHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnSWRlbnRpZmllckV4cHJlc3Npb24gLSBub3QgYW4gSWRlbnRpZmllcicsIGFzdCwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblxuXHRcdFx0c3dpdGNoIChpZHROb2RlLm5hbWUpIHtcblx0XHRcdFx0Y2FzZSAnZ3B1X3RocmVhZFgnOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd0aHJlYWRJZC54Jyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dwdV90aHJlYWRZJzpcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndGhyZWFkSWQueScpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncHVfdGhyZWFkWic6XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3RocmVhZElkLnonKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X291dHB1dFgnOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLngnKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X291dHB1dFknOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLnknKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZ3B1X291dHB1dFonOlxuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLnonKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRpZiAodGhpcy5jb25zdGFudHMgJiYgdGhpcy5jb25zdGFudHMuaGFzT3duUHJvcGVydHkoaWR0Tm9kZS5uYW1lKSkge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2NvbnN0YW50c18nICsgaWR0Tm9kZS5uYW1lKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dmFyIHVzZXJQYXJhbU5hbWUgPSBmdW5jUGFyYW0uZ2V0VXNlclBhcmFtTmFtZShpZHROb2RlLm5hbWUpO1xuXHRcdFx0XHRcdFx0aWYgKHVzZXJQYXJhbU5hbWUgIT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VzZXJfJyArIHVzZXJQYXJhbU5hbWUpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VzZXJfJyArIGlkdE5vZGUubmFtZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RGb3JTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RGb3JTdGF0ZW1lbnQoZm9yTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChmb3JOb2RlLnR5cGUgIT09ICdGb3JTdGF0ZW1lbnQnKSB7XG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ0ludmFsaWQgZm9yIHN0YXRtZW50JywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZm9yTm9kZS50ZXN0ICYmIGZvck5vZGUudGVzdC50eXBlID09PSAnQmluYXJ5RXhwcmVzc2lvbicpIHtcblx0XHRcdFx0aWYgKGZvck5vZGUudGVzdC5yaWdodC50eXBlID09PSAnSWRlbnRpZmllcicgJiYgZm9yTm9kZS50ZXN0Lm9wZXJhdG9yID09PSAnPCcgJiYgdGhpcy5pc0lkZW50aWZpZXJDb25zdGFudChmb3JOb2RlLnRlc3QucmlnaHQubmFtZSkgPT09IGZhbHNlKSB7XG5cblx0XHRcdFx0XHRpZiAoIXRoaXMubG9vcE1heEl0ZXJhdGlvbnMpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignV2FybmluZzogbG9vcE1heEl0ZXJhdGlvbnMgaXMgbm90IHNldCEgVXNpbmcgZGVmYXVsdCBvZiAxMDAwIHdoaWNoIG1heSByZXN1bHQgaW4gdW5pbnRlbmRlZCBiZWhhdmlvci4nKTtcblx0XHRcdFx0XHRcdGNvbnNvbGUud2FybignU2V0IGxvb3BNYXhJdGVyYXRpb25zIG9yIHVzZSBhIGZvciBsb29wIG9mIGZpeGVkIGxlbmd0aCB0byBzaWxlbmNlIHRoaXMgbWVzc2FnZS4nKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnZm9yICgnKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5pbml0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goZm9yTm9kZS50ZXN0Lm9wZXJhdG9yKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnTE9PUF9NQVgnKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhmb3JOb2RlLnVwZGF0ZSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cblx0XHRcdFx0XHRyZXRBcnIucHVzaCgne1xcbicpO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCdpZiAoJyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdC5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goZm9yTm9kZS50ZXN0Lm9wZXJhdG9yKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS50ZXN0LnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJykge1xcbicpO1xuXHRcdFx0XHRcdGlmIChmb3JOb2RlLmJvZHkudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50Jykge1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBmb3JOb2RlLmJvZHkuYm9keS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5ib2R5LmJvZHlbaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUuYm9keSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnfSBlbHNlIHtcXG4nKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnYnJlYWs7XFxuJyk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgnfVxcbicpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgZGVjbGFyYXRpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShmb3JOb2RlLmluaXQuZGVjbGFyYXRpb25zKSk7XG5cdFx0XHRcdFx0dmFyIHVwZGF0ZUFyZ3VtZW50ID0gZm9yTm9kZS51cGRhdGUuYXJndW1lbnQ7XG5cdFx0XHRcdFx0aWYgKCFBcnJheS5pc0FycmF5KGRlY2xhcmF0aW9ucykgfHwgZGVjbGFyYXRpb25zLmxlbmd0aCA8IDEpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKHRoaXMuanNGdW5jdGlvblN0cmluZyk7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yOiBJbmNvbXBhdGlibGUgZm9yIGxvb3AgZGVjbGFyYXRpb24nKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAoZGVjbGFyYXRpb25zLmxlbmd0aCA+IDEpIHtcblx0XHRcdFx0XHRcdHZhciBpbml0QXJndW1lbnQgPSBudWxsO1xuXHRcdFx0XHRcdFx0Zm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZGVjbGFyYXRpb25zLmxlbmd0aDsgX2kyKyspIHtcblx0XHRcdFx0XHRcdFx0dmFyIGRlY2xhcmF0aW9uID0gZGVjbGFyYXRpb25zW19pMl07XG5cdFx0XHRcdFx0XHRcdGlmIChkZWNsYXJhdGlvbi5pZC5uYW1lID09PSB1cGRhdGVBcmd1bWVudC5uYW1lKSB7XG5cdFx0XHRcdFx0XHRcdFx0aW5pdEFyZ3VtZW50ID0gZGVjbGFyYXRpb247XG5cdFx0XHRcdFx0XHRcdFx0ZGVjbGFyYXRpb25zLnNwbGljZShfaTIsIDEpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdmbG9hdCAnKTtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZGVjbGFyYXRpb24sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnOycpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdmb3IgKGZsb2F0ICcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGluaXRBcmd1bWVudCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJzsnKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2ZvciAoJyk7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5pbml0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudGVzdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGZvck5vZGUudXBkYXRlLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJyknKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoZm9yTm9kZS5ib2R5LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aHJvdyB0aGlzLmFzdEVycm9yT3V0cHV0KCdJbnZhbGlkIGZvciBzdGF0ZW1lbnQnLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdFdoaWxlU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0V2hpbGVTdGF0ZW1lbnQod2hpbGVOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKHdoaWxlTm9kZS50eXBlICE9PSAnV2hpbGVTdGF0ZW1lbnQnKSB7XG5cdFx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ0ludmFsaWQgd2hpbGUgc3RhdG1lbnQnLCBhc3QsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldEFyci5wdXNoKCdmb3IgKGZsb2F0IGkgPSAwLjA7IGkgPCBMT09QX01BWDsgaSsrKSB7Jyk7XG5cdFx0XHRyZXRBcnIucHVzaCgnaWYgKCcpO1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKHdoaWxlTm9kZS50ZXN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKSB7XFxuJyk7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMod2hpbGVOb2RlLmJvZHksIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKCd9IGVsc2Uge1xcbicpO1xuXHRcdFx0cmV0QXJyLnB1c2goJ2JyZWFrO1xcbicpO1xuXHRcdFx0cmV0QXJyLnB1c2goJ31cXG4nKTtcblx0XHRcdHJldEFyci5wdXNoKCd9XFxuJyk7XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEFzc2lnbm1lbnRFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0QXNzaWdubWVudEV4cHJlc3Npb24oYXNzTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChhc3NOb2RlLm9wZXJhdG9yID09PSAnJT0nKSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhhc3NOb2RlLmxlZnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJz0nKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ21vZCgnKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzc05vZGUubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnLCcpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoYXNzTm9kZS5yaWdodCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzc05vZGUubGVmdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRyZXRBcnIucHVzaChhc3NOb2RlLm9wZXJhdG9yKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFzc05vZGUucmlnaHQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0RW1wdHlTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RFbXB0eVN0YXRlbWVudChlTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdEJsb2NrU3RhdGVtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0QmxvY2tTdGF0ZW1lbnQoYk5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgne1xcbicpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiTm9kZS5ib2R5Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhiTm9kZS5ib2R5W2ldLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0XHRyZXRBcnIucHVzaCgnfVxcbicpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0RXhwcmVzc2lvblN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdEV4cHJlc3Npb25TdGF0ZW1lbnQoZXNOb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0dGhpcy5hc3RHZW5lcmljKGVzTm9kZS5leHByZXNzaW9uLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnO1xcbicpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0VmFyaWFibGVEZWNsYXJhdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFZhcmlhYmxlRGVjbGFyYXRpb24odmFyZGVjTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCdmbG9hdCAnKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdmFyZGVjTm9kZS5kZWNsYXJhdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJywnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModmFyZGVjTm9kZS5kZWNsYXJhdGlvbnNbaV0sIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHRcdHJldEFyci5wdXNoKCc7Jyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RWYXJpYWJsZURlY2xhcmF0b3InLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RWYXJpYWJsZURlY2xhcmF0b3IoaXZhcmRlY05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMoaXZhcmRlY05vZGUuaWQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdGlmIChpdmFyZGVjTm9kZS5pbml0ICE9PSBudWxsKSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCc9Jyk7XG5cdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpdmFyZGVjTm9kZS5pbml0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RJZlN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdElmU3RhdGVtZW50KGlmTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCdpZiAoJyk7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLnRlc3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cdFx0XHRpZiAoaWZOb2RlLmNvbnNlcXVlbnQudHlwZSA9PT0gJ0Jsb2NrU3RhdGVtZW50Jykge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLmNvbnNlcXVlbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKCcge1xcbicpO1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLmNvbnNlcXVlbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ1xcbn1cXG4nKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGlmTm9kZS5hbHRlcm5hdGUpIHtcblx0XHRcdFx0cmV0QXJyLnB1c2goJ2Vsc2UgJyk7XG5cdFx0XHRcdGlmIChpZk5vZGUuYWx0ZXJuYXRlLnR5cGUgPT09ICdCbG9ja1N0YXRlbWVudCcpIHtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMoaWZOb2RlLmFsdGVybmF0ZSwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcge1xcbicpO1xuXHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhpZk5vZGUuYWx0ZXJuYXRlLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ1xcbn1cXG4nKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0QnJlYWtTdGF0ZW1lbnQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RCcmVha1N0YXRlbWVudChick5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRyZXRBcnIucHVzaCgnYnJlYWs7XFxuJyk7XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RDb250aW51ZVN0YXRlbWVudCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdENvbnRpbnVlU3RhdGVtZW50KGNyTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCdjb250aW51ZTtcXG4nKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdExvZ2ljYWxFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0TG9naWNhbEV4cHJlc3Npb24obG9nTm9kZSwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cdFx0XHR0aGlzLmFzdEdlbmVyaWMobG9nTm9kZS5sZWZ0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaChsb2dOb2RlLm9wZXJhdG9yKTtcblx0XHRcdHRoaXMuYXN0R2VuZXJpYyhsb2dOb2RlLnJpZ2h0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0VXBkYXRlRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFVwZGF0ZUV4cHJlc3Npb24odU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAodU5vZGUucHJlZml4KSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKHVOb2RlLm9wZXJhdG9yKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHVOb2RlLmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModU5vZGUuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2godU5vZGUub3BlcmF0b3IpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RVbmFyeUV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RVbmFyeUV4cHJlc3Npb24odU5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRpZiAodU5vZGUucHJlZml4KSB7XG5cdFx0XHRcdHJldEFyci5wdXNoKHVOb2RlLm9wZXJhdG9yKTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHVOb2RlLmFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aGlzLmFzdEdlbmVyaWModU5vZGUuYXJndW1lbnQsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0cmV0QXJyLnB1c2godU5vZGUub3BlcmF0b3IpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RUaGlzRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdFRoaXNFeHByZXNzaW9uKHROb2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0cmV0QXJyLnB1c2goJ3RoaXMnKTtcblx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FzdE1lbWJlckV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RNZW1iZXJFeHByZXNzaW9uKG1Ob2RlLCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKG1Ob2RlLmNvbXB1dGVkKSB7XG5cdFx0XHRcdGlmIChtTm9kZS5vYmplY3QudHlwZSA9PT0gJ0lkZW50aWZpZXInKSB7XG5cdFx0XHRcdFx0dmFyIHJlcU5hbWUgPSBtTm9kZS5vYmplY3QubmFtZTtcblx0XHRcdFx0XHR2YXIgZnVuY05hbWUgPSBmdW5jUGFyYW0uZnVuY3Rpb25OYW1lIHx8ICdrZXJuZWwnO1xuXHRcdFx0XHRcdHZhciBhc3N1bWVOb3RUZXh0dXJlID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoZnVuY1BhcmFtLnBhcmFtTmFtZXMpIHtcblx0XHRcdFx0XHRcdHZhciBpZHggPSBmdW5jUGFyYW0ucGFyYW1OYW1lcy5pbmRleE9mKHJlcU5hbWUpO1xuXHRcdFx0XHRcdFx0aWYgKGlkeCA+PSAwICYmIGZ1bmNQYXJhbS5wYXJhbVR5cGVzW2lkeF0gPT09ICdmbG9hdCcpIHtcblx0XHRcdFx0XHRcdFx0YXNzdW1lTm90VGV4dHVyZSA9IHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGFzc3VtZU5vdFRleHR1cmUpIHtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5vYmplY3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdbaW50KCcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLnByb3BlcnR5LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnKV0nKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ2dldCgnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5vYmplY3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCcsIHZlYzIoJyk7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUub2JqZWN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnU2l6ZVswXSwnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5vYmplY3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdTaXplWzFdKSwgdmVjMygnKTtcblx0XHRcdFx0XHRcdHRoaXMuYXN0R2VuZXJpYyhtTm9kZS5vYmplY3QsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRcdHJldEFyci5wdXNoKCdEaW1bMF0sJyk7XG5cdFx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUub2JqZWN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnRGltWzFdLCcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLm9iamVjdCwgcmV0QXJyLCBmdW5jUGFyYW0pO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJ0RpbVsyXScpO1xuXHRcdFx0XHRcdFx0cmV0QXJyLnB1c2goJyksICcpO1xuXHRcdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKG1Ob2RlLnByb3BlcnR5LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnKScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUub2JqZWN0LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0dmFyIGxhc3QgPSByZXRBcnIucG9wKCk7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJywnKTtcblx0XHRcdFx0XHR0aGlzLmFzdEdlbmVyaWMobU5vZGUucHJvcGVydHksIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdFx0XHRyZXRBcnIucHVzaChsYXN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHR2YXIgdW5yb2xsZWQgPSB0aGlzLmFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwobU5vZGUpO1xuXHRcdFx0XHR2YXIgdW5yb2xsZWRfbGMgPSB1bnJvbGxlZC50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRcdGlmICh1bnJvbGxlZC5pbmRleE9mKGNvbnN0YW50c1ByZWZpeCkgPT09IDApIHtcblx0XHRcdFx0XHR1bnJvbGxlZCA9ICdjb25zdGFudHNfJyArIHVucm9sbGVkLnNsaWNlKGNvbnN0YW50c1ByZWZpeC5sZW5ndGgpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKHVucm9sbGVkX2xjID09PSAndGhpcy50aHJlYWQueCcpIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndGhyZWFkSWQueCcpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHVucm9sbGVkX2xjID09PSAndGhpcy50aHJlYWQueScpIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndGhyZWFkSWQueScpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHVucm9sbGVkX2xjID09PSAndGhpcy50aHJlYWQueicpIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndGhyZWFkSWQueicpO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHVucm9sbGVkX2xjID09PSAndGhpcy5vdXRwdXQueCcpIHtcblx0XHRcdFx0XHRyZXRBcnIucHVzaCgndU91dHB1dERpbS54Jyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodW5yb2xsZWRfbGMgPT09ICd0aGlzLm91dHB1dC55Jykge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCd1T3V0cHV0RGltLnknKTtcblx0XHRcdFx0fSBlbHNlIGlmICh1bnJvbGxlZF9sYyA9PT0gJ3RoaXMub3V0cHV0LnonKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJ3VPdXRwdXREaW0ueicpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKHVucm9sbGVkKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhc3RTZXF1ZW5jZUV4cHJlc3Npb24nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBhc3RTZXF1ZW5jZUV4cHJlc3Npb24oc05vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHNOb2RlLmV4cHJlc3Npb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcsJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHNOb2RlLmV4cHJlc3Npb25zLCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0TWVtYmVyRXhwcmVzc2lvblVucm9sbChhc3QsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGFzdC50eXBlID09PSAnSWRlbnRpZmllcicpIHtcblx0XHRcdFx0cmV0dXJuIGFzdC5uYW1lO1xuXHRcdFx0fSBlbHNlIGlmIChhc3QudHlwZSA9PT0gJ1RoaXNFeHByZXNzaW9uJykge1xuXHRcdFx0XHRyZXR1cm4gJ3RoaXMnO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoYXN0LnR5cGUgPT09ICdNZW1iZXJFeHByZXNzaW9uJykge1xuXHRcdFx0XHRpZiAoYXN0Lm9iamVjdCAmJiBhc3QucHJvcGVydHkpIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5hc3RNZW1iZXJFeHByZXNzaW9uVW5yb2xsKGFzdC5vYmplY3QsIGZ1bmNQYXJhbSkgKyAnLicgKyB0aGlzLmFzdE1lbWJlckV4cHJlc3Npb25VbnJvbGwoYXN0LnByb3BlcnR5LCBmdW5jUGFyYW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRocm93IHRoaXMuYXN0RXJyb3JPdXRwdXQoJ1Vua25vd24gQ2FsbEV4cHJlc3Npb25fdW5yb2xsJywgYXN0LCBmdW5jUGFyYW0pO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdhc3RDYWxsRXhwcmVzc2lvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFzdENhbGxFeHByZXNzaW9uKGFzdCwgcmV0QXJyLCBmdW5jUGFyYW0pIHtcblx0XHRcdGlmIChhc3QuY2FsbGVlKSB7XG5cdFx0XHRcdHZhciBmdW5jTmFtZSA9IHRoaXMuYXN0TWVtYmVyRXhwcmVzc2lvblVucm9sbChhc3QuY2FsbGVlKTtcblxuXHRcdFx0XHRpZiAoZnVuY05hbWUuaW5kZXhPZihqc01hdGhQcmVmaXgpID09PSAwKSB7XG5cdFx0XHRcdFx0ZnVuY05hbWUgPSBmdW5jTmFtZS5zbGljZShqc01hdGhQcmVmaXgubGVuZ3RoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmdW5jTmFtZS5pbmRleE9mKGxvY2FsUHJlZml4KSA9PT0gMCkge1xuXHRcdFx0XHRcdGZ1bmNOYW1lID0gZnVuY05hbWUuc2xpY2UobG9jYWxQcmVmaXgubGVuZ3RoKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmdW5jUGFyYW0uY2FsbGVkRnVuY3Rpb25zLmluZGV4T2YoZnVuY05hbWUpIDwgMCkge1xuXHRcdFx0XHRcdGZ1bmNQYXJhbS5jYWxsZWRGdW5jdGlvbnMucHVzaChmdW5jTmFtZSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCFmdW5jUGFyYW0uaGFzT3duUHJvcGVydHkoJ2Z1bmNOYW1lJykpIHtcblx0XHRcdFx0XHRmdW5jUGFyYW0uY2FsbGVkRnVuY3Rpb25zQXJndW1lbnRzW2Z1bmNOYW1lXSA9IFtdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGZ1bmN0aW9uQXJndW1lbnRzID0gW107XG5cdFx0XHRcdGZ1bmNQYXJhbS5jYWxsZWRGdW5jdGlvbnNBcmd1bWVudHNbZnVuY05hbWVdLnB1c2goZnVuY3Rpb25Bcmd1bWVudHMpO1xuXG5cdFx0XHRcdHJldEFyci5wdXNoKGZ1bmNOYW1lKTtcblxuXHRcdFx0XHRyZXRBcnIucHVzaCgnKCcpO1xuXG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXN0LmFyZ3VtZW50cy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRcdHZhciBhcmd1bWVudCA9IGFzdC5hcmd1bWVudHNbaV07XG5cdFx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0XHRyZXRBcnIucHVzaCgnLCAnKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKGFyZ3VtZW50LCByZXRBcnIsIGZ1bmNQYXJhbSk7XG5cdFx0XHRcdFx0aWYgKGFyZ3VtZW50LnR5cGUgPT09ICdJZGVudGlmaWVyJykge1xuXHRcdFx0XHRcdFx0dmFyIHBhcmFtSW5kZXggPSBmdW5jUGFyYW0ucGFyYW1OYW1lcy5pbmRleE9mKGFyZ3VtZW50Lm5hbWUpO1xuXHRcdFx0XHRcdFx0aWYgKHBhcmFtSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0XHRcdGZ1bmN0aW9uQXJndW1lbnRzLnB1c2gobnVsbCk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRmdW5jdGlvbkFyZ3VtZW50cy5wdXNoKHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lOiBhcmd1bWVudC5uYW1lLFxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IGZ1bmNQYXJhbS5wYXJhbVR5cGVzW3BhcmFtSW5kZXhdXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRmdW5jdGlvbkFyZ3VtZW50cy5wdXNoKG51bGwpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cblx0XHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHRcdH1cblxuXHRcdFx0dGhyb3cgdGhpcy5hc3RFcnJvck91dHB1dCgnVW5rbm93biBDYWxsRXhwcmVzc2lvbicsIGFzdCwgZnVuY1BhcmFtKTtcblxuXHRcdFx0cmV0dXJuIHJldEFycjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnYXN0QXJyYXlFeHByZXNzaW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0QXJyYXlFeHByZXNzaW9uKGFyck5vZGUsIHJldEFyciwgZnVuY1BhcmFtKSB7XG5cdFx0XHR2YXIgYXJyTGVuID0gYXJyTm9kZS5lbGVtZW50cy5sZW5ndGg7XG5cblx0XHRcdHJldEFyci5wdXNoKCdmbG9hdFsnICsgYXJyTGVuICsgJ10oJyk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyckxlbjsgKytpKSB7XG5cdFx0XHRcdGlmIChpID4gMCkge1xuXHRcdFx0XHRcdHJldEFyci5wdXNoKCcsICcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhciBzdWJOb2RlID0gYXJyTm9kZS5lbGVtZW50c1tpXTtcblx0XHRcdFx0dGhpcy5hc3RHZW5lcmljKHN1Yk5vZGUsIHJldEFyciwgZnVuY1BhcmFtKTtcblx0XHRcdH1cblx0XHRcdHJldEFyci5wdXNoKCcpJyk7XG5cblx0XHRcdHJldHVybiByZXRBcnI7XG5cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0RnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRGdW5jdGlvblByb3RvdHlwZVN0cmluZygpIHtcblx0XHRcdGlmICh0aGlzLndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMud2ViR2xGdW5jdGlvblByb3RvdHlwZVN0cmluZztcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzLndlYkdsRnVuY3Rpb25Qcm90b3R5cGVTdHJpbmcgPSB0aGlzLmdlbmVyYXRlKCk7XG5cdFx0fVxuXHR9LCB7XG5cdFx0a2V5OiAnYnVpbGQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBidWlsZCgpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldEZ1bmN0aW9uUHJvdG90eXBlU3RyaW5nKCkubGVuZ3RoID4gMDtcblx0XHR9XG5cdH1dLCBbe1xuXHRcdGtleTogJ2FzdEZ1bmN0aW9uUHJvdG90eXBlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYXN0RnVuY3Rpb25Qcm90b3R5cGUoYXN0LCByZXRBcnIsIGZ1bmNQYXJhbSkge1xuXHRcdFx0aWYgKGZ1bmNQYXJhbS5pc1Jvb3RLZXJuZWwgfHwgZnVuY1BhcmFtLmlzU3ViS2VybmVsKSB7XG5cdFx0XHRcdHJldHVybiByZXRBcnI7XG5cdFx0XHR9XG5cblx0XHRcdHJldEFyci5wdXNoKGZ1bmNQYXJhbS5yZXR1cm5UeXBlKTtcblx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0uZnVuY3Rpb25OYW1lKTtcblx0XHRcdHJldEFyci5wdXNoKCcoJyk7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZnVuY1BhcmFtLnBhcmFtTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0aWYgKGkgPiAwKSB7XG5cdFx0XHRcdFx0cmV0QXJyLnB1c2goJywgJyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0ucGFyYW1UeXBlc1tpXSk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCcgJyk7XG5cdFx0XHRcdHJldEFyci5wdXNoKCd1c2VyXycpO1xuXHRcdFx0XHRyZXRBcnIucHVzaChmdW5jUGFyYW0ucGFyYW1OYW1lc1tpXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldEFyci5wdXNoKCcpO1xcbicpO1xuXG5cdFx0XHRyZXR1cm4gcmV0QXJyO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBXZWJHTEZ1bmN0aW9uTm9kZTtcbn0oRnVuY3Rpb25Ob2RlQmFzZSk7XG5cbmZ1bmN0aW9uIGlzSWRlbnRpZmllcktlcm5lbFBhcmFtKHBhcmFtTmFtZSwgYXN0LCBmdW5jUGFyYW0pIHtcblx0cmV0dXJuIGZ1bmNQYXJhbS5wYXJhbU5hbWVzLmluZGV4T2YocGFyYW1OYW1lKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZUluZGVudGlmaWVyVHlwZShwYXJhbU5hbWUsIGV4cGVjdGVkVHlwZSwgYXN0LCBmdW5jUGFyYW0pIHtcblx0dmFyIHN0YXJ0ID0gYXN0LmxvYy5zdGFydDtcblxuXHRpZiAoIWlzSWRlbnRpZmllcktlcm5lbFBhcmFtKHBhcmFtTmFtZSwgZnVuY1BhcmFtKSAmJiBleHBlY3RlZFR5cGUgIT09ICdmbG9hdCcpIHtcblx0XHR0aHJvdyAnRXJyb3IgdW5leHBlY3RlZCBpZGVudGlmaWVyICcgKyBwYXJhbU5hbWUgKyAnIG9uIGxpbmUgJyArIHN0YXJ0LmxpbmU7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIGFjdHVhbFR5cGUgPSBmdW5jUGFyYW0ucGFyYW1UeXBlc1tmdW5jUGFyYW0ucGFyYW1OYW1lcy5pbmRleE9mKHBhcmFtTmFtZSldO1xuXHRcdGlmIChhY3R1YWxUeXBlICE9PSBleHBlY3RlZFR5cGUpIHtcblx0XHRcdHRocm93ICdFcnJvciB1bmV4cGVjdGVkIGlkZW50aWZpZXIgJyArIHBhcmFtTmFtZSArICcgb24gbGluZSAnICsgc3RhcnQubGluZTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gd2ViR2xSZWdleE9wdGltaXplKGluU3RyKSB7XG5cdHJldHVybiBpblN0ci5yZXBsYWNlKERFQ09ERTMyX0VOQ09ERTMyLCAnKCgnKS5yZXBsYWNlKEVOQ09ERTMyX0RFQ09ERTMyLCAnKCgnKTtcbn1cbn0se1wiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4vZnVuY3Rpb24tbm9kZS1iYXNlXCI6N31dLDEzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vY29yZS91dGlscycpO1xudmFyIGtlcm5lbFJ1blNob3J0Y3V0ID0gcmVxdWlyZSgnLi4va2VybmVsLXJ1bi1zaG9ydGN1dCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChncHVLZXJuZWwsIG5hbWUpIHtcbiAgcmV0dXJuICcoKSA9PiB7XFxuICAgICcgKyBrZXJuZWxSdW5TaG9ydGN1dC50b1N0cmluZygpICsgJztcXG4gICAgY29uc3QgdXRpbHMgPSB7XFxuICAgICAgYWxsUHJvcGVydGllc09mOiBmdW5jdGlvbiAnICsgdXRpbHMuYWxsUHJvcGVydGllc09mLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGNsb25lOiBmdW5jdGlvbiAnICsgdXRpbHMuY2xvbmUudG9TdHJpbmcoKSArICcsXFxuICAgICAgc3BsaXRBcnJheTogZnVuY3Rpb24gJyArIHV0aWxzLnNwbGl0QXJyYXkudG9TdHJpbmcoKSArICcsXFxuICAgICAgZ2V0QXJndW1lbnRUeXBlOiBmdW5jdGlvbiAnICsgdXRpbHMuZ2V0QXJndW1lbnRUeXBlLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGdldERpbWVuc2lvbnM6IGZ1bmN0aW9uICcgKyB1dGlscy5nZXREaW1lbnNpb25zLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGRpbVRvVGV4U2l6ZTogZnVuY3Rpb24gJyArIHV0aWxzLmRpbVRvVGV4U2l6ZS50b1N0cmluZygpICsgJyxcXG4gICAgICBjb3B5RmxhdHRlbjogZnVuY3Rpb24gJyArIHV0aWxzLmNvcHlGbGF0dGVuLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIGZsYXR0ZW46IGZ1bmN0aW9uICcgKyB1dGlscy5mbGF0dGVuLnRvU3RyaW5nKCkgKyAnLFxcbiAgICAgIHN5c3RlbUVuZGlhbm5lc3M6IFxcJycgKyB1dGlscy5zeXN0ZW1FbmRpYW5uZXNzKCkgKyAnXFwnLFxcbiAgICAgIGluaXRXZWJHbDogZnVuY3Rpb24gJyArIHV0aWxzLmluaXRXZWJHbC50b1N0cmluZygpICsgJyxcXG4gICAgICBpc0FycmF5OiBmdW5jdGlvbiAnICsgdXRpbHMuaXNBcnJheS50b1N0cmluZygpICsgJ1xcbiAgICB9O1xcbiAgICBjbGFzcyAnICsgKG5hbWUgfHwgJ0tlcm5lbCcpICsgJyB7XFxuICAgICAgY29uc3RydWN0b3IoKSB7XFxuICAgICAgICB0aGlzLmFyZ3VtZW50c0xlbmd0aCA9IDA7XFxuICAgICAgICB0aGlzLl9jYW52YXMgPSBudWxsO1xcbiAgICAgICAgdGhpcy5fd2ViR2wgPSBudWxsO1xcbiAgICAgICAgdGhpcy5idWlsdCA9IGZhbHNlO1xcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbnVsbDtcXG4gICAgICAgIHRoaXMucGFyYW1OYW1lcyA9ICcgKyBKU09OLnN0cmluZ2lmeShncHVLZXJuZWwucGFyYW1OYW1lcykgKyAnO1xcbiAgICAgICAgdGhpcy5wYXJhbVR5cGVzID0gJyArIEpTT04uc3RyaW5naWZ5KGdwdUtlcm5lbC5wYXJhbVR5cGVzKSArICc7XFxuICAgICAgICB0aGlzLnRleFNpemUgPSAnICsgSlNPTi5zdHJpbmdpZnkoZ3B1S2VybmVsLnRleFNpemUpICsgJztcXG4gICAgICAgIHRoaXMub3V0cHV0ID0gJyArIEpTT04uc3RyaW5naWZ5KGdwdUtlcm5lbC5vdXRwdXQpICsgJztcXG4gICAgICAgIHRoaXMuY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nID0gYCcgKyBncHVLZXJuZWwuY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nICsgJ2A7XFxuXFx0XFx0ICAgIHRoaXMuY29tcGlsZWRWZXJ0U2hhZGVyU3RyaW5nID0gYCcgKyBncHVLZXJuZWwuY29tcGlsZWRWZXJ0U2hhZGVyU3RyaW5nICsgJ2A7XFxuXFx0XFx0ICAgIHRoaXMucHJvZ3JhbVVuaWZvcm1Mb2NhdGlvbkNhY2hlID0ge307XFxuXFx0XFx0ICAgIHRoaXMudGV4dHVyZUNhY2hlID0ge307XFxuXFx0XFx0ICAgIHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXMgPSBudWxsO1xcbiAgICAgIH1cXG4gICAgICAnICsgZ3B1S2VybmVsLl9nZXRGcmFnU2hhZGVyU3RyaW5nLnRvU3RyaW5nKCkgKyAnXFxuICAgICAgJyArIGdwdUtlcm5lbC5fZ2V0VmVydFNoYWRlclN0cmluZy50b1N0cmluZygpICsgJ1xcbiAgICAgIHZhbGlkYXRlT3B0aW9ucygpIHt9XFxuICAgICAgc2V0dXBQYXJhbXMoKSB7fVxcbiAgICAgIHNldENhbnZhcyhjYW52YXMpIHsgdGhpcy5fY2FudmFzID0gY2FudmFzOyByZXR1cm4gdGhpczsgfVxcbiAgICAgIHNldFdlYkdsKHdlYkdsKSB7IHRoaXMuX3dlYkdsID0gd2ViR2w7IHJldHVybiB0aGlzOyB9XFxuICAgICAgJyArIGdwdUtlcm5lbC5nZXRVbmlmb3JtTG9jYXRpb24udG9TdHJpbmcoKSArICdcXG4gICAgICAnICsgZ3B1S2VybmVsLnNldHVwUGFyYW1zLnRvU3RyaW5nKCkgKyAnXFxuICAgICAgJyArIGdwdUtlcm5lbC5idWlsZC50b1N0cmluZygpICsgJ1xcblxcdFxcdCAgJyArIGdwdUtlcm5lbC5ydW4udG9TdHJpbmcoKSArICdcXG5cXHRcXHQgICcgKyBncHVLZXJuZWwuX2FkZEFyZ3VtZW50LnRvU3RyaW5nKCkgKyAnXFxuXFx0XFx0ICAnICsgZ3B1S2VybmVsLmdldEFyZ3VtZW50VGV4dHVyZS50b1N0cmluZygpICsgJ1xcblxcdFxcdCAgJyArIGdwdUtlcm5lbC5nZXRUZXh0dXJlQ2FjaGUudG9TdHJpbmcoKSArICdcXG5cXHRcXHQgICcgKyBncHVLZXJuZWwuZ2V0T3V0cHV0VGV4dHVyZS50b1N0cmluZygpICsgJ1xcblxcdFxcdCAgJyArIGdwdUtlcm5lbC5yZW5kZXJPdXRwdXQudG9TdHJpbmcoKSArICdcXG4gICAgfTtcXG4gICAgcmV0dXJuIGtlcm5lbFJ1blNob3J0Y3V0KG5ldyBLZXJuZWwoKSk7XFxuICB9Oyc7XG59O1xufSx7XCIuLi8uLi9jb3JlL3V0aWxzXCI6MjQsXCIuLi9rZXJuZWwtcnVuLXNob3J0Y3V0XCI6OX1dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgZnMgPSByZXF1aXJlKCdmcycpO1xudmFyIEtlcm5lbEJhc2UgPSByZXF1aXJlKCcuLi9rZXJuZWwtYmFzZScpO1xudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vLi4vY29yZS91dGlscycpO1xudmFyIFRleHR1cmUgPSByZXF1aXJlKCcuLi8uLi9jb3JlL3RleHR1cmUnKTtcbnZhciBmcmFnU2hhZGVyU3RyaW5nID0gcmVxdWlyZSgnLi9zaGFkZXItZnJhZycpO1xudmFyIHZlcnRTaGFkZXJTdHJpbmcgPSByZXF1aXJlKCcuL3NoYWRlci12ZXJ0Jyk7XG52YXIga2VybmVsU3RyaW5nID0gcmVxdWlyZSgnLi9rZXJuZWwtc3RyaW5nJyk7XG52YXIgY2FudmFzZXMgPSBbXTtcbnZhciBtYXhUZXhTaXplcyA9IHt9O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX0tlcm5lbEJhc2UpIHtcblx0X2luaGVyaXRzKFdlYkdMS2VybmVsLCBfS2VybmVsQmFzZSk7XG5cblx0ZnVuY3Rpb24gV2ViR0xLZXJuZWwoZm5TdHJpbmcsIHNldHRpbmdzKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYkdMS2VybmVsKTtcblxuXHRcdHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChXZWJHTEtlcm5lbC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFdlYkdMS2VybmVsKSkuY2FsbCh0aGlzLCBmblN0cmluZywgc2V0dGluZ3MpKTtcblxuXHRcdF90aGlzLnRleHR1cmVDYWNoZSA9IHt9O1xuXHRcdF90aGlzLnRocmVhZERpbSA9IHt9O1xuXHRcdF90aGlzLnByb2dyYW1Vbmlmb3JtTG9jYXRpb25DYWNoZSA9IHt9O1xuXHRcdF90aGlzLmZyYW1lYnVmZmVyID0gbnVsbDtcblxuXHRcdF90aGlzLmJ1ZmZlciA9IG51bGw7XG5cdFx0X3RoaXMucHJvZ3JhbSA9IG51bGw7XG5cdFx0X3RoaXMub3V0cHV0VG9UZXh0dXJlID0gc2V0dGluZ3Mub3V0cHV0VG9UZXh0dXJlO1xuXHRcdF90aGlzLmVuZGlhbm5lc3MgPSB1dGlscy5zeXN0ZW1FbmRpYW5uZXNzKCk7XG5cdFx0X3RoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXMgPSBudWxsO1xuXHRcdF90aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPSBudWxsO1xuXHRcdF90aGlzLnBhcmFtVHlwZXMgPSBudWxsO1xuXHRcdF90aGlzLmFyZ3VtZW50c0xlbmd0aCA9IDA7XG5cdFx0X3RoaXMuZXh0ID0gbnVsbDtcblx0XHRfdGhpcy5jb21waWxlZEZyYWdTaGFkZXJTdHJpbmcgPSBudWxsO1xuXHRcdF90aGlzLmNvbXBpbGVkVmVydFNoYWRlclN0cmluZyA9IG51bGw7XG5cdFx0X3RoaXMuZXh0RHJhd0J1ZmZlcnNNYXAgPSBudWxsO1xuXHRcdF90aGlzLm91dHB1dFRleHR1cmUgPSBudWxsO1xuXHRcdF90aGlzLm1heFRleFNpemUgPSBudWxsO1xuXHRcdGlmICghX3RoaXMuX3dlYkdsKSBfdGhpcy5fd2ViR2wgPSB1dGlscy5pbml0V2ViR2woX3RoaXMuZ2V0Q2FudmFzKCkpO1xuXHRcdHJldHVybiBfdGhpcztcblx0fVxuXG5cblxuXHRfY3JlYXRlQ2xhc3MoV2ViR0xLZXJuZWwsIFt7XG5cdFx0a2V5OiAndmFsaWRhdGVPcHRpb25zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKCkge1xuXHRcdFx0dmFyIGlzUmVhZFBpeGVsID0gdXRpbHMuaXNGbG9hdFJlYWRQaXhlbHNTdXBwb3J0ZWQoKTtcblx0XHRcdGlmICh0aGlzLmZsb2F0VGV4dHVyZXMgPT09IHRydWUgJiYgIXV0aWxzLk9FU190ZXh0dXJlX2Zsb2F0KSB7XG5cdFx0XHRcdHRocm93ICdGbG9hdCB0ZXh0dXJlcyBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXInO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmZsb2F0T3V0cHV0ID09PSB0cnVlICYmIHRoaXMuZmxvYXRPdXRwdXRGb3JjZSAhPT0gdHJ1ZSAmJiAhaXNSZWFkUGl4ZWwpIHtcblx0XHRcdFx0dGhyb3cgJ0Zsb2F0IHRleHR1cmUgb3V0cHV0cyBhcmUgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGJyb3dzZXInO1xuXHRcdFx0fSBlbHNlIGlmICh0aGlzLmZsb2F0VGV4dHVyZXMgPT09IG51bGwgJiYgIWlzUmVhZFBpeGVsICYmICF0aGlzLmdyYXBoaWNhbCkge1xuXHRcdFx0XHR0aGlzLmZsb2F0VGV4dHVyZXMgPSB0cnVlO1xuXHRcdFx0XHR0aGlzLmZsb2F0T3V0cHV0ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdGhpcy5vdXRwdXQgfHwgdGhpcy5vdXRwdXQubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoICE9PSAxKSB7XG5cdFx0XHRcdFx0dGhyb3cgJ0F1dG8gb3V0cHV0IG9ubHkgc3VwcG9ydGVkIGZvciBrZXJuZWxzIHdpdGggb25seSBvbmUgaW5wdXQnO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIGFyZ1R5cGUgPSB1dGlscy5nZXRBcmd1bWVudFR5cGUoYXJndW1lbnRzWzBdKTtcblx0XHRcdFx0aWYgKGFyZ1R5cGUgPT09ICdBcnJheScpIHtcblx0XHRcdFx0XHR0aGlzLm91dHB1dCA9IHV0aWxzLmdldERpbWVuc2lvbnMoYXJnVHlwZSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoYXJnVHlwZSA9PT0gJ1RleHR1cmUnKSB7XG5cdFx0XHRcdFx0dGhpcy5vdXRwdXQgPSBhcmd1bWVudHNbMF0ub3V0cHV0O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93ICdBdXRvIG91dHB1dCBub3Qgc3VwcG9ydGVkIGZvciBpbnB1dCB0eXBlOiAnICsgYXJnVHlwZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLnRleFNpemUgPSB1dGlscy5kaW1Ub1RleFNpemUoe1xuXHRcdFx0XHRmbG9hdFRleHR1cmVzOiB0aGlzLmZsb2F0VGV4dHVyZXMsXG5cdFx0XHRcdGZsb2F0T3V0cHV0OiB0aGlzLmZsb2F0T3V0cHV0XG5cdFx0XHR9LCB0aGlzLm91dHB1dCwgdHJ1ZSk7XG5cblx0XHRcdGlmICh0aGlzLmdyYXBoaWNhbCkge1xuXHRcdFx0XHRpZiAodGhpcy5vdXRwdXQubGVuZ3RoICE9PSAyKSB7XG5cdFx0XHRcdFx0dGhyb3cgJ091dHB1dCBtdXN0IGhhdmUgMiBkaW1lbnNpb25zIG9uIGdyYXBoaWNhbCBtb2RlJztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICh0aGlzLmZsb2F0T3V0cHV0KSB7XG5cdFx0XHRcdFx0dGhyb3cgJ0Nhbm5vdCB1c2UgZ3JhcGhpY2FsIG1vZGUgYW5kIGZsb2F0IG91dHB1dCBhdCB0aGUgc2FtZSB0aW1lJztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMudGV4U2l6ZSA9IHV0aWxzLmNsb25lKHRoaXMub3V0cHV0KTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5mbG9hdE91dHB1dCA9PT0gdW5kZWZpbmVkICYmIHV0aWxzLk9FU190ZXh0dXJlX2Zsb2F0KSB7XG5cdFx0XHRcdHRoaXMuZmxvYXRPdXRwdXQgPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ3VwZGF0ZU1heFRleFNpemUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVNYXhUZXhTaXplKCkge1xuXHRcdFx0dmFyIHRleFNpemUgPSB0aGlzLnRleFNpemU7XG5cdFx0XHR2YXIgY2FudmFzID0gdGhpcy5fY2FudmFzO1xuXHRcdFx0aWYgKHRoaXMubWF4VGV4U2l6ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgY2FudmFzSW5kZXggPSBjYW52YXNlcy5pbmRleE9mKGNhbnZhcyk7XG5cdFx0XHRcdGlmIChjYW52YXNJbmRleCA9PT0gLTEpIHtcblx0XHRcdFx0XHRjYW52YXNJbmRleCA9IGNhbnZhc2VzLmxlbmd0aDtcblx0XHRcdFx0XHRjYW52YXNlcy5wdXNoKGNhbnZhcyk7XG5cdFx0XHRcdFx0bWF4VGV4U2l6ZXNbY2FudmFzSW5kZXhdID0gW3RleFNpemVbMF0sIHRleFNpemVbMV1dO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMubWF4VGV4U2l6ZSA9IG1heFRleFNpemVzW2NhbnZhc0luZGV4XTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLm1heFRleFNpemVbMF0gPCB0ZXhTaXplWzBdKSB7XG5cdFx0XHRcdHRoaXMubWF4VGV4U2l6ZVswXSA9IHRleFNpemVbMF07XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5tYXhUZXhTaXplWzFdIDwgdGV4U2l6ZVsxXSkge1xuXHRcdFx0XHR0aGlzLm1heFRleFNpemVbMV0gPSB0ZXhTaXplWzFdO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdidWlsZCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGJ1aWxkKCkge1xuXHRcdFx0dGhpcy52YWxpZGF0ZU9wdGlvbnMoKTtcblx0XHRcdHRoaXMuc2V0dXBQYXJhbXMoYXJndW1lbnRzKTtcblx0XHRcdHRoaXMudXBkYXRlTWF4VGV4U2l6ZSgpO1xuXHRcdFx0dmFyIHRleFNpemUgPSB0aGlzLnRleFNpemU7XG5cdFx0XHR2YXIgZ2wgPSB0aGlzLl93ZWJHbDtcblx0XHRcdHZhciBjYW52YXMgPSB0aGlzLl9jYW52YXM7XG5cdFx0XHRnbC5lbmFibGUoZ2wuU0NJU1NPUl9URVNUKTtcblx0XHRcdGdsLnZpZXdwb3J0KDAsIDAsIHRoaXMubWF4VGV4U2l6ZVswXSwgdGhpcy5tYXhUZXhTaXplWzFdKTtcbiAgICAgIC8vIFRPRE8gZWRpdGVkIHRvIGZpeCBzdXNwZWN0ZWQgYnVnXG5cdFx0XHQvL2NhbnZhcy53aWR0aCA9IHRoaXMubWF4VGV4U2l6ZVswXTtcblx0XHRcdC8vY2FudmFzLmhlaWdodCA9IHRoaXMubWF4VGV4U2l6ZVsxXTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IHRoaXMub3V0cHV0WzBdO1xuICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMub3V0cHV0WzFdO1xuXHRcdFx0dmFyIHRocmVhZERpbSA9IHRoaXMudGhyZWFkRGltID0gdXRpbHMuY2xvbmUodGhpcy5vdXRwdXQpO1xuXHRcdFx0d2hpbGUgKHRocmVhZERpbS5sZW5ndGggPCAzKSB7XG5cdFx0XHRcdHRocmVhZERpbS5wdXNoKDEpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGhpcy5mdW5jdGlvbkJ1aWxkZXIpIHRoaXMuX2FkZEtlcm5lbHMoKTtcblxuXHRcdFx0dmFyIGNvbXBpbGVkVmVydFNoYWRlclN0cmluZyA9IHRoaXMuX2dldFZlcnRTaGFkZXJTdHJpbmcoYXJndW1lbnRzKTtcblx0XHRcdHZhciB2ZXJ0U2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKGdsLlZFUlRFWF9TSEFERVIpO1xuXHRcdFx0Z2wuc2hhZGVyU291cmNlKHZlcnRTaGFkZXIsIGNvbXBpbGVkVmVydFNoYWRlclN0cmluZyk7XG5cdFx0XHRnbC5jb21waWxlU2hhZGVyKHZlcnRTaGFkZXIpO1xuXG5cdFx0XHR2YXIgY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nID0gdGhpcy5fZ2V0RnJhZ1NoYWRlclN0cmluZyhhcmd1bWVudHMpO1xuXHRcdFx0dmFyIGZyYWdTaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoZ2wuRlJBR01FTlRfU0hBREVSKTtcblx0XHRcdGdsLnNoYWRlclNvdXJjZShmcmFnU2hhZGVyLCBjb21waWxlZEZyYWdTaGFkZXJTdHJpbmcpO1xuXHRcdFx0Z2wuY29tcGlsZVNoYWRlcihmcmFnU2hhZGVyKTtcblxuXHRcdFx0aWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIodmVydFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGNvbXBpbGVkVmVydFNoYWRlclN0cmluZyk7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIGNvbXBpbGluZyB0aGUgc2hhZGVyczogJyArIGdsLmdldFNoYWRlckluZm9Mb2codmVydFNoYWRlcikpO1xuXHRcdFx0XHR0aHJvdyAnRXJyb3IgY29tcGlsaW5nIHZlcnRleCBzaGFkZXInO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ1NoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKGNvbXBpbGVkRnJhZ1NoYWRlclN0cmluZyk7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0FuIGVycm9yIG9jY3VycmVkIGNvbXBpbGluZyB0aGUgc2hhZGVyczogJyArIGdsLmdldFNoYWRlckluZm9Mb2coZnJhZ1NoYWRlcikpO1xuXHRcdFx0XHR0aHJvdyAnRXJyb3IgY29tcGlsaW5nIGZyYWdtZW50IHNoYWRlcic7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aGlzLmRlYnVnKSB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKCdPcHRpb25zOicpO1xuXHRcdFx0XHRjb25zb2xlLmRpcih0aGlzKTtcblx0XHRcdFx0Y29uc29sZS5sb2coJ0dMU0wgU2hhZGVyIE91dHB1dDonKTtcblx0XHRcdFx0Y29uc29sZS5sb2coY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHByb2dyYW0gPSB0aGlzLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cdFx0XHRnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydFNoYWRlcik7XG5cdFx0XHRnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgZnJhZ1NoYWRlcik7XG5cdFx0XHRnbC5saW5rUHJvZ3JhbShwcm9ncmFtKTtcblx0XHRcdHRoaXMuZnJhbWVidWZmZXIgPSBnbC5jcmVhdGVGcmFtZWJ1ZmZlcigpO1xuXHRcdFx0dGhpcy5mcmFtZWJ1ZmZlci53aWR0aCA9IHRleFNpemVbMF07XG5cdFx0XHR0aGlzLmZyYW1lYnVmZmVyLmhlaWdodCA9IHRleFNpemVbMV07XG5cblx0XHRcdHZhciB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoWy0xLCAtMSwgMSwgLTEsIC0xLCAxLCAxLCAxXSk7XG5cdFx0XHR2YXIgdGV4Q29vcmRzID0gbmV3IEZsb2F0MzJBcnJheShbMCwgMCwgMSwgMCwgMCwgMSwgMSwgMV0pO1xuXG5cdFx0XHR2YXIgdGV4Q29vcmRPZmZzZXQgPSB2ZXJ0aWNlcy5ieXRlTGVuZ3RoO1xuXG5cdFx0XHR2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XG5cdFx0XHRpZiAoIWJ1ZmZlcikge1xuXHRcdFx0XHRidWZmZXIgPSB0aGlzLmJ1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xuXHRcdFx0XHRnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgYnVmZmVyKTtcblx0XHRcdFx0Z2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIHZlcnRpY2VzLmJ5dGVMZW5ndGggKyB0ZXhDb29yZHMuYnl0ZUxlbmd0aCwgZ2wuU1RBVElDX0RSQVcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Z2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XG5cdFx0XHR9XG5cblx0XHRcdGdsLmJ1ZmZlclN1YkRhdGEoZ2wuQVJSQVlfQlVGRkVSLCAwLCB2ZXJ0aWNlcyk7XG5cdFx0XHRnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgdGV4Q29vcmRPZmZzZXQsIHRleENvb3Jkcyk7XG5cblx0XHRcdHZhciBhUG9zTG9jID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCAnYVBvcycpO1xuXHRcdFx0Z2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoYVBvc0xvYyk7XG5cdFx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGFQb3NMb2MsIDIsIGdsLkZMT0FULCBnbC5GQUxTRSwgMCwgMCk7XG5cdFx0XHR2YXIgYVRleENvb3JkTG9jID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24odGhpcy5wcm9ncmFtLCAnYVRleENvb3JkJyk7XG5cdFx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhVGV4Q29vcmRMb2MpO1xuXHRcdFx0Z2wudmVydGV4QXR0cmliUG9pbnRlcihhVGV4Q29vcmRMb2MsIDIsIGdsLkZMT0FULCBnbC5GQUxTRSwgMCwgdGV4Q29vcmRPZmZzZXQpO1xuXG5cdFx0XHR0aGlzLnNldHVwT3V0cHV0VGV4dHVyZSgpO1xuXG5cdFx0XHRpZiAodGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcyAhPT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgZXh0RHJhd0J1ZmZlcnNNYXAgPSB0aGlzLmV4dERyYXdCdWZmZXJzTWFwID0gW2dsLkNPTE9SX0FUVEFDSE1FTlQwXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIHN1Yktlcm5lbE91dHB1dFRleHR1cmUgPSB0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzW2ldO1xuXHRcdFx0XHRcdGV4dERyYXdCdWZmZXJzTWFwLnB1c2goZ2wuQ09MT1JfQVRUQUNITUVOVDAgKyBpICsgMSk7XG5cdFx0XHRcdFx0Z2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIGFyZ3VtZW50cy5sZW5ndGggKyBpKTtcblx0XHRcdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBzdWJLZXJuZWxPdXRwdXRUZXh0dXJlKTtcblx0XHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XG5cdFx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdFx0XHRcdGlmICh0aGlzLmZsb2F0T3V0cHV0KSB7XG5cdFx0XHRcdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHRleFNpemVbMF0sIHRleFNpemVbMV0sIDAsIGdsLlJHQkEsIGdsLkZMT0FULCBudWxsKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Z2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAncnVuJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcnVuKCkge1xuXHRcdFx0aWYgKHRoaXMucHJvZ3JhbSA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLmJ1aWxkLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcGFyYW1OYW1lcyA9IHRoaXMucGFyYW1OYW1lcztcblx0XHRcdHZhciBwYXJhbVR5cGVzID0gdGhpcy5wYXJhbVR5cGVzO1xuXHRcdFx0dmFyIHRleFNpemUgPSB0aGlzLnRleFNpemU7XG5cdFx0XHR2YXIgZ2wgPSB0aGlzLl93ZWJHbDtcblxuXHRcdFx0Z2wudXNlUHJvZ3JhbSh0aGlzLnByb2dyYW0pO1xuXHRcdFx0Z2wuc2Npc3NvcigwLCAwLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdKTtcblxuXHRcdFx0aWYgKCF0aGlzLmhhcmRjb2RlQ29uc3RhbnRzKSB7XG5cdFx0XHRcdHZhciB1T3V0cHV0RGltTG9jID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oJ3VPdXRwdXREaW0nKTtcblx0XHRcdFx0Z2wudW5pZm9ybTNmdih1T3V0cHV0RGltTG9jLCB0aGlzLnRocmVhZERpbSk7XG5cdFx0XHRcdHZhciB1VGV4U2l6ZUxvYyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1VGV4U2l6ZScpO1xuXHRcdFx0XHRnbC51bmlmb3JtMmZ2KHVUZXhTaXplTG9jLCB0ZXhTaXplKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIHJhdGlvTG9jID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oJ3JhdGlvJyk7XG5cdFx0XHRnbC51bmlmb3JtMmYocmF0aW9Mb2MsIHRleFNpemVbMF0gLyB0aGlzLm1heFRleFNpemVbMF0sIHRleFNpemVbMV0gLyB0aGlzLm1heFRleFNpemVbMV0pO1xuXG5cdFx0XHR0aGlzLmFyZ3VtZW50c0xlbmd0aCA9IDA7XG5cdFx0XHRmb3IgKHZhciB0ZXhJbmRleCA9IDA7IHRleEluZGV4IDwgcGFyYW1OYW1lcy5sZW5ndGg7IHRleEluZGV4KyspIHtcblx0XHRcdFx0dGhpcy5fYWRkQXJndW1lbnQoYXJndW1lbnRzW3RleEluZGV4XSwgcGFyYW1UeXBlc1t0ZXhJbmRleF0sIHBhcmFtTmFtZXNbdGV4SW5kZXhdKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuZ3JhcGhpY2FsKSB7XG5cdFx0XHRcdGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcblx0XHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCBudWxsKTtcblx0XHRcdFx0Z2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRV9TVFJJUCwgMCwgNCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Z2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB0aGlzLmZyYW1lYnVmZmVyKTtcblx0XHRcdHZhciBvdXRwdXRUZXh0dXJlID0gdGhpcy5vdXRwdXRUZXh0dXJlO1xuXHRcdFx0Z2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCBvdXRwdXRUZXh0dXJlLCAwKTtcblxuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXMgIT09IG51bGwpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0dmFyIHN1Yktlcm5lbE91dHB1dFRleHR1cmUgPSB0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzW2ldO1xuXHRcdFx0XHRcdGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKGdsLkZSQU1FQlVGRkVSLCBnbC5DT0xPUl9BVFRBQ0hNRU5UMCArIGkgKyAxLCBnbC5URVhUVVJFXzJELCBzdWJLZXJuZWxPdXRwdXRUZXh0dXJlLCAwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHR0aGlzLmV4dC5kcmF3QnVmZmVyc1dFQkdMKHRoaXMuZXh0RHJhd0J1ZmZlcnNNYXApO1xuXHRcdFx0fVxuXG5cdFx0XHRnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFX1NUUklQLCAwLCA0KTtcblxuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXMgIT09IG51bGwpIHtcblx0XHRcdFx0aWYgKHRoaXMuc3ViS2VybmVscyAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHZhciBvdXRwdXQgPSBbXTtcblx0XHRcdFx0XHRvdXRwdXQucmVzdWx0ID0gdGhpcy5yZW5kZXJPdXRwdXQob3V0cHV0VGV4dHVyZSk7XG5cdFx0XHRcdFx0Zm9yICh2YXIgX2kgPSAwOyBfaSA8IHRoaXMuc3ViS2VybmVscy5sZW5ndGg7IF9pKyspIHtcblx0XHRcdFx0XHRcdG91dHB1dC5wdXNoKG5ldyBUZXh0dXJlKHRoaXMuc3ViS2VybmVsT3V0cHV0VGV4dHVyZXNbX2ldLCB0ZXhTaXplLCB0aGlzLm91dHB1dCwgdGhpcy5fd2ViR2wpKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMgIT09IG51bGwpIHtcblx0XHRcdFx0XHR2YXIgX291dHB1dCA9IHtcblx0XHRcdFx0XHRcdHJlc3VsdDogdGhpcy5yZW5kZXJPdXRwdXQob3V0cHV0VGV4dHVyZSlcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHZhciBfaTIgPSAwO1xuXHRcdFx0XHRcdGZvciAodmFyIHAgaW4gdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzKSB7XG5cdFx0XHRcdFx0XHRpZiAoIXRoaXMuc3ViS2VybmVsUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwKSkgY29udGludWU7XG5cdFx0XHRcdFx0XHRfb3V0cHV0W3BdID0gbmV3IFRleHR1cmUodGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlc1tfaTJdLCB0ZXhTaXplLCB0aGlzLm91dHB1dCwgdGhpcy5fd2ViR2wpO1xuXHRcdFx0XHRcdFx0X2kyKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBfb3V0cHV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aGlzLnJlbmRlck91dHB1dChvdXRwdXRUZXh0dXJlKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAncmVuZGVyT3V0cHV0Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcmVuZGVyT3V0cHV0KG91dHB1dFRleHR1cmUpIHtcblx0XHRcdHZhciB0ZXhTaXplID0gdGhpcy50ZXhTaXplO1xuXHRcdFx0dmFyIGdsID0gdGhpcy5fd2ViR2w7XG5cdFx0XHR2YXIgdGhyZWFkRGltID0gdGhpcy50aHJlYWREaW07XG5cdFx0XHR2YXIgb3V0cHV0ID0gdGhpcy5vdXRwdXQ7XG5cdFx0XHRpZiAodGhpcy5vdXRwdXRUb1RleHR1cmUpIHtcblx0XHRcdFx0cmV0dXJuIG5ldyBUZXh0dXJlKG91dHB1dFRleHR1cmUsIHRleFNpemUsIG91dHB1dCwgdGhpcy5fd2ViR2wpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHZvaWQgMDtcblx0XHRcdFx0aWYgKHRoaXMuZmxvYXRPdXRwdXQpIHtcblx0XHRcdFx0XHRyZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KHRleFNpemVbMF0gKiB0ZXhTaXplWzFdICogNCk7XG5cdFx0XHRcdFx0Z2wucmVhZFBpeGVscygwLCAwLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdLCBnbC5SR0JBLCBnbC5GTE9BVCwgcmVzdWx0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSh0ZXhTaXplWzBdICogdGV4U2l6ZVsxXSAqIDQpO1xuXHRcdFx0XHRcdGdsLnJlYWRQaXhlbHMoMCwgMCwgdGV4U2l6ZVswXSwgdGV4U2l6ZVsxXSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgYnl0ZXMpO1xuXHRcdFx0XHRcdHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkoYnl0ZXMuYnVmZmVyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCA9IHJlc3VsdC5zdWJhcnJheSgwLCB0aHJlYWREaW1bMF0gKiB0aHJlYWREaW1bMV0gKiB0aHJlYWREaW1bMl0pO1xuXG5cdFx0XHRcdGlmIChvdXRwdXQubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdFx0fSBlbHNlIGlmIChvdXRwdXQubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHV0aWxzLnNwbGl0QXJyYXkocmVzdWx0LCBvdXRwdXRbMF0pO1xuXHRcdFx0XHR9IGVsc2UgaWYgKG91dHB1dC5sZW5ndGggPT09IDMpIHtcblx0XHRcdFx0XHR2YXIgY3ViZSA9IHV0aWxzLnNwbGl0QXJyYXkocmVzdWx0LCBvdXRwdXRbMF0gKiBvdXRwdXRbMV0pO1xuXHRcdFx0XHRcdHJldHVybiBjdWJlLm1hcChmdW5jdGlvbiAoeCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHV0aWxzLnNwbGl0QXJyYXkoeCwgb3V0cHV0WzBdKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRPdXRwdXRUZXh0dXJlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0T3V0cHV0VGV4dHVyZSgpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFRleHR1cmVDYWNoZSgnT1VUUFVUJyk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2RldGFjaE91dHB1dFRleHR1cmUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBkZXRhY2hPdXRwdXRUZXh0dXJlKCkge1xuXHRcdFx0dGhpcy5kZXRhY2hUZXh0dXJlQ2FjaGUoJ09VVFBVVCcpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdzZXR1cE91dHB1dFRleHR1cmUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBzZXR1cE91dHB1dFRleHR1cmUoKSB7XG5cdFx0XHR2YXIgZ2wgPSB0aGlzLl93ZWJHbDtcblx0XHRcdHZhciB0ZXhTaXplID0gdGhpcy50ZXhTaXplO1xuXHRcdFx0dGhpcy5kZXRhY2hPdXRwdXRUZXh0dXJlKCk7XG5cdFx0XHR0aGlzLm91dHB1dFRleHR1cmUgPSB0aGlzLmdldE91dHB1dFRleHR1cmUoKTtcblx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0aGlzLnBhcmFtTmFtZXMubGVuZ3RoKTtcblx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMub3V0cHV0VGV4dHVyZSk7XG5cdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdFx0aWYgKHRoaXMuZmxvYXRPdXRwdXQpIHtcblx0XHRcdFx0Z2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdLCAwLCBnbC5SR0JBLCBnbC5GTE9BVCwgbnVsbCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHRleFNpemVbMF0sIHRleFNpemVbMV0sIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRBcmd1bWVudFRleHR1cmUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRBcmd1bWVudFRleHR1cmUobmFtZSkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0VGV4dHVyZUNhY2hlKCdBUkdVTUVOVF8nICsgbmFtZSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFN1Yktlcm5lbFRleHR1cmUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRTdWJLZXJuZWxUZXh0dXJlKG5hbWUpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFRleHR1cmVDYWNoZSgnU1VCX0tFUk5FTF8nICsgbmFtZSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFRleHR1cmVDYWNoZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFRleHR1cmVDYWNoZShuYW1lKSB7XG5cdFx0XHRpZiAodGhpcy5vdXRwdXRUb1RleHR1cmUpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuX3dlYkdsLmNyZWF0ZVRleHR1cmUoKTtcblx0XHRcdH1cblx0XHRcdGlmICh0aGlzLnRleHR1cmVDYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlQ2FjaGVbbmFtZV07XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy50ZXh0dXJlQ2FjaGVbbmFtZV0gPSB0aGlzLl93ZWJHbC5jcmVhdGVUZXh0dXJlKCk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2RldGFjaFRleHR1cmVDYWNoZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGRldGFjaFRleHR1cmVDYWNoZShuYW1lKSB7XG5cdFx0XHRkZWxldGUgdGhpcy50ZXh0dXJlQ2FjaGVbbmFtZV07XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ3NldHVwUGFyYW1zJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gc2V0dXBQYXJhbXMoYXJncykge1xuXHRcdFx0dmFyIHBhcmFtVHlwZXMgPSB0aGlzLnBhcmFtVHlwZXMgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR2YXIgcGFyYW0gPSBhcmdzW2ldO1xuXHRcdFx0XHR2YXIgcGFyYW1UeXBlID0gdXRpbHMuZ2V0QXJndW1lbnRUeXBlKHBhcmFtKTtcblx0XHRcdFx0cGFyYW1UeXBlcy5wdXNoKHBhcmFtVHlwZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFVuaWZvcm1Mb2NhdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldFVuaWZvcm1Mb2NhdGlvbihuYW1lKSB7XG5cdFx0XHR2YXIgbG9jYXRpb24gPSB0aGlzLnByb2dyYW1Vbmlmb3JtTG9jYXRpb25DYWNoZVtuYW1lXTtcblx0XHRcdGlmICghbG9jYXRpb24pIHtcblx0XHRcdFx0bG9jYXRpb24gPSB0aGlzLl93ZWJHbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5wcm9ncmFtLCBuYW1lKTtcblx0XHRcdFx0dGhpcy5wcm9ncmFtVW5pZm9ybUxvY2F0aW9uQ2FjaGVbbmFtZV0gPSBsb2NhdGlvbjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBsb2NhdGlvbjtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEZyYWdTaGFkZXJBcnRpZmFjdE1hcCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRGcmFnU2hhZGVyQXJ0aWZhY3RNYXAoYXJncykge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0SEVBREVSOiB0aGlzLl9nZXRIZWFkZXJTdHJpbmcoKSxcblx0XHRcdFx0TE9PUF9NQVg6IHRoaXMuX2dldExvb3BNYXhTdHJpbmcoKSxcblx0XHRcdFx0Q09OU1RBTlRTOiB0aGlzLl9nZXRDb25zdGFudHNTdHJpbmcoKSxcblx0XHRcdFx0REVDT0RFMzJfRU5ESUFOTkVTUzogdGhpcy5fZ2V0RGVjb2RlMzJFbmRpYW5uZXNzU3RyaW5nKCksXG5cdFx0XHRcdEVOQ09ERTMyX0VORElBTk5FU1M6IHRoaXMuX2dldEVuY29kZTMyRW5kaWFubmVzc1N0cmluZygpLFxuXHRcdFx0XHRHRVRfV1JBUEFST1VORDogdGhpcy5fZ2V0R2V0V3JhcGFyb3VuZFN0cmluZygpLFxuXHRcdFx0XHRHRVRfVEVYVFVSRV9DSEFOTkVMOiB0aGlzLl9nZXRHZXRUZXh0dXJlQ2hhbm5lbFN0cmluZygpLFxuXHRcdFx0XHRHRVRfVEVYVFVSRV9JTkRFWDogdGhpcy5fZ2V0R2V0VGV4dHVyZUluZGV4U3RyaW5nKCksXG5cdFx0XHRcdEdFVF9SRVNVTFQ6IHRoaXMuX2dldEdldFJlc3VsdFN0cmluZygpLFxuXHRcdFx0XHRNQUlOX1BBUkFNUzogdGhpcy5fZ2V0TWFpblBhcmFtc1N0cmluZyhhcmdzKSxcblx0XHRcdFx0TUFJTl9DT05TVEFOVFM6IHRoaXMuX2dldE1haW5Db25zdGFudHNTdHJpbmcoKSxcblx0XHRcdFx0S0VSTkVMOiB0aGlzLl9nZXRLZXJuZWxTdHJpbmcoKSxcblx0XHRcdFx0TUFJTl9SRVNVTFQ6IHRoaXMuX2dldE1haW5SZXN1bHRTdHJpbmcoKVxuXHRcdFx0fTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2FkZEFyZ3VtZW50Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2FkZEFyZ3VtZW50KHZhbHVlLCB0eXBlLCBuYW1lKSB7XG5cdFx0XHR2YXIgZ2wgPSB0aGlzLl93ZWJHbDtcblx0XHRcdHZhciBhcmd1bWVudFRleHR1cmUgPSB0aGlzLmdldEFyZ3VtZW50VGV4dHVyZShuYW1lKTtcblx0XHRcdGlmICh2YWx1ZSBpbnN0YW5jZW9mIFRleHR1cmUpIHtcblx0XHRcdFx0dHlwZSA9ICdUZXh0dXJlJztcblx0XHRcdH1cblx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRjYXNlICdBcnJheSc6XG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dmFyIGRpbSA9IHV0aWxzLmdldERpbWVuc2lvbnModmFsdWUsIHRydWUpO1xuXHRcdFx0XHRcdFx0dmFyIHNpemUgPSB1dGlscy5kaW1Ub1RleFNpemUoe1xuXHRcdFx0XHRcdFx0XHRmbG9hdFRleHR1cmVzOiB0aGlzLmZsb2F0VGV4dHVyZXMsXG5cdFx0XHRcdFx0XHRcdGZsb2F0T3V0cHV0OiB0aGlzLmZsb2F0T3V0cHV0XG5cdFx0XHRcdFx0XHR9LCBkaW0pO1xuXHRcdFx0XHRcdFx0Z2wuYWN0aXZlVGV4dHVyZShnbC5URVhUVVJFMCArIHRoaXMuYXJndW1lbnRzTGVuZ3RoKTtcblx0XHRcdFx0XHRcdGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGFyZ3VtZW50VGV4dHVyZSk7XG5cdFx0XHRcdFx0XHRnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTtcblx0XHRcdFx0XHRcdGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuXHRcdFx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpO1xuXHRcdFx0XHRcdFx0Z2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xuXG5cdFx0XHRcdFx0XHR2YXIgbGVuZ3RoID0gc2l6ZVswXSAqIHNpemVbMV07XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5mbG9hdFRleHR1cmVzKSB7XG5cdFx0XHRcdFx0XHRcdGxlbmd0aCAqPSA0O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR2YXIgdmFsdWVzRmxhdCA9IG5ldyBGbG9hdDMyQXJyYXkobGVuZ3RoKTtcblx0XHRcdFx0XHRcdHV0aWxzLmZsYXR0ZW5Ubyh2YWx1ZSwgdmFsdWVzRmxhdCk7XG5cblx0XHRcdFx0XHRcdHZhciBidWZmZXIgPSB2b2lkIDA7XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5mbG9hdFRleHR1cmVzKSB7XG5cdFx0XHRcdFx0XHRcdGJ1ZmZlciA9IG5ldyBGbG9hdDMyQXJyYXkodmFsdWVzRmxhdCk7XG5cdFx0XHRcdFx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgc2l6ZVswXSwgc2l6ZVsxXSwgMCwgZ2wuUkdCQSwgZ2wuRkxPQVQsIGJ1ZmZlcik7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRidWZmZXIgPSBuZXcgVWludDhBcnJheShuZXcgRmxvYXQzMkFycmF5KHZhbHVlc0ZsYXQpLmJ1ZmZlcik7XG5cdFx0XHRcdFx0XHRcdGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgc2l6ZVswXSwgc2l6ZVsxXSwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgYnVmZmVyKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGxvYyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1c2VyXycgKyBuYW1lKTtcblx0XHRcdFx0XHRcdHZhciBsb2NTaXplID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oJ3VzZXJfJyArIG5hbWUgKyAnU2l6ZScpO1xuXHRcdFx0XHRcdFx0dmFyIGRpbUxvYyA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1c2VyXycgKyBuYW1lICsgJ0RpbScpO1xuXG5cdFx0XHRcdFx0XHRpZiAoIXRoaXMuaGFyZGNvZGVDb25zdGFudHMpIHtcblx0XHRcdFx0XHRcdFx0Z2wudW5pZm9ybTNmdihkaW1Mb2MsIGRpbSk7XG5cdFx0XHRcdFx0XHRcdGdsLnVuaWZvcm0yZnYobG9jU2l6ZSwgc2l6ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRnbC51bmlmb3JtMWkobG9jLCB0aGlzLmFyZ3VtZW50c0xlbmd0aCk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdGNhc2UgJ051bWJlcic6XG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0dmFyIF9sb2MgPSB0aGlzLmdldFVuaWZvcm1Mb2NhdGlvbigndXNlcl8nICsgbmFtZSk7XG5cdFx0XHRcdFx0XHRnbC51bmlmb3JtMWYoX2xvYywgdmFsdWUpO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRjYXNlICdUZXh0dXJlJzpcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHR2YXIgaW5wdXRUZXh0dXJlID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR2YXIgX2RpbSA9IHV0aWxzLmdldERpbWVuc2lvbnMoaW5wdXRUZXh0dXJlLCB0cnVlKTtcblxuXHRcdFx0XHRcdFx0dmFyIF9zaXplID0gaW5wdXRUZXh0dXJlLnNpemU7XG5cblx0XHRcdFx0XHRcdGlmIChpbnB1dFRleHR1cmUudGV4dHVyZSA9PT0gdGhpcy5vdXRwdXRUZXh0dXJlKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2V0dXBPdXRwdXRUZXh0dXJlKCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTAgKyB0aGlzLmFyZ3VtZW50c0xlbmd0aCk7XG5cdFx0XHRcdFx0XHRnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBpbnB1dFRleHR1cmUudGV4dHVyZSk7XG5cblx0XHRcdFx0XHRcdHZhciBfbG9jMiA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1c2VyXycgKyBuYW1lKTtcblx0XHRcdFx0XHRcdHZhciBfbG9jU2l6ZSA9IHRoaXMuZ2V0VW5pZm9ybUxvY2F0aW9uKCd1c2VyXycgKyBuYW1lICsgJ1NpemUnKTtcblx0XHRcdFx0XHRcdHZhciBfZGltTG9jID0gdGhpcy5nZXRVbmlmb3JtTG9jYXRpb24oJ3VzZXJfJyArIG5hbWUgKyAnRGltJyk7XG5cblx0XHRcdFx0XHRcdGdsLnVuaWZvcm0zZnYoX2RpbUxvYywgX2RpbSk7XG5cdFx0XHRcdFx0XHRnbC51bmlmb3JtMmZ2KF9sb2NTaXplLCBfc2l6ZSk7XG5cdFx0XHRcdFx0XHRnbC51bmlmb3JtMWkoX2xvYzIsIHRoaXMuYXJndW1lbnRzTGVuZ3RoKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyAnSW5wdXQgdHlwZSBub3Qgc3VwcG9ydGVkIChXZWJHTCk6ICcgKyB2YWx1ZTtcblx0XHRcdH1cblx0XHRcdHRoaXMuYXJndW1lbnRzTGVuZ3RoKys7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRIZWFkZXJTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0SGVhZGVyU3RyaW5nKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ViS2VybmVscyAhPT0gbnVsbCB8fCB0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMgIT09IG51bGwgP1xuXHRcdFx0JyNleHRlbnNpb24gR0xfRVhUX2RyYXdfYnVmZmVycyA6IHJlcXVpcmVcXG4nIDogJyc7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRMb29wTWF4U3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldExvb3BNYXhTdHJpbmcoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5sb29wTWF4SXRlcmF0aW9ucyA/ICcgJyArIHBhcnNlSW50KHRoaXMubG9vcE1heEl0ZXJhdGlvbnMpICsgJy4wO1xcbicgOiAnIDEwMDAuMDtcXG4nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0Q29uc3RhbnRzU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldENvbnN0YW50c1N0cmluZygpIHtcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHRcdHZhciB0aHJlYWREaW0gPSB0aGlzLnRocmVhZERpbTtcblx0XHRcdHZhciB0ZXhTaXplID0gdGhpcy50ZXhTaXplO1xuXHRcdFx0aWYgKHRoaXMuaGFyZGNvZGVDb25zdGFudHMpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goJ2hpZ2hwIHZlYzMgdU91dHB1dERpbSA9IHZlYzMoJyArIHRocmVhZERpbVswXSArICcsJyArIHRocmVhZERpbVsxXSArICcsICcgKyB0aHJlYWREaW1bMl0gKyAnKScsICdoaWdocCB2ZWMyIHVUZXhTaXplID0gdmVjMignICsgdGV4U2l6ZVswXSArICcsICcgKyB0ZXhTaXplWzFdICsgJyknKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKCd1bmlmb3JtIGhpZ2hwIHZlYzMgdU91dHB1dERpbScsICd1bmlmb3JtIGhpZ2hwIHZlYzIgdVRleFNpemUnKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuX2xpbmVzVG9TdHJpbmcocmVzdWx0KTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldFRleHR1cmVDb29yZGluYXRlJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldFRleHR1cmVDb29yZGluYXRlKCkge1xuXHRcdFx0dmFyIG5hbWVzID0gdGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzO1xuXHRcdFx0aWYgKG5hbWVzID09PSBudWxsIHx8IG5hbWVzLmxlbmd0aCA8IDEpIHtcblx0XHRcdFx0cmV0dXJuICd2YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleENvb3JkO1xcbic7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gJ291dCBoaWdocCB2ZWMyIHZUZXhDb29yZDtcXG4nO1xuXHRcdFx0fVxuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0RGVjb2RlMzJFbmRpYW5uZXNzU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldERlY29kZTMyRW5kaWFubmVzc1N0cmluZygpIHtcblx0XHRcdHJldHVybiB0aGlzLmVuZGlhbm5lc3MgPT09ICdMRScgPyAnJyA6ICcgIHJnYmEucmdiYSA9IHJnYmEuYWJncjtcXG4nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0RW5jb2RlMzJFbmRpYW5uZXNzU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldEVuY29kZTMyRW5kaWFubmVzc1N0cmluZygpIHtcblx0XHRcdHJldHVybiB0aGlzLmVuZGlhbm5lc3MgPT09ICdMRScgPyAnJyA6ICcgIHJnYmEucmdiYSA9IHJnYmEuYWJncjtcXG4nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0R2V0V3JhcGFyb3VuZFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRHZXRXcmFwYXJvdW5kU3RyaW5nKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMud3JhcGFyb3VuZCA/ICcgIHh5eiA9IG1vZCh4eXosIHRleERpbSk7XFxuJyA6ICcnO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0R2V0VGV4dHVyZUNoYW5uZWxTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0R2V0VGV4dHVyZUNoYW5uZWxTdHJpbmcoKSB7XG5cdFx0XHRpZiAoIXRoaXMuZmxvYXRUZXh0dXJlcykgcmV0dXJuICcnO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5fbGluZXNUb1N0cmluZyhbJyAgaW50IGNoYW5uZWwgPSBpbnQoaW50ZWdlck1vZChpbmRleCwgNC4wKSknLCAnICBpbmRleCA9IGZsb2F0KGludChpbmRleCkgLyA0KSddKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEdldFRleHR1cmVJbmRleFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRHZXRUZXh0dXJlSW5kZXhTdHJpbmcoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5mbG9hdFRleHR1cmVzID8gJyAgaW5kZXggPSBmbG9hdChpbnQoaW5kZXgpLzQpO1xcbicgOiAnJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEdldFJlc3VsdFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRHZXRSZXN1bHRTdHJpbmcoKSB7XG5cdFx0XHRpZiAoIXRoaXMuZmxvYXRUZXh0dXJlcykgcmV0dXJuICcgIHJldHVybiBkZWNvZGUzMih0ZXhlbCk7XFxuJztcblx0XHRcdHJldHVybiB0aGlzLl9saW5lc1RvU3RyaW5nKFsnICBpZiAoY2hhbm5lbCA9PSAwKSByZXR1cm4gdGV4ZWwucicsICcgIGlmIChjaGFubmVsID09IDEpIHJldHVybiB0ZXhlbC5nJywgJyAgaWYgKGNoYW5uZWwgPT0gMikgcmV0dXJuIHRleGVsLmInLCAnICBpZiAoY2hhbm5lbCA9PSAzKSByZXR1cm4gdGV4ZWwuYSddKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldE1haW5QYXJhbXNTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0TWFpblBhcmFtc1N0cmluZyhhcmdzKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHR2YXIgcGFyYW1UeXBlcyA9IHRoaXMucGFyYW1UeXBlcztcblx0XHRcdHZhciBwYXJhbU5hbWVzID0gdGhpcy5wYXJhbU5hbWVzO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbU5hbWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJhbSA9IGFyZ3NbaV07XG5cdFx0XHRcdHZhciBwYXJhbU5hbWUgPSBwYXJhbU5hbWVzW2ldO1xuXHRcdFx0XHR2YXIgcGFyYW1UeXBlID0gcGFyYW1UeXBlc1tpXTtcblx0XHRcdFx0aWYgKHRoaXMuaGFyZGNvZGVDb25zdGFudHMpIHtcblx0XHRcdFx0XHRpZiAocGFyYW1UeXBlID09PSAnQXJyYXknIHx8IHBhcmFtVHlwZSA9PT0gJ1RleHR1cmUnKSB7XG5cdFx0XHRcdFx0XHR2YXIgcGFyYW1EaW0gPSB1dGlscy5nZXREaW1lbnNpb25zKHBhcmFtLCB0cnVlKTtcblx0XHRcdFx0XHRcdHZhciBwYXJhbVNpemUgPSB1dGlscy5kaW1Ub1RleFNpemUoe1xuXHRcdFx0XHRcdFx0XHRmbG9hdFRleHR1cmVzOiB0aGlzLmZsb2F0VGV4dHVyZXMsXG5cdFx0XHRcdFx0XHRcdGZsb2F0T3V0cHV0OiB0aGlzLmZsb2F0T3V0cHV0XG5cdFx0XHRcdFx0XHR9LCBwYXJhbURpbSk7XG5cblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKCd1bmlmb3JtIGhpZ2hwIHNhbXBsZXIyRCB1c2VyXycgKyBwYXJhbU5hbWUsICdoaWdocCB2ZWMyIHVzZXJfJyArIHBhcmFtTmFtZSArICdTaXplID0gdmVjMignICsgcGFyYW1TaXplWzBdICsgJy4wLCAnICsgcGFyYW1TaXplWzFdICsgJy4wKScsICdoaWdocCB2ZWMzIHVzZXJfJyArIHBhcmFtTmFtZSArICdEaW0gPSB2ZWMzKCcgKyBwYXJhbURpbVswXSArICcuMCwgJyArIHBhcmFtRGltWzFdICsgJy4wLCAnICsgcGFyYW1EaW1bMl0gKyAnLjApJyk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwYXJhbVR5cGUgPT09ICdOdW1iZXInICYmIE51bWJlci5pc0ludGVnZXIocGFyYW0pKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaCgnaGlnaHAgZmxvYXQgdXNlcl8nICsgcGFyYW1OYW1lICsgJyA9ICcgKyBwYXJhbSArICcuMCcpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocGFyYW1UeXBlID09PSAnTnVtYmVyJykge1xuXHRcdFx0XHRcdFx0cmVzdWx0LnB1c2goJ2hpZ2hwIGZsb2F0IHVzZXJfJyArIHBhcmFtTmFtZSArICcgPSAnICsgcGFyYW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpZiAocGFyYW1UeXBlID09PSAnQXJyYXknIHx8IHBhcmFtVHlwZSA9PT0gJ1RleHR1cmUnKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaCgndW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdXNlcl8nICsgcGFyYW1OYW1lLCAndW5pZm9ybSBoaWdocCB2ZWMyIHVzZXJfJyArIHBhcmFtTmFtZSArICdTaXplJywgJ3VuaWZvcm0gaGlnaHAgdmVjMyB1c2VyXycgKyBwYXJhbU5hbWUgKyAnRGltJyk7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChwYXJhbVR5cGUgPT09ICdOdW1iZXInKSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaCgndW5pZm9ybSBoaWdocCBmbG9hdCB1c2VyXycgKyBwYXJhbU5hbWUpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuX2xpbmVzVG9TdHJpbmcocmVzdWx0KTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldE1haW5Db25zdGFudHNTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0TWFpbkNvbnN0YW50c1N0cmluZygpIHtcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHRcdGlmICh0aGlzLmNvbnN0YW50cykge1xuXHRcdFx0XHRmb3IgKHZhciBuYW1lIGluIHRoaXMuY29uc3RhbnRzKSB7XG5cdFx0XHRcdFx0aWYgKCF0aGlzLmNvbnN0YW50cy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgY29udGludWU7XG5cdFx0XHRcdFx0dmFyIHZhbHVlID0gcGFyc2VGbG9hdCh0aGlzLmNvbnN0YW50c1tuYW1lXSk7XG5cblx0XHRcdFx0XHRpZiAoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHtcblx0XHRcdFx0XHRcdHJlc3VsdC5wdXNoKCdjb25zdCBmbG9hdCBjb25zdGFudHNfJyArIG5hbWUgKyAnID0gJyArIHBhcnNlSW50KHZhbHVlKSArICcuMCcpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaCgnY29uc3QgZmxvYXQgY29uc3RhbnRzXycgKyBuYW1lICsgJyA9ICcgKyBwYXJzZUZsb2F0KHZhbHVlKSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5fbGluZXNUb1N0cmluZyhyZXN1bHQpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0S2VybmVsU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldEtlcm5lbFN0cmluZygpIHtcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHRcdHZhciBuYW1lcyA9IHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcztcblx0XHRcdGlmIChuYW1lcyAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnaGlnaHAgZmxvYXQga2VybmVsUmVzdWx0ID0gMC4wJyk7XG5cdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRyZXN1bHQucHVzaCgnaGlnaHAgZmxvYXQgJyArIG5hbWVzW2ldICsgJyA9IDAuMCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKCdoaWdocCBmbG9hdCBrZXJuZWxSZXN1bHQgPSAwLjAnKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuX2xpbmVzVG9TdHJpbmcocmVzdWx0KSArIHRoaXMuZnVuY3Rpb25CdWlsZGVyLmdldFByb3RvdHlwZVN0cmluZygna2VybmVsJyk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ19nZXRNYWluUmVzdWx0U3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gX2dldE1haW5SZXN1bHRTdHJpbmcoKSB7XG5cdFx0XHR2YXIgbmFtZXMgPSB0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXM7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cdFx0XHRpZiAodGhpcy5mbG9hdE91dHB1dCkge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnICBpbmRleCAqPSA0LjAnKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHRoaXMuZ3JhcGhpY2FsKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKCcgIHRocmVhZElkID0gaW5kZXhUbzNEKGluZGV4LCB1T3V0cHV0RGltKScsICcgIGtlcm5lbCgpJywgJyAgZ2xfRnJhZ0NvbG9yID0gYWN0dWFsQ29sb3InKTtcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5mbG9hdE91dHB1dCkge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnICB0aHJlYWRJZCA9IGluZGV4VG8zRChpbmRleCwgdU91dHB1dERpbSknLCAnICBrZXJuZWwoKScsICcgIGdsX0ZyYWdDb2xvci5yID0ga2VybmVsUmVzdWx0JywgJyAgaW5kZXggKz0gMS4wJywgJyAgdGhyZWFkSWQgPSBpbmRleFRvM0QoaW5kZXgsIHVPdXRwdXREaW0pJywgJyAga2VybmVsKCknLCAnICBnbF9GcmFnQ29sb3IuZyA9IGtlcm5lbFJlc3VsdCcsICcgIGluZGV4ICs9IDEuMCcsICcgIHRocmVhZElkID0gaW5kZXhUbzNEKGluZGV4LCB1T3V0cHV0RGltKScsICcgIGtlcm5lbCgpJywgJyAgZ2xfRnJhZ0NvbG9yLmIgPSBrZXJuZWxSZXN1bHQnLCAnICBpbmRleCArPSAxLjAnLCAnICB0aHJlYWRJZCA9IGluZGV4VG8zRChpbmRleCwgdU91dHB1dERpbSknLCAnICBrZXJuZWwoKScsICcgIGdsX0ZyYWdDb2xvci5hID0ga2VybmVsUmVzdWx0Jyk7XG5cdFx0XHR9IGVsc2UgaWYgKG5hbWVzICE9PSBudWxsKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKCcgIHRocmVhZElkID0gaW5kZXhUbzNEKGluZGV4LCB1T3V0cHV0RGltKScpO1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnICBrZXJuZWwoKScpO1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnICBnbF9GcmFnRGF0YVswXSA9IGVuY29kZTMyKGtlcm5lbFJlc3VsdCknKTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHJlc3VsdC5wdXNoKCcgIGdsX0ZyYWdEYXRhWycgKyAoaSArIDEpICsgJ10gPSBlbmNvZGUzMignICsgbmFtZXNbaV0gKyAnKScpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHQucHVzaCgnICB0aHJlYWRJZCA9IGluZGV4VG8zRChpbmRleCwgdU91dHB1dERpbSknLCAnICBrZXJuZWwoKScsICcgIGdsX0ZyYWdDb2xvciA9IGVuY29kZTMyKGtlcm5lbFJlc3VsdCknKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRoaXMuX2xpbmVzVG9TdHJpbmcocmVzdWx0KTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2xpbmVzVG9TdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfbGluZXNUb1N0cmluZyhsaW5lcykge1xuXHRcdFx0aWYgKGxpbmVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0cmV0dXJuIGxpbmVzLmpvaW4oJztcXG4nKSArICc7XFxuJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiAnXFxuJztcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX3JlcGxhY2VBcnRpZmFjdHMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfcmVwbGFjZUFydGlmYWN0cyhzcmMsIG1hcCkge1xuXHRcdFx0cmV0dXJuIHNyYy5yZXBsYWNlKC9bIF0qX18oW0EtWl0rWzAtOV0qKFtfXT9bQS1aXSkqKV9fO1xcbi9nLCBmdW5jdGlvbiAobWF0Y2gsIGFydGlmYWN0KSB7XG5cdFx0XHRcdGlmIChtYXAuaGFzT3duUHJvcGVydHkoYXJ0aWZhY3QpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hcFthcnRpZmFjdF07XG5cdFx0XHRcdH1cblx0XHRcdFx0dGhyb3cgJ3VuaGFuZGxlZCBhcnRpZmFjdCAnICsgYXJ0aWZhY3Q7XG5cdFx0XHR9KTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2FkZEtlcm5lbHMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfYWRkS2VybmVscygpIHtcblx0XHRcdHZhciBidWlsZGVyID0gdGhpcy5mdW5jdGlvbkJ1aWxkZXI7XG5cdFx0XHR2YXIgZ2wgPSB0aGlzLl93ZWJHbDtcblxuXHRcdFx0YnVpbGRlci5hZGRGdW5jdGlvbnModGhpcy5mdW5jdGlvbnMpO1xuXHRcdFx0YnVpbGRlci5hZGROYXRpdmVGdW5jdGlvbnModGhpcy5uYXRpdmVGdW5jdGlvbnMpO1xuXG5cdFx0XHRidWlsZGVyLmFkZEtlcm5lbCh0aGlzLmZuU3RyaW5nLCB7XG5cdFx0XHRcdHByb3RvdHlwZU9ubHk6IGZhbHNlLFxuXHRcdFx0XHRjb25zdGFudHM6IHRoaXMuY29uc3RhbnRzLFxuXHRcdFx0XHRkZWJ1ZzogdGhpcy5kZWJ1Zyxcblx0XHRcdFx0bG9vcE1heEl0ZXJhdGlvbnM6IHRoaXMubG9vcE1heEl0ZXJhdGlvbnNcblx0XHRcdH0sIHRoaXMucGFyYW1OYW1lcywgdGhpcy5wYXJhbVR5cGVzKTtcblxuXHRcdFx0aWYgKHRoaXMuc3ViS2VybmVscyAhPT0gbnVsbCkge1xuXHRcdFx0XHR2YXIgZXh0ID0gdGhpcy5leHQgPSBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuXHRcdFx0XHRpZiAoIWV4dCkgdGhyb3cgbmV3IEVycm9yKCdjb3VsZCBub3QgaW5zdGFudGlhdGUgZHJhdyBidWZmZXJzIGV4dGVuc2lvbicpO1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzID0gW107XG5cdFx0XHRcdHRoaXMuc3ViS2VybmVsT3V0cHV0VmFyaWFibGVOYW1lcyA9IFtdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3ViS2VybmVscy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdHZhciBzdWJLZXJuZWwgPSB0aGlzLnN1Yktlcm5lbHNbaV07XG5cdFx0XHRcdFx0YnVpbGRlci5hZGRTdWJLZXJuZWwoc3ViS2VybmVsLCB7XG5cdFx0XHRcdFx0XHRwcm90b3R5cGVPbmx5OiBmYWxzZSxcblx0XHRcdFx0XHRcdGNvbnN0YW50czogdGhpcy5jb25zdGFudHMsXG5cdFx0XHRcdFx0XHRkZWJ1ZzogdGhpcy5kZWJ1Zyxcblx0XHRcdFx0XHRcdGxvb3BNYXhJdGVyYXRpb25zOiB0aGlzLmxvb3BNYXhJdGVyYXRpb25zXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcy5wdXNoKHRoaXMuZ2V0U3ViS2VybmVsVGV4dHVyZShpKSk7XG5cdFx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRWYXJpYWJsZU5hbWVzLnB1c2goc3ViS2VybmVsLm5hbWUgKyAnUmVzdWx0Jyk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzICE9PSBudWxsKSB7XG5cdFx0XHRcdHZhciBfZXh0ID0gdGhpcy5leHQgPSBnbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2RyYXdfYnVmZmVycycpO1xuXHRcdFx0XHRpZiAoIV9leHQpIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IGluc3RhbnRpYXRlIGRyYXcgYnVmZmVycyBleHRlbnNpb24nKTtcblx0XHRcdFx0dGhpcy5zdWJLZXJuZWxPdXRwdXRUZXh0dXJlcyA9IFtdO1xuXHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMgPSBbXTtcblx0XHRcdFx0dmFyIF9pMyA9IDA7XG5cdFx0XHRcdGZvciAodmFyIHAgaW4gdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzKSB7XG5cdFx0XHRcdFx0aWYgKCF0aGlzLnN1Yktlcm5lbFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocCkpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdHZhciBfc3ViS2VybmVsID0gdGhpcy5zdWJLZXJuZWxQcm9wZXJ0aWVzW3BdO1xuXHRcdFx0XHRcdGJ1aWxkZXIuYWRkU3ViS2VybmVsKF9zdWJLZXJuZWwsIHtcblx0XHRcdFx0XHRcdHByb3RvdHlwZU9ubHk6IGZhbHNlLFxuXHRcdFx0XHRcdFx0Y29uc3RhbnRzOiB0aGlzLmNvbnN0YW50cyxcblx0XHRcdFx0XHRcdGRlYnVnOiB0aGlzLmRlYnVnLFxuXHRcdFx0XHRcdFx0bG9vcE1heEl0ZXJhdGlvbnM6IHRoaXMubG9vcE1heEl0ZXJhdGlvbnNcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFRleHR1cmVzLnB1c2godGhpcy5nZXRTdWJLZXJuZWxUZXh0dXJlKHApKTtcblx0XHRcdFx0XHR0aGlzLnN1Yktlcm5lbE91dHB1dFZhcmlhYmxlTmFtZXMucHVzaChfc3ViS2VybmVsLm5hbWUgKyAnUmVzdWx0Jyk7XG5cdFx0XHRcdFx0X2kzKys7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnX2dldEZyYWdTaGFkZXJTdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBfZ2V0RnJhZ1NoYWRlclN0cmluZyhhcmdzKSB7XG5cdFx0XHRpZiAodGhpcy5jb21waWxlZEZyYWdTaGFkZXJTdHJpbmcgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXMuY29tcGlsZWRGcmFnU2hhZGVyU3RyaW5nID0gdGhpcy5fcmVwbGFjZUFydGlmYWN0cyhmcmFnU2hhZGVyU3RyaW5nLCB0aGlzLl9nZXRGcmFnU2hhZGVyQXJ0aWZhY3RNYXAoYXJncykpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdfZ2V0VmVydFNoYWRlclN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9nZXRWZXJ0U2hhZGVyU3RyaW5nKGFyZ3MpIHtcblx0XHRcdGlmICh0aGlzLmNvbXBpbGVkVmVydFNoYWRlclN0cmluZyAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb21waWxlZFZlcnRTaGFkZXJTdHJpbmc7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcy5jb21waWxlZFZlcnRTaGFkZXJTdHJpbmcgPSB2ZXJ0U2hhZGVyU3RyaW5nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICd0b1N0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdFx0cmV0dXJuIGtlcm5lbFN0cmluZyh0aGlzKTtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdhZGRGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFkZEZ1bmN0aW9uKGZuKSB7XG5cdFx0XHR0aGlzLmZ1bmN0aW9uQnVpbGRlci5hZGRGdW5jdGlvbihudWxsLCBmbik7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIFdlYkdMS2VybmVsO1xufShLZXJuZWxCYXNlKTtcbn0se1wiLi4vLi4vY29yZS90ZXh0dXJlXCI6MjIsXCIuLi8uLi9jb3JlL3V0aWxzXCI6MjQsXCIuLi9rZXJuZWwtYmFzZVwiOjgsXCIuL2tlcm5lbC1zdHJpbmdcIjoxMyxcIi4vc2hhZGVyLWZyYWdcIjoxNixcIi4vc2hhZGVyLXZlcnRcIjoxNyxcImZzXCI6Mjd9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIFJ1bm5lckJhc2UgPSByZXF1aXJlKCcuLi9ydW5uZXItYmFzZScpO1xudmFyIFdlYkdMS2VybmVsID0gcmVxdWlyZSgnLi9rZXJuZWwnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL2NvcmUvdXRpbHMnKTtcbnZhciBXZWJHTEZ1bmN0aW9uQnVpbGRlciA9IHJlcXVpcmUoJy4vZnVuY3Rpb24tYnVpbGRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChfUnVubmVyQmFzZSkge1xuXHRfaW5oZXJpdHMoV2ViR0xSdW5uZXIsIF9SdW5uZXJCYXNlKTtcblxuXHRmdW5jdGlvbiBXZWJHTFJ1bm5lcihzZXR0aW5ncykge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJHTFJ1bm5lcik7XG5cblx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoV2ViR0xSdW5uZXIuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXZWJHTFJ1bm5lcikpLmNhbGwodGhpcywgbmV3IFdlYkdMRnVuY3Rpb25CdWlsZGVyKCksIHNldHRpbmdzKSk7XG5cblx0XHRfdGhpcy5LZXJuZWwgPSBXZWJHTEtlcm5lbDtcblx0XHRfdGhpcy5rZXJuZWwgPSBudWxsO1xuXHRcdHJldHVybiBfdGhpcztcblx0fVxuXG5cblxuXHRfY3JlYXRlQ2xhc3MoV2ViR0xSdW5uZXIsIFt7XG5cdFx0a2V5OiAnZ2V0TW9kZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldE1vZGUoKSB7XG5cdFx0XHRyZXR1cm4gJ2dwdSc7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIFdlYkdMUnVubmVyO1xufShSdW5uZXJCYXNlKTtcbn0se1wiLi4vLi4vY29yZS91dGlsc1wiOjI0LFwiLi4vcnVubmVyLWJhc2VcIjoxMCxcIi4vZnVuY3Rpb24tYnVpbGRlclwiOjExLFwiLi9rZXJuZWxcIjoxNH1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFwiX19IRUFERVJfXztcXG5wcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxucHJlY2lzaW9uIGhpZ2hwIGludDtcXG5wcmVjaXNpb24gaGlnaHAgc2FtcGxlcjJEO1xcblxcbmNvbnN0IGZsb2F0IExPT1BfTUFYID0gX19MT09QX01BWF9fO1xcbiNkZWZpbmUgRVBTSUxPTiAwLjAwMDAwMDE7XFxuXFxuX19DT05TVEFOVFNfXztcXG5cXG52YXJ5aW5nIGhpZ2hwIHZlYzIgdlRleENvb3JkO1xcblxcbnZlYzQgcm91bmQodmVjNCB4KSB7XFxuICByZXR1cm4gZmxvb3IoeCArIDAuNSk7XFxufVxcblxcbmhpZ2hwIGZsb2F0IHJvdW5kKGhpZ2hwIGZsb2F0IHgpIHtcXG4gIHJldHVybiBmbG9vcih4ICsgMC41KTtcXG59XFxuXFxudmVjMiBpbnRlZ2VyTW9kKHZlYzIgeCwgZmxvYXQgeSkge1xcbiAgdmVjMiByZXMgPSBmbG9vcihtb2QoeCwgeSkpO1xcbiAgcmV0dXJuIHJlcyAqIHN0ZXAoMS4wIC0gZmxvb3IoeSksIC1yZXMpO1xcbn1cXG5cXG52ZWMzIGludGVnZXJNb2QodmVjMyB4LCBmbG9hdCB5KSB7XFxuICB2ZWMzIHJlcyA9IGZsb29yKG1vZCh4LCB5KSk7XFxuICByZXR1cm4gcmVzICogc3RlcCgxLjAgLSBmbG9vcih5KSwgLXJlcyk7XFxufVxcblxcbnZlYzQgaW50ZWdlck1vZCh2ZWM0IHgsIHZlYzQgeSkge1xcbiAgdmVjNCByZXMgPSBmbG9vcihtb2QoeCwgeSkpO1xcbiAgcmV0dXJuIHJlcyAqIHN0ZXAoMS4wIC0gZmxvb3IoeSksIC1yZXMpO1xcbn1cXG5cXG5oaWdocCBmbG9hdCBpbnRlZ2VyTW9kKGhpZ2hwIGZsb2F0IHgsIGhpZ2hwIGZsb2F0IHkpIHtcXG4gIGhpZ2hwIGZsb2F0IHJlcyA9IGZsb29yKG1vZCh4LCB5KSk7XFxuICByZXR1cm4gcmVzICogKHJlcyA+IGZsb29yKHkpIC0gMS4wID8gMC4wIDogMS4wKTtcXG59XFxuXFxuaGlnaHAgaW50IGludGVnZXJNb2QoaGlnaHAgaW50IHgsIGhpZ2hwIGludCB5KSB7XFxuICByZXR1cm4gaW50KGludGVnZXJNb2QoZmxvYXQoeCksIGZsb2F0KHkpKSk7XFxufVxcblxcbi8vIEhlcmUgYmUgZHJhZ29ucyFcXG4vLyBETyBOT1QgT1BUSU1JWkUgVEhJUyBDT0RFXFxuLy8gWU9VIFdJTEwgQlJFQUsgU09NRVRISU5HIE9OIFNPTUVCT0RZJ1MgTUFDSElORVxcbi8vIExFQVZFIElUIEFTIElUIElTLCBMRVNUIFlPVSBXQVNURSBZT1VSIE9XTiBUSU1FXFxuY29uc3QgdmVjMiBNQUdJQ19WRUMgPSB2ZWMyKDEuMCwgLTI1Ni4wKTtcXG5jb25zdCB2ZWM0IFNDQUxFX0ZBQ1RPUiA9IHZlYzQoMS4wLCAyNTYuMCwgNjU1MzYuMCwgMC4wKTtcXG5jb25zdCB2ZWM0IFNDQUxFX0ZBQ1RPUl9JTlYgPSB2ZWM0KDEuMCwgMC4wMDM5MDYyNSwgMC4wMDAwMTUyNTg3ODkwNjI1LCAwLjApOyAvLyAxLCAxLzI1NiwgMS82NTUzNlxcbmhpZ2hwIGZsb2F0IGRlY29kZTMyKGhpZ2hwIHZlYzQgcmdiYSkge1xcbiAgX19ERUNPREUzMl9FTkRJQU5ORVNTX187XFxuICByZ2JhICo9IDI1NS4wO1xcbiAgdmVjMiBndGUxMjg7XFxuICBndGUxMjgueCA9IHJnYmEuYiA+PSAxMjguMCA/IDEuMCA6IDAuMDtcXG4gIGd0ZTEyOC55ID0gcmdiYS5hID49IDEyOC4wID8gMS4wIDogMC4wO1xcbiAgZmxvYXQgZXhwb25lbnQgPSAyLjAgKiByZ2JhLmEgLSAxMjcuMCArIGRvdChndGUxMjgsIE1BR0lDX1ZFQyk7XFxuICBmbG9hdCByZXMgPSBleHAyKHJvdW5kKGV4cG9uZW50KSk7XFxuICByZ2JhLmIgPSByZ2JhLmIgLSAxMjguMCAqIGd0ZTEyOC54O1xcbiAgcmVzID0gZG90KHJnYmEsIFNDQUxFX0ZBQ1RPUikgKiBleHAyKHJvdW5kKGV4cG9uZW50LTIzLjApKSArIHJlcztcXG4gIHJlcyAqPSBndGUxMjgueSAqIC0yLjAgKyAxLjA7XFxuICByZXR1cm4gcmVzO1xcbn1cXG5cXG5oaWdocCB2ZWM0IGVuY29kZTMyKGhpZ2hwIGZsb2F0IGYpIHtcXG4gIGhpZ2hwIGZsb2F0IEYgPSBhYnMoZik7XFxuICBoaWdocCBmbG9hdCBzaWduID0gZiA8IDAuMCA/IDEuMCA6IDAuMDtcXG4gIGhpZ2hwIGZsb2F0IGV4cG9uZW50ID0gZmxvb3IobG9nMihGKSk7XFxuICBoaWdocCBmbG9hdCBtYW50aXNzYSA9IChleHAyKC1leHBvbmVudCkgKiBGKTtcXG4gIC8vIGV4cG9uZW50ICs9IGZsb29yKGxvZzIobWFudGlzc2EpKTtcXG4gIHZlYzQgcmdiYSA9IHZlYzQoRiAqIGV4cDIoMjMuMC1leHBvbmVudCkpICogU0NBTEVfRkFDVE9SX0lOVjtcXG4gIHJnYmEucmcgPSBpbnRlZ2VyTW9kKHJnYmEucmcsIDI1Ni4wKTtcXG4gIHJnYmEuYiA9IGludGVnZXJNb2QocmdiYS5iLCAxMjguMCk7XFxuICByZ2JhLmEgPSBleHBvbmVudCowLjUgKyA2My41O1xcbiAgcmdiYS5iYSArPSB2ZWMyKGludGVnZXJNb2QoZXhwb25lbnQrMTI3LjAsIDIuMCksIHNpZ24pICogMTI4LjA7XFxuICByZ2JhID0gZmxvb3IocmdiYSk7XFxuICByZ2JhICo9IDAuMDAzOTIxNTY5OyAvLyAxLzI1NVxcbiAgX19FTkNPREUzMl9FTkRJQU5ORVNTX187XFxuICByZXR1cm4gcmdiYTtcXG59XFxuLy8gRHJhZ29ucyBlbmQgaGVyZVxcblxcbmhpZ2hwIGZsb2F0IGluZGV4O1xcbmhpZ2hwIHZlYzMgdGhyZWFkSWQ7XFxuXFxuaGlnaHAgdmVjMyBpbmRleFRvM0QoaGlnaHAgZmxvYXQgaWR4LCBoaWdocCB2ZWMzIHRleERpbSkge1xcbiAgaGlnaHAgZmxvYXQgeiA9IGZsb29yKGlkeCAvICh0ZXhEaW0ueCAqIHRleERpbS55KSk7XFxuICBpZHggLT0geiAqIHRleERpbS54ICogdGV4RGltLnk7XFxuICBoaWdocCBmbG9hdCB5ID0gZmxvb3IoaWR4IC8gdGV4RGltLngpO1xcbiAgaGlnaHAgZmxvYXQgeCA9IGludGVnZXJNb2QoaWR4LCB0ZXhEaW0ueCk7XFxuICByZXR1cm4gdmVjMyh4LCB5LCB6KTtcXG59XFxuXFxuaGlnaHAgZmxvYXQgZ2V0KGhpZ2hwIHNhbXBsZXIyRCB0ZXgsIGhpZ2hwIHZlYzIgdGV4U2l6ZSwgaGlnaHAgdmVjMyB0ZXhEaW0sIGhpZ2hwIGZsb2F0IHosIGhpZ2hwIGZsb2F0IHksIGhpZ2hwIGZsb2F0IHgpIHtcXG4gIGhpZ2hwIHZlYzMgeHl6ID0gdmVjMyh4LCB5LCB6KTtcXG4gIHh5eiA9IGZsb29yKHh5eiArIDAuNSk7XFxuICBfX0dFVF9XUkFQQVJPVU5EX187XFxuICBoaWdocCBmbG9hdCBpbmRleCA9IHJvdW5kKHh5ei54ICsgdGV4RGltLnggKiAoeHl6LnkgKyB0ZXhEaW0ueSAqIHh5ei56KSk7XFxuICBfX0dFVF9URVhUVVJFX0NIQU5ORUxfXztcXG4gIGhpZ2hwIGZsb2F0IHcgPSByb3VuZCh0ZXhTaXplLngpO1xcbiAgdmVjMiBzdCA9IHZlYzIoaW50ZWdlck1vZChpbmRleCwgdyksIGZsb2F0KGludChpbmRleCkgLyBpbnQodykpKSArIDAuNTtcXG4gIF9fR0VUX1RFWFRVUkVfSU5ERVhfXztcXG4gIGhpZ2hwIHZlYzQgdGV4ZWwgPSB0ZXh0dXJlMkQodGV4LCBzdCAvIHRleFNpemUpO1xcbiAgX19HRVRfUkVTVUxUX187XFxufVxcblxcbmhpZ2hwIGZsb2F0IGdldChoaWdocCBzYW1wbGVyMkQgdGV4LCBoaWdocCB2ZWMyIHRleFNpemUsIGhpZ2hwIHZlYzMgdGV4RGltLCBoaWdocCBmbG9hdCB5LCBoaWdocCBmbG9hdCB4KSB7XFxuICByZXR1cm4gZ2V0KHRleCwgdGV4U2l6ZSwgdGV4RGltLCAwLjAsIHksIHgpO1xcbn1cXG5cXG5oaWdocCBmbG9hdCBnZXQoaGlnaHAgc2FtcGxlcjJEIHRleCwgaGlnaHAgdmVjMiB0ZXhTaXplLCBoaWdocCB2ZWMzIHRleERpbSwgaGlnaHAgZmxvYXQgeCkge1xcbiAgcmV0dXJuIGdldCh0ZXgsIHRleFNpemUsIHRleERpbSwgMC4wLCAwLjAsIHgpO1xcbn1cXG5cXG5oaWdocCB2ZWM0IGFjdHVhbENvbG9yO1xcbnZvaWQgY29sb3IoZmxvYXQgciwgZmxvYXQgZywgZmxvYXQgYiwgZmxvYXQgYSkge1xcbiAgYWN0dWFsQ29sb3IgPSB2ZWM0KHIsZyxiLGEpO1xcbn1cXG5cXG52b2lkIGNvbG9yKGZsb2F0IHIsIGZsb2F0IGcsIGZsb2F0IGIpIHtcXG4gIGNvbG9yKHIsZyxiLDEuMCk7XFxufVxcblxcbl9fTUFJTl9QQVJBTVNfXztcXG5fX01BSU5fQ09OU1RBTlRTX187XFxuX19LRVJORUxfXztcXG5cXG52b2lkIG1haW4odm9pZCkge1xcbiAgaW5kZXggPSBmbG9vcih2VGV4Q29vcmQucyAqIGZsb2F0KHVUZXhTaXplLngpKSArIGZsb29yKHZUZXhDb29yZC50ICogZmxvYXQodVRleFNpemUueSkpICogdVRleFNpemUueDtcXG4gIF9fTUFJTl9SRVNVTFRfXztcXG59XCI7XG59LHt9XSwxNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBcInByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG5wcmVjaXNpb24gaGlnaHAgaW50O1xcbnByZWNpc2lvbiBoaWdocCBzYW1wbGVyMkQ7XFxuXFxuYXR0cmlidXRlIGhpZ2hwIHZlYzIgYVBvcztcXG5hdHRyaWJ1dGUgaGlnaHAgdmVjMiBhVGV4Q29vcmQ7XFxuXFxudmFyeWluZyBoaWdocCB2ZWMyIHZUZXhDb29yZDtcXG51bmlmb3JtIHZlYzIgcmF0aW87XFxuXFxudm9pZCBtYWluKHZvaWQpIHtcXG4gIGdsX1Bvc2l0aW9uID0gdmVjNCgoYVBvcyArIHZlYzIoMSkpICogcmF0aW8gKyB2ZWMyKC0xKSwgMCwgMSk7XFxuICB2VGV4Q29vcmQgPSBhVGV4Q29vcmQ7XFxufVwiO1xufSx7fV0sMTg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBXZWJHTEtlcm5lbCA9IHJlcXVpcmUoJy4va2VybmVsJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi8uLi9jb3JlL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9XZWJHTEtlcm5lbCkge1xuXHRfaW5oZXJpdHMoV2ViR0xWYWxpZGF0b3JLZXJuZWwsIF9XZWJHTEtlcm5lbCk7XG5cblx0ZnVuY3Rpb24gV2ViR0xWYWxpZGF0b3JLZXJuZWwoKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYkdMVmFsaWRhdG9yS2VybmVsKTtcblxuXHRcdHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoV2ViR0xWYWxpZGF0b3JLZXJuZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXZWJHTFZhbGlkYXRvcktlcm5lbCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKFdlYkdMVmFsaWRhdG9yS2VybmVsLCBbe1xuXHRcdGtleTogJ3ZhbGlkYXRlT3B0aW9ucycsXG5cblxuXHRcdHZhbHVlOiBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoKSB7XG5cdFx0XHR0aGlzLnRleFNpemUgPSB1dGlscy5kaW1Ub1RleFNpemUoe1xuXHRcdFx0XHRmbG9hdFRleHR1cmVzOiB0aGlzLmZsb2F0VGV4dHVyZXMsXG5cdFx0XHRcdGZsb2F0T3V0cHV0OiB0aGlzLmZsb2F0T3V0cHV0XG5cdFx0XHR9LCB0aGlzLm91dHB1dCwgdHJ1ZSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIFdlYkdMVmFsaWRhdG9yS2VybmVsO1xufShXZWJHTEtlcm5lbCk7XG59LHtcIi4uLy4uL2NvcmUvdXRpbHNcIjoyNCxcIi4va2VybmVsXCI6MTR9XSwxOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYWxpYXMobmFtZSwgZm4pIHtcblx0dmFyIGZuU3RyaW5nID0gZm4udG9TdHJpbmcoKTtcblx0cmV0dXJuIG5ldyBGdW5jdGlvbigncmV0dXJuIGZ1bmN0aW9uICcgKyBuYW1lICsgJyAoJyArIHV0aWxzLmdldFBhcmFtTmFtZXNGcm9tU3RyaW5nKGZuU3RyaW5nKS5qb2luKCcsICcpICsgJykgeycgKyB1dGlscy5nZXRGdW5jdGlvbkJvZHlGcm9tU3RyaW5nKGZuU3RyaW5nKSArICd9JykoKTtcbn07XG59LHtcIi4vdXRpbHNcIjoyNH1dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFV0aWxzQ29yZSA9IHJlcXVpcmUoXCIuL3V0aWxzLWNvcmVcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXHRmdW5jdGlvbiBHUFVDb3JlKCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHUFVDb3JlKTtcblx0fVxuXG5cdF9jcmVhdGVDbGFzcyhHUFVDb3JlLCBudWxsLCBbe1xuXHRcdGtleTogXCJ2YWxpZGF0ZUtlcm5lbE9ialwiLFxuXG5cblx0XHR2YWx1ZTogZnVuY3Rpb24gdmFsaWRhdGVLZXJuZWxPYmooa2VybmVsT2JqKSB7XG5cblx0XHRcdGlmIChrZXJuZWxPYmogPT09IG51bGwpIHtcblx0XHRcdFx0dGhyb3cgXCJLZXJuZWxPYmogYmVpbmcgdmFsaWRhdGVkIGlzIE5VTExcIjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHR5cGVvZiBrZXJuZWxPYmogPT09IFwic3RyaW5nXCIpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRrZXJuZWxPYmogPSBKU09OLnBhcnNlKGtlcm5lbE9iaik7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKGUpO1xuXHRcdFx0XHRcdHRocm93IFwiRmFpbGVkIHRvIGNvbnZlcnQgS2VybmVsT2JqIGZyb20gSlNPTiBzdHJpbmdcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChrZXJuZWxPYmogPT09IG51bGwpIHtcblx0XHRcdFx0XHR0aHJvdyBcIkludmFsaWQgKE5VTEwpIEtlcm5lbE9iaiBKU09OIHN0cmluZyByZXByZXNlbnRhdGlvblwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChrZXJuZWxPYmouaXNLZXJuZWxPYmogIT09IHRydWUpIHtcblx0XHRcdFx0dGhyb3cgXCJGYWlsZWQgbWlzc2luZyBpc0tlcm5lbE9iaiBmbGFnIGNoZWNrXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBrZXJuZWxPYmo7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogXCJsb2FkS2VybmVsT2JqXCIsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGxvYWRLZXJuZWxPYmooa2VybmVsT2JqLCBpbk9wdCkge1xuXG5cdFx0XHRrZXJuZWxPYmogPSB2YWxpZGF0ZUtlcm5lbE9iaihrZXJuZWxPYmopO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBHUFVDb3JlO1xufSgpO1xufSx7XCIuL3V0aWxzLWNvcmVcIjoyM31dLDIxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgV2ViR0xSdW5uZXIgPSByZXF1aXJlKCcuLi9iYWNrZW5kL3dlYi1nbC9ydW5uZXInKTtcbnZhciBDUFVSdW5uZXIgPSByZXF1aXJlKCcuLi9iYWNrZW5kL2NwdS9ydW5uZXInKTtcbnZhciBXZWJHTFZhbGlkYXRvcktlcm5lbCA9IHJlcXVpcmUoJy4uL2JhY2tlbmQvd2ViLWdsL3ZhbGlkYXRvci1rZXJuZWwnKTtcbnZhciBHUFVDb3JlID0gcmVxdWlyZShcIi4vZ3B1LWNvcmVcIik7XG5cblxudmFyIEdQVSA9IGZ1bmN0aW9uIChfR1BVQ29yZSkge1xuXHRfaW5oZXJpdHMoR1BVLCBfR1BVQ29yZSk7XG5cblx0ZnVuY3Rpb24gR1BVKHNldHRpbmdzKSB7XG5cdFx0X2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdQVSk7XG5cblx0XHR2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoR1BVLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoR1BVKSkuY2FsbCh0aGlzLCBzZXR0aW5ncykpO1xuXG5cdFx0c2V0dGluZ3MgPSBzZXR0aW5ncyB8fCB7fTtcblx0XHRfdGhpcy5fY2FudmFzID0gc2V0dGluZ3MuY2FudmFzIHx8IG51bGw7XG5cdFx0X3RoaXMuX3dlYkdsID0gc2V0dGluZ3Mud2ViR2wgfHwgbnVsbDtcblx0XHR2YXIgbW9kZSA9IHNldHRpbmdzLm1vZGUgfHwgJ3dlYmdsJztcblx0XHRpZiAoIXV0aWxzLmlzV2ViR2xTdXBwb3J0ZWQoKSkge1xuXHRcdFx0Y29uc29sZS53YXJuKCdXYXJuaW5nOiBncHUgbm90IHN1cHBvcnRlZCwgZmFsbGluZyBiYWNrIHRvIGNwdSBzdXBwb3J0Jyk7XG5cdFx0XHRtb2RlID0gJ2NwdSc7XG5cdFx0fVxuXG5cdFx0X3RoaXMua2VybmVscyA9IFtdO1xuXG5cdFx0dmFyIHJ1bm5lclNldHRpbmdzID0ge1xuXHRcdFx0Y2FudmFzOiBfdGhpcy5fY2FudmFzLFxuXHRcdFx0d2ViR2w6IF90aGlzLl93ZWJHbFxuXHRcdH07XG5cblx0XHRpZiAobW9kZSkge1xuXHRcdFx0c3dpdGNoIChtb2RlLnRvTG93ZXJDYXNlKCkpIHtcblx0XHRcdFx0Y2FzZSAnY3B1Jzpcblx0XHRcdFx0XHRfdGhpcy5fcnVubmVyID0gbmV3IENQVVJ1bm5lcihydW5uZXJTZXR0aW5ncyk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dwdSc6XG5cdFx0XHRcdGNhc2UgJ3dlYmdsJzpcblx0XHRcdFx0XHRfdGhpcy5fcnVubmVyID0gbmV3IFdlYkdMUnVubmVyKHJ1bm5lclNldHRpbmdzKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnd2ViZ2wtdmFsaWRhdG9yJzpcblx0XHRcdFx0XHRfdGhpcy5fcnVubmVyID0gbmV3IFdlYkdMUnVubmVyKHJ1bm5lclNldHRpbmdzKTtcblx0XHRcdFx0XHRfdGhpcy5fcnVubmVyLktlcm5lbCA9IFdlYkdMVmFsaWRhdG9yS2VybmVsO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignXCInICsgbW9kZSArICdcIiBtb2RlIGlzIG5vdCBkZWZpbmVkJyk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBfdGhpcztcblx0fVxuXG5cblx0X2NyZWF0ZUNsYXNzKEdQVSwgW3tcblx0XHRrZXk6ICdjcmVhdGVLZXJuZWwnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVLZXJuZWwoZm4sIHNldHRpbmdzKSB7XG5cdFx0XHRpZiAodHlwZW9mIGZuID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHR0aHJvdyAnTWlzc2luZyBmbiBwYXJhbWV0ZXInO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCF1dGlscy5pc0Z1bmN0aW9uKGZuKSAmJiB0eXBlb2YgZm4gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdHRocm93ICdmbiBwYXJhbWV0ZXIgbm90IGEgZnVuY3Rpb24nO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIga2VybmVsID0gdGhpcy5fcnVubmVyLmJ1aWxkS2VybmVsKGZuLCBzZXR0aW5ncyB8fCB7fSk7XG5cblx0XHRcdGlmICghdGhpcy5fY2FudmFzKSB7XG5cdFx0XHRcdHRoaXMuX2NhbnZhcyA9IGtlcm5lbC5nZXRDYW52YXMoKTtcblx0XHRcdH1cblx0XHRcdGlmICghdGhpcy5fcnVubmVyLmNhbnZhcykge1xuXHRcdFx0XHR0aGlzLl9ydW5uZXIuY2FudmFzID0ga2VybmVsLmdldENhbnZhcygpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLmtlcm5lbHMucHVzaChrZXJuZWwpO1xuXG5cdFx0XHRyZXR1cm4ga2VybmVsO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdjcmVhdGVLZXJuZWxNYXAnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVLZXJuZWxNYXAoKSB7XG5cdFx0XHR2YXIgZm4gPSB2b2lkIDA7XG5cdFx0XHR2YXIgc2V0dGluZ3MgPSB2b2lkIDA7XG5cdFx0XHRpZiAodHlwZW9mIGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMl0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0Zm4gPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDJdO1xuXHRcdFx0XHRzZXR0aW5ncyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmbiA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG5cdFx0XHR9XG5cblx0XHRcdGlmICghdXRpbHMuaXNXZWJHbERyYXdCdWZmZXJzU3VwcG9ydGVkKCkpIHtcblx0XHRcdFx0dGhpcy5fcnVubmVyID0gbmV3IENQVVJ1bm5lcihzZXR0aW5ncyk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBrZXJuZWwgPSB0aGlzLmNyZWF0ZUtlcm5lbChmbiwgc2V0dGluZ3MpO1xuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzBdKSkge1xuXHRcdFx0XHR2YXIgZnVuY3Rpb25zID0gYXJndW1lbnRzWzBdO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGZ1bmN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGtlcm5lbC5hZGRTdWJLZXJuZWwoZnVuY3Rpb25zW2ldKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIF9mdW5jdGlvbnMgPSBhcmd1bWVudHNbMF07XG5cdFx0XHRcdGZvciAodmFyIHAgaW4gX2Z1bmN0aW9ucykge1xuXHRcdFx0XHRcdGlmICghX2Z1bmN0aW9ucy5oYXNPd25Qcm9wZXJ0eShwKSkgY29udGludWU7XG5cdFx0XHRcdFx0a2VybmVsLmFkZFN1Yktlcm5lbFByb3BlcnR5KHAsIF9mdW5jdGlvbnNbcF0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBrZXJuZWw7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2NvbWJpbmVLZXJuZWxzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gY29tYmluZUtlcm5lbHMoKSB7XG5cdFx0XHR2YXIgbGFzdEtlcm5lbCA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMl07XG5cdFx0XHR2YXIgY29tYmluZWRLZXJuZWwgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aCAtIDFdO1xuXHRcdFx0aWYgKHRoaXMuZ2V0TW9kZSgpID09PSAnY3B1JykgcmV0dXJuIGNvbWJpbmVkS2VybmVsO1xuXG5cdFx0XHR2YXIgY2FudmFzID0gYXJndW1lbnRzWzBdLmdldENhbnZhcygpO1xuXHRcdFx0dmFyIHdlYkdsID0gYXJndW1lbnRzWzBdLmdldFdlYkdsKCk7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuXHRcdFx0XHRhcmd1bWVudHNbaV0uc2V0Q2FudmFzKGNhbnZhcykuc2V0V2ViR2wod2ViR2wpLnNldE91dHB1dFRvVGV4dHVyZSh0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0Y29tYmluZWRLZXJuZWwuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcblx0XHRcdFx0dmFyIHRleFNpemUgPSBsYXN0S2VybmVsLnRleFNpemU7XG5cdFx0XHRcdHZhciBnbCA9IGxhc3RLZXJuZWwuZ2V0V2ViR2woKTtcblx0XHRcdFx0dmFyIHRocmVhZERpbSA9IGxhc3RLZXJuZWwudGhyZWFkRGltO1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gdm9pZCAwO1xuXHRcdFx0XHRpZiAobGFzdEtlcm5lbC5mbG9hdE91dHB1dCkge1xuXHRcdFx0XHRcdHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkodGV4U2l6ZVswXSAqIHRleFNpemVbMV0gKiA0KTtcblx0XHRcdFx0XHRnbC5yZWFkUGl4ZWxzKDAsIDAsIHRleFNpemVbMF0sIHRleFNpemVbMV0sIGdsLlJHQkEsIGdsLkZMT0FULCByZXN1bHQpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KHRleFNpemVbMF0gKiB0ZXhTaXplWzFdICogNCk7XG5cdFx0XHRcdFx0Z2wucmVhZFBpeGVscygwLCAwLCB0ZXhTaXplWzBdLCB0ZXhTaXplWzFdLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBieXRlcyk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gbmV3IEZsb2F0MzJBcnJheShieXRlcy5idWZmZXIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnN1YmFycmF5KDAsIHRocmVhZERpbVswXSAqIHRocmVhZERpbVsxXSAqIHRocmVhZERpbVsyXSk7XG5cblx0XHRcdFx0aWYgKGxhc3RLZXJuZWwub3V0cHV0Lmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHRcdH0gZWxzZSBpZiAobGFzdEtlcm5lbC5vdXRwdXQubGVuZ3RoID09PSAyKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHV0aWxzLnNwbGl0QXJyYXkocmVzdWx0LCBsYXN0S2VybmVsLm91dHB1dFswXSk7XG5cdFx0XHRcdH0gZWxzZSBpZiAobGFzdEtlcm5lbC5vdXRwdXQubGVuZ3RoID09PSAzKSB7XG5cdFx0XHRcdFx0dmFyIGN1YmUgPSB1dGlscy5zcGxpdEFycmF5KHJlc3VsdCwgbGFzdEtlcm5lbC5vdXRwdXRbMF0gKiBsYXN0S2VybmVsLm91dHB1dFsxXSk7XG5cdFx0XHRcdFx0cmV0dXJuIGN1YmUubWFwKGZ1bmN0aW9uICh4KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdXRpbHMuc3BsaXRBcnJheSh4LCBsYXN0S2VybmVsLm91dHB1dFswXSk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZEZ1bmN0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkRnVuY3Rpb24oZm4sIHBhcmFtVHlwZXMsIHJldHVyblR5cGUpIHtcblx0XHRcdHRoaXMuX3J1bm5lci5mdW5jdGlvbkJ1aWxkZXIuYWRkRnVuY3Rpb24obnVsbCwgZm4sIHBhcmFtVHlwZXMsIHJldHVyblR5cGUpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2FkZE5hdGl2ZUZ1bmN0aW9uJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gYWRkTmF0aXZlRnVuY3Rpb24obmFtZSwgbmF0aXZlRnVuY3Rpb24pIHtcblx0XHRcdHRoaXMuX3J1bm5lci5mdW5jdGlvbkJ1aWxkZXIuYWRkTmF0aXZlRnVuY3Rpb24obmFtZSwgbmF0aXZlRnVuY3Rpb24pO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldE1vZGUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRNb2RlKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX3J1bm5lci5nZXRNb2RlKCk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2lzV2ViR2xTdXBwb3J0ZWQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc1dlYkdsU3VwcG9ydGVkKCkge1xuXHRcdFx0cmV0dXJuIHV0aWxzLmlzV2ViR2xTdXBwb3J0ZWQoKTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0Q2FudmFzJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0Q2FudmFzKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2NhbnZhcztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZ2V0V2ViR2wnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRXZWJHbCgpIHtcblx0XHRcdHJldHVybiB0aGlzLl93ZWJHbDtcblx0XHR9XG5cdH1dKTtcblxuXHRyZXR1cm4gR1BVO1xufShHUFVDb3JlKTtcblxuO1xuXG5PYmplY3QuYXNzaWduKEdQVSwgR1BVQ29yZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gR1BVO1xufSx7XCIuLi9iYWNrZW5kL2NwdS9ydW5uZXJcIjo1LFwiLi4vYmFja2VuZC93ZWItZ2wvcnVubmVyXCI6MTUsXCIuLi9iYWNrZW5kL3dlYi1nbC92YWxpZGF0b3Ita2VybmVsXCI6MTgsXCIuL2dwdS1jb3JlXCI6MjAsXCIuL3V0aWxzXCI6MjR9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBncHUgPSBudWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcblxuXHRmdW5jdGlvbiBUZXh0dXJlKHRleHR1cmUsIHNpemUsIG91dHB1dCwgd2ViR2wpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dHVyZSk7XG5cblx0XHR0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuXHRcdHRoaXMuc2l6ZSA9IHNpemU7XG5cdFx0dGhpcy5vdXRwdXQgPSBvdXRwdXQ7XG5cdFx0dGhpcy53ZWJHbCA9IHdlYkdsO1xuXHRcdHRoaXMua2VybmVsID0gbnVsbDtcblx0fVxuXG5cblxuXHRfY3JlYXRlQ2xhc3MoVGV4dHVyZSwgW3tcblx0XHRrZXk6ICd0b0FycmF5Jyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gdG9BcnJheShncHUpIHtcblx0XHRcdGlmICghZ3B1KSB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBuZWVkIHRvIHBhc3MgdGhlIEdQVSBvYmplY3QgZm9yIHRvQXJyYXkgdG8gd29yay4nKTtcblx0XHRcdGlmICh0aGlzLmtlcm5lbCkgcmV0dXJuIHRoaXMua2VybmVsKHRoaXMpO1xuXG5cdFx0XHR0aGlzLmtlcm5lbCA9IGdwdS5jcmVhdGVLZXJuZWwoZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0cmV0dXJuIHhbdGhpcy50aHJlYWQuel1bdGhpcy50aHJlYWQueV1bdGhpcy50aHJlYWQueF07XG5cdFx0XHR9KS5zZXRPdXRwdXQodGhpcy5vdXRwdXQpO1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5rZXJuZWwodGhpcyk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2RlbGV0ZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy53ZWJHbC5kZWxldGVUZXh0dXJlKHRoaXMudGV4dHVyZSk7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIFRleHR1cmU7XG59KCk7XG59LHt9XSwyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFV0aWxzQ29yZSA9IGZ1bmN0aW9uICgpIHtcblx0ZnVuY3Rpb24gVXRpbHNDb3JlKCkge1xuXHRcdF9jbGFzc0NhbGxDaGVjayh0aGlzLCBVdGlsc0NvcmUpO1xuXHR9XG5cblx0X2NyZWF0ZUNsYXNzKFV0aWxzQ29yZSwgbnVsbCwgW3tcblx0XHRrZXk6ICdpc0NhbnZhcycsXG5cblxuXG5cblxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc0NhbnZhcyhjYW52YXNPYmopIHtcblx0XHRcdHJldHVybiBjYW52YXNPYmogIT09IG51bGwgJiYgY2FudmFzT2JqLm5vZGVOYW1lICYmIGNhbnZhc09iai5nZXRDb250ZXh0ICYmIGNhbnZhc09iai5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnQ0FOVkFTJztcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaXNDYW52YXNTdXBwb3J0ZWQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc0NhbnZhc1N1cHBvcnRlZCgpIHtcblx0XHRcdHJldHVybiBfaXNDYW52YXNTdXBwb3J0ZWQ7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2luaXRDYW52YXMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpbml0Q2FudmFzKCkge1xuXHRcdFx0aWYgKCFfaXNDYW52YXNTdXBwb3J0ZWQpIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuXHRcdFx0Y2FudmFzLndpZHRoID0gMjtcblx0XHRcdGNhbnZhcy5oZWlnaHQgPSAyO1xuXG5cdFx0XHRyZXR1cm4gY2FudmFzO1xuXHRcdH1cblxuXG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaXNXZWJHbCcsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGlzV2ViR2wod2ViR2xPYmopIHtcblx0XHRcdHJldHVybiB3ZWJHbE9iaiAmJiB0eXBlb2Ygd2ViR2xPYmouZ2V0RXh0ZW5zaW9uID09PSAnZnVuY3Rpb24nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdpc1dlYkdsU3VwcG9ydGVkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNXZWJHbFN1cHBvcnRlZCgpIHtcblx0XHRcdHJldHVybiBfaXNXZWJHbFN1cHBvcnRlZDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdpc1dlYkdsRHJhd0J1ZmZlcnNTdXBwb3J0ZWQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc1dlYkdsRHJhd0J1ZmZlcnNTdXBwb3J0ZWQoKSB7XG5cdFx0XHRyZXR1cm4gX2lzV2ViR2xEcmF3QnVmZmVyc1N1cHBvcnRlZDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaW5pdFdlYkdsRGVmYXVsdE9wdGlvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpbml0V2ViR2xEZWZhdWx0T3B0aW9ucygpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGFscGhhOiBmYWxzZSxcblx0XHRcdFx0ZGVwdGg6IGZhbHNlLFxuXHRcdFx0XHRhbnRpYWxpYXM6IGZhbHNlXG5cdFx0XHR9O1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdpbml0V2ViR2wnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpbml0V2ViR2woY2FudmFzT2JqKSB7XG5cblx0XHRcdGlmICh0eXBlb2YgX2lzQ2FudmFzU3VwcG9ydGVkICE9PSAndW5kZWZpbmVkJyB8fCBjYW52YXNPYmogPT09IG51bGwpIHtcblx0XHRcdFx0aWYgKCFfaXNDYW52YXNTdXBwb3J0ZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIVV0aWxzQ29yZS5pc0NhbnZhcyhjYW52YXNPYmopKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjYW52YXMgb2JqZWN0IC0gJyArIGNhbnZhc09iaik7XG5cdFx0XHR9XG5cblx0XHRcdHZhciB3ZWJHbCA9IGNhbnZhc09iai5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBVdGlsc0NvcmUuaW5pdFdlYkdsRGVmYXVsdE9wdGlvbnMoKSkgfHwgY2FudmFzT2JqLmdldENvbnRleHQoJ3dlYmdsJywgVXRpbHNDb3JlLmluaXRXZWJHbERlZmF1bHRPcHRpb25zKCkpO1xuXG5cdFx0XHRpZiAod2ViR2wpIHtcblx0XHRcdFx0d2ViR2wuT0VTX3RleHR1cmVfZmxvYXQgPSB3ZWJHbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2Zsb2F0Jyk7XG5cdFx0XHRcdHdlYkdsLk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhciA9IHdlYkdsLmdldEV4dGVuc2lvbignT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyJyk7XG5cdFx0XHRcdHdlYkdsLk9FU19lbGVtZW50X2luZGV4X3VpbnQgPSB3ZWJHbC5nZXRFeHRlbnNpb24oJ09FU19lbGVtZW50X2luZGV4X3VpbnQnKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHdlYkdsO1xuXHRcdH1cblx0fV0pO1xuXG5cdHJldHVybiBVdGlsc0NvcmU7XG59KCk7XG5cblxudmFyIF9pc0NhbnZhc1N1cHBvcnRlZCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBVdGlsc0NvcmUuaXNDYW52YXMoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykpIDogZmFsc2U7XG52YXIgX3Rlc3RpbmdXZWJHbCA9IFV0aWxzQ29yZS5pbml0V2ViR2woVXRpbHNDb3JlLmluaXRDYW52YXMoKSk7XG52YXIgX2lzV2ViR2xTdXBwb3J0ZWQgPSBVdGlsc0NvcmUuaXNXZWJHbChfdGVzdGluZ1dlYkdsKTtcbnZhciBfaXNXZWJHbERyYXdCdWZmZXJzU3VwcG9ydGVkID0gX2lzV2ViR2xTdXBwb3J0ZWQgJiYgQm9vbGVhbihfdGVzdGluZ1dlYkdsLmdldEV4dGVuc2lvbignV0VCR0xfZHJhd19idWZmZXJzJykpO1xuXG5pZiAoX2lzV2ViR2xTdXBwb3J0ZWQpIHtcblx0VXRpbHNDb3JlLk9FU190ZXh0dXJlX2Zsb2F0ID0gX3Rlc3RpbmdXZWJHbC5PRVNfdGV4dHVyZV9mbG9hdDtcblx0VXRpbHNDb3JlLk9FU190ZXh0dXJlX2Zsb2F0X2xpbmVhciA9IF90ZXN0aW5nV2ViR2wuT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyO1xuXHRVdGlsc0NvcmUuT0VTX2VsZW1lbnRfaW5kZXhfdWludCA9IF90ZXN0aW5nV2ViR2wuT0VTX2VsZW1lbnRfaW5kZXhfdWludDtcbn0gZWxzZSB7XG5cdFV0aWxzQ29yZS5PRVNfdGV4dHVyZV9mbG9hdCA9IGZhbHNlO1xuXHRVdGlsc0NvcmUuT0VTX3RleHR1cmVfZmxvYXRfbGluZWFyID0gZmFsc2U7XG5cdFV0aWxzQ29yZS5PRVNfZWxlbWVudF9pbmRleF91aW50ID0gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbHNDb3JlO1xufSx7fV0sMjQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgVXRpbHNDb3JlID0gcmVxdWlyZShcIi4vdXRpbHMtY29yZVwiKTtcbnZhciBUZXh0dXJlID0gcmVxdWlyZSgnLi90ZXh0dXJlJyk7XG52YXIgRlVOQ1RJT05fTkFNRSA9IC9mdW5jdGlvbiAoW14oXSopLztcblxudmFyIFNUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xuXG52YXIgQVJHVU1FTlRfTkFNRVMgPSAvKFteXFxzLF0rKS9nO1xuXG52YXIgX3N5c3RlbUVuZGlhbm5lc3MgPSBmdW5jdGlvbiAoKSB7XG5cdHZhciBiID0gbmV3IEFycmF5QnVmZmVyKDQpO1xuXHR2YXIgYSA9IG5ldyBVaW50MzJBcnJheShiKTtcblx0dmFyIGMgPSBuZXcgVWludDhBcnJheShiKTtcblx0YVswXSA9IDB4ZGVhZGJlZWY7XG5cdGlmIChjWzBdID09PSAweGVmKSByZXR1cm4gJ0xFJztcblx0aWYgKGNbMF0gPT09IDB4ZGUpIHJldHVybiAnQkUnO1xuXHR0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gZW5kaWFubmVzcycpO1xufSgpO1xuXG52YXIgX2lzRmxvYXRSZWFkUGl4ZWxzU3VwcG9ydGVkID0gbnVsbDtcblxudmFyIFV0aWxzID0gZnVuY3Rpb24gKF9VdGlsc0NvcmUpIHtcblx0X2luaGVyaXRzKFV0aWxzLCBfVXRpbHNDb3JlKTtcblxuXHRmdW5jdGlvbiBVdGlscygpIHtcblx0XHRfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXRpbHMpO1xuXG5cdFx0cmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChVdGlscy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFV0aWxzKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdH1cblxuXHRfY3JlYXRlQ2xhc3MoVXRpbHMsIG51bGwsIFt7XG5cdFx0a2V5OiAnc3lzdGVtRW5kaWFubmVzcycsXG5cblxuXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHN5c3RlbUVuZGlhbm5lc3MoKSB7XG5cdFx0XHRyZXR1cm4gX3N5c3RlbUVuZGlhbm5lc3M7XG5cdFx0fVxuXG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaXNGdW5jdGlvbicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGlzRnVuY3Rpb24oZnVuY09iaikge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiBmdW5jT2JqID09PSAnZnVuY3Rpb24nO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdpc0Z1bmN0aW9uU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gaXNGdW5jdGlvblN0cmluZyhmdW5jU3RyKSB7XG5cdFx0XHRpZiAoZnVuY1N0ciAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY1N0ci50b1N0cmluZygpLnNsaWNlKDAsICdmdW5jdGlvbicubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSAnZnVuY3Rpb24nO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdnZXRGdW5jdGlvbk5hbWVGcm9tU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0RnVuY3Rpb25OYW1lRnJvbVN0cmluZyhmdW5jU3RyKSB7XG5cdFx0XHRyZXR1cm4gRlVOQ1RJT05fTkFNRS5leGVjKGZ1bmNTdHIpWzFdO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2dldEZ1bmN0aW9uQm9keUZyb21TdHJpbmcnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXRGdW5jdGlvbkJvZHlGcm9tU3RyaW5nKGZ1bmNTdHIpIHtcblx0XHRcdHJldHVybiBmdW5jU3RyLnN1YnN0cmluZyhmdW5jU3RyLmluZGV4T2YoJ3snKSArIDEsIGZ1bmNTdHIubGFzdEluZGV4T2YoJ30nKSk7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldFBhcmFtTmFtZXNGcm9tU3RyaW5nJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gZ2V0UGFyYW1OYW1lc0Zyb21TdHJpbmcoZnVuYykge1xuXHRcdFx0dmFyIGZuU3RyID0gZnVuYy50b1N0cmluZygpLnJlcGxhY2UoU1RSSVBfQ09NTUVOVFMsICcnKTtcblx0XHRcdHZhciByZXN1bHQgPSBmblN0ci5zbGljZShmblN0ci5pbmRleE9mKCcoJykgKyAxLCBmblN0ci5pbmRleE9mKCcpJykpLm1hdGNoKEFSR1VNRU5UX05BTUVTKTtcblx0XHRcdGlmIChyZXN1bHQgPT09IG51bGwpIHJlc3VsdCA9IFtdO1xuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdjbG9uZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGNsb25lKG9iaikge1xuXHRcdFx0aWYgKG9iaiA9PT0gbnVsbCB8fCAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqKSkgIT09ICdvYmplY3QnIHx8IG9iai5oYXNPd25Qcm9wZXJ0eSgnaXNBY3RpdmVDbG9uZScpKSByZXR1cm4gb2JqO1xuXG5cdFx0XHR2YXIgdGVtcCA9IG9iai5jb25zdHJ1Y3RvcigpO1xuXG5cdFx0XHRmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG5cdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG5cdFx0XHRcdFx0b2JqLmlzQWN0aXZlQ2xvbmUgPSBudWxsO1xuXHRcdFx0XHRcdHRlbXBba2V5XSA9IFV0aWxzLmNsb25lKG9ialtrZXldKTtcblx0XHRcdFx0XHRkZWxldGUgb2JqLmlzQWN0aXZlQ2xvbmU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRlbXA7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ25ld1Byb21pc2UnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBuZXdQcm9taXNlKGV4ZWN1dG9yKSB7XG5cdFx0XHR2YXIgc2ltcGxlID0gUHJvbWlzZSB8fCBzbWFsbF9wcm9taXNlO1xuXHRcdFx0aWYgKHNpbXBsZSA9PT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoJ0Jyb3dzZXIgaXMgbWlzc2luZyBQcm9taXNlIGltcGxlbWVudGF0aW9uLiBDb25zaWRlciBhZGRpbmcgc21hbGxfcHJvbWlzZS5qcyBwb2x5ZmlsbCcpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5ldyBzaW1wbGUoZXhlY3V0b3IpO1xuXHRcdH1cblxuXG5cdH0sIHtcblx0XHRrZXk6ICdmdW5jdGlvbkJpbmRlcicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGZ1bmN0aW9uQmluZGVyKGluRnVuYywgdGhpc09iaikge1xuXHRcdFx0aWYgKGluRnVuYy5iaW5kKSB7XG5cdFx0XHRcdHJldHVybiBpbkZ1bmMuYmluZCh0aGlzT2JqKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gW2FyZ3VtZW50c1swXV0gOiBBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXHRcdFx0XHRyZXR1cm4gaW5GdW5jLmFwcGx5KHRoaXNPYmosIGFyZ3MpO1xuXHRcdFx0fTtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaXNBcnJheScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGlzQXJyYXkoYXJyYXkpIHtcblx0XHRcdGlmIChpc05hTihhcnJheS5sZW5ndGgpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldEFyZ3VtZW50VHlwZScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEFyZ3VtZW50VHlwZShhcmcpIHtcblx0XHRcdGlmIChVdGlscy5pc0FycmF5KGFyZykpIHtcblx0XHRcdFx0cmV0dXJuICdBcnJheSc7XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG5cdFx0XHRcdHJldHVybiAnTnVtYmVyJztcblx0XHRcdH0gZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgVGV4dHVyZSkge1xuXHRcdFx0XHRyZXR1cm4gJ1RleHR1cmUnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuICdVbmtub3duJztcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnaXNGbG9hdFJlYWRQaXhlbHNTdXBwb3J0ZWQnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBpc0Zsb2F0UmVhZFBpeGVsc1N1cHBvcnRlZCgpIHtcblx0XHRcdGlmIChfaXNGbG9hdFJlYWRQaXhlbHNTdXBwb3J0ZWQgIT09IG51bGwpIHtcblx0XHRcdFx0cmV0dXJuIF9pc0Zsb2F0UmVhZFBpeGVsc1N1cHBvcnRlZDtcblx0XHRcdH1cblxuXHRcdFx0dmFyIEdQVSA9IHJlcXVpcmUoJy4uL2luZGV4Jyk7XG5cdFx0XHR2YXIgeCA9IG5ldyBHUFUoe1xuXHRcdFx0XHRtb2RlOiAnd2ViZ2wtdmFsaWRhdG9yJ1xuXHRcdFx0fSkuY3JlYXRlS2VybmVsKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9LCB7XG5cdFx0XHRcdG91dHB1dDogWzJdLFxuXHRcdFx0XHRmbG9hdFRleHR1cmVzOiB0cnVlLFxuXHRcdFx0XHRmbG9hdE91dHB1dDogdHJ1ZSxcblx0XHRcdFx0ZmxvYXRPdXRwdXRGb3JjZTogdHJ1ZVxuXHRcdFx0fSkoKTtcblxuXHRcdFx0X2lzRmxvYXRSZWFkUGl4ZWxzU3VwcG9ydGVkID0geFswXSA9PT0gMTtcblxuXHRcdFx0cmV0dXJuIF9pc0Zsb2F0UmVhZFBpeGVsc1N1cHBvcnRlZDtcblx0XHR9XG5cdH0sIHtcblx0XHRrZXk6ICdkaW1Ub1RleFNpemUnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBkaW1Ub1RleFNpemUob3B0LCBkaW1lbnNpb25zLCBvdXRwdXQpIHtcblx0XHRcdHZhciBudW1UZXhlbHMgPSBkaW1lbnNpb25zWzBdO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCBkaW1lbnNpb25zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdG51bVRleGVscyAqPSBkaW1lbnNpb25zW2ldO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0LmZsb2F0VGV4dHVyZXMgJiYgKCFvdXRwdXQgfHwgb3B0LmZsb2F0T3V0cHV0KSkge1xuXHRcdFx0XHRudW1UZXhlbHMgPSBNYXRoLmNlaWwobnVtVGV4ZWxzIC8gNCk7XG5cdFx0XHR9XG5cblx0XHRcdHZhciB3ID0gTWF0aC5jZWlsKE1hdGguc3FydChudW1UZXhlbHMpKTtcblx0XHRcdHJldHVybiBbdywgd107XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2dldERpbWVuc2lvbnMnLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBnZXREaW1lbnNpb25zKHgsIHBhZCkge1xuXHRcdFx0dmFyIHJldCA9IHZvaWQgMDtcblx0XHRcdGlmIChVdGlscy5pc0FycmF5KHgpKSB7XG5cdFx0XHRcdHZhciBkaW0gPSBbXTtcblx0XHRcdFx0dmFyIHRlbXAgPSB4O1xuXHRcdFx0XHR3aGlsZSAoVXRpbHMuaXNBcnJheSh0ZW1wKSkge1xuXHRcdFx0XHRcdGRpbS5wdXNoKHRlbXAubGVuZ3RoKTtcblx0XHRcdFx0XHR0ZW1wID0gdGVtcFswXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXQgPSBkaW0ucmV2ZXJzZSgpO1xuXHRcdFx0fSBlbHNlIGlmICh4IGluc3RhbmNlb2YgVGV4dHVyZSkge1xuXHRcdFx0XHRyZXQgPSB4Lm91dHB1dDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93ICdVbmtub3duIGRpbWVuc2lvbnMgb2YgJyArIHg7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwYWQpIHtcblx0XHRcdFx0cmV0ID0gVXRpbHMuY2xvbmUocmV0KTtcblx0XHRcdFx0d2hpbGUgKHJldC5sZW5ndGggPCAzKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAncGFkJyxcblx0XHR2YWx1ZTogZnVuY3Rpb24gcGFkKGFyciwgcGFkZGluZykge1xuXHRcdFx0ZnVuY3Rpb24gemVyb3Mobikge1xuXHRcdFx0XHRyZXR1cm4gQXJyYXkuYXBwbHkobnVsbCwgbmV3IEFycmF5KG4pKS5tYXAoTnVtYmVyLnByb3RvdHlwZS52YWx1ZU9mLCAwKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGxlbiA9IGFyci5sZW5ndGggKyBwYWRkaW5nICogMjtcblxuXHRcdFx0dmFyIHJldCA9IGFyci5tYXAoZnVuY3Rpb24gKHgpIHtcblx0XHRcdFx0cmV0dXJuIFtdLmNvbmNhdCh6ZXJvcyhwYWRkaW5nKSwgeCwgemVyb3MocGFkZGluZykpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGFkZGluZzsgaSsrKSB7XG5cdFx0XHRcdHJldCA9IFtdLmNvbmNhdChbemVyb3MobGVuKV0sIHJldCwgW3plcm9zKGxlbildKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnZmxhdHRlbjJkQXJyYXlUbycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGZsYXR0ZW4yZEFycmF5VG8oYXJyYXksIHRhcmdldCkge1xuXHRcdFx0dmFyIG9mZnNldCA9IDA7XG5cdFx0XHRmb3IgKHZhciB5ID0gMDsgeSA8IGFycmF5Lmxlbmd0aDsgeSsrKSB7XG5cdFx0XHRcdHRhcmdldC5zZXQoYXJyYXlbeV0sIG9mZnNldCk7XG5cdFx0XHRcdG9mZnNldCArPSBhcnJheVt5XS5sZW5ndGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2ZsYXR0ZW4zZEFycmF5VG8nLFxuXHRcdHZhbHVlOiBmdW5jdGlvbiBmbGF0dGVuM2RBcnJheVRvKGFycmF5LCB0YXJnZXQpIHtcblx0XHRcdHZhciBvZmZzZXQgPSAwO1xuXHRcdFx0Zm9yICh2YXIgeiA9IDA7IHogPCBhcnJheS5sZW5ndGg7IHorKykge1xuXHRcdFx0XHRmb3IgKHZhciB5ID0gMDsgeSA8IGFycmF5W3pdLmxlbmd0aDsgeSsrKSB7XG5cdFx0XHRcdFx0dGFyZ2V0LnNldChhcnJheVt6XVt5XSwgb2Zmc2V0KTtcblx0XHRcdFx0XHRvZmZzZXQgKz0gYXJyYXlbel1beV0ubGVuZ3RoO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cblx0fSwge1xuXHRcdGtleTogJ2ZsYXR0ZW5UbycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGZsYXR0ZW5UbyhhcnJheSwgdGFyZ2V0KSB7XG5cdFx0XHRpZiAoVXRpbHMuaXNBcnJheShhcnJheVswXSkpIHtcblx0XHRcdFx0aWYgKFV0aWxzLmlzQXJyYXkoYXJyYXlbMF1bMF0pKSB7XG5cdFx0XHRcdFx0VXRpbHMuZmxhdHRlbjNkQXJyYXlUbyhhcnJheSwgdGFyZ2V0KTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRVdGlscy5mbGF0dGVuMmRBcnJheVRvKGFycmF5LCB0YXJnZXQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0YXJnZXQuc2V0KGFycmF5KTtcblx0XHRcdH1cblx0XHR9XG5cblxuXHR9LCB7XG5cdFx0a2V5OiAnc3BsaXRBcnJheScsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIHNwbGl0QXJyYXkoYXJyYXksIHBhcnQpIHtcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IHBhcnQpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2goQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyYXksIGksIGkgKyBwYXJ0KSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2dldEFzdFN0cmluZycsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGdldEFzdFN0cmluZyhzb3VyY2UsIGFzdCkge1xuXHRcdFx0dmFyIGxpbmVzID0gQXJyYXkuaXNBcnJheShzb3VyY2UpID8gc291cmNlIDogc291cmNlLnNwbGl0KC9cXHI/XFxuL2cpO1xuXHRcdFx0dmFyIHN0YXJ0ID0gYXN0LmxvYy5zdGFydDtcblx0XHRcdHZhciBlbmQgPSBhc3QubG9jLmVuZDtcblx0XHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHRcdHJlc3VsdC5wdXNoKGxpbmVzW3N0YXJ0LmxpbmUgLSAxXS5zbGljZShzdGFydC5jb2x1bW4pKTtcblx0XHRcdGZvciAodmFyIGkgPSBzdGFydC5saW5lOyBpIDwgZW5kLmxpbmUgLSAxOyBpKyspIHtcblx0XHRcdFx0cmVzdWx0LnB1c2gobGluZXNbaV0pO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0LnB1c2gobGluZXNbZW5kLmxpbmUgLSAxXS5zbGljZSgwLCBlbmQuY29sdW1uKSk7XG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oJ1xcbicpO1xuXHRcdH1cblx0fSwge1xuXHRcdGtleTogJ2FsbFByb3BlcnRpZXNPZicsXG5cdFx0dmFsdWU6IGZ1bmN0aW9uIGFsbFByb3BlcnRpZXNPZihvYmopIHtcblx0XHRcdHZhciBwcm9wcyA9IFtdO1xuXG5cdFx0XHRkbyB7XG5cdFx0XHRcdHByb3BzLnB1c2guYXBwbHkocHJvcHMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikpO1xuXHRcdFx0fSB3aGlsZSAob2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpO1xuXG5cdFx0XHRyZXR1cm4gcHJvcHM7XG5cdFx0fVxuXHR9XSk7XG5cblx0cmV0dXJuIFV0aWxzO1xufShVdGlsc0NvcmUpO1xuXG5cblxuT2JqZWN0LmFzc2lnbihVdGlscywgVXRpbHNDb3JlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBVdGlscztcbn0se1wiLi4vaW5kZXhcIjoyNSxcIi4vdGV4dHVyZVwiOjIyLFwiLi91dGlscy1jb3JlXCI6MjN9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBHUFUgPSByZXF1aXJlKCcuL2NvcmUvZ3B1Jyk7XG52YXIgYWxpYXMgPSByZXF1aXJlKCcuL2NvcmUvYWxpYXMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vY29yZS91dGlscycpO1xuXG52YXIgQ1BVRnVuY3Rpb25CdWlsZGVyID0gcmVxdWlyZSgnLi9iYWNrZW5kL2NwdS9mdW5jdGlvbi1idWlsZGVyJyk7XG52YXIgQ1BVRnVuY3Rpb25Ob2RlID0gcmVxdWlyZSgnLi9iYWNrZW5kL2NwdS9mdW5jdGlvbi1ub2RlJyk7XG52YXIgQ1BVS2VybmVsID0gcmVxdWlyZSgnLi9iYWNrZW5kL2NwdS9rZXJuZWwnKTtcbnZhciBDUFVSdW5uZXIgPSByZXF1aXJlKCcuL2JhY2tlbmQvY3B1L3J1bm5lcicpO1xuXG52YXIgV2ViR0xGdW5jdGlvbkJ1aWxkZXIgPSByZXF1aXJlKCcuL2JhY2tlbmQvd2ViLWdsL2Z1bmN0aW9uLWJ1aWxkZXInKTtcbnZhciBXZWJHTEZ1bmN0aW9uTm9kZSA9IHJlcXVpcmUoJy4vYmFja2VuZC93ZWItZ2wvZnVuY3Rpb24tbm9kZScpO1xudmFyIFdlYkdMS2VybmVsID0gcmVxdWlyZSgnLi9iYWNrZW5kL3dlYi1nbC9rZXJuZWwnKTtcbnZhciBXZWJHTFJ1bm5lciA9IHJlcXVpcmUoJy4vYmFja2VuZC93ZWItZ2wvcnVubmVyJyk7XG5cbkdQVS5hbGlhcyA9IGFsaWFzO1xuR1BVLnV0aWxzID0gdXRpbHM7XG5cbkdQVS5DUFVGdW5jdGlvbkJ1aWxkZXIgPSBDUFVGdW5jdGlvbkJ1aWxkZXI7XG5HUFUuQ1BVRnVuY3Rpb25Ob2RlID0gQ1BVRnVuY3Rpb25Ob2RlO1xuR1BVLkNQVUtlcm5lbCA9IENQVUtlcm5lbDtcbkdQVS5DUFVSdW5uZXIgPSBDUFVSdW5uZXI7XG5cbkdQVS5XZWJHTEZ1bmN0aW9uQnVpbGRlciA9IFdlYkdMRnVuY3Rpb25CdWlsZGVyO1xuR1BVLldlYkdMRnVuY3Rpb25Ob2RlID0gV2ViR0xGdW5jdGlvbk5vZGU7XG5HUFUuV2ViR0xLZXJuZWwgPSBXZWJHTEtlcm5lbDtcbkdQVS5XZWJHTFJ1bm5lciA9IFdlYkdMUnVubmVyO1xuXG5pZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBHUFU7XG59XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0d2luZG93LkdQVSA9IEdQVTtcbn1cbn0se1wiLi9iYWNrZW5kL2NwdS9mdW5jdGlvbi1idWlsZGVyXCI6MSxcIi4vYmFja2VuZC9jcHUvZnVuY3Rpb24tbm9kZVwiOjIsXCIuL2JhY2tlbmQvY3B1L2tlcm5lbFwiOjQsXCIuL2JhY2tlbmQvY3B1L3J1bm5lclwiOjUsXCIuL2JhY2tlbmQvd2ViLWdsL2Z1bmN0aW9uLWJ1aWxkZXJcIjoxMSxcIi4vYmFja2VuZC93ZWItZ2wvZnVuY3Rpb24tbm9kZVwiOjEyLFwiLi9iYWNrZW5kL3dlYi1nbC9rZXJuZWxcIjoxNCxcIi4vYmFja2VuZC93ZWItZ2wvcnVubmVyXCI6MTUsXCIuL2NvcmUvYWxpYXNcIjoxOSxcIi4vY29yZS9ncHVcIjoyMSxcIi4vY29yZS91dGlsc1wiOjI0fV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxuXHQoZmFjdG9yeSgoZ2xvYmFsLmFjb3JuID0gZ2xvYmFsLmFjb3JuIHx8IHt9KSkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciByZXNlcnZlZFdvcmRzID0ge1xuICAzOiBcImFic3RyYWN0IGJvb2xlYW4gYnl0ZSBjaGFyIGNsYXNzIGRvdWJsZSBlbnVtIGV4cG9ydCBleHRlbmRzIGZpbmFsIGZsb2F0IGdvdG8gaW1wbGVtZW50cyBpbXBvcnQgaW50IGludGVyZmFjZSBsb25nIG5hdGl2ZSBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzaG9ydCBzdGF0aWMgc3VwZXIgc3luY2hyb25pemVkIHRocm93cyB0cmFuc2llbnQgdm9sYXRpbGVcIixcbiAgNTogXCJjbGFzcyBlbnVtIGV4dGVuZHMgc3VwZXIgY29uc3QgZXhwb3J0IGltcG9ydFwiLFxuICA2OiBcImVudW1cIixcbiAgc3RyaWN0OiBcImltcGxlbWVudHMgaW50ZXJmYWNlIGxldCBwYWNrYWdlIHByaXZhdGUgcHJvdGVjdGVkIHB1YmxpYyBzdGF0aWMgeWllbGRcIixcbiAgc3RyaWN0QmluZDogXCJldmFsIGFyZ3VtZW50c1wiXG59O1xuXG5cbnZhciBlY21hNUFuZExlc3NLZXl3b3JkcyA9IFwiYnJlYWsgY2FzZSBjYXRjaCBjb250aW51ZSBkZWJ1Z2dlciBkZWZhdWx0IGRvIGVsc2UgZmluYWxseSBmb3IgZnVuY3Rpb24gaWYgcmV0dXJuIHN3aXRjaCB0aHJvdyB0cnkgdmFyIHdoaWxlIHdpdGggbnVsbCB0cnVlIGZhbHNlIGluc3RhbmNlb2YgdHlwZW9mIHZvaWQgZGVsZXRlIG5ldyBpbiB0aGlzXCI7XG5cbnZhciBrZXl3b3JkcyA9IHtcbiAgNTogZWNtYTVBbmRMZXNzS2V5d29yZHMsXG4gIDY6IGVjbWE1QW5kTGVzc0tleXdvcmRzICsgXCIgY29uc3QgY2xhc3MgZXh0ZW5kcyBleHBvcnQgaW1wb3J0IHN1cGVyXCJcbn07XG5cblxuXG52YXIgbm9uQVNDSUlpZGVudGlmaWVyU3RhcnRDaGFycyA9IFwiXFx4YWFcXHhiNVxceGJhXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxcdTAyYzFcXHUwMmM2LVxcdTAyZDFcXHUwMmUwLVxcdTAyZTRcXHUwMmVjXFx1MDJlZVxcdTAzNzAtXFx1MDM3NFxcdTAzNzZcXHUwMzc3XFx1MDM3YS1cXHUwMzdkXFx1MDM3ZlxcdTAzODZcXHUwMzg4LVxcdTAzOGFcXHUwMzhjXFx1MDM4ZS1cXHUwM2ExXFx1MDNhMy1cXHUwM2Y1XFx1MDNmNy1cXHUwNDgxXFx1MDQ4YS1cXHUwNTJmXFx1MDUzMS1cXHUwNTU2XFx1MDU1OVxcdTA1NjEtXFx1MDU4N1xcdTA1ZDAtXFx1MDVlYVxcdTA1ZjAtXFx1MDVmMlxcdTA2MjAtXFx1MDY0YVxcdTA2NmVcXHUwNjZmXFx1MDY3MS1cXHUwNmQzXFx1MDZkNVxcdTA2ZTVcXHUwNmU2XFx1MDZlZVxcdTA2ZWZcXHUwNmZhLVxcdTA2ZmNcXHUwNmZmXFx1MDcxMFxcdTA3MTItXFx1MDcyZlxcdTA3NGQtXFx1MDdhNVxcdTA3YjFcXHUwN2NhLVxcdTA3ZWFcXHUwN2Y0XFx1MDdmNVxcdTA3ZmFcXHUwODAwLVxcdTA4MTVcXHUwODFhXFx1MDgyNFxcdTA4MjhcXHUwODQwLVxcdTA4NThcXHUwOGEwLVxcdTA4YjRcXHUwOGI2LVxcdTA4YmRcXHUwOTA0LVxcdTA5MzlcXHUwOTNkXFx1MDk1MFxcdTA5NTgtXFx1MDk2MVxcdTA5NzEtXFx1MDk4MFxcdTA5ODUtXFx1MDk4Y1xcdTA5OGZcXHUwOTkwXFx1MDk5My1cXHUwOWE4XFx1MDlhYS1cXHUwOWIwXFx1MDliMlxcdTA5YjYtXFx1MDliOVxcdTA5YmRcXHUwOWNlXFx1MDlkY1xcdTA5ZGRcXHUwOWRmLVxcdTA5ZTFcXHUwOWYwXFx1MDlmMVxcdTBhMDUtXFx1MGEwYVxcdTBhMGZcXHUwYTEwXFx1MGExMy1cXHUwYTI4XFx1MGEyYS1cXHUwYTMwXFx1MGEzMlxcdTBhMzNcXHUwYTM1XFx1MGEzNlxcdTBhMzhcXHUwYTM5XFx1MGE1OS1cXHUwYTVjXFx1MGE1ZVxcdTBhNzItXFx1MGE3NFxcdTBhODUtXFx1MGE4ZFxcdTBhOGYtXFx1MGE5MVxcdTBhOTMtXFx1MGFhOFxcdTBhYWEtXFx1MGFiMFxcdTBhYjJcXHUwYWIzXFx1MGFiNS1cXHUwYWI5XFx1MGFiZFxcdTBhZDBcXHUwYWUwXFx1MGFlMVxcdTBhZjlcXHUwYjA1LVxcdTBiMGNcXHUwYjBmXFx1MGIxMFxcdTBiMTMtXFx1MGIyOFxcdTBiMmEtXFx1MGIzMFxcdTBiMzJcXHUwYjMzXFx1MGIzNS1cXHUwYjM5XFx1MGIzZFxcdTBiNWNcXHUwYjVkXFx1MGI1Zi1cXHUwYjYxXFx1MGI3MVxcdTBiODNcXHUwYjg1LVxcdTBiOGFcXHUwYjhlLVxcdTBiOTBcXHUwYjkyLVxcdTBiOTVcXHUwYjk5XFx1MGI5YVxcdTBiOWNcXHUwYjllXFx1MGI5ZlxcdTBiYTNcXHUwYmE0XFx1MGJhOC1cXHUwYmFhXFx1MGJhZS1cXHUwYmI5XFx1MGJkMFxcdTBjMDUtXFx1MGMwY1xcdTBjMGUtXFx1MGMxMFxcdTBjMTItXFx1MGMyOFxcdTBjMmEtXFx1MGMzOVxcdTBjM2RcXHUwYzU4LVxcdTBjNWFcXHUwYzYwXFx1MGM2MVxcdTBjODBcXHUwYzg1LVxcdTBjOGNcXHUwYzhlLVxcdTBjOTBcXHUwYzkyLVxcdTBjYThcXHUwY2FhLVxcdTBjYjNcXHUwY2I1LVxcdTBjYjlcXHUwY2JkXFx1MGNkZVxcdTBjZTBcXHUwY2UxXFx1MGNmMVxcdTBjZjJcXHUwZDA1LVxcdTBkMGNcXHUwZDBlLVxcdTBkMTBcXHUwZDEyLVxcdTBkM2FcXHUwZDNkXFx1MGQ0ZVxcdTBkNTQtXFx1MGQ1NlxcdTBkNWYtXFx1MGQ2MVxcdTBkN2EtXFx1MGQ3ZlxcdTBkODUtXFx1MGQ5NlxcdTBkOWEtXFx1MGRiMVxcdTBkYjMtXFx1MGRiYlxcdTBkYmRcXHUwZGMwLVxcdTBkYzZcXHUwZTAxLVxcdTBlMzBcXHUwZTMyXFx1MGUzM1xcdTBlNDAtXFx1MGU0NlxcdTBlODFcXHUwZTgyXFx1MGU4NFxcdTBlODdcXHUwZTg4XFx1MGU4YVxcdTBlOGRcXHUwZTk0LVxcdTBlOTdcXHUwZTk5LVxcdTBlOWZcXHUwZWExLVxcdTBlYTNcXHUwZWE1XFx1MGVhN1xcdTBlYWFcXHUwZWFiXFx1MGVhZC1cXHUwZWIwXFx1MGViMlxcdTBlYjNcXHUwZWJkXFx1MGVjMC1cXHUwZWM0XFx1MGVjNlxcdTBlZGMtXFx1MGVkZlxcdTBmMDBcXHUwZjQwLVxcdTBmNDdcXHUwZjQ5LVxcdTBmNmNcXHUwZjg4LVxcdTBmOGNcXHUxMDAwLVxcdTEwMmFcXHUxMDNmXFx1MTA1MC1cXHUxMDU1XFx1MTA1YS1cXHUxMDVkXFx1MTA2MVxcdTEwNjVcXHUxMDY2XFx1MTA2ZS1cXHUxMDcwXFx1MTA3NS1cXHUxMDgxXFx1MTA4ZVxcdTEwYTAtXFx1MTBjNVxcdTEwYzdcXHUxMGNkXFx1MTBkMC1cXHUxMGZhXFx1MTBmYy1cXHUxMjQ4XFx1MTI0YS1cXHUxMjRkXFx1MTI1MC1cXHUxMjU2XFx1MTI1OFxcdTEyNWEtXFx1MTI1ZFxcdTEyNjAtXFx1MTI4OFxcdTEyOGEtXFx1MTI4ZFxcdTEyOTAtXFx1MTJiMFxcdTEyYjItXFx1MTJiNVxcdTEyYjgtXFx1MTJiZVxcdTEyYzBcXHUxMmMyLVxcdTEyYzVcXHUxMmM4LVxcdTEyZDZcXHUxMmQ4LVxcdTEzMTBcXHUxMzEyLVxcdTEzMTVcXHUxMzE4LVxcdTEzNWFcXHUxMzgwLVxcdTEzOGZcXHUxM2EwLVxcdTEzZjVcXHUxM2Y4LVxcdTEzZmRcXHUxNDAxLVxcdTE2NmNcXHUxNjZmLVxcdTE2N2ZcXHUxNjgxLVxcdTE2OWFcXHUxNmEwLVxcdTE2ZWFcXHUxNmVlLVxcdTE2ZjhcXHUxNzAwLVxcdTE3MGNcXHUxNzBlLVxcdTE3MTFcXHUxNzIwLVxcdTE3MzFcXHUxNzQwLVxcdTE3NTFcXHUxNzYwLVxcdTE3NmNcXHUxNzZlLVxcdTE3NzBcXHUxNzgwLVxcdTE3YjNcXHUxN2Q3XFx1MTdkY1xcdTE4MjAtXFx1MTg3N1xcdTE4ODAtXFx1MThhOFxcdTE4YWFcXHUxOGIwLVxcdTE4ZjVcXHUxOTAwLVxcdTE5MWVcXHUxOTUwLVxcdTE5NmRcXHUxOTcwLVxcdTE5NzRcXHUxOTgwLVxcdTE5YWJcXHUxOWIwLVxcdTE5YzlcXHUxYTAwLVxcdTFhMTZcXHUxYTIwLVxcdTFhNTRcXHUxYWE3XFx1MWIwNS1cXHUxYjMzXFx1MWI0NS1cXHUxYjRiXFx1MWI4My1cXHUxYmEwXFx1MWJhZVxcdTFiYWZcXHUxYmJhLVxcdTFiZTVcXHUxYzAwLVxcdTFjMjNcXHUxYzRkLVxcdTFjNGZcXHUxYzVhLVxcdTFjN2RcXHUxYzgwLVxcdTFjODhcXHUxY2U5LVxcdTFjZWNcXHUxY2VlLVxcdTFjZjFcXHUxY2Y1XFx1MWNmNlxcdTFkMDAtXFx1MWRiZlxcdTFlMDAtXFx1MWYxNVxcdTFmMTgtXFx1MWYxZFxcdTFmMjAtXFx1MWY0NVxcdTFmNDgtXFx1MWY0ZFxcdTFmNTAtXFx1MWY1N1xcdTFmNTlcXHUxZjViXFx1MWY1ZFxcdTFmNWYtXFx1MWY3ZFxcdTFmODAtXFx1MWZiNFxcdTFmYjYtXFx1MWZiY1xcdTFmYmVcXHUxZmMyLVxcdTFmYzRcXHUxZmM2LVxcdTFmY2NcXHUxZmQwLVxcdTFmZDNcXHUxZmQ2LVxcdTFmZGJcXHUxZmUwLVxcdTFmZWNcXHUxZmYyLVxcdTFmZjRcXHUxZmY2LVxcdTFmZmNcXHUyMDcxXFx1MjA3ZlxcdTIwOTAtXFx1MjA5Y1xcdTIxMDJcXHUyMTA3XFx1MjEwYS1cXHUyMTEzXFx1MjExNVxcdTIxMTgtXFx1MjExZFxcdTIxMjRcXHUyMTI2XFx1MjEyOFxcdTIxMmEtXFx1MjEzOVxcdTIxM2MtXFx1MjEzZlxcdTIxNDUtXFx1MjE0OVxcdTIxNGVcXHUyMTYwLVxcdTIxODhcXHUyYzAwLVxcdTJjMmVcXHUyYzMwLVxcdTJjNWVcXHUyYzYwLVxcdTJjZTRcXHUyY2ViLVxcdTJjZWVcXHUyY2YyXFx1MmNmM1xcdTJkMDAtXFx1MmQyNVxcdTJkMjdcXHUyZDJkXFx1MmQzMC1cXHUyZDY3XFx1MmQ2ZlxcdTJkODAtXFx1MmQ5NlxcdTJkYTAtXFx1MmRhNlxcdTJkYTgtXFx1MmRhZVxcdTJkYjAtXFx1MmRiNlxcdTJkYjgtXFx1MmRiZVxcdTJkYzAtXFx1MmRjNlxcdTJkYzgtXFx1MmRjZVxcdTJkZDAtXFx1MmRkNlxcdTJkZDgtXFx1MmRkZVxcdTMwMDUtXFx1MzAwN1xcdTMwMjEtXFx1MzAyOVxcdTMwMzEtXFx1MzAzNVxcdTMwMzgtXFx1MzAzY1xcdTMwNDEtXFx1MzA5NlxcdTMwOWItXFx1MzA5ZlxcdTMwYTEtXFx1MzBmYVxcdTMwZmMtXFx1MzBmZlxcdTMxMDUtXFx1MzEyZFxcdTMxMzEtXFx1MzE4ZVxcdTMxYTAtXFx1MzFiYVxcdTMxZjAtXFx1MzFmZlxcdTM0MDAtXFx1NGRiNVxcdTRlMDAtXFx1OWZkNVxcdWEwMDAtXFx1YTQ4Y1xcdWE0ZDAtXFx1YTRmZFxcdWE1MDAtXFx1YTYwY1xcdWE2MTAtXFx1YTYxZlxcdWE2MmFcXHVhNjJiXFx1YTY0MC1cXHVhNjZlXFx1YTY3Zi1cXHVhNjlkXFx1YTZhMC1cXHVhNmVmXFx1YTcxNy1cXHVhNzFmXFx1YTcyMi1cXHVhNzg4XFx1YTc4Yi1cXHVhN2FlXFx1YTdiMC1cXHVhN2I3XFx1YTdmNy1cXHVhODAxXFx1YTgwMy1cXHVhODA1XFx1YTgwNy1cXHVhODBhXFx1YTgwYy1cXHVhODIyXFx1YTg0MC1cXHVhODczXFx1YTg4Mi1cXHVhOGIzXFx1YThmMi1cXHVhOGY3XFx1YThmYlxcdWE4ZmRcXHVhOTBhLVxcdWE5MjVcXHVhOTMwLVxcdWE5NDZcXHVhOTYwLVxcdWE5N2NcXHVhOTg0LVxcdWE5YjJcXHVhOWNmXFx1YTllMC1cXHVhOWU0XFx1YTllNi1cXHVhOWVmXFx1YTlmYS1cXHVhOWZlXFx1YWEwMC1cXHVhYTI4XFx1YWE0MC1cXHVhYTQyXFx1YWE0NC1cXHVhYTRiXFx1YWE2MC1cXHVhYTc2XFx1YWE3YVxcdWFhN2UtXFx1YWFhZlxcdWFhYjFcXHVhYWI1XFx1YWFiNlxcdWFhYjktXFx1YWFiZFxcdWFhYzBcXHVhYWMyXFx1YWFkYi1cXHVhYWRkXFx1YWFlMC1cXHVhYWVhXFx1YWFmMi1cXHVhYWY0XFx1YWIwMS1cXHVhYjA2XFx1YWIwOS1cXHVhYjBlXFx1YWIxMS1cXHVhYjE2XFx1YWIyMC1cXHVhYjI2XFx1YWIyOC1cXHVhYjJlXFx1YWIzMC1cXHVhYjVhXFx1YWI1Yy1cXHVhYjY1XFx1YWI3MC1cXHVhYmUyXFx1YWMwMC1cXHVkN2EzXFx1ZDdiMC1cXHVkN2M2XFx1ZDdjYi1cXHVkN2ZiXFx1ZjkwMC1cXHVmYTZkXFx1ZmE3MC1cXHVmYWQ5XFx1ZmIwMC1cXHVmYjA2XFx1ZmIxMy1cXHVmYjE3XFx1ZmIxZFxcdWZiMWYtXFx1ZmIyOFxcdWZiMmEtXFx1ZmIzNlxcdWZiMzgtXFx1ZmIzY1xcdWZiM2VcXHVmYjQwXFx1ZmI0MVxcdWZiNDNcXHVmYjQ0XFx1ZmI0Ni1cXHVmYmIxXFx1ZmJkMy1cXHVmZDNkXFx1ZmQ1MC1cXHVmZDhmXFx1ZmQ5Mi1cXHVmZGM3XFx1ZmRmMC1cXHVmZGZiXFx1ZmU3MC1cXHVmZTc0XFx1ZmU3Ni1cXHVmZWZjXFx1ZmYyMS1cXHVmZjNhXFx1ZmY0MS1cXHVmZjVhXFx1ZmY2Ni1cXHVmZmJlXFx1ZmZjMi1cXHVmZmM3XFx1ZmZjYS1cXHVmZmNmXFx1ZmZkMi1cXHVmZmQ3XFx1ZmZkYS1cXHVmZmRjXCI7XG52YXIgbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgPSBcIlxcdTIwMGNcXHUyMDBkXFx4YjdcXHUwMzAwLVxcdTAzNmZcXHUwMzg3XFx1MDQ4My1cXHUwNDg3XFx1MDU5MS1cXHUwNWJkXFx1MDViZlxcdTA1YzFcXHUwNWMyXFx1MDVjNFxcdTA1YzVcXHUwNWM3XFx1MDYxMC1cXHUwNjFhXFx1MDY0Yi1cXHUwNjY5XFx1MDY3MFxcdTA2ZDYtXFx1MDZkY1xcdTA2ZGYtXFx1MDZlNFxcdTA2ZTdcXHUwNmU4XFx1MDZlYS1cXHUwNmVkXFx1MDZmMC1cXHUwNmY5XFx1MDcxMVxcdTA3MzAtXFx1MDc0YVxcdTA3YTYtXFx1MDdiMFxcdTA3YzAtXFx1MDdjOVxcdTA3ZWItXFx1MDdmM1xcdTA4MTYtXFx1MDgxOVxcdTA4MWItXFx1MDgyM1xcdTA4MjUtXFx1MDgyN1xcdTA4MjktXFx1MDgyZFxcdTA4NTktXFx1MDg1YlxcdTA4ZDQtXFx1MDhlMVxcdTA4ZTMtXFx1MDkwM1xcdTA5M2EtXFx1MDkzY1xcdTA5M2UtXFx1MDk0ZlxcdTA5NTEtXFx1MDk1N1xcdTA5NjJcXHUwOTYzXFx1MDk2Ni1cXHUwOTZmXFx1MDk4MS1cXHUwOTgzXFx1MDliY1xcdTA5YmUtXFx1MDljNFxcdTA5YzdcXHUwOWM4XFx1MDljYi1cXHUwOWNkXFx1MDlkN1xcdTA5ZTJcXHUwOWUzXFx1MDllNi1cXHUwOWVmXFx1MGEwMS1cXHUwYTAzXFx1MGEzY1xcdTBhM2UtXFx1MGE0MlxcdTBhNDdcXHUwYTQ4XFx1MGE0Yi1cXHUwYTRkXFx1MGE1MVxcdTBhNjYtXFx1MGE3MVxcdTBhNzVcXHUwYTgxLVxcdTBhODNcXHUwYWJjXFx1MGFiZS1cXHUwYWM1XFx1MGFjNy1cXHUwYWM5XFx1MGFjYi1cXHUwYWNkXFx1MGFlMlxcdTBhZTNcXHUwYWU2LVxcdTBhZWZcXHUwYjAxLVxcdTBiMDNcXHUwYjNjXFx1MGIzZS1cXHUwYjQ0XFx1MGI0N1xcdTBiNDhcXHUwYjRiLVxcdTBiNGRcXHUwYjU2XFx1MGI1N1xcdTBiNjJcXHUwYjYzXFx1MGI2Ni1cXHUwYjZmXFx1MGI4MlxcdTBiYmUtXFx1MGJjMlxcdTBiYzYtXFx1MGJjOFxcdTBiY2EtXFx1MGJjZFxcdTBiZDdcXHUwYmU2LVxcdTBiZWZcXHUwYzAwLVxcdTBjMDNcXHUwYzNlLVxcdTBjNDRcXHUwYzQ2LVxcdTBjNDhcXHUwYzRhLVxcdTBjNGRcXHUwYzU1XFx1MGM1NlxcdTBjNjJcXHUwYzYzXFx1MGM2Ni1cXHUwYzZmXFx1MGM4MS1cXHUwYzgzXFx1MGNiY1xcdTBjYmUtXFx1MGNjNFxcdTBjYzYtXFx1MGNjOFxcdTBjY2EtXFx1MGNjZFxcdTBjZDVcXHUwY2Q2XFx1MGNlMlxcdTBjZTNcXHUwY2U2LVxcdTBjZWZcXHUwZDAxLVxcdTBkMDNcXHUwZDNlLVxcdTBkNDRcXHUwZDQ2LVxcdTBkNDhcXHUwZDRhLVxcdTBkNGRcXHUwZDU3XFx1MGQ2MlxcdTBkNjNcXHUwZDY2LVxcdTBkNmZcXHUwZDgyXFx1MGQ4M1xcdTBkY2FcXHUwZGNmLVxcdTBkZDRcXHUwZGQ2XFx1MGRkOC1cXHUwZGRmXFx1MGRlNi1cXHUwZGVmXFx1MGRmMlxcdTBkZjNcXHUwZTMxXFx1MGUzNC1cXHUwZTNhXFx1MGU0Ny1cXHUwZTRlXFx1MGU1MC1cXHUwZTU5XFx1MGViMVxcdTBlYjQtXFx1MGViOVxcdTBlYmJcXHUwZWJjXFx1MGVjOC1cXHUwZWNkXFx1MGVkMC1cXHUwZWQ5XFx1MGYxOFxcdTBmMTlcXHUwZjIwLVxcdTBmMjlcXHUwZjM1XFx1MGYzN1xcdTBmMzlcXHUwZjNlXFx1MGYzZlxcdTBmNzEtXFx1MGY4NFxcdTBmODZcXHUwZjg3XFx1MGY4ZC1cXHUwZjk3XFx1MGY5OS1cXHUwZmJjXFx1MGZjNlxcdTEwMmItXFx1MTAzZVxcdTEwNDAtXFx1MTA0OVxcdTEwNTYtXFx1MTA1OVxcdTEwNWUtXFx1MTA2MFxcdTEwNjItXFx1MTA2NFxcdTEwNjctXFx1MTA2ZFxcdTEwNzEtXFx1MTA3NFxcdTEwODItXFx1MTA4ZFxcdTEwOGYtXFx1MTA5ZFxcdTEzNWQtXFx1MTM1ZlxcdTEzNjktXFx1MTM3MVxcdTE3MTItXFx1MTcxNFxcdTE3MzItXFx1MTczNFxcdTE3NTJcXHUxNzUzXFx1MTc3MlxcdTE3NzNcXHUxN2I0LVxcdTE3ZDNcXHUxN2RkXFx1MTdlMC1cXHUxN2U5XFx1MTgwYi1cXHUxODBkXFx1MTgxMC1cXHUxODE5XFx1MThhOVxcdTE5MjAtXFx1MTkyYlxcdTE5MzAtXFx1MTkzYlxcdTE5NDYtXFx1MTk0ZlxcdTE5ZDAtXFx1MTlkYVxcdTFhMTctXFx1MWExYlxcdTFhNTUtXFx1MWE1ZVxcdTFhNjAtXFx1MWE3Y1xcdTFhN2YtXFx1MWE4OVxcdTFhOTAtXFx1MWE5OVxcdTFhYjAtXFx1MWFiZFxcdTFiMDAtXFx1MWIwNFxcdTFiMzQtXFx1MWI0NFxcdTFiNTAtXFx1MWI1OVxcdTFiNmItXFx1MWI3M1xcdTFiODAtXFx1MWI4MlxcdTFiYTEtXFx1MWJhZFxcdTFiYjAtXFx1MWJiOVxcdTFiZTYtXFx1MWJmM1xcdTFjMjQtXFx1MWMzN1xcdTFjNDAtXFx1MWM0OVxcdTFjNTAtXFx1MWM1OVxcdTFjZDAtXFx1MWNkMlxcdTFjZDQtXFx1MWNlOFxcdTFjZWRcXHUxY2YyLVxcdTFjZjRcXHUxY2Y4XFx1MWNmOVxcdTFkYzAtXFx1MWRmNVxcdTFkZmItXFx1MWRmZlxcdTIwM2ZcXHUyMDQwXFx1MjA1NFxcdTIwZDAtXFx1MjBkY1xcdTIwZTFcXHUyMGU1LVxcdTIwZjBcXHUyY2VmLVxcdTJjZjFcXHUyZDdmXFx1MmRlMC1cXHUyZGZmXFx1MzAyYS1cXHUzMDJmXFx1MzA5OVxcdTMwOWFcXHVhNjIwLVxcdWE2MjlcXHVhNjZmXFx1YTY3NC1cXHVhNjdkXFx1YTY5ZVxcdWE2OWZcXHVhNmYwXFx1YTZmMVxcdWE4MDJcXHVhODA2XFx1YTgwYlxcdWE4MjMtXFx1YTgyN1xcdWE4ODBcXHVhODgxXFx1YThiNC1cXHVhOGM1XFx1YThkMC1cXHVhOGQ5XFx1YThlMC1cXHVhOGYxXFx1YTkwMC1cXHVhOTA5XFx1YTkyNi1cXHVhOTJkXFx1YTk0Ny1cXHVhOTUzXFx1YTk4MC1cXHVhOTgzXFx1YTliMy1cXHVhOWMwXFx1YTlkMC1cXHVhOWQ5XFx1YTllNVxcdWE5ZjAtXFx1YTlmOVxcdWFhMjktXFx1YWEzNlxcdWFhNDNcXHVhYTRjXFx1YWE0ZFxcdWFhNTAtXFx1YWE1OVxcdWFhN2ItXFx1YWE3ZFxcdWFhYjBcXHVhYWIyLVxcdWFhYjRcXHVhYWI3XFx1YWFiOFxcdWFhYmVcXHVhYWJmXFx1YWFjMVxcdWFhZWItXFx1YWFlZlxcdWFhZjVcXHVhYWY2XFx1YWJlMy1cXHVhYmVhXFx1YWJlY1xcdWFiZWRcXHVhYmYwLVxcdWFiZjlcXHVmYjFlXFx1ZmUwMC1cXHVmZTBmXFx1ZmUyMC1cXHVmZTJmXFx1ZmUzM1xcdWZlMzRcXHVmZTRkLVxcdWZlNGZcXHVmZjEwLVxcdWZmMTlcXHVmZjNmXCI7XG5cbnZhciBub25BU0NJSWlkZW50aWZpZXJTdGFydCA9IG5ldyBSZWdFeHAoXCJbXCIgKyBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzICsgXCJdXCIpO1xudmFyIG5vbkFTQ0lJaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoXCJbXCIgKyBub25BU0NJSWlkZW50aWZpZXJTdGFydENoYXJzICsgbm9uQVNDSUlpZGVudGlmaWVyQ2hhcnMgKyBcIl1cIik7XG5cbm5vbkFTQ0lJaWRlbnRpZmllclN0YXJ0Q2hhcnMgPSBub25BU0NJSWlkZW50aWZpZXJDaGFycyA9IG51bGw7XG5cblxudmFyIGFzdHJhbElkZW50aWZpZXJTdGFydENvZGVzID0gWzAsMTEsMiwyNSwyLDE4LDIsMSwyLDE0LDMsMTMsMzUsMTIyLDcwLDUyLDI2OCwyOCw0LDQ4LDQ4LDMxLDE3LDI2LDYsMzcsMTEsMjksMywzNSw1LDcsMiw0LDQzLDE1NywxOSwzNSw1LDM1LDUsMzksOSw1MSwxNTcsMzEwLDEwLDIxLDExLDcsMTUzLDUsMywwLDIsNDMsMiwxLDQsMCwzLDIyLDExLDIyLDEwLDMwLDY2LDE4LDIsMSwxMSwyMSwxMSwyNSw3MSw1NSw3LDEsNjUsMCwxNiwzLDIsMiwyLDI2LDQ1LDI4LDQsMjgsMzYsNywyLDI3LDI4LDUzLDExLDIxLDExLDE4LDE0LDE3LDExMSw3Miw1Niw1MCwxNCw1MCw3ODUsNTIsNzYsNDQsMzMsMjQsMjcsMzUsNDIsMzQsNCwwLDEzLDQ3LDE1LDMsMjIsMCwyLDAsMzYsMTcsMiwyNCw4NSw2LDIsMCwyLDMsMiwxNCwyLDksOCw0NiwzOSw3LDMsMSwzLDIxLDIsNiwyLDEsMiw0LDQsMCwxOSwwLDEzLDQsMTU5LDUyLDE5LDMsNTQsNDcsMjEsMSwyLDAsMTg1LDQ2LDQyLDMsMzcsNDcsMjEsMCw2MCw0Miw4NiwyNSwzOTEsNjMsMzIsMCw0NDksNTYsMjY0LDgsMiwzNiwxOCwwLDUwLDI5LDg4MSw5MjEsMTAzLDExMCwxOCwxOTUsMjc0OSwxMDcwLDQwNTAsNTgyLDg2MzQsNTY4LDgsMzAsMTE0LDI5LDE5LDQ3LDE3LDMsMzIsMjAsNiwxOCw4ODEsNjgsMTIsMCw2NywxMiw2NSwwLDMyLDYxMjQsMjAsNzU0LDk0ODYsMSwzMDcxLDEwNiw2LDEyLDQsOCw4LDksNTk5MSw4NCwyLDcwLDIsMSwzLDAsMywxLDMsMywyLDExLDIsMCwyLDYsMiw2NCwyLDMsMyw3LDIsNiwyLDI3LDIsMywyLDQsMiwwLDQsNiwyLDMzOSwzLDI0LDIsMjQsMiwzMCwyLDI0LDIsMzAsMiwyNCwyLDMwLDIsMjQsMiwzMCwyLDI0LDIsNyw0MTQ5LDE5Niw2MCw2NywxMjEzLDMsMiwyNiwyLDEsMiwwLDMsMCwyLDksMiwzLDIsMCwyLDAsNywwLDUsMCwyLDAsMiwwLDIsMiwyLDEsMiwwLDMsMCwyLDAsMiwwLDIsMCwyLDAsMiwxLDIsMCwzLDMsMiw2LDIsMywyLDMsMiwwLDIsOSwyLDE2LDYsMiwyLDQsMiwxNiw0NDIxLDQyNzEwLDQyLDQxNDgsMTIsMjIxLDMsNTc2MSwxMDU5MSw1NDFdO1xuXG52YXIgYXN0cmFsSWRlbnRpZmllckNvZGVzID0gWzUwOSwwLDIyNywwLDE1MCw0LDI5NCw5LDEzNjgsMiwyLDEsNiwzLDQxLDIsNSwwLDE2NiwxLDEzMDYsMiw1NCwxNCwzMiw5LDE2LDMsNDYsMTAsNTQsOSw3LDIsMzcsMTMsMiw5LDUyLDAsMTMsMiw0OSwxMywxMCwyLDQsOSw4MywxMSw3LDAsMTYxLDExLDYsOSw3LDMsNTcsMCwyLDYsMywxLDMsMiwxMCwwLDExLDEsMyw2LDQsNCwxOTMsMTcsMTAsOSw4NywxOSwxMyw5LDIxNCw2LDMsOCwyOCwxLDgzLDE2LDE2LDksODIsMTIsOSw5LDg0LDE0LDUsOSw0MjMsOSw4MzgsNywyLDcsMTcsOSw1NywyMSwyLDEzLDE5ODgyLDksMTM1LDQsNjAsNiwyNiw5LDEwMTYsNDUsMTcsMywxOTcyMywxLDUzMTksNCw0LDUsOSw3LDMsNiwzMSwzLDE0OSwyLDE0MTgsNDksNTEzLDU0LDUsNDksOSwwLDE1LDAsMjMsNCwyLDE0LDEzNjEsNiwyLDE2LDMsNiwyLDEsMiw0LDIyMTQsNiwxMTAsNiw2LDksNzkyNDg3LDIzOV07XG5cbmZ1bmN0aW9uIGlzSW5Bc3RyYWxTZXQoY29kZSwgc2V0KSB7XG4gIHZhciBwb3MgPSAweDEwMDAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNldC5sZW5ndGg7IGkgKz0gMikge1xuICAgIHBvcyArPSBzZXRbaV07XG4gICAgaWYgKHBvcyA+IGNvZGUpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBwb3MgKz0gc2V0W2kgKyAxXTtcbiAgICBpZiAocG9zID49IGNvZGUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG59XG5cblxuZnVuY3Rpb24gaXNJZGVudGlmaWVyU3RhcnQoY29kZSwgYXN0cmFsKSB7XG4gIGlmIChjb2RlIDwgNjUpIHsgcmV0dXJuIGNvZGUgPT09IDM2IH1cbiAgaWYgKGNvZGUgPCA5MSkgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChjb2RlIDwgOTcpIHsgcmV0dXJuIGNvZGUgPT09IDk1IH1cbiAgaWYgKGNvZGUgPCAxMjMpIHsgcmV0dXJuIHRydWUgfVxuICBpZiAoY29kZSA8PSAweGZmZmYpIHsgcmV0dXJuIGNvZGUgPj0gMHhhYSAmJiBub25BU0NJSWlkZW50aWZpZXJTdGFydC50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpIH1cbiAgaWYgKGFzdHJhbCA9PT0gZmFsc2UpIHsgcmV0dXJuIGZhbHNlIH1cbiAgcmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpXG59XG5cblxuZnVuY3Rpb24gaXNJZGVudGlmaWVyQ2hhcihjb2RlLCBhc3RyYWwpIHtcbiAgaWYgKGNvZGUgPCA0OCkgeyByZXR1cm4gY29kZSA9PT0gMzYgfVxuICBpZiAoY29kZSA8IDU4KSB7IHJldHVybiB0cnVlIH1cbiAgaWYgKGNvZGUgPCA2NSkgeyByZXR1cm4gZmFsc2UgfVxuICBpZiAoY29kZSA8IDkxKSB7IHJldHVybiB0cnVlIH1cbiAgaWYgKGNvZGUgPCA5NykgeyByZXR1cm4gY29kZSA9PT0gOTUgfVxuICBpZiAoY29kZSA8IDEyMykgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChjb2RlIDw9IDB4ZmZmZikgeyByZXR1cm4gY29kZSA+PSAweGFhICYmIG5vbkFTQ0lJaWRlbnRpZmllci50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpIH1cbiAgaWYgKGFzdHJhbCA9PT0gZmFsc2UpIHsgcmV0dXJuIGZhbHNlIH1cbiAgcmV0dXJuIGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllclN0YXJ0Q29kZXMpIHx8IGlzSW5Bc3RyYWxTZXQoY29kZSwgYXN0cmFsSWRlbnRpZmllckNvZGVzKVxufVxuXG5cblxuXG5cbnZhciBUb2tlblR5cGUgPSBmdW5jdGlvbiBUb2tlblR5cGUobGFiZWwsIGNvbmYpIHtcbiAgaWYgKCBjb25mID09PSB2b2lkIDAgKSBjb25mID0ge307XG5cbiAgdGhpcy5sYWJlbCA9IGxhYmVsO1xuICB0aGlzLmtleXdvcmQgPSBjb25mLmtleXdvcmQ7XG4gIHRoaXMuYmVmb3JlRXhwciA9ICEhY29uZi5iZWZvcmVFeHByO1xuICB0aGlzLnN0YXJ0c0V4cHIgPSAhIWNvbmYuc3RhcnRzRXhwcjtcbiAgdGhpcy5pc0xvb3AgPSAhIWNvbmYuaXNMb29wO1xuICB0aGlzLmlzQXNzaWduID0gISFjb25mLmlzQXNzaWduO1xuICB0aGlzLnByZWZpeCA9ICEhY29uZi5wcmVmaXg7XG4gIHRoaXMucG9zdGZpeCA9ICEhY29uZi5wb3N0Zml4O1xuICB0aGlzLmJpbm9wID0gY29uZi5iaW5vcCB8fCBudWxsO1xuICB0aGlzLnVwZGF0ZUNvbnRleHQgPSBudWxsO1xufTtcblxuZnVuY3Rpb24gYmlub3AobmFtZSwgcHJlYykge1xuICByZXR1cm4gbmV3IFRva2VuVHlwZShuYW1lLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IHByZWN9KVxufVxudmFyIGJlZm9yZUV4cHIgPSB7YmVmb3JlRXhwcjogdHJ1ZX07XG52YXIgc3RhcnRzRXhwciA9IHtzdGFydHNFeHByOiB0cnVlfTtcblxuXG52YXIga2V5d29yZHMkMSA9IHt9O1xuXG5mdW5jdGlvbiBrdyhuYW1lLCBvcHRpb25zKSB7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIG9wdGlvbnMua2V5d29yZCA9IG5hbWU7XG4gIHJldHVybiBrZXl3b3JkcyQxW25hbWVdID0gbmV3IFRva2VuVHlwZShuYW1lLCBvcHRpb25zKVxufVxuXG52YXIgdHlwZXMgPSB7XG4gIG51bTogbmV3IFRva2VuVHlwZShcIm51bVwiLCBzdGFydHNFeHByKSxcbiAgcmVnZXhwOiBuZXcgVG9rZW5UeXBlKFwicmVnZXhwXCIsIHN0YXJ0c0V4cHIpLFxuICBzdHJpbmc6IG5ldyBUb2tlblR5cGUoXCJzdHJpbmdcIiwgc3RhcnRzRXhwciksXG4gIG5hbWU6IG5ldyBUb2tlblR5cGUoXCJuYW1lXCIsIHN0YXJ0c0V4cHIpLFxuICBlb2Y6IG5ldyBUb2tlblR5cGUoXCJlb2ZcIiksXG5cbiAgYnJhY2tldEw6IG5ldyBUb2tlblR5cGUoXCJbXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gIGJyYWNrZXRSOiBuZXcgVG9rZW5UeXBlKFwiXVwiKSxcbiAgYnJhY2VMOiBuZXcgVG9rZW5UeXBlKFwie1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBicmFjZVI6IG5ldyBUb2tlblR5cGUoXCJ9XCIpLFxuICBwYXJlbkw6IG5ldyBUb2tlblR5cGUoXCIoXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gIHBhcmVuUjogbmV3IFRva2VuVHlwZShcIilcIiksXG4gIGNvbW1hOiBuZXcgVG9rZW5UeXBlKFwiLFwiLCBiZWZvcmVFeHByKSxcbiAgc2VtaTogbmV3IFRva2VuVHlwZShcIjtcIiwgYmVmb3JlRXhwciksXG4gIGNvbG9uOiBuZXcgVG9rZW5UeXBlKFwiOlwiLCBiZWZvcmVFeHByKSxcbiAgZG90OiBuZXcgVG9rZW5UeXBlKFwiLlwiKSxcbiAgcXVlc3Rpb246IG5ldyBUb2tlblR5cGUoXCI/XCIsIGJlZm9yZUV4cHIpLFxuICBhcnJvdzogbmV3IFRva2VuVHlwZShcIj0+XCIsIGJlZm9yZUV4cHIpLFxuICB0ZW1wbGF0ZTogbmV3IFRva2VuVHlwZShcInRlbXBsYXRlXCIpLFxuICBpbnZhbGlkVGVtcGxhdGU6IG5ldyBUb2tlblR5cGUoXCJpbnZhbGlkVGVtcGxhdGVcIiksXG4gIGVsbGlwc2lzOiBuZXcgVG9rZW5UeXBlKFwiLi4uXCIsIGJlZm9yZUV4cHIpLFxuICBiYWNrUXVvdGU6IG5ldyBUb2tlblR5cGUoXCJgXCIsIHN0YXJ0c0V4cHIpLFxuICBkb2xsYXJCcmFjZUw6IG5ldyBUb2tlblR5cGUoXCIke1wiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuXG5cbiAgZXE6IG5ldyBUb2tlblR5cGUoXCI9XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBpc0Fzc2lnbjogdHJ1ZX0pLFxuICBhc3NpZ246IG5ldyBUb2tlblR5cGUoXCJfPVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgaXNBc3NpZ246IHRydWV9KSxcbiAgaW5jRGVjOiBuZXcgVG9rZW5UeXBlKFwiKysvLS1cIiwge3ByZWZpeDogdHJ1ZSwgcG9zdGZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBwcmVmaXg6IG5ldyBUb2tlblR5cGUoXCIhL35cIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBsb2dpY2FsT1I6IGJpbm9wKFwifHxcIiwgMSksXG4gIGxvZ2ljYWxBTkQ6IGJpbm9wKFwiJiZcIiwgMiksXG4gIGJpdHdpc2VPUjogYmlub3AoXCJ8XCIsIDMpLFxuICBiaXR3aXNlWE9SOiBiaW5vcChcIl5cIiwgNCksXG4gIGJpdHdpc2VBTkQ6IGJpbm9wKFwiJlwiLCA1KSxcbiAgZXF1YWxpdHk6IGJpbm9wKFwiPT0vIT0vPT09LyE9PVwiLCA2KSxcbiAgcmVsYXRpb25hbDogYmlub3AoXCI8Lz4vPD0vPj1cIiwgNyksXG4gIGJpdFNoaWZ0OiBiaW5vcChcIjw8Lz4+Lz4+PlwiLCA4KSxcbiAgcGx1c01pbjogbmV3IFRva2VuVHlwZShcIisvLVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgYmlub3A6IDksIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBtb2R1bG86IGJpbm9wKFwiJVwiLCAxMCksXG4gIHN0YXI6IGJpbm9wKFwiKlwiLCAxMCksXG4gIHNsYXNoOiBiaW5vcChcIi9cIiwgMTApLFxuICBzdGFyc3RhcjogbmV3IFRva2VuVHlwZShcIioqXCIsIHtiZWZvcmVFeHByOiB0cnVlfSksXG5cbiAgX2JyZWFrOiBrdyhcImJyZWFrXCIpLFxuICBfY2FzZToga3coXCJjYXNlXCIsIGJlZm9yZUV4cHIpLFxuICBfY2F0Y2g6IGt3KFwiY2F0Y2hcIiksXG4gIF9jb250aW51ZToga3coXCJjb250aW51ZVwiKSxcbiAgX2RlYnVnZ2VyOiBrdyhcImRlYnVnZ2VyXCIpLFxuICBfZGVmYXVsdDoga3coXCJkZWZhdWx0XCIsIGJlZm9yZUV4cHIpLFxuICBfZG86IGt3KFwiZG9cIiwge2lzTG9vcDogdHJ1ZSwgYmVmb3JlRXhwcjogdHJ1ZX0pLFxuICBfZWxzZToga3coXCJlbHNlXCIsIGJlZm9yZUV4cHIpLFxuICBfZmluYWxseToga3coXCJmaW5hbGx5XCIpLFxuICBfZm9yOiBrdyhcImZvclwiLCB7aXNMb29wOiB0cnVlfSksXG4gIF9mdW5jdGlvbjoga3coXCJmdW5jdGlvblwiLCBzdGFydHNFeHByKSxcbiAgX2lmOiBrdyhcImlmXCIpLFxuICBfcmV0dXJuOiBrdyhcInJldHVyblwiLCBiZWZvcmVFeHByKSxcbiAgX3N3aXRjaDoga3coXCJzd2l0Y2hcIiksXG4gIF90aHJvdzoga3coXCJ0aHJvd1wiLCBiZWZvcmVFeHByKSxcbiAgX3RyeToga3coXCJ0cnlcIiksXG4gIF92YXI6IGt3KFwidmFyXCIpLFxuICBfY29uc3Q6IGt3KFwiY29uc3RcIiksXG4gIF93aGlsZToga3coXCJ3aGlsZVwiLCB7aXNMb29wOiB0cnVlfSksXG4gIF93aXRoOiBrdyhcIndpdGhcIiksXG4gIF9uZXc6IGt3KFwibmV3XCIsIHtiZWZvcmVFeHByOiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gIF90aGlzOiBrdyhcInRoaXNcIiwgc3RhcnRzRXhwciksXG4gIF9zdXBlcjoga3coXCJzdXBlclwiLCBzdGFydHNFeHByKSxcbiAgX2NsYXNzOiBrdyhcImNsYXNzXCIsIHN0YXJ0c0V4cHIpLFxuICBfZXh0ZW5kczoga3coXCJleHRlbmRzXCIsIGJlZm9yZUV4cHIpLFxuICBfZXhwb3J0OiBrdyhcImV4cG9ydFwiKSxcbiAgX2ltcG9ydDoga3coXCJpbXBvcnRcIiksXG4gIF9udWxsOiBrdyhcIm51bGxcIiwgc3RhcnRzRXhwciksXG4gIF90cnVlOiBrdyhcInRydWVcIiwgc3RhcnRzRXhwciksXG4gIF9mYWxzZToga3coXCJmYWxzZVwiLCBzdGFydHNFeHByKSxcbiAgX2luOiBrdyhcImluXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogN30pLFxuICBfaW5zdGFuY2VvZjoga3coXCJpbnN0YW5jZW9mXCIsIHtiZWZvcmVFeHByOiB0cnVlLCBiaW5vcDogN30pLFxuICBfdHlwZW9mOiBrdyhcInR5cGVvZlwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgcHJlZml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSksXG4gIF92b2lkOiBrdyhcInZvaWRcIiwge2JlZm9yZUV4cHI6IHRydWUsIHByZWZpeDogdHJ1ZSwgc3RhcnRzRXhwcjogdHJ1ZX0pLFxuICBfZGVsZXRlOiBrdyhcImRlbGV0ZVwiLCB7YmVmb3JlRXhwcjogdHJ1ZSwgcHJlZml4OiB0cnVlLCBzdGFydHNFeHByOiB0cnVlfSlcbn07XG5cblxudmFyIGxpbmVCcmVhayA9IC9cXHJcXG4/fFxcbnxcXHUyMDI4fFxcdTIwMjkvO1xudmFyIGxpbmVCcmVha0cgPSBuZXcgUmVnRXhwKGxpbmVCcmVhay5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gaXNOZXdMaW5lKGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDEwIHx8IGNvZGUgPT09IDEzIHx8IGNvZGUgPT09IDB4MjAyOCB8fCBjb2RlID09PSAweDIwMjlcbn1cblxudmFyIG5vbkFTQ0lJd2hpdGVzcGFjZSA9IC9bXFx1MTY4MFxcdTE4MGVcXHUyMDAwLVxcdTIwMGFcXHUyMDJmXFx1MjA1ZlxcdTMwMDBcXHVmZWZmXS87XG5cbnZhciBza2lwV2hpdGVTcGFjZSA9IC8oPzpcXHN8XFwvXFwvLip8XFwvXFwqW15dKj9cXCpcXC8pKi9nO1xuXG52YXIgcmVmID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHJlZi5oYXNPd25Qcm9wZXJ0eTtcbnZhciB0b1N0cmluZyA9IHJlZi50b1N0cmluZztcblxuXG5mdW5jdGlvbiBoYXMob2JqLCBwcm9wTmFtZSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3BOYW1lKVxufVxuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgKGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIChcbiAgdG9TdHJpbmcuY2FsbChvYmopID09PSBcIltvYmplY3QgQXJyYXldXCJcbik7IH0pO1xuXG5cbnZhciBQb3NpdGlvbiA9IGZ1bmN0aW9uIFBvc2l0aW9uKGxpbmUsIGNvbCkge1xuICB0aGlzLmxpbmUgPSBsaW5lO1xuICB0aGlzLmNvbHVtbiA9IGNvbDtcbn07XG5cblBvc2l0aW9uLnByb3RvdHlwZS5vZmZzZXQgPSBmdW5jdGlvbiBvZmZzZXQgKG4pIHtcbiAgcmV0dXJuIG5ldyBQb3NpdGlvbih0aGlzLmxpbmUsIHRoaXMuY29sdW1uICsgbilcbn07XG5cbnZhciBTb3VyY2VMb2NhdGlvbiA9IGZ1bmN0aW9uIFNvdXJjZUxvY2F0aW9uKHAsIHN0YXJ0LCBlbmQpIHtcbiAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICB0aGlzLmVuZCA9IGVuZDtcbiAgaWYgKHAuc291cmNlRmlsZSAhPT0gbnVsbCkgeyB0aGlzLnNvdXJjZSA9IHAuc291cmNlRmlsZTsgfVxufTtcblxuXG5mdW5jdGlvbiBnZXRMaW5lSW5mbyhpbnB1dCwgb2Zmc2V0KSB7XG4gIGZvciAodmFyIGxpbmUgPSAxLCBjdXIgPSAwOzspIHtcbiAgICBsaW5lQnJlYWtHLmxhc3RJbmRleCA9IGN1cjtcbiAgICB2YXIgbWF0Y2ggPSBsaW5lQnJlYWtHLmV4ZWMoaW5wdXQpO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaC5pbmRleCA8IG9mZnNldCkge1xuICAgICAgKytsaW5lO1xuICAgICAgY3VyID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgUG9zaXRpb24obGluZSwgb2Zmc2V0IC0gY3VyKVxuICAgIH1cbiAgfVxufVxuXG5cbnZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgZWNtYVZlcnNpb246IDcsXG4gIHNvdXJjZVR5cGU6IFwic2NyaXB0XCIsXG4gIG9uSW5zZXJ0ZWRTZW1pY29sb246IG51bGwsXG4gIG9uVHJhaWxpbmdDb21tYTogbnVsbCxcbiAgYWxsb3dSZXNlcnZlZDogbnVsbCxcbiAgYWxsb3dSZXR1cm5PdXRzaWRlRnVuY3Rpb246IGZhbHNlLFxuICBhbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmU6IGZhbHNlLFxuICBhbGxvd0hhc2hCYW5nOiBmYWxzZSxcbiAgbG9jYXRpb25zOiBmYWxzZSxcbiAgb25Ub2tlbjogbnVsbCxcbiAgb25Db21tZW50OiBudWxsLFxuICByYW5nZXM6IGZhbHNlLFxuICBwcm9ncmFtOiBudWxsLFxuICBzb3VyY2VGaWxlOiBudWxsLFxuICBkaXJlY3RTb3VyY2VGaWxlOiBudWxsLFxuICBwcmVzZXJ2ZVBhcmVuczogZmFsc2UsXG4gIHBsdWdpbnM6IHt9XG59O1xuXG5cbmZ1bmN0aW9uIGdldE9wdGlvbnMob3B0cykge1xuICB2YXIgb3B0aW9ucyA9IHt9O1xuXG4gIGZvciAodmFyIG9wdCBpbiBkZWZhdWx0T3B0aW9ucylcbiAgICB7IG9wdGlvbnNbb3B0XSA9IG9wdHMgJiYgaGFzKG9wdHMsIG9wdCkgPyBvcHRzW29wdF0gOiBkZWZhdWx0T3B0aW9uc1tvcHRdOyB9XG5cbiAgaWYgKG9wdGlvbnMuZWNtYVZlcnNpb24gPj0gMjAxNSlcbiAgICB7IG9wdGlvbnMuZWNtYVZlcnNpb24gLT0gMjAwOTsgfVxuXG4gIGlmIChvcHRpb25zLmFsbG93UmVzZXJ2ZWQgPT0gbnVsbClcbiAgICB7IG9wdGlvbnMuYWxsb3dSZXNlcnZlZCA9IG9wdGlvbnMuZWNtYVZlcnNpb24gPCA1OyB9XG5cbiAgaWYgKGlzQXJyYXkob3B0aW9ucy5vblRva2VuKSkge1xuICAgIHZhciB0b2tlbnMgPSBvcHRpb25zLm9uVG9rZW47XG4gICAgb3B0aW9ucy5vblRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7IHJldHVybiB0b2tlbnMucHVzaCh0b2tlbik7IH07XG4gIH1cbiAgaWYgKGlzQXJyYXkob3B0aW9ucy5vbkNvbW1lbnQpKVxuICAgIHsgb3B0aW9ucy5vbkNvbW1lbnQgPSBwdXNoQ29tbWVudChvcHRpb25zLCBvcHRpb25zLm9uQ29tbWVudCk7IH1cblxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiBwdXNoQ29tbWVudChvcHRpb25zLCBhcnJheSkge1xuICByZXR1cm4gZnVuY3Rpb24oYmxvY2ssIHRleHQsIHN0YXJ0LCBlbmQsIHN0YXJ0TG9jLCBlbmRMb2MpIHtcbiAgICB2YXIgY29tbWVudCA9IHtcbiAgICAgIHR5cGU6IGJsb2NrID8gXCJCbG9ja1wiIDogXCJMaW5lXCIsXG4gICAgICB2YWx1ZTogdGV4dCxcbiAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgIGVuZDogZW5kXG4gICAgfTtcbiAgICBpZiAob3B0aW9ucy5sb2NhdGlvbnMpXG4gICAgICB7IGNvbW1lbnQubG9jID0gbmV3IFNvdXJjZUxvY2F0aW9uKHRoaXMsIHN0YXJ0TG9jLCBlbmRMb2MpOyB9XG4gICAgaWYgKG9wdGlvbnMucmFuZ2VzKVxuICAgICAgeyBjb21tZW50LnJhbmdlID0gW3N0YXJ0LCBlbmRdOyB9XG4gICAgYXJyYXkucHVzaChjb21tZW50KTtcbiAgfVxufVxuXG52YXIgcGx1Z2lucyA9IHt9O1xuXG5mdW5jdGlvbiBrZXl3b3JkUmVnZXhwKHdvcmRzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgd29yZHMucmVwbGFjZSgvIC9nLCBcInxcIikgKyBcIikkXCIpXG59XG5cbnZhciBQYXJzZXIgPSBmdW5jdGlvbiBQYXJzZXIob3B0aW9ucywgaW5wdXQsIHN0YXJ0UG9zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgPSBnZXRPcHRpb25zKG9wdGlvbnMpO1xuICB0aGlzLnNvdXJjZUZpbGUgPSBvcHRpb25zLnNvdXJjZUZpbGU7XG4gIHRoaXMua2V5d29yZHMgPSBrZXl3b3JkUmVnZXhwKGtleXdvcmRzW29wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiA/IDYgOiA1XSk7XG4gIHZhciByZXNlcnZlZCA9IFwiXCI7XG4gIGlmICghb3B0aW9ucy5hbGxvd1Jlc2VydmVkKSB7XG4gICAgZm9yICh2YXIgdiA9IG9wdGlvbnMuZWNtYVZlcnNpb247OyB2LS0pXG4gICAgICB7IGlmIChyZXNlcnZlZCA9IHJlc2VydmVkV29yZHNbdl0pIHsgYnJlYWsgfSB9XG4gICAgaWYgKG9wdGlvbnMuc291cmNlVHlwZSA9PSBcIm1vZHVsZVwiKSB7IHJlc2VydmVkICs9IFwiIGF3YWl0XCI7IH1cbiAgfVxuICB0aGlzLnJlc2VydmVkV29yZHMgPSBrZXl3b3JkUmVnZXhwKHJlc2VydmVkKTtcbiAgdmFyIHJlc2VydmVkU3RyaWN0ID0gKHJlc2VydmVkID8gcmVzZXJ2ZWQgKyBcIiBcIiA6IFwiXCIpICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3Q7XG4gIHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdCA9IGtleXdvcmRSZWdleHAocmVzZXJ2ZWRTdHJpY3QpO1xuICB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3RCaW5kID0ga2V5d29yZFJlZ2V4cChyZXNlcnZlZFN0cmljdCArIFwiIFwiICsgcmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKTtcbiAgdGhpcy5pbnB1dCA9IFN0cmluZyhpbnB1dCk7XG5cbiAgdGhpcy5jb250YWluc0VzYyA9IGZhbHNlO1xuXG4gIHRoaXMubG9hZFBsdWdpbnMob3B0aW9ucy5wbHVnaW5zKTtcblxuXG4gIGlmIChzdGFydFBvcykge1xuICAgIHRoaXMucG9zID0gc3RhcnRQb3M7XG4gICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLmlucHV0Lmxhc3RJbmRleE9mKFwiXFxuXCIsIHN0YXJ0UG9zIC0gMSkgKyAxO1xuICAgIHRoaXMuY3VyTGluZSA9IHRoaXMuaW5wdXQuc2xpY2UoMCwgdGhpcy5saW5lU3RhcnQpLnNwbGl0KGxpbmVCcmVhaykubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucG9zID0gdGhpcy5saW5lU3RhcnQgPSAwO1xuICAgIHRoaXMuY3VyTGluZSA9IDE7XG4gIH1cblxuICB0aGlzLnR5cGUgPSB0eXBlcy5lb2Y7XG4gIHRoaXMudmFsdWUgPSBudWxsO1xuICB0aGlzLnN0YXJ0ID0gdGhpcy5lbmQgPSB0aGlzLnBvcztcbiAgdGhpcy5zdGFydExvYyA9IHRoaXMuZW5kTG9jID0gdGhpcy5jdXJQb3NpdGlvbigpO1xuXG4gIHRoaXMubGFzdFRva0VuZExvYyA9IHRoaXMubGFzdFRva1N0YXJ0TG9jID0gbnVsbDtcbiAgdGhpcy5sYXN0VG9rU3RhcnQgPSB0aGlzLmxhc3RUb2tFbmQgPSB0aGlzLnBvcztcblxuICB0aGlzLmNvbnRleHQgPSB0aGlzLmluaXRpYWxDb250ZXh0KCk7XG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xuXG4gIHRoaXMuaW5Nb2R1bGUgPSBvcHRpb25zLnNvdXJjZVR5cGUgPT09IFwibW9kdWxlXCI7XG4gIHRoaXMuc3RyaWN0ID0gdGhpcy5pbk1vZHVsZSB8fCB0aGlzLnN0cmljdERpcmVjdGl2ZSh0aGlzLnBvcyk7XG5cbiAgdGhpcy5wb3RlbnRpYWxBcnJvd0F0ID0gLTE7XG5cbiAgdGhpcy5pbkZ1bmN0aW9uID0gdGhpcy5pbkdlbmVyYXRvciA9IHRoaXMuaW5Bc3luYyA9IGZhbHNlO1xuICB0aGlzLnlpZWxkUG9zID0gdGhpcy5hd2FpdFBvcyA9IDA7XG4gIHRoaXMubGFiZWxzID0gW107XG5cbiAgaWYgKHRoaXMucG9zID09PSAwICYmIG9wdGlvbnMuYWxsb3dIYXNoQmFuZyAmJiB0aGlzLmlucHV0LnNsaWNlKDAsIDIpID09PSBcIiMhXCIpXG4gICAgeyB0aGlzLnNraXBMaW5lQ29tbWVudCgyKTsgfVxuXG4gIHRoaXMuc2NvcGVTdGFjayA9IFtdO1xuICB0aGlzLmVudGVyRnVuY3Rpb25TY29wZSgpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5pc0tleXdvcmQgPSBmdW5jdGlvbiBpc0tleXdvcmQgKHdvcmQpIHsgcmV0dXJuIHRoaXMua2V5d29yZHMudGVzdCh3b3JkKSB9O1xuUGFyc2VyLnByb3RvdHlwZS5pc1Jlc2VydmVkV29yZCA9IGZ1bmN0aW9uIGlzUmVzZXJ2ZWRXb3JkICh3b3JkKSB7IHJldHVybiB0aGlzLnJlc2VydmVkV29yZHMudGVzdCh3b3JkKSB9O1xuXG5QYXJzZXIucHJvdG90eXBlLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZCAobmFtZSwgZikge1xuICB0aGlzW25hbWVdID0gZih0aGlzW25hbWVdKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUubG9hZFBsdWdpbnMgPSBmdW5jdGlvbiBsb2FkUGx1Z2lucyAocGx1Z2luQ29uZmlncykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAodmFyIG5hbWUgaW4gcGx1Z2luQ29uZmlncykge1xuICAgIHZhciBwbHVnaW4gPSBwbHVnaW5zW25hbWVdO1xuICAgIGlmICghcGx1Z2luKSB7IHRocm93IG5ldyBFcnJvcihcIlBsdWdpbiAnXCIgKyBuYW1lICsgXCInIG5vdCBmb3VuZFwiKSB9XG4gICAgcGx1Z2luKHRoaXMkMSwgcGx1Z2luQ29uZmlnc1tuYW1lXSk7XG4gIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbiBwYXJzZSAoKSB7XG4gIHZhciBub2RlID0gdGhpcy5vcHRpb25zLnByb2dyYW0gfHwgdGhpcy5zdGFydE5vZGUoKTtcbiAgdGhpcy5uZXh0VG9rZW4oKTtcbiAgcmV0dXJuIHRoaXMucGFyc2VUb3BMZXZlbChub2RlKVxufTtcblxudmFyIHBwID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXG52YXIgbGl0ZXJhbCA9IC9eKD86JygoPzpcXFxcLnxbXiddKSo/KSd8XCIoKD86XFxcXC58W15cIl0pKj8pXCJ8OykvO1xucHAuc3RyaWN0RGlyZWN0aXZlID0gZnVuY3Rpb24oc3RhcnQpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgZm9yICg7Oykge1xuICAgIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHN0YXJ0O1xuICAgIHN0YXJ0ICs9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcyQxLmlucHV0KVswXS5sZW5ndGg7XG4gICAgdmFyIG1hdGNoID0gbGl0ZXJhbC5leGVjKHRoaXMkMS5pbnB1dC5zbGljZShzdGFydCkpO1xuICAgIGlmICghbWF0Y2gpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICBpZiAoKG1hdGNoWzFdIHx8IG1hdGNoWzJdKSA9PSBcInVzZSBzdHJpY3RcIikgeyByZXR1cm4gdHJ1ZSB9XG4gICAgc3RhcnQgKz0gbWF0Y2hbMF0ubGVuZ3RoO1xuICB9XG59O1xuXG5cbnBwLmVhdCA9IGZ1bmN0aW9uKHR5cGUpIHtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZSkge1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0cnVlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn07XG5cblxucHAuaXNDb250ZXh0dWFsID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy50eXBlID09PSB0eXBlcy5uYW1lICYmIHRoaXMudmFsdWUgPT09IG5hbWVcbn07XG5cblxucHAuZWF0Q29udGV4dHVhbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMudmFsdWUgPT09IG5hbWUgJiYgdGhpcy5lYXQodHlwZXMubmFtZSlcbn07XG5cblxucHAuZXhwZWN0Q29udGV4dHVhbCA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgaWYgKCF0aGlzLmVhdENvbnRleHR1YWwobmFtZSkpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbn07XG5cblxucHAuY2FuSW5zZXJ0U2VtaWNvbG9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnR5cGUgPT09IHR5cGVzLmVvZiB8fFxuICAgIHRoaXMudHlwZSA9PT0gdHlwZXMuYnJhY2VSIHx8XG4gICAgbGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMuc3RhcnQpKVxufTtcblxucHAuaW5zZXJ0U2VtaWNvbG9uID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5vbkluc2VydGVkU2VtaWNvbG9uKVxuICAgICAgeyB0aGlzLm9wdGlvbnMub25JbnNlcnRlZFNlbWljb2xvbih0aGlzLmxhc3RUb2tFbmQsIHRoaXMubGFzdFRva0VuZExvYyk7IH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59O1xuXG5cbnBwLnNlbWljb2xvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIXRoaXMuZWF0KHR5cGVzLnNlbWkpICYmICF0aGlzLmluc2VydFNlbWljb2xvbigpKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG59O1xuXG5wcC5hZnRlclRyYWlsaW5nQ29tbWEgPSBmdW5jdGlvbih0b2tUeXBlLCBub3ROZXh0KSB7XG4gIGlmICh0aGlzLnR5cGUgPT0gdG9rVHlwZSkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMub25UcmFpbGluZ0NvbW1hKVxuICAgICAgeyB0aGlzLm9wdGlvbnMub25UcmFpbGluZ0NvbW1hKHRoaXMubGFzdFRva1N0YXJ0LCB0aGlzLmxhc3RUb2tTdGFydExvYyk7IH1cbiAgICBpZiAoIW5vdE5leHQpXG4gICAgICB7IHRoaXMubmV4dCgpOyB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufTtcblxuXG5wcC5leHBlY3QgPSBmdW5jdGlvbih0eXBlKSB7XG4gIHRoaXMuZWF0KHR5cGUpIHx8IHRoaXMudW5leHBlY3RlZCgpO1xufTtcblxuXG5wcC51bmV4cGVjdGVkID0gZnVuY3Rpb24ocG9zKSB7XG4gIHRoaXMucmFpc2UocG9zICE9IG51bGwgPyBwb3MgOiB0aGlzLnN0YXJ0LCBcIlVuZXhwZWN0ZWQgdG9rZW5cIik7XG59O1xuXG5mdW5jdGlvbiBEZXN0cnVjdHVyaW5nRXJyb3JzKCkge1xuICB0aGlzLnNob3J0aGFuZEFzc2lnbiA9XG4gIHRoaXMudHJhaWxpbmdDb21tYSA9XG4gIHRoaXMucGFyZW50aGVzaXplZEFzc2lnbiA9XG4gIHRoaXMucGFyZW50aGVzaXplZEJpbmQgPVxuICAgIC0xO1xufVxuXG5wcC5jaGVja1BhdHRlcm5FcnJvcnMgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBpc0Fzc2lnbikge1xuICBpZiAoIXJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHsgcmV0dXJuIH1cbiAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA+IC0xKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSwgXCJDb21tYSBpcyBub3QgcGVybWl0dGVkIGFmdGVyIHRoZSByZXN0IGVsZW1lbnRcIik7IH1cbiAgdmFyIHBhcmVucyA9IGlzQXNzaWduID8gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduIDogcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQmluZDtcbiAgaWYgKHBhcmVucyA+IC0xKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShwYXJlbnMsIFwiUGFyZW50aGVzaXplZCBwYXR0ZXJuXCIpOyB9XG59O1xuXG5wcC5jaGVja0V4cHJlc3Npb25FcnJvcnMgPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBhbmRUaHJvdykge1xuICB2YXIgcG9zID0gcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA/IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMuc2hvcnRoYW5kQXNzaWduIDogLTE7XG4gIGlmICghYW5kVGhyb3cpIHsgcmV0dXJuIHBvcyA+PSAwIH1cbiAgaWYgKHBvcyA+IC0xKSB7IHRoaXMucmFpc2UocG9zLCBcIlNob3J0aGFuZCBwcm9wZXJ0eSBhc3NpZ25tZW50cyBhcmUgdmFsaWQgb25seSBpbiBkZXN0cnVjdHVyaW5nIHBhdHRlcm5zXCIpOyB9XG59O1xuXG5wcC5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMueWllbGRQb3MgJiYgKCF0aGlzLmF3YWl0UG9zIHx8IHRoaXMueWllbGRQb3MgPCB0aGlzLmF3YWl0UG9zKSlcbiAgICB7IHRoaXMucmFpc2UodGhpcy55aWVsZFBvcywgXCJZaWVsZCBleHByZXNzaW9uIGNhbm5vdCBiZSBhIGRlZmF1bHQgdmFsdWVcIik7IH1cbiAgaWYgKHRoaXMuYXdhaXRQb3MpXG4gICAgeyB0aGlzLnJhaXNlKHRoaXMuYXdhaXRQb3MsIFwiQXdhaXQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgYSBkZWZhdWx0IHZhbHVlXCIpOyB9XG59O1xuXG5wcC5pc1NpbXBsZUFzc2lnblRhcmdldCA9IGZ1bmN0aW9uKGV4cHIpIHtcbiAgaWYgKGV4cHIudHlwZSA9PT0gXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiKVxuICAgIHsgcmV0dXJuIHRoaXMuaXNTaW1wbGVBc3NpZ25UYXJnZXQoZXhwci5leHByZXNzaW9uKSB9XG4gIHJldHVybiBleHByLnR5cGUgPT09IFwiSWRlbnRpZmllclwiIHx8IGV4cHIudHlwZSA9PT0gXCJNZW1iZXJFeHByZXNzaW9uXCJcbn07XG5cbnZhciBwcCQxID0gUGFyc2VyLnByb3RvdHlwZTtcblxuXG5cbnBwJDEucGFyc2VUb3BMZXZlbCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGV4cG9ydHMgPSB7fTtcbiAgaWYgKCFub2RlLmJvZHkpIHsgbm9kZS5ib2R5ID0gW107IH1cbiAgd2hpbGUgKHRoaXMudHlwZSAhPT0gdHlwZXMuZW9mKSB7XG4gICAgdmFyIHN0bXQgPSB0aGlzJDEucGFyc2VTdGF0ZW1lbnQodHJ1ZSwgdHJ1ZSwgZXhwb3J0cyk7XG4gICAgbm9kZS5ib2R5LnB1c2goc3RtdCk7XG4gIH1cbiAgdGhpcy5uZXh0KCk7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIG5vZGUuc291cmNlVHlwZSA9IHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJQcm9ncmFtXCIpXG59O1xuXG52YXIgbG9vcExhYmVsID0ge2tpbmQ6IFwibG9vcFwifTtcbnZhciBzd2l0Y2hMYWJlbCA9IHtraW5kOiBcInN3aXRjaFwifTtcblxucHAkMS5pc0xldCA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy50eXBlICE9PSB0eXBlcy5uYW1lIHx8IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYgfHwgdGhpcy52YWx1ZSAhPSBcImxldFwiKSB7IHJldHVybiBmYWxzZSB9XG4gIHNraXBXaGl0ZVNwYWNlLmxhc3RJbmRleCA9IHRoaXMucG9zO1xuICB2YXIgc2tpcCA9IHNraXBXaGl0ZVNwYWNlLmV4ZWModGhpcy5pbnB1dCk7XG4gIHZhciBuZXh0ID0gdGhpcy5wb3MgKyBza2lwWzBdLmxlbmd0aCwgbmV4dENoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KG5leHQpO1xuICBpZiAobmV4dENoID09PSA5MSB8fCBuZXh0Q2ggPT0gMTIzKSB7IHJldHVybiB0cnVlIH1cbiAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KG5leHRDaCwgdHJ1ZSkpIHtcbiAgICB2YXIgcG9zID0gbmV4dCArIDE7XG4gICAgd2hpbGUgKGlzSWRlbnRpZmllckNoYXIodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHBvcyksIHRydWUpKSB7ICsrcG9zOyB9XG4gICAgdmFyIGlkZW50ID0gdGhpcy5pbnB1dC5zbGljZShuZXh0LCBwb3MpO1xuICAgIGlmICghdGhpcy5pc0tleXdvcmQoaWRlbnQpKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn07XG5cbnBwJDEuaXNBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLm5hbWUgfHwgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgOCB8fCB0aGlzLnZhbHVlICE9IFwiYXN5bmNcIilcbiAgICB7IHJldHVybiBmYWxzZSB9XG5cbiAgc2tpcFdoaXRlU3BhY2UubGFzdEluZGV4ID0gdGhpcy5wb3M7XG4gIHZhciBza2lwID0gc2tpcFdoaXRlU3BhY2UuZXhlYyh0aGlzLmlucHV0KTtcbiAgdmFyIG5leHQgPSB0aGlzLnBvcyArIHNraXBbMF0ubGVuZ3RoO1xuICByZXR1cm4gIWxpbmVCcmVhay50ZXN0KHRoaXMuaW5wdXQuc2xpY2UodGhpcy5wb3MsIG5leHQpKSAmJlxuICAgIHRoaXMuaW5wdXQuc2xpY2UobmV4dCwgbmV4dCArIDgpID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAobmV4dCArIDggPT0gdGhpcy5pbnB1dC5sZW5ndGggfHwgIWlzSWRlbnRpZmllckNoYXIodGhpcy5pbnB1dC5jaGFyQXQobmV4dCArIDgpKSlcbn07XG5cblxucHAkMS5wYXJzZVN0YXRlbWVudCA9IGZ1bmN0aW9uKGRlY2xhcmF0aW9uLCB0b3BMZXZlbCwgZXhwb3J0cykge1xuICB2YXIgc3RhcnR0eXBlID0gdGhpcy50eXBlLCBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwga2luZDtcblxuICBpZiAodGhpcy5pc0xldCgpKSB7XG4gICAgc3RhcnR0eXBlID0gdHlwZXMuX3ZhcjtcbiAgICBraW5kID0gXCJsZXRcIjtcbiAgfVxuXG5cbiAgc3dpdGNoIChzdGFydHR5cGUpIHtcbiAgY2FzZSB0eXBlcy5fYnJlYWs6IGNhc2UgdHlwZXMuX2NvbnRpbnVlOiByZXR1cm4gdGhpcy5wYXJzZUJyZWFrQ29udGludWVTdGF0ZW1lbnQobm9kZSwgc3RhcnR0eXBlLmtleXdvcmQpXG4gIGNhc2UgdHlwZXMuX2RlYnVnZ2VyOiByZXR1cm4gdGhpcy5wYXJzZURlYnVnZ2VyU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX2RvOiByZXR1cm4gdGhpcy5wYXJzZURvU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX2ZvcjogcmV0dXJuIHRoaXMucGFyc2VGb3JTdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fZnVuY3Rpb246XG4gICAgaWYgKCFkZWNsYXJhdGlvbiAmJiB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb25TdGF0ZW1lbnQobm9kZSwgZmFsc2UpXG4gIGNhc2UgdHlwZXMuX2NsYXNzOlxuICAgIGlmICghZGVjbGFyYXRpb24pIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICByZXR1cm4gdGhpcy5wYXJzZUNsYXNzKG5vZGUsIHRydWUpXG4gIGNhc2UgdHlwZXMuX2lmOiByZXR1cm4gdGhpcy5wYXJzZUlmU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX3JldHVybjogcmV0dXJuIHRoaXMucGFyc2VSZXR1cm5TdGF0ZW1lbnQobm9kZSlcbiAgY2FzZSB0eXBlcy5fc3dpdGNoOiByZXR1cm4gdGhpcy5wYXJzZVN3aXRjaFN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl90aHJvdzogcmV0dXJuIHRoaXMucGFyc2VUaHJvd1N0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl90cnk6IHJldHVybiB0aGlzLnBhcnNlVHJ5U3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX2NvbnN0OiBjYXNlIHR5cGVzLl92YXI6XG4gICAga2luZCA9IGtpbmQgfHwgdGhpcy52YWx1ZTtcbiAgICBpZiAoIWRlY2xhcmF0aW9uICYmIGtpbmQgIT0gXCJ2YXJcIikgeyB0aGlzLnVuZXhwZWN0ZWQoKTsgfVxuICAgIHJldHVybiB0aGlzLnBhcnNlVmFyU3RhdGVtZW50KG5vZGUsIGtpbmQpXG4gIGNhc2UgdHlwZXMuX3doaWxlOiByZXR1cm4gdGhpcy5wYXJzZVdoaWxlU3RhdGVtZW50KG5vZGUpXG4gIGNhc2UgdHlwZXMuX3dpdGg6IHJldHVybiB0aGlzLnBhcnNlV2l0aFN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLmJyYWNlTDogcmV0dXJuIHRoaXMucGFyc2VCbG9jaygpXG4gIGNhc2UgdHlwZXMuc2VtaTogcmV0dXJuIHRoaXMucGFyc2VFbXB0eVN0YXRlbWVudChub2RlKVxuICBjYXNlIHR5cGVzLl9leHBvcnQ6XG4gIGNhc2UgdHlwZXMuX2ltcG9ydDpcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5hbGxvd0ltcG9ydEV4cG9ydEV2ZXJ5d2hlcmUpIHtcbiAgICAgIGlmICghdG9wTGV2ZWwpXG4gICAgICAgIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIidpbXBvcnQnIGFuZCAnZXhwb3J0JyBtYXkgb25seSBhcHBlYXIgYXQgdGhlIHRvcCBsZXZlbFwiKTsgfVxuICAgICAgaWYgKCF0aGlzLmluTW9kdWxlKVxuICAgICAgICB7IHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCInaW1wb3J0JyBhbmQgJ2V4cG9ydCcgbWF5IGFwcGVhciBvbmx5IHdpdGggJ3NvdXJjZVR5cGU6IG1vZHVsZSdcIik7IH1cbiAgICB9XG4gICAgcmV0dXJuIHN0YXJ0dHlwZSA9PT0gdHlwZXMuX2ltcG9ydCA/IHRoaXMucGFyc2VJbXBvcnQobm9kZSkgOiB0aGlzLnBhcnNlRXhwb3J0KG5vZGUsIGV4cG9ydHMpXG5cbiAgZGVmYXVsdDpcbiAgICBpZiAodGhpcy5pc0FzeW5jRnVuY3Rpb24oKSAmJiBkZWNsYXJhdGlvbikge1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uU3RhdGVtZW50KG5vZGUsIHRydWUpXG4gICAgfVxuXG4gICAgdmFyIG1heWJlTmFtZSA9IHRoaXMudmFsdWUsIGV4cHIgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgIGlmIChzdGFydHR5cGUgPT09IHR5cGVzLm5hbWUgJiYgZXhwci50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiB0aGlzLmVhdCh0eXBlcy5jb2xvbikpXG4gICAgICB7IHJldHVybiB0aGlzLnBhcnNlTGFiZWxlZFN0YXRlbWVudChub2RlLCBtYXliZU5hbWUsIGV4cHIpIH1cbiAgICBlbHNlIHsgcmV0dXJuIHRoaXMucGFyc2VFeHByZXNzaW9uU3RhdGVtZW50KG5vZGUsIGV4cHIpIH1cbiAgfVxufTtcblxucHAkMS5wYXJzZUJyZWFrQ29udGludWVTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBrZXl3b3JkKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBpc0JyZWFrID0ga2V5d29yZCA9PSBcImJyZWFrXCI7XG4gIHRoaXMubmV4dCgpO1xuICBpZiAodGhpcy5lYXQodHlwZXMuc2VtaSkgfHwgdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgeyBub2RlLmxhYmVsID0gbnVsbDsgfVxuICBlbHNlIGlmICh0aGlzLnR5cGUgIT09IHR5cGVzLm5hbWUpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgZWxzZSB7XG4gICAgbm9kZS5sYWJlbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gIH1cblxuICB2YXIgaSA9IDA7XG4gIGZvciAoOyBpIDwgdGhpcy5sYWJlbHMubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgbGFiID0gdGhpcyQxLmxhYmVsc1tpXTtcbiAgICBpZiAobm9kZS5sYWJlbCA9PSBudWxsIHx8IGxhYi5uYW1lID09PSBub2RlLmxhYmVsLm5hbWUpIHtcbiAgICAgIGlmIChsYWIua2luZCAhPSBudWxsICYmIChpc0JyZWFrIHx8IGxhYi5raW5kID09PSBcImxvb3BcIikpIHsgYnJlYWsgfVxuICAgICAgaWYgKG5vZGUubGFiZWwgJiYgaXNCcmVhaykgeyBicmVhayB9XG4gICAgfVxuICB9XG4gIGlmIChpID09PSB0aGlzLmxhYmVscy5sZW5ndGgpIHsgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBcIlVuc3ludGFjdGljIFwiICsga2V5d29yZCk7IH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc0JyZWFrID8gXCJCcmVha1N0YXRlbWVudFwiIDogXCJDb250aW51ZVN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZURlYnVnZ2VyU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgdGhpcy5zZW1pY29sb24oKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkRlYnVnZ2VyU3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlRG9TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG4gIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoZmFsc2UpO1xuICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgdGhpcy5leHBlY3QodHlwZXMuX3doaWxlKTtcbiAgbm9kZS50ZXN0ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpXG4gICAgeyB0aGlzLmVhdCh0eXBlcy5zZW1pKTsgfVxuICBlbHNlXG4gICAgeyB0aGlzLnNlbWljb2xvbigpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJEb1doaWxlU3RhdGVtZW50XCIpXG59O1xuXG5cbnBwJDEucGFyc2VGb3JTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICB0aGlzLmxhYmVscy5wdXNoKGxvb3BMYWJlbCk7XG4gIHRoaXMuZW50ZXJMZXhpY2FsU2NvcGUoKTtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5MKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc2VtaSkgeyByZXR1cm4gdGhpcy5wYXJzZUZvcihub2RlLCBudWxsKSB9XG4gIHZhciBpc0xldCA9IHRoaXMuaXNMZXQoKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX3ZhciB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLl9jb25zdCB8fCBpc0xldCkge1xuICAgIHZhciBpbml0JDEgPSB0aGlzLnN0YXJ0Tm9kZSgpLCBraW5kID0gaXNMZXQgPyBcImxldFwiIDogdGhpcy52YWx1ZTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLnBhcnNlVmFyKGluaXQkMSwgdHJ1ZSwga2luZCk7XG4gICAgdGhpcy5maW5pc2hOb2RlKGluaXQkMSwgXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIpO1xuICAgIGlmICgodGhpcy50eXBlID09PSB0eXBlcy5faW4gfHwgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIHRoaXMuaXNDb250ZXh0dWFsKFwib2ZcIikpKSAmJiBpbml0JDEuZGVjbGFyYXRpb25zLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgICAhKGtpbmQgIT09IFwidmFyXCIgJiYgaW5pdCQxLmRlY2xhcmF0aW9uc1swXS5pbml0KSlcbiAgICAgIHsgcmV0dXJuIHRoaXMucGFyc2VGb3JJbihub2RlLCBpbml0JDEpIH1cbiAgICByZXR1cm4gdGhpcy5wYXJzZUZvcihub2RlLCBpbml0JDEpXG4gIH1cbiAgdmFyIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgPSBuZXcgRGVzdHJ1Y3R1cmluZ0Vycm9ycztcbiAgdmFyIGluaXQgPSB0aGlzLnBhcnNlRXhwcmVzc2lvbih0cnVlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuX2luIHx8ICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzLmlzQ29udGV4dHVhbChcIm9mXCIpKSkge1xuICAgIHRoaXMudG9Bc3NpZ25hYmxlKGluaXQpO1xuICAgIHRoaXMuY2hlY2tMVmFsKGluaXQpO1xuICAgIHRoaXMuY2hlY2tQYXR0ZXJuRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuICAgIHJldHVybiB0aGlzLnBhcnNlRm9ySW4obm9kZSwgaW5pdClcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgfVxuICByZXR1cm4gdGhpcy5wYXJzZUZvcihub2RlLCBpbml0KVxufTtcblxucHAkMS5wYXJzZUZ1bmN0aW9uU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgaXNBc3luYykge1xuICB0aGlzLm5leHQoKTtcbiAgcmV0dXJuIHRoaXMucGFyc2VGdW5jdGlvbihub2RlLCB0cnVlLCBmYWxzZSwgaXNBc3luYylcbn07XG5cbnBwJDEuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy50eXBlID09PSB0eXBlcy5fZnVuY3Rpb24gfHwgdGhpcy5pc0FzeW5jRnVuY3Rpb24oKVxufTtcblxucHAkMS5wYXJzZUlmU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgbm9kZS50ZXN0ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICBub2RlLmNvbnNlcXVlbnQgPSB0aGlzLnBhcnNlU3RhdGVtZW50KCF0aGlzLnN0cmljdCAmJiB0aGlzLmlzRnVuY3Rpb24oKSk7XG4gIG5vZGUuYWx0ZXJuYXRlID0gdGhpcy5lYXQodHlwZXMuX2Vsc2UpID8gdGhpcy5wYXJzZVN0YXRlbWVudCghdGhpcy5zdHJpY3QgJiYgdGhpcy5pc0Z1bmN0aW9uKCkpIDogbnVsbDtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIklmU3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlUmV0dXJuU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICBpZiAoIXRoaXMuaW5GdW5jdGlvbiAmJiAhdGhpcy5vcHRpb25zLmFsbG93UmV0dXJuT3V0c2lkZUZ1bmN0aW9uKVxuICAgIHsgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIidyZXR1cm4nIG91dHNpZGUgb2YgZnVuY3Rpb25cIik7IH1cbiAgdGhpcy5uZXh0KCk7XG5cblxuICBpZiAodGhpcy5lYXQodHlwZXMuc2VtaSkgfHwgdGhpcy5pbnNlcnRTZW1pY29sb24oKSkgeyBub2RlLmFyZ3VtZW50ID0gbnVsbDsgfVxuICBlbHNlIHsgbm9kZS5hcmd1bWVudCA9IHRoaXMucGFyc2VFeHByZXNzaW9uKCk7IHRoaXMuc2VtaWNvbG9uKCk7IH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlJldHVyblN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZVN3aXRjaFN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUuZGlzY3JpbWluYW50ID0gdGhpcy5wYXJzZVBhcmVuRXhwcmVzc2lvbigpO1xuICBub2RlLmNhc2VzID0gW107XG4gIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNlTCk7XG4gIHRoaXMubGFiZWxzLnB1c2goc3dpdGNoTGFiZWwpO1xuICB0aGlzLmVudGVyTGV4aWNhbFNjb3BlKCk7XG5cblxuICB2YXIgY3VyO1xuICBmb3IgKHZhciBzYXdEZWZhdWx0ID0gZmFsc2U7IHRoaXMudHlwZSAhPSB0eXBlcy5icmFjZVI7KSB7XG4gICAgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5fY2FzZSB8fCB0aGlzJDEudHlwZSA9PT0gdHlwZXMuX2RlZmF1bHQpIHtcbiAgICAgIHZhciBpc0Nhc2UgPSB0aGlzJDEudHlwZSA9PT0gdHlwZXMuX2Nhc2U7XG4gICAgICBpZiAoY3VyKSB7IHRoaXMkMS5maW5pc2hOb2RlKGN1ciwgXCJTd2l0Y2hDYXNlXCIpOyB9XG4gICAgICBub2RlLmNhc2VzLnB1c2goY3VyID0gdGhpcyQxLnN0YXJ0Tm9kZSgpKTtcbiAgICAgIGN1ci5jb25zZXF1ZW50ID0gW107XG4gICAgICB0aGlzJDEubmV4dCgpO1xuICAgICAgaWYgKGlzQ2FzZSkge1xuICAgICAgICBjdXIudGVzdCA9IHRoaXMkMS5wYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzYXdEZWZhdWx0KSB7IHRoaXMkMS5yYWlzZVJlY292ZXJhYmxlKHRoaXMkMS5sYXN0VG9rU3RhcnQsIFwiTXVsdGlwbGUgZGVmYXVsdCBjbGF1c2VzXCIpOyB9XG4gICAgICAgIHNhd0RlZmF1bHQgPSB0cnVlO1xuICAgICAgICBjdXIudGVzdCA9IG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmNvbG9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjdXIpIHsgdGhpcyQxLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgY3VyLmNvbnNlcXVlbnQucHVzaCh0aGlzJDEucGFyc2VTdGF0ZW1lbnQodHJ1ZSkpO1xuICAgIH1cbiAgfVxuICB0aGlzLmV4aXRMZXhpY2FsU2NvcGUoKTtcbiAgaWYgKGN1cikgeyB0aGlzLmZpbmlzaE5vZGUoY3VyLCBcIlN3aXRjaENhc2VcIik7IH1cbiAgdGhpcy5uZXh0KCk7XG4gIHRoaXMubGFiZWxzLnBvcCgpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiU3dpdGNoU3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlVGhyb3dTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICBpZiAobGluZUJyZWFrLnRlc3QodGhpcy5pbnB1dC5zbGljZSh0aGlzLmxhc3RUb2tFbmQsIHRoaXMuc3RhcnQpKSlcbiAgICB7IHRoaXMucmFpc2UodGhpcy5sYXN0VG9rRW5kLCBcIklsbGVnYWwgbmV3bGluZSBhZnRlciB0aHJvd1wiKTsgfVxuICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5zZW1pY29sb24oKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRocm93U3RhdGVtZW50XCIpXG59O1xuXG5cbnZhciBlbXB0eSA9IFtdO1xuXG5wcCQxLnBhcnNlVHJ5U3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgbm9kZS5ibG9jayA9IHRoaXMucGFyc2VCbG9jaygpO1xuICBub2RlLmhhbmRsZXIgPSBudWxsO1xuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fY2F0Y2gpIHtcbiAgICB2YXIgY2xhdXNlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuICAgIGNsYXVzZS5wYXJhbSA9IHRoaXMucGFyc2VCaW5kaW5nQXRvbSgpO1xuICAgIHRoaXMuZW50ZXJMZXhpY2FsU2NvcGUoKTtcbiAgICB0aGlzLmNoZWNrTFZhbChjbGF1c2UucGFyYW0sIFwibGV0XCIpO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLnBhcmVuUik7XG4gICAgY2xhdXNlLmJvZHkgPSB0aGlzLnBhcnNlQmxvY2soZmFsc2UpO1xuICAgIHRoaXMuZXhpdExleGljYWxTY29wZSgpO1xuICAgIG5vZGUuaGFuZGxlciA9IHRoaXMuZmluaXNoTm9kZShjbGF1c2UsIFwiQ2F0Y2hDbGF1c2VcIik7XG4gIH1cbiAgbm9kZS5maW5hbGl6ZXIgPSB0aGlzLmVhdCh0eXBlcy5fZmluYWxseSkgPyB0aGlzLnBhcnNlQmxvY2soKSA6IG51bGw7XG4gIGlmICghbm9kZS5oYW5kbGVyICYmICFub2RlLmZpbmFsaXplcilcbiAgICB7IHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJNaXNzaW5nIGNhdGNoIG9yIGZpbmFsbHkgY2xhdXNlXCIpOyB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJUcnlTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VWYXJTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBraW5kKSB7XG4gIHRoaXMubmV4dCgpO1xuICB0aGlzLnBhcnNlVmFyKG5vZGUsIGZhbHNlLCBraW5kKTtcbiAgdGhpcy5zZW1pY29sb24oKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIilcbn07XG5cbnBwJDEucGFyc2VXaGlsZVN0YXRlbWVudCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUudGVzdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgdGhpcy5sYWJlbHMucHVzaChsb29wTGFiZWwpO1xuICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlU3RhdGVtZW50KGZhbHNlKTtcbiAgdGhpcy5sYWJlbHMucG9wKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJXaGlsZVN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZVdpdGhTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIGlmICh0aGlzLnN0cmljdCkgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ3dpdGgnIGluIHN0cmljdCBtb2RlXCIpOyB9XG4gIHRoaXMubmV4dCgpO1xuICBub2RlLm9iamVjdCA9IHRoaXMucGFyc2VQYXJlbkV4cHJlc3Npb24oKTtcbiAgbm9kZS5ib2R5ID0gdGhpcy5wYXJzZVN0YXRlbWVudChmYWxzZSk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJXaXRoU3RhdGVtZW50XCIpXG59O1xuXG5wcCQxLnBhcnNlRW1wdHlTdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlKSB7XG4gIHRoaXMubmV4dCgpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiRW1wdHlTdGF0ZW1lbnRcIilcbn07XG5cbnBwJDEucGFyc2VMYWJlbGVkU3RhdGVtZW50ID0gZnVuY3Rpb24obm9kZSwgbWF5YmVOYW1lLCBleHByKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkkMSA9IDAsIGxpc3QgPSB0aGlzJDEubGFiZWxzOyBpJDEgPCBsaXN0Lmxlbmd0aDsgaSQxICs9IDEpXG4gICAge1xuICAgIHZhciBsYWJlbCA9IGxpc3RbaSQxXTtcblxuICAgIGlmIChsYWJlbC5uYW1lID09PSBtYXliZU5hbWUpXG4gICAgICB7IHRoaXMkMS5yYWlzZShleHByLnN0YXJ0LCBcIkxhYmVsICdcIiArIG1heWJlTmFtZSArIFwiJyBpcyBhbHJlYWR5IGRlY2xhcmVkXCIpO1xuICB9IH1cbiAgdmFyIGtpbmQgPSB0aGlzLnR5cGUuaXNMb29wID8gXCJsb29wXCIgOiB0aGlzLnR5cGUgPT09IHR5cGVzLl9zd2l0Y2ggPyBcInN3aXRjaFwiIDogbnVsbDtcbiAgZm9yICh2YXIgaSA9IHRoaXMubGFiZWxzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhYmVsJDEgPSB0aGlzJDEubGFiZWxzW2ldO1xuICAgIGlmIChsYWJlbCQxLnN0YXRlbWVudFN0YXJ0ID09IG5vZGUuc3RhcnQpIHtcbiAgICAgIGxhYmVsJDEuc3RhdGVtZW50U3RhcnQgPSB0aGlzJDEuc3RhcnQ7XG4gICAgICBsYWJlbCQxLmtpbmQgPSBraW5kO1xuICAgIH0gZWxzZSB7IGJyZWFrIH1cbiAgfVxuICB0aGlzLmxhYmVscy5wdXNoKHtuYW1lOiBtYXliZU5hbWUsIGtpbmQ6IGtpbmQsIHN0YXRlbWVudFN0YXJ0OiB0aGlzLnN0YXJ0fSk7XG4gIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQodHJ1ZSk7XG4gIGlmIChub2RlLmJvZHkudHlwZSA9PSBcIkNsYXNzRGVjbGFyYXRpb25cIiB8fFxuICAgICAgbm9kZS5ib2R5LnR5cGUgPT0gXCJWYXJpYWJsZURlY2xhcmF0aW9uXCIgJiYgbm9kZS5ib2R5LmtpbmQgIT0gXCJ2YXJcIiB8fFxuICAgICAgbm9kZS5ib2R5LnR5cGUgPT0gXCJGdW5jdGlvbkRlY2xhcmF0aW9uXCIgJiYgKHRoaXMuc3RyaWN0IHx8IG5vZGUuYm9keS5nZW5lcmF0b3IpKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKG5vZGUuYm9keS5zdGFydCwgXCJJbnZhbGlkIGxhYmVsZWQgZGVjbGFyYXRpb25cIik7IH1cbiAgdGhpcy5sYWJlbHMucG9wKCk7XG4gIG5vZGUubGFiZWwgPSBleHByO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGFiZWxlZFN0YXRlbWVudFwiKVxufTtcblxucHAkMS5wYXJzZUV4cHJlc3Npb25TdGF0ZW1lbnQgPSBmdW5jdGlvbihub2RlLCBleHByKSB7XG4gIG5vZGUuZXhwcmVzc2lvbiA9IGV4cHI7XG4gIHRoaXMuc2VtaWNvbG9uKCk7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJFeHByZXNzaW9uU3RhdGVtZW50XCIpXG59O1xuXG5cbnBwJDEucGFyc2VCbG9jayA9IGZ1bmN0aW9uKGNyZWF0ZU5ld0xleGljYWxTY29wZSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBjcmVhdGVOZXdMZXhpY2FsU2NvcGUgPT09IHZvaWQgMCApIGNyZWF0ZU5ld0xleGljYWxTY29wZSA9IHRydWU7XG5cbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICBub2RlLmJvZHkgPSBbXTtcbiAgdGhpcy5leHBlY3QodHlwZXMuYnJhY2VMKTtcbiAgaWYgKGNyZWF0ZU5ld0xleGljYWxTY29wZSkge1xuICAgIHRoaXMuZW50ZXJMZXhpY2FsU2NvcGUoKTtcbiAgfVxuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICB2YXIgc3RtdCA9IHRoaXMkMS5wYXJzZVN0YXRlbWVudCh0cnVlKTtcbiAgICBub2RlLmJvZHkucHVzaChzdG10KTtcbiAgfVxuICBpZiAoY3JlYXRlTmV3TGV4aWNhbFNjb3BlKSB7XG4gICAgdGhpcy5leGl0TGV4aWNhbFNjb3BlKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkJsb2NrU3RhdGVtZW50XCIpXG59O1xuXG5cbnBwJDEucGFyc2VGb3IgPSBmdW5jdGlvbihub2RlLCBpbml0KSB7XG4gIG5vZGUuaW5pdCA9IGluaXQ7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLnNlbWkpO1xuICBub2RlLnRlc3QgPSB0aGlzLnR5cGUgPT09IHR5cGVzLnNlbWkgPyBudWxsIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5leHBlY3QodHlwZXMuc2VtaSk7XG4gIG5vZGUudXBkYXRlID0gdGhpcy50eXBlID09PSB0eXBlcy5wYXJlblIgPyBudWxsIDogdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcbiAgdGhpcy5leGl0TGV4aWNhbFNjb3BlKCk7XG4gIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoZmFsc2UpO1xuICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkZvclN0YXRlbWVudFwiKVxufTtcblxuXG5wcCQxLnBhcnNlRm9ySW4gPSBmdW5jdGlvbihub2RlLCBpbml0KSB7XG4gIHZhciB0eXBlID0gdGhpcy50eXBlID09PSB0eXBlcy5faW4gPyBcIkZvckluU3RhdGVtZW50XCIgOiBcIkZvck9mU3RhdGVtZW50XCI7XG4gIHRoaXMubmV4dCgpO1xuICBub2RlLmxlZnQgPSBpbml0O1xuICBub2RlLnJpZ2h0ID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcbiAgdGhpcy5leGl0TGV4aWNhbFNjb3BlKCk7XG4gIG5vZGUuYm9keSA9IHRoaXMucGFyc2VTdGF0ZW1lbnQoZmFsc2UpO1xuICB0aGlzLmxhYmVscy5wb3AoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCB0eXBlKVxufTtcblxuXG5wcCQxLnBhcnNlVmFyID0gZnVuY3Rpb24obm9kZSwgaXNGb3IsIGtpbmQpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgbm9kZS5kZWNsYXJhdGlvbnMgPSBbXTtcbiAgbm9kZS5raW5kID0ga2luZDtcbiAgZm9yICg7Oykge1xuICAgIHZhciBkZWNsID0gdGhpcyQxLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMkMS5wYXJzZVZhcklkKGRlY2wsIGtpbmQpO1xuICAgIGlmICh0aGlzJDEuZWF0KHR5cGVzLmVxKSkge1xuICAgICAgZGVjbC5pbml0ID0gdGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24oaXNGb3IpO1xuICAgIH0gZWxzZSBpZiAoa2luZCA9PT0gXCJjb25zdFwiICYmICEodGhpcyQxLnR5cGUgPT09IHR5cGVzLl9pbiB8fCAodGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzJDEuaXNDb250ZXh0dWFsKFwib2ZcIikpKSkge1xuICAgICAgdGhpcyQxLnVuZXhwZWN0ZWQoKTtcbiAgICB9IGVsc2UgaWYgKGRlY2wuaWQudHlwZSAhPSBcIklkZW50aWZpZXJcIiAmJiAhKGlzRm9yICYmICh0aGlzJDEudHlwZSA9PT0gdHlwZXMuX2luIHx8IHRoaXMkMS5pc0NvbnRleHR1YWwoXCJvZlwiKSkpKSB7XG4gICAgICB0aGlzJDEucmFpc2UodGhpcyQxLmxhc3RUb2tFbmQsIFwiQ29tcGxleCBiaW5kaW5nIHBhdHRlcm5zIHJlcXVpcmUgYW4gaW5pdGlhbGl6YXRpb24gdmFsdWVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY2wuaW5pdCA9IG51bGw7XG4gICAgfVxuICAgIG5vZGUuZGVjbGFyYXRpb25zLnB1c2godGhpcyQxLmZpbmlzaE5vZGUoZGVjbCwgXCJWYXJpYWJsZURlY2xhcmF0b3JcIikpO1xuICAgIGlmICghdGhpcyQxLmVhdCh0eXBlcy5jb21tYSkpIHsgYnJlYWsgfVxuICB9XG4gIHJldHVybiBub2RlXG59O1xuXG5wcCQxLnBhcnNlVmFySWQgPSBmdW5jdGlvbihkZWNsLCBraW5kKSB7XG4gIGRlY2wuaWQgPSB0aGlzLnBhcnNlQmluZGluZ0F0b20oa2luZCk7XG4gIHRoaXMuY2hlY2tMVmFsKGRlY2wuaWQsIGtpbmQsIGZhbHNlKTtcbn07XG5cblxucHAkMS5wYXJzZUZ1bmN0aW9uID0gZnVuY3Rpb24obm9kZSwgaXNTdGF0ZW1lbnQsIGFsbG93RXhwcmVzc2lvbkJvZHksIGlzQXN5bmMpIHtcbiAgdGhpcy5pbml0RnVuY3Rpb24obm9kZSk7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiAhaXNBc3luYylcbiAgICB7IG5vZGUuZ2VuZXJhdG9yID0gdGhpcy5lYXQodHlwZXMuc3Rhcik7IH1cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KVxuICAgIHsgbm9kZS5hc3luYyA9ICEhaXNBc3luYzsgfVxuXG4gIGlmIChpc1N0YXRlbWVudCkge1xuICAgIG5vZGUuaWQgPSBpc1N0YXRlbWVudCA9PT0gXCJudWxsYWJsZUlEXCIgJiYgdGhpcy50eXBlICE9IHR5cGVzLm5hbWUgPyBudWxsIDogdGhpcy5wYXJzZUlkZW50KCk7XG4gICAgaWYgKG5vZGUuaWQpIHtcbiAgICAgIHRoaXMuY2hlY2tMVmFsKG5vZGUuaWQsIFwidmFyXCIpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvbGRJbkdlbiA9IHRoaXMuaW5HZW5lcmF0b3IsIG9sZEluQXN5bmMgPSB0aGlzLmluQXN5bmMsXG4gICAgICBvbGRZaWVsZFBvcyA9IHRoaXMueWllbGRQb3MsIG9sZEF3YWl0UG9zID0gdGhpcy5hd2FpdFBvcywgb2xkSW5GdW5jID0gdGhpcy5pbkZ1bmN0aW9uO1xuICB0aGlzLmluR2VuZXJhdG9yID0gbm9kZS5nZW5lcmF0b3I7XG4gIHRoaXMuaW5Bc3luYyA9IG5vZGUuYXN5bmM7XG4gIHRoaXMueWllbGRQb3MgPSAwO1xuICB0aGlzLmF3YWl0UG9zID0gMDtcbiAgdGhpcy5pbkZ1bmN0aW9uID0gdHJ1ZTtcbiAgdGhpcy5lbnRlckZ1bmN0aW9uU2NvcGUoKTtcblxuICBpZiAoIWlzU3RhdGVtZW50KVxuICAgIHsgbm9kZS5pZCA9IHRoaXMudHlwZSA9PSB0eXBlcy5uYW1lID8gdGhpcy5wYXJzZUlkZW50KCkgOiBudWxsOyB9XG5cbiAgdGhpcy5wYXJzZUZ1bmN0aW9uUGFyYW1zKG5vZGUpO1xuICB0aGlzLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIGFsbG93RXhwcmVzc2lvbkJvZHkpO1xuXG4gIHRoaXMuaW5HZW5lcmF0b3IgPSBvbGRJbkdlbjtcbiAgdGhpcy5pbkFzeW5jID0gb2xkSW5Bc3luYztcbiAgdGhpcy55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3M7XG4gIHRoaXMuaW5GdW5jdGlvbiA9IG9sZEluRnVuYztcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc1N0YXRlbWVudCA/IFwiRnVuY3Rpb25EZWNsYXJhdGlvblwiIDogXCJGdW5jdGlvbkV4cHJlc3Npb25cIilcbn07XG5cbnBwJDEucGFyc2VGdW5jdGlvblBhcmFtcyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5MKTtcbiAgbm9kZS5wYXJhbXMgPSB0aGlzLnBhcnNlQmluZGluZ0xpc3QodHlwZXMucGFyZW5SLCBmYWxzZSwgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgpO1xuICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xufTtcblxuXG5wcCQxLnBhcnNlQ2xhc3MgPSBmdW5jdGlvbihub2RlLCBpc1N0YXRlbWVudCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB0aGlzLm5leHQoKTtcblxuICB0aGlzLnBhcnNlQ2xhc3NJZChub2RlLCBpc1N0YXRlbWVudCk7XG4gIHRoaXMucGFyc2VDbGFzc1N1cGVyKG5vZGUpO1xuICB2YXIgY2xhc3NCb2R5ID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgdmFyIGhhZENvbnN0cnVjdG9yID0gZmFsc2U7XG4gIGNsYXNzQm9keS5ib2R5ID0gW107XG4gIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNlTCk7XG4gIHdoaWxlICghdGhpcy5lYXQodHlwZXMuYnJhY2VSKSkge1xuICAgIGlmICh0aGlzJDEuZWF0KHR5cGVzLnNlbWkpKSB7IGNvbnRpbnVlIH1cbiAgICB2YXIgbWV0aG9kID0gdGhpcyQxLnN0YXJ0Tm9kZSgpO1xuICAgIHZhciBpc0dlbmVyYXRvciA9IHRoaXMkMS5lYXQodHlwZXMuc3Rhcik7XG4gICAgdmFyIGlzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgaXNNYXliZVN0YXRpYyA9IHRoaXMkMS50eXBlID09PSB0eXBlcy5uYW1lICYmIHRoaXMkMS52YWx1ZSA9PT0gXCJzdGF0aWNcIjtcbiAgICB0aGlzJDEucGFyc2VQcm9wZXJ0eU5hbWUobWV0aG9kKTtcbiAgICBtZXRob2Quc3RhdGljID0gaXNNYXliZVN0YXRpYyAmJiB0aGlzJDEudHlwZSAhPT0gdHlwZXMucGFyZW5MO1xuICAgIGlmIChtZXRob2Quc3RhdGljKSB7XG4gICAgICBpZiAoaXNHZW5lcmF0b3IpIHsgdGhpcyQxLnVuZXhwZWN0ZWQoKTsgfVxuICAgICAgaXNHZW5lcmF0b3IgPSB0aGlzJDEuZWF0KHR5cGVzLnN0YXIpO1xuICAgICAgdGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKG1ldGhvZCk7XG4gICAgfVxuICAgIGlmICh0aGlzJDEub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmICFpc0dlbmVyYXRvciAmJiAhbWV0aG9kLmNvbXB1dGVkICYmXG4gICAgICAgIG1ldGhvZC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgbWV0aG9kLmtleS5uYW1lID09PSBcImFzeW5jXCIgJiYgdGhpcyQxLnR5cGUgIT09IHR5cGVzLnBhcmVuTCAmJlxuICAgICAgICAhdGhpcyQxLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgICBpc0FzeW5jID0gdHJ1ZTtcbiAgICAgIHRoaXMkMS5wYXJzZVByb3BlcnR5TmFtZShtZXRob2QpO1xuICAgIH1cbiAgICBtZXRob2Qua2luZCA9IFwibWV0aG9kXCI7XG4gICAgdmFyIGlzR2V0U2V0ID0gZmFsc2U7XG4gICAgaWYgKCFtZXRob2QuY29tcHV0ZWQpIHtcbiAgICAgIHZhciBrZXkgPSBtZXRob2Qua2V5O1xuICAgICAgaWYgKCFpc0dlbmVyYXRvciAmJiAhaXNBc3luYyAmJiBrZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgdGhpcyQxLnR5cGUgIT09IHR5cGVzLnBhcmVuTCAmJiAoa2V5Lm5hbWUgPT09IFwiZ2V0XCIgfHwga2V5Lm5hbWUgPT09IFwic2V0XCIpKSB7XG4gICAgICAgIGlzR2V0U2V0ID0gdHJ1ZTtcbiAgICAgICAgbWV0aG9kLmtpbmQgPSBrZXkubmFtZTtcbiAgICAgICAga2V5ID0gdGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKG1ldGhvZCk7XG4gICAgICB9XG4gICAgICBpZiAoIW1ldGhvZC5zdGF0aWMgJiYgKGtleS50eXBlID09PSBcIklkZW50aWZpZXJcIiAmJiBrZXkubmFtZSA9PT0gXCJjb25zdHJ1Y3RvclwiIHx8XG4gICAgICAgICAga2V5LnR5cGUgPT09IFwiTGl0ZXJhbFwiICYmIGtleS52YWx1ZSA9PT0gXCJjb25zdHJ1Y3RvclwiKSkge1xuICAgICAgICBpZiAoaGFkQ29uc3RydWN0b3IpIHsgdGhpcyQxLnJhaXNlKGtleS5zdGFydCwgXCJEdXBsaWNhdGUgY29uc3RydWN0b3IgaW4gdGhlIHNhbWUgY2xhc3NcIik7IH1cbiAgICAgICAgaWYgKGlzR2V0U2V0KSB7IHRoaXMkMS5yYWlzZShrZXkuc3RhcnQsIFwiQ29uc3RydWN0b3IgY2FuJ3QgaGF2ZSBnZXQvc2V0IG1vZGlmaWVyXCIpOyB9XG4gICAgICAgIGlmIChpc0dlbmVyYXRvcikgeyB0aGlzJDEucmFpc2Uoa2V5LnN0YXJ0LCBcIkNvbnN0cnVjdG9yIGNhbid0IGJlIGEgZ2VuZXJhdG9yXCIpOyB9XG4gICAgICAgIGlmIChpc0FzeW5jKSB7IHRoaXMkMS5yYWlzZShrZXkuc3RhcnQsIFwiQ29uc3RydWN0b3IgY2FuJ3QgYmUgYW4gYXN5bmMgbWV0aG9kXCIpOyB9XG4gICAgICAgIG1ldGhvZC5raW5kID0gXCJjb25zdHJ1Y3RvclwiO1xuICAgICAgICBoYWRDb25zdHJ1Y3RvciA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMkMS5wYXJzZUNsYXNzTWV0aG9kKGNsYXNzQm9keSwgbWV0aG9kLCBpc0dlbmVyYXRvciwgaXNBc3luYyk7XG4gICAgaWYgKGlzR2V0U2V0KSB7XG4gICAgICB2YXIgcGFyYW1Db3VudCA9IG1ldGhvZC5raW5kID09PSBcImdldFwiID8gMCA6IDE7XG4gICAgICBpZiAobWV0aG9kLnZhbHVlLnBhcmFtcy5sZW5ndGggIT09IHBhcmFtQ291bnQpIHtcbiAgICAgICAgdmFyIHN0YXJ0ID0gbWV0aG9kLnZhbHVlLnN0YXJ0O1xuICAgICAgICBpZiAobWV0aG9kLmtpbmQgPT09IFwiZ2V0XCIpXG4gICAgICAgICAgeyB0aGlzJDEucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJnZXR0ZXIgc2hvdWxkIGhhdmUgbm8gcGFyYW1zXCIpOyB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICB7IHRoaXMkMS5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcInNldHRlciBzaG91bGQgaGF2ZSBleGFjdGx5IG9uZSBwYXJhbVwiKTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG1ldGhvZC5raW5kID09PSBcInNldFwiICYmIG1ldGhvZC52YWx1ZS5wYXJhbXNbMF0udHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiKVxuICAgICAgICAgIHsgdGhpcyQxLnJhaXNlUmVjb3ZlcmFibGUobWV0aG9kLnZhbHVlLnBhcmFtc1swXS5zdGFydCwgXCJTZXR0ZXIgY2Fubm90IHVzZSByZXN0IHBhcmFtc1wiKTsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICBub2RlLmJvZHkgPSB0aGlzLmZpbmlzaE5vZGUoY2xhc3NCb2R5LCBcIkNsYXNzQm9keVwiKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBpc1N0YXRlbWVudCA/IFwiQ2xhc3NEZWNsYXJhdGlvblwiIDogXCJDbGFzc0V4cHJlc3Npb25cIilcbn07XG5cbnBwJDEucGFyc2VDbGFzc01ldGhvZCA9IGZ1bmN0aW9uKGNsYXNzQm9keSwgbWV0aG9kLCBpc0dlbmVyYXRvciwgaXNBc3luYykge1xuICBtZXRob2QudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGlzR2VuZXJhdG9yLCBpc0FzeW5jKTtcbiAgY2xhc3NCb2R5LmJvZHkucHVzaCh0aGlzLmZpbmlzaE5vZGUobWV0aG9kLCBcIk1ldGhvZERlZmluaXRpb25cIikpO1xufTtcblxucHAkMS5wYXJzZUNsYXNzSWQgPSBmdW5jdGlvbihub2RlLCBpc1N0YXRlbWVudCkge1xuICBub2RlLmlkID0gdGhpcy50eXBlID09PSB0eXBlcy5uYW1lID8gdGhpcy5wYXJzZUlkZW50KCkgOiBpc1N0YXRlbWVudCA9PT0gdHJ1ZSA/IHRoaXMudW5leHBlY3RlZCgpIDogbnVsbDtcbn07XG5cbnBwJDEucGFyc2VDbGFzc1N1cGVyID0gZnVuY3Rpb24obm9kZSkge1xuICBub2RlLnN1cGVyQ2xhc3MgPSB0aGlzLmVhdCh0eXBlcy5fZXh0ZW5kcykgPyB0aGlzLnBhcnNlRXhwclN1YnNjcmlwdHMoKSA6IG51bGw7XG59O1xuXG5cbnBwJDEucGFyc2VFeHBvcnQgPSBmdW5jdGlvbihub2RlLCBleHBvcnRzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCgpO1xuICBpZiAodGhpcy5lYXQodHlwZXMuc3RhcikpIHtcbiAgICB0aGlzLmV4cGVjdENvbnRleHR1YWwoXCJmcm9tXCIpO1xuICAgIG5vZGUuc291cmNlID0gdGhpcy50eXBlID09PSB0eXBlcy5zdHJpbmcgPyB0aGlzLnBhcnNlRXhwckF0b20oKSA6IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydEFsbERlY2xhcmF0aW9uXCIpXG4gIH1cbiAgaWYgKHRoaXMuZWF0KHR5cGVzLl9kZWZhdWx0KSkge1xuICAgIHRoaXMuY2hlY2tFeHBvcnQoZXhwb3J0cywgXCJkZWZhdWx0XCIsIHRoaXMubGFzdFRva1N0YXJ0KTtcbiAgICB2YXIgaXNBc3luYztcbiAgICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5fZnVuY3Rpb24gfHwgKGlzQXN5bmMgPSB0aGlzLmlzQXN5bmNGdW5jdGlvbigpKSkge1xuICAgICAgdmFyIGZOb2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgaWYgKGlzQXN5bmMpIHsgdGhpcy5uZXh0KCk7IH1cbiAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlRnVuY3Rpb24oZk5vZGUsIFwibnVsbGFibGVJRFwiLCBmYWxzZSwgaXNBc3luYyk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLl9jbGFzcykge1xuICAgICAgdmFyIGNOb2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICAgIG5vZGUuZGVjbGFyYXRpb24gPSB0aGlzLnBhcnNlQ2xhc3MoY05vZGUsIFwibnVsbGFibGVJRFwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5kZWNsYXJhdGlvbiA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgICAgdGhpcy5zZW1pY29sb24oKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydERlZmF1bHREZWNsYXJhdGlvblwiKVxuICB9XG4gIGlmICh0aGlzLnNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50KCkpIHtcbiAgICBub2RlLmRlY2xhcmF0aW9uID0gdGhpcy5wYXJzZVN0YXRlbWVudCh0cnVlKTtcbiAgICBpZiAobm9kZS5kZWNsYXJhdGlvbi50eXBlID09PSBcIlZhcmlhYmxlRGVjbGFyYXRpb25cIilcbiAgICAgIHsgdGhpcy5jaGVja1ZhcmlhYmxlRXhwb3J0KGV4cG9ydHMsIG5vZGUuZGVjbGFyYXRpb24uZGVjbGFyYXRpb25zKTsgfVxuICAgIGVsc2VcbiAgICAgIHsgdGhpcy5jaGVja0V4cG9ydChleHBvcnRzLCBub2RlLmRlY2xhcmF0aW9uLmlkLm5hbWUsIG5vZGUuZGVjbGFyYXRpb24uaWQuc3RhcnQpOyB9XG4gICAgbm9kZS5zcGVjaWZpZXJzID0gW107XG4gICAgbm9kZS5zb3VyY2UgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIG5vZGUuZGVjbGFyYXRpb24gPSBudWxsO1xuICAgIG5vZGUuc3BlY2lmaWVycyA9IHRoaXMucGFyc2VFeHBvcnRTcGVjaWZpZXJzKGV4cG9ydHMpO1xuICAgIGlmICh0aGlzLmVhdENvbnRleHR1YWwoXCJmcm9tXCIpKSB7XG4gICAgICBub2RlLnNvdXJjZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nID8gdGhpcy5wYXJzZUV4cHJBdG9tKCkgOiB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBub2RlLnNwZWNpZmllcnM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzcGVjID0gbGlzdFtpXTtcblxuICAgICAgICB0aGlzJDEuY2hlY2tVbnJlc2VydmVkKHNwZWMubG9jYWwpO1xuICAgICAgfVxuXG4gICAgICBub2RlLnNvdXJjZSA9IG51bGw7XG4gICAgfVxuICAgIHRoaXMuc2VtaWNvbG9uKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkV4cG9ydE5hbWVkRGVjbGFyYXRpb25cIilcbn07XG5cbnBwJDEuY2hlY2tFeHBvcnQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBwb3MpIHtcbiAgaWYgKCFleHBvcnRzKSB7IHJldHVybiB9XG4gIGlmIChoYXMoZXhwb3J0cywgbmFtZSkpXG4gICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocG9zLCBcIkR1cGxpY2F0ZSBleHBvcnQgJ1wiICsgbmFtZSArIFwiJ1wiKTsgfVxuICBleHBvcnRzW25hbWVdID0gdHJ1ZTtcbn07XG5cbnBwJDEuY2hlY2tQYXR0ZXJuRXhwb3J0ID0gZnVuY3Rpb24oZXhwb3J0cywgcGF0KSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciB0eXBlID0gcGF0LnR5cGU7XG4gIGlmICh0eXBlID09IFwiSWRlbnRpZmllclwiKVxuICAgIHsgdGhpcy5jaGVja0V4cG9ydChleHBvcnRzLCBwYXQubmFtZSwgcGF0LnN0YXJ0KTsgfVxuICBlbHNlIGlmICh0eXBlID09IFwiT2JqZWN0UGF0dGVyblwiKVxuICAgIHsgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBwYXQucHJvcGVydGllczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpXG4gICAgICB7XG4gICAgICAgIHZhciBwcm9wID0gbGlzdFtpXTtcblxuICAgICAgICB0aGlzJDEuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHByb3AudmFsdWUpO1xuICAgICAgfSB9XG4gIGVsc2UgaWYgKHR5cGUgPT0gXCJBcnJheVBhdHRlcm5cIilcbiAgICB7IGZvciAodmFyIGkkMSA9IDAsIGxpc3QkMSA9IHBhdC5lbGVtZW50czsgaSQxIDwgbGlzdCQxLmxlbmd0aDsgaSQxICs9IDEpIHtcbiAgICAgIHZhciBlbHQgPSBsaXN0JDFbaSQxXTtcblxuICAgICAgICBpZiAoZWx0KSB7IHRoaXMkMS5jaGVja1BhdHRlcm5FeHBvcnQoZXhwb3J0cywgZWx0KTsgfVxuICAgIH0gfVxuICBlbHNlIGlmICh0eXBlID09IFwiQXNzaWdubWVudFBhdHRlcm5cIilcbiAgICB7IHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHBhdC5sZWZ0KTsgfVxuICBlbHNlIGlmICh0eXBlID09IFwiUGFyZW50aGVzaXplZEV4cHJlc3Npb25cIilcbiAgICB7IHRoaXMuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIHBhdC5leHByZXNzaW9uKTsgfVxufTtcblxucHAkMS5jaGVja1ZhcmlhYmxlRXhwb3J0ID0gZnVuY3Rpb24oZXhwb3J0cywgZGVjbHMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKCFleHBvcnRzKSB7IHJldHVybiB9XG4gIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gZGVjbHM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgIHtcbiAgICB2YXIgZGVjbCA9IGxpc3RbaV07XG5cbiAgICB0aGlzJDEuY2hlY2tQYXR0ZXJuRXhwb3J0KGV4cG9ydHMsIGRlY2wuaWQpO1xuICB9XG59O1xuXG5wcCQxLnNob3VsZFBhcnNlRXhwb3J0U3RhdGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnR5cGUua2V5d29yZCA9PT0gXCJ2YXJcIiB8fFxuICAgIHRoaXMudHlwZS5rZXl3b3JkID09PSBcImNvbnN0XCIgfHxcbiAgICB0aGlzLnR5cGUua2V5d29yZCA9PT0gXCJjbGFzc1wiIHx8XG4gICAgdGhpcy50eXBlLmtleXdvcmQgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgIHRoaXMuaXNMZXQoKSB8fFxuICAgIHRoaXMuaXNBc3luY0Z1bmN0aW9uKClcbn07XG5cblxucHAkMS5wYXJzZUV4cG9ydFNwZWNpZmllcnMgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBub2RlcyA9IFtdLCBmaXJzdCA9IHRydWU7XG4gIHRoaXMuZXhwZWN0KHR5cGVzLmJyYWNlTCk7XG4gIHdoaWxlICghdGhpcy5lYXQodHlwZXMuYnJhY2VSKSkge1xuICAgIGlmICghZmlyc3QpIHtcbiAgICAgIHRoaXMkMS5leHBlY3QodHlwZXMuY29tbWEpO1xuICAgICAgaWYgKHRoaXMkMS5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMuYnJhY2VSKSkgeyBicmVhayB9XG4gICAgfSBlbHNlIHsgZmlyc3QgPSBmYWxzZTsgfVxuXG4gICAgdmFyIG5vZGUgPSB0aGlzJDEuc3RhcnROb2RlKCk7XG4gICAgbm9kZS5sb2NhbCA9IHRoaXMkMS5wYXJzZUlkZW50KHRydWUpO1xuICAgIG5vZGUuZXhwb3J0ZWQgPSB0aGlzJDEuZWF0Q29udGV4dHVhbChcImFzXCIpID8gdGhpcyQxLnBhcnNlSWRlbnQodHJ1ZSkgOiBub2RlLmxvY2FsO1xuICAgIHRoaXMkMS5jaGVja0V4cG9ydChleHBvcnRzLCBub2RlLmV4cG9ydGVkLm5hbWUsIG5vZGUuZXhwb3J0ZWQuc3RhcnQpO1xuICAgIG5vZGVzLnB1c2godGhpcyQxLmZpbmlzaE5vZGUobm9kZSwgXCJFeHBvcnRTcGVjaWZpZXJcIikpO1xuICB9XG4gIHJldHVybiBub2Rlc1xufTtcblxuXG5wcCQxLnBhcnNlSW1wb3J0ID0gZnVuY3Rpb24obm9kZSkge1xuICB0aGlzLm5leHQoKTtcbiAgaWYgKHRoaXMudHlwZSA9PT0gdHlwZXMuc3RyaW5nKSB7XG4gICAgbm9kZS5zcGVjaWZpZXJzID0gZW1wdHk7XG4gICAgbm9kZS5zb3VyY2UgPSB0aGlzLnBhcnNlRXhwckF0b20oKTtcbiAgfSBlbHNlIHtcbiAgICBub2RlLnNwZWNpZmllcnMgPSB0aGlzLnBhcnNlSW1wb3J0U3BlY2lmaWVycygpO1xuICAgIHRoaXMuZXhwZWN0Q29udGV4dHVhbChcImZyb21cIik7XG4gICAgbm9kZS5zb3VyY2UgPSB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy51bmV4cGVjdGVkKCk7XG4gIH1cbiAgdGhpcy5zZW1pY29sb24oKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkltcG9ydERlY2xhcmF0aW9uXCIpXG59O1xuXG5cbnBwJDEucGFyc2VJbXBvcnRTcGVjaWZpZXJzID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBub2RlcyA9IFtdLCBmaXJzdCA9IHRydWU7XG4gIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgbm9kZS5sb2NhbCA9IHRoaXMucGFyc2VJZGVudCgpO1xuICAgIHRoaXMuY2hlY2tMVmFsKG5vZGUubG9jYWwsIFwibGV0XCIpO1xuICAgIG5vZGVzLnB1c2godGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiSW1wb3J0RGVmYXVsdFNwZWNpZmllclwiKSk7XG4gICAgaWYgKCF0aGlzLmVhdCh0eXBlcy5jb21tYSkpIHsgcmV0dXJuIG5vZGVzIH1cbiAgfVxuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5zdGFyKSB7XG4gICAgdmFyIG5vZGUkMSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgdGhpcy5leHBlY3RDb250ZXh0dWFsKFwiYXNcIik7XG4gICAgbm9kZSQxLmxvY2FsID0gdGhpcy5wYXJzZUlkZW50KCk7XG4gICAgdGhpcy5jaGVja0xWYWwobm9kZSQxLmxvY2FsLCBcImxldFwiKTtcbiAgICBub2Rlcy5wdXNoKHRoaXMuZmluaXNoTm9kZShub2RlJDEsIFwiSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyXCIpKTtcbiAgICByZXR1cm4gbm9kZXNcbiAgfVxuICB0aGlzLmV4cGVjdCh0eXBlcy5icmFjZUwpO1xuICB3aGlsZSAoIXRoaXMuZWF0KHR5cGVzLmJyYWNlUikpIHtcbiAgICBpZiAoIWZpcnN0KSB7XG4gICAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmNvbW1hKTtcbiAgICAgIGlmICh0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKHR5cGVzLmJyYWNlUikpIHsgYnJlYWsgfVxuICAgIH0gZWxzZSB7IGZpcnN0ID0gZmFsc2U7IH1cblxuICAgIHZhciBub2RlJDIgPSB0aGlzJDEuc3RhcnROb2RlKCk7XG4gICAgbm9kZSQyLmltcG9ydGVkID0gdGhpcyQxLnBhcnNlSWRlbnQodHJ1ZSk7XG4gICAgaWYgKHRoaXMkMS5lYXRDb250ZXh0dWFsKFwiYXNcIikpIHtcbiAgICAgIG5vZGUkMi5sb2NhbCA9IHRoaXMkMS5wYXJzZUlkZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMkMS5jaGVja1VucmVzZXJ2ZWQobm9kZSQyLmltcG9ydGVkKTtcbiAgICAgIG5vZGUkMi5sb2NhbCA9IG5vZGUkMi5pbXBvcnRlZDtcbiAgICB9XG4gICAgdGhpcyQxLmNoZWNrTFZhbChub2RlJDIubG9jYWwsIFwibGV0XCIpO1xuICAgIG5vZGVzLnB1c2godGhpcyQxLmZpbmlzaE5vZGUobm9kZSQyLCBcIkltcG9ydFNwZWNpZmllclwiKSk7XG4gIH1cbiAgcmV0dXJuIG5vZGVzXG59O1xuXG52YXIgcHAkMiA9IFBhcnNlci5wcm90b3R5cGU7XG5cblxucHAkMi50b0Fzc2lnbmFibGUgPSBmdW5jdGlvbihub2RlLCBpc0JpbmRpbmcpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xuICAgIGNhc2UgXCJJZGVudGlmaWVyXCI6XG4gICAgICBpZiAodGhpcy5pbkFzeW5jICYmIG5vZGUubmFtZSA9PT0gXCJhd2FpdFwiKVxuICAgICAgICB7IHRoaXMucmFpc2Uobm9kZS5zdGFydCwgXCJDYW4gbm90IHVzZSAnYXdhaXQnIGFzIGlkZW50aWZpZXIgaW5zaWRlIGFuIGFzeW5jIGZ1bmN0aW9uXCIpOyB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcbiAgICBjYXNlIFwiQXJyYXlQYXR0ZXJuXCI6XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIk9iamVjdEV4cHJlc3Npb25cIjpcbiAgICAgIG5vZGUudHlwZSA9IFwiT2JqZWN0UGF0dGVyblwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBub2RlLnByb3BlcnRpZXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBwcm9wID0gbGlzdFtpXTtcblxuICAgICAgaWYgKHByb3Aua2luZCAhPT0gXCJpbml0XCIpIHsgdGhpcyQxLnJhaXNlKHByb3Aua2V5LnN0YXJ0LCBcIk9iamVjdCBwYXR0ZXJuIGNhbid0IGNvbnRhaW4gZ2V0dGVyIG9yIHNldHRlclwiKTsgfVxuICAgICAgICB0aGlzJDEudG9Bc3NpZ25hYmxlKHByb3AudmFsdWUsIGlzQmluZGluZyk7XG4gICAgICB9XG4gICAgICBicmVha1xuXG4gICAgY2FzZSBcIkFycmF5RXhwcmVzc2lvblwiOlxuICAgICAgbm9kZS50eXBlID0gXCJBcnJheVBhdHRlcm5cIjtcbiAgICAgIHRoaXMudG9Bc3NpZ25hYmxlTGlzdChub2RlLmVsZW1lbnRzLCBpc0JpbmRpbmcpO1xuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiOlxuICAgICAgaWYgKG5vZGUub3BlcmF0b3IgPT09IFwiPVwiKSB7XG4gICAgICAgIG5vZGUudHlwZSA9IFwiQXNzaWdubWVudFBhdHRlcm5cIjtcbiAgICAgICAgZGVsZXRlIG5vZGUub3BlcmF0b3I7XG4gICAgICAgIHRoaXMudG9Bc3NpZ25hYmxlKG5vZGUubGVmdCwgaXNCaW5kaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmFpc2Uobm9kZS5sZWZ0LmVuZCwgXCJPbmx5ICc9JyBvcGVyYXRvciBjYW4gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyBkZWZhdWx0IHZhbHVlLlwiKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgIGNhc2UgXCJBc3NpZ25tZW50UGF0dGVyblwiOlxuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOlxuICAgICAgdGhpcy50b0Fzc2lnbmFibGUobm9kZS5leHByZXNzaW9uLCBpc0JpbmRpbmcpO1xuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCJNZW1iZXJFeHByZXNzaW9uXCI6XG4gICAgICBpZiAoIWlzQmluZGluZykgeyBicmVhayB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCBcIkFzc2lnbmluZyB0byBydmFsdWVcIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBub2RlXG59O1xuXG5cbnBwJDIudG9Bc3NpZ25hYmxlTGlzdCA9IGZ1bmN0aW9uKGV4cHJMaXN0LCBpc0JpbmRpbmcpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGVuZCA9IGV4cHJMaXN0Lmxlbmd0aDtcbiAgaWYgKGVuZCkge1xuICAgIHZhciBsYXN0ID0gZXhwckxpc3RbZW5kIC0gMV07XG4gICAgaWYgKGxhc3QgJiYgbGFzdC50eXBlID09IFwiUmVzdEVsZW1lbnRcIikge1xuICAgICAgLS1lbmQ7XG4gICAgfSBlbHNlIGlmIChsYXN0ICYmIGxhc3QudHlwZSA9PSBcIlNwcmVhZEVsZW1lbnRcIikge1xuICAgICAgbGFzdC50eXBlID0gXCJSZXN0RWxlbWVudFwiO1xuICAgICAgdmFyIGFyZyA9IGxhc3QuYXJndW1lbnQ7XG4gICAgICB0aGlzLnRvQXNzaWduYWJsZShhcmcsIGlzQmluZGluZyk7XG4gICAgICAtLWVuZDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID09PSA2ICYmIGlzQmluZGluZyAmJiBsYXN0ICYmIGxhc3QudHlwZSA9PT0gXCJSZXN0RWxlbWVudFwiICYmIGxhc3QuYXJndW1lbnQudHlwZSAhPT0gXCJJZGVudGlmaWVyXCIpXG4gICAgICB7IHRoaXMudW5leHBlY3RlZChsYXN0LmFyZ3VtZW50LnN0YXJ0KTsgfVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZW5kOyBpKyspIHtcbiAgICB2YXIgZWx0ID0gZXhwckxpc3RbaV07XG4gICAgaWYgKGVsdCkgeyB0aGlzJDEudG9Bc3NpZ25hYmxlKGVsdCwgaXNCaW5kaW5nKTsgfVxuICB9XG4gIHJldHVybiBleHByTGlzdFxufTtcblxuXG5wcCQyLnBhcnNlU3ByZWFkID0gZnVuY3Rpb24ocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHRoaXMubmV4dCgpO1xuICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlNwcmVhZEVsZW1lbnRcIilcbn07XG5cbnBwJDIucGFyc2VSZXN0QmluZGluZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHRoaXMubmV4dCgpO1xuXG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPT09IDYgJiYgdGhpcy50eXBlICE9PSB0eXBlcy5uYW1lKVxuICAgIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cblxuICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZUJpbmRpbmdBdG9tKCk7XG5cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlJlc3RFbGVtZW50XCIpXG59O1xuXG5cbnBwJDIucGFyc2VCaW5kaW5nQXRvbSA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNikgeyByZXR1cm4gdGhpcy5wYXJzZUlkZW50KCkgfVxuICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICBjYXNlIHR5cGVzLm5hbWU6XG4gICAgcmV0dXJuIHRoaXMucGFyc2VJZGVudCgpXG5cbiAgY2FzZSB0eXBlcy5icmFja2V0TDpcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS5lbGVtZW50cyA9IHRoaXMucGFyc2VCaW5kaW5nTGlzdCh0eXBlcy5icmFja2V0UiwgdHJ1ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFycmF5UGF0dGVyblwiKVxuXG4gIGNhc2UgdHlwZXMuYnJhY2VMOlxuICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKHRydWUpXG5cbiAgZGVmYXVsdDpcbiAgICB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgfVxufTtcblxucHAkMi5wYXJzZUJpbmRpbmdMaXN0ID0gZnVuY3Rpb24oY2xvc2UsIGFsbG93RW1wdHksIGFsbG93VHJhaWxpbmdDb21tYSkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgZWx0cyA9IFtdLCBmaXJzdCA9IHRydWU7XG4gIHdoaWxlICghdGhpcy5lYXQoY2xvc2UpKSB7XG4gICAgaWYgKGZpcnN0KSB7IGZpcnN0ID0gZmFsc2U7IH1cbiAgICBlbHNlIHsgdGhpcyQxLmV4cGVjdCh0eXBlcy5jb21tYSk7IH1cbiAgICBpZiAoYWxsb3dFbXB0eSAmJiB0aGlzJDEudHlwZSA9PT0gdHlwZXMuY29tbWEpIHtcbiAgICAgIGVsdHMucHVzaChudWxsKTtcbiAgICB9IGVsc2UgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiB0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSkge1xuICAgICAgYnJlYWtcbiAgICB9IGVsc2UgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5lbGxpcHNpcykge1xuICAgICAgdmFyIHJlc3QgPSB0aGlzJDEucGFyc2VSZXN0QmluZGluZygpO1xuICAgICAgdGhpcyQxLnBhcnNlQmluZGluZ0xpc3RJdGVtKHJlc3QpO1xuICAgICAgZWx0cy5wdXNoKHJlc3QpO1xuICAgICAgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5jb21tYSkgeyB0aGlzJDEucmFpc2UodGhpcyQxLnN0YXJ0LCBcIkNvbW1hIGlzIG5vdCBwZXJtaXR0ZWQgYWZ0ZXIgdGhlIHJlc3QgZWxlbWVudFwiKTsgfVxuICAgICAgdGhpcyQxLmV4cGVjdChjbG9zZSk7XG4gICAgICBicmVha1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgZWxlbSA9IHRoaXMkMS5wYXJzZU1heWJlRGVmYXVsdCh0aGlzJDEuc3RhcnQsIHRoaXMkMS5zdGFydExvYyk7XG4gICAgICB0aGlzJDEucGFyc2VCaW5kaW5nTGlzdEl0ZW0oZWxlbSk7XG4gICAgICBlbHRzLnB1c2goZWxlbSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBlbHRzXG59O1xuXG5wcCQyLnBhcnNlQmluZGluZ0xpc3RJdGVtID0gZnVuY3Rpb24ocGFyYW0pIHtcbiAgcmV0dXJuIHBhcmFtXG59O1xuXG5cbnBwJDIucGFyc2VNYXliZURlZmF1bHQgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGxlZnQpIHtcbiAgbGVmdCA9IGxlZnQgfHwgdGhpcy5wYXJzZUJpbmRpbmdBdG9tKCk7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPCA2IHx8ICF0aGlzLmVhdCh0eXBlcy5lcSkpIHsgcmV0dXJuIGxlZnQgfVxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgbm9kZS5sZWZ0ID0gbGVmdDtcbiAgbm9kZS5yaWdodCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXNzaWdubWVudFBhdHRlcm5cIilcbn07XG5cblxucHAkMi5jaGVja0xWYWwgPSBmdW5jdGlvbihleHByLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHN3aXRjaCAoZXhwci50eXBlKSB7XG4gIGNhc2UgXCJJZGVudGlmaWVyXCI6XG4gICAgaWYgKHRoaXMuc3RyaWN0ICYmIHRoaXMucmVzZXJ2ZWRXb3Jkc1N0cmljdEJpbmQudGVzdChleHByLm5hbWUpKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXhwci5zdGFydCwgKGJpbmRpbmdUeXBlID8gXCJCaW5kaW5nIFwiIDogXCJBc3NpZ25pbmcgdG8gXCIpICsgZXhwci5uYW1lICsgXCIgaW4gc3RyaWN0IG1vZGVcIik7IH1cbiAgICBpZiAoY2hlY2tDbGFzaGVzKSB7XG4gICAgICBpZiAoaGFzKGNoZWNrQ2xhc2hlcywgZXhwci5uYW1lKSlcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoZXhwci5zdGFydCwgXCJBcmd1bWVudCBuYW1lIGNsYXNoXCIpOyB9XG4gICAgICBjaGVja0NsYXNoZXNbZXhwci5uYW1lXSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChiaW5kaW5nVHlwZSAmJiBiaW5kaW5nVHlwZSAhPT0gXCJub25lXCIpIHtcbiAgICAgIGlmIChcbiAgICAgICAgYmluZGluZ1R5cGUgPT09IFwidmFyXCIgJiYgIXRoaXMuY2FuRGVjbGFyZVZhck5hbWUoZXhwci5uYW1lKSB8fFxuICAgICAgICBiaW5kaW5nVHlwZSAhPT0gXCJ2YXJcIiAmJiAhdGhpcy5jYW5EZWNsYXJlTGV4aWNhbE5hbWUoZXhwci5uYW1lKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMucmFpc2VSZWNvdmVyYWJsZShleHByLnN0YXJ0LCAoXCJJZGVudGlmaWVyICdcIiArIChleHByLm5hbWUpICsgXCInIGhhcyBhbHJlYWR5IGJlZW4gZGVjbGFyZWRcIikpO1xuICAgICAgfVxuICAgICAgaWYgKGJpbmRpbmdUeXBlID09PSBcInZhclwiKSB7XG4gICAgICAgIHRoaXMuZGVjbGFyZVZhck5hbWUoZXhwci5uYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGVjbGFyZUxleGljYWxOYW1lKGV4cHIubmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGJyZWFrXG5cbiAgY2FzZSBcIk1lbWJlckV4cHJlc3Npb25cIjpcbiAgICBpZiAoYmluZGluZ1R5cGUpIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKGV4cHIuc3RhcnQsIChiaW5kaW5nVHlwZSA/IFwiQmluZGluZ1wiIDogXCJBc3NpZ25pbmcgdG9cIikgKyBcIiBtZW1iZXIgZXhwcmVzc2lvblwiKTsgfVxuICAgIGJyZWFrXG5cbiAgY2FzZSBcIk9iamVjdFBhdHRlcm5cIjpcbiAgICBmb3IgKHZhciBpID0gMCwgbGlzdCA9IGV4cHIucHJvcGVydGllczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpXG4gICAgICB7XG4gICAgdmFyIHByb3AgPSBsaXN0W2ldO1xuXG4gICAgdGhpcyQxLmNoZWNrTFZhbChwcm9wLnZhbHVlLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcbiAgfVxuICAgIGJyZWFrXG5cbiAgY2FzZSBcIkFycmF5UGF0dGVyblwiOlxuICAgIGZvciAodmFyIGkkMSA9IDAsIGxpc3QkMSA9IGV4cHIuZWxlbWVudHM7IGkkMSA8IGxpc3QkMS5sZW5ndGg7IGkkMSArPSAxKSB7XG4gICAgICB2YXIgZWxlbSA9IGxpc3QkMVtpJDFdO1xuXG4gICAgaWYgKGVsZW0pIHsgdGhpcyQxLmNoZWNrTFZhbChlbGVtLCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTsgfVxuICAgIH1cbiAgICBicmVha1xuXG4gIGNhc2UgXCJBc3NpZ25tZW50UGF0dGVyblwiOlxuICAgIHRoaXMuY2hlY2tMVmFsKGV4cHIubGVmdCwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gICAgYnJlYWtcblxuICBjYXNlIFwiUmVzdEVsZW1lbnRcIjpcbiAgICB0aGlzLmNoZWNrTFZhbChleHByLmFyZ3VtZW50LCBiaW5kaW5nVHlwZSwgY2hlY2tDbGFzaGVzKTtcbiAgICBicmVha1xuXG4gIGNhc2UgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiOlxuICAgIHRoaXMuY2hlY2tMVmFsKGV4cHIuZXhwcmVzc2lvbiwgYmluZGluZ1R5cGUsIGNoZWNrQ2xhc2hlcyk7XG4gICAgYnJlYWtcblxuICBkZWZhdWx0OlxuICAgIHRoaXMucmFpc2UoZXhwci5zdGFydCwgKGJpbmRpbmdUeXBlID8gXCJCaW5kaW5nXCIgOiBcIkFzc2lnbmluZyB0b1wiKSArIFwiIHJ2YWx1ZVwiKTtcbiAgfVxufTtcblxuXG52YXIgcHAkMyA9IFBhcnNlci5wcm90b3R5cGU7XG5cblxucHAkMy5jaGVja1Byb3BDbGFzaCA9IGZ1bmN0aW9uKHByb3AsIHByb3BIYXNoKSB7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiAocHJvcC5jb21wdXRlZCB8fCBwcm9wLm1ldGhvZCB8fCBwcm9wLnNob3J0aGFuZCkpXG4gICAgeyByZXR1cm4gfVxuICB2YXIga2V5ID0gcHJvcC5rZXk7XG4gIHZhciBuYW1lO1xuICBzd2l0Y2ggKGtleS50eXBlKSB7XG4gIGNhc2UgXCJJZGVudGlmaWVyXCI6IG5hbWUgPSBrZXkubmFtZTsgYnJlYWtcbiAgY2FzZSBcIkxpdGVyYWxcIjogbmFtZSA9IFN0cmluZyhrZXkudmFsdWUpOyBicmVha1xuICBkZWZhdWx0OiByZXR1cm5cbiAgfVxuICB2YXIga2luZCA9IHByb3Aua2luZDtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgaWYgKG5hbWUgPT09IFwiX19wcm90b19fXCIgJiYga2luZCA9PT0gXCJpbml0XCIpIHtcbiAgICAgIGlmIChwcm9wSGFzaC5wcm90bykgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoa2V5LnN0YXJ0LCBcIlJlZGVmaW5pdGlvbiBvZiBfX3Byb3RvX18gcHJvcGVydHlcIik7IH1cbiAgICAgIHByb3BIYXNoLnByb3RvID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgbmFtZSA9IFwiJFwiICsgbmFtZTtcbiAgdmFyIG90aGVyID0gcHJvcEhhc2hbbmFtZV07XG4gIGlmIChvdGhlcikge1xuICAgIHZhciByZWRlZmluaXRpb247XG4gICAgaWYgKGtpbmQgPT09IFwiaW5pdFwiKSB7XG4gICAgICByZWRlZmluaXRpb24gPSB0aGlzLnN0cmljdCAmJiBvdGhlci5pbml0IHx8IG90aGVyLmdldCB8fCBvdGhlci5zZXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZGVmaW5pdGlvbiA9IG90aGVyLmluaXQgfHwgb3RoZXJba2luZF07XG4gICAgfVxuICAgIGlmIChyZWRlZmluaXRpb24pXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShrZXkuc3RhcnQsIFwiUmVkZWZpbml0aW9uIG9mIHByb3BlcnR5XCIpOyB9XG4gIH0gZWxzZSB7XG4gICAgb3RoZXIgPSBwcm9wSGFzaFtuYW1lXSA9IHtcbiAgICAgIGluaXQ6IGZhbHNlLFxuICAgICAgZ2V0OiBmYWxzZSxcbiAgICAgIHNldDogZmFsc2VcbiAgICB9O1xuICB9XG4gIG90aGVyW2tpbmRdID0gdHJ1ZTtcbn07XG5cblxuXG5cbnBwJDMucGFyc2VFeHByZXNzaW9uID0gZnVuY3Rpb24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIHZhciBleHByID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5jb21tYSkge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgIG5vZGUuZXhwcmVzc2lvbnMgPSBbZXhwcl07XG4gICAgd2hpbGUgKHRoaXMuZWF0KHR5cGVzLmNvbW1hKSkgeyBub2RlLmV4cHJlc3Npb25zLnB1c2godGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykpOyB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlNlcXVlbmNlRXhwcmVzc2lvblwiKVxuICB9XG4gIHJldHVybiBleHByXG59O1xuXG5cbnBwJDMucGFyc2VNYXliZUFzc2lnbiA9IGZ1bmN0aW9uKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIGFmdGVyTGVmdFBhcnNlKSB7XG4gIGlmICh0aGlzLmluR2VuZXJhdG9yICYmIHRoaXMuaXNDb250ZXh0dWFsKFwieWllbGRcIikpIHsgcmV0dXJuIHRoaXMucGFyc2VZaWVsZCgpIH1cblxuICB2YXIgb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IGZhbHNlLCBvbGRQYXJlbkFzc2lnbiA9IC0xLCBvbGRUcmFpbGluZ0NvbW1hID0gLTE7XG4gIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgb2xkUGFyZW5Bc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ247XG4gICAgb2xkVHJhaWxpbmdDb21tYSA9IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYTtcbiAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSAtMTtcbiAgfSBlbHNlIHtcbiAgICByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnM7XG4gICAgb3duRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IHRydWU7XG4gIH1cblxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIGlmICh0aGlzLnR5cGUgPT0gdHlwZXMucGFyZW5MIHx8IHRoaXMudHlwZSA9PSB0eXBlcy5uYW1lKVxuICAgIHsgdGhpcy5wb3RlbnRpYWxBcnJvd0F0ID0gdGhpcy5zdGFydDsgfVxuICB2YXIgbGVmdCA9IHRoaXMucGFyc2VNYXliZUNvbmRpdGlvbmFsKG5vSW4sIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICBpZiAoYWZ0ZXJMZWZ0UGFyc2UpIHsgbGVmdCA9IGFmdGVyTGVmdFBhcnNlLmNhbGwodGhpcywgbGVmdCwgc3RhcnRQb3MsIHN0YXJ0TG9jKTsgfVxuICBpZiAodGhpcy50eXBlLmlzQXNzaWduKSB7XG4gICAgdGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgdHJ1ZSk7XG4gICAgaWYgKCFvd25EZXN0cnVjdHVyaW5nRXJyb3JzKSB7IERlc3RydWN0dXJpbmdFcnJvcnMuY2FsbChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTsgfVxuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgIG5vZGUub3BlcmF0b3IgPSB0aGlzLnZhbHVlO1xuICAgIG5vZGUubGVmdCA9IHRoaXMudHlwZSA9PT0gdHlwZXMuZXEgPyB0aGlzLnRvQXNzaWduYWJsZShsZWZ0KSA6IGxlZnQ7XG4gICAgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPSAtMTtcbiAgICB0aGlzLmNoZWNrTFZhbChsZWZ0KTtcbiAgICB0aGlzLm5leHQoKTtcbiAgICBub2RlLnJpZ2h0ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKG5vSW4pO1xuICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJBc3NpZ25tZW50RXhwcmVzc2lvblwiKVxuICB9IGVsc2Uge1xuICAgIGlmIChvd25EZXN0cnVjdHVyaW5nRXJyb3JzKSB7IHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpOyB9XG4gIH1cbiAgaWYgKG9sZFBhcmVuQXNzaWduID4gLTEpIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gb2xkUGFyZW5Bc3NpZ247IH1cbiAgaWYgKG9sZFRyYWlsaW5nQ29tbWEgPiAtMSkgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnRyYWlsaW5nQ29tbWEgPSBvbGRUcmFpbGluZ0NvbW1hOyB9XG4gIHJldHVybiBsZWZ0XG59O1xuXG5cbnBwJDMucGFyc2VNYXliZUNvbmRpdGlvbmFsID0gZnVuY3Rpb24obm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycykge1xuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIHZhciBleHByID0gdGhpcy5wYXJzZUV4cHJPcHMobm9JbiwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgeyByZXR1cm4gZXhwciB9XG4gIGlmICh0aGlzLmVhdCh0eXBlcy5xdWVzdGlvbikpIHtcbiAgICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBub2RlLnRlc3QgPSBleHByO1xuICAgIG5vZGUuY29uc2VxdWVudCA9IHRoaXMucGFyc2VNYXliZUFzc2lnbigpO1xuICAgIHRoaXMuZXhwZWN0KHR5cGVzLmNvbG9uKTtcbiAgICBub2RlLmFsdGVybmF0ZSA9IHRoaXMucGFyc2VNYXliZUFzc2lnbihub0luKTtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQ29uZGl0aW9uYWxFeHByZXNzaW9uXCIpXG4gIH1cbiAgcmV0dXJuIGV4cHJcbn07XG5cblxucHAkMy5wYXJzZUV4cHJPcHMgPSBmdW5jdGlvbihub0luLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgdmFyIGV4cHIgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCBmYWxzZSk7XG4gIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgeyByZXR1cm4gZXhwciB9XG4gIHJldHVybiBleHByLnN0YXJ0ID09IHN0YXJ0UG9zICYmIGV4cHIudHlwZSA9PT0gXCJBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblwiID8gZXhwciA6IHRoaXMucGFyc2VFeHByT3AoZXhwciwgc3RhcnRQb3MsIHN0YXJ0TG9jLCAtMSwgbm9Jbilcbn07XG5cblxucHAkMy5wYXJzZUV4cHJPcCA9IGZ1bmN0aW9uKGxlZnQsIGxlZnRTdGFydFBvcywgbGVmdFN0YXJ0TG9jLCBtaW5QcmVjLCBub0luKSB7XG4gIHZhciBwcmVjID0gdGhpcy50eXBlLmJpbm9wO1xuICBpZiAocHJlYyAhPSBudWxsICYmICghbm9JbiB8fCB0aGlzLnR5cGUgIT09IHR5cGVzLl9pbikpIHtcbiAgICBpZiAocHJlYyA+IG1pblByZWMpIHtcbiAgICAgIHZhciBsb2dpY2FsID0gdGhpcy50eXBlID09PSB0eXBlcy5sb2dpY2FsT1IgfHwgdGhpcy50eXBlID09PSB0eXBlcy5sb2dpY2FsQU5EO1xuICAgICAgdmFyIG9wID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgdmFyIHJpZ2h0ID0gdGhpcy5wYXJzZUV4cHJPcCh0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCBmYWxzZSksIHN0YXJ0UG9zLCBzdGFydExvYywgcHJlYywgbm9Jbik7XG4gICAgICB2YXIgbm9kZSA9IHRoaXMuYnVpbGRCaW5hcnkobGVmdFN0YXJ0UG9zLCBsZWZ0U3RhcnRMb2MsIGxlZnQsIHJpZ2h0LCBvcCwgbG9naWNhbCk7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZUV4cHJPcChub2RlLCBsZWZ0U3RhcnRQb3MsIGxlZnRTdGFydExvYywgbWluUHJlYywgbm9JbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxlZnRcbn07XG5cbnBwJDMuYnVpbGRCaW5hcnkgPSBmdW5jdGlvbihzdGFydFBvcywgc3RhcnRMb2MsIGxlZnQsIHJpZ2h0LCBvcCwgbG9naWNhbCkge1xuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgbm9kZS5sZWZ0ID0gbGVmdDtcbiAgbm9kZS5vcGVyYXRvciA9IG9wO1xuICBub2RlLnJpZ2h0ID0gcmlnaHQ7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgbG9naWNhbCA/IFwiTG9naWNhbEV4cHJlc3Npb25cIiA6IFwiQmluYXJ5RXhwcmVzc2lvblwiKVxufTtcblxuXG5wcCQzLnBhcnNlTWF5YmVVbmFyeSA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHNhd1VuYXJ5KSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYywgZXhwcjtcbiAgaWYgKHRoaXMuaW5Bc3luYyAmJiB0aGlzLmlzQ29udGV4dHVhbChcImF3YWl0XCIpKSB7XG4gICAgZXhwciA9IHRoaXMucGFyc2VBd2FpdChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICBzYXdVbmFyeSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy50eXBlLnByZWZpeCkge1xuICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgdXBkYXRlID0gdGhpcy50eXBlID09PSB0eXBlcy5pbmNEZWM7XG4gICAgbm9kZS5vcGVyYXRvciA9IHRoaXMudmFsdWU7XG4gICAgbm9kZS5wcmVmaXggPSB0cnVlO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCB0cnVlKTtcbiAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgICBpZiAodXBkYXRlKSB7IHRoaXMuY2hlY2tMVmFsKG5vZGUuYXJndW1lbnQpOyB9XG4gICAgZWxzZSBpZiAodGhpcy5zdHJpY3QgJiYgbm9kZS5vcGVyYXRvciA9PT0gXCJkZWxldGVcIiAmJlxuICAgICAgICAgICAgIG5vZGUuYXJndW1lbnQudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIpXG4gICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShub2RlLnN0YXJ0LCBcIkRlbGV0aW5nIGxvY2FsIHZhcmlhYmxlIGluIHN0cmljdCBtb2RlXCIpOyB9XG4gICAgZWxzZSB7IHNhd1VuYXJ5ID0gdHJ1ZTsgfVxuICAgIGV4cHIgPSB0aGlzLmZpbmlzaE5vZGUobm9kZSwgdXBkYXRlID8gXCJVcGRhdGVFeHByZXNzaW9uXCIgOiBcIlVuYXJ5RXhwcmVzc2lvblwiKTtcbiAgfSBlbHNlIHtcbiAgICBleHByID0gdGhpcy5wYXJzZUV4cHJTdWJzY3JpcHRzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIGlmICh0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSkgeyByZXR1cm4gZXhwciB9XG4gICAgd2hpbGUgKHRoaXMudHlwZS5wb3N0Zml4ICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpKSB7XG4gICAgICB2YXIgbm9kZSQxID0gdGhpcyQxLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlJDEub3BlcmF0b3IgPSB0aGlzJDEudmFsdWU7XG4gICAgICBub2RlJDEucHJlZml4ID0gZmFsc2U7XG4gICAgICBub2RlJDEuYXJndW1lbnQgPSBleHByO1xuICAgICAgdGhpcyQxLmNoZWNrTFZhbChleHByKTtcbiAgICAgIHRoaXMkMS5uZXh0KCk7XG4gICAgICBleHByID0gdGhpcyQxLmZpbmlzaE5vZGUobm9kZSQxLCBcIlVwZGF0ZUV4cHJlc3Npb25cIik7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzYXdVbmFyeSAmJiB0aGlzLmVhdCh0eXBlcy5zdGFyc3RhcikpXG4gICAgeyByZXR1cm4gdGhpcy5idWlsZEJpbmFyeShzdGFydFBvcywgc3RhcnRMb2MsIGV4cHIsIHRoaXMucGFyc2VNYXliZVVuYXJ5KG51bGwsIGZhbHNlKSwgXCIqKlwiLCBmYWxzZSkgfVxuICBlbHNlXG4gICAgeyByZXR1cm4gZXhwciB9XG59O1xuXG5cbnBwJDMucGFyc2VFeHByU3Vic2NyaXB0cyA9IGZ1bmN0aW9uKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgdmFyIHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICB2YXIgZXhwciA9IHRoaXMucGFyc2VFeHByQXRvbShyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgdmFyIHNraXBBcnJvd1N1YnNjcmlwdHMgPSBleHByLnR5cGUgPT09IFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIiAmJiB0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva1N0YXJ0LCB0aGlzLmxhc3RUb2tFbmQpICE9PSBcIilcIjtcbiAgaWYgKHRoaXMuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHx8IHNraXBBcnJvd1N1YnNjcmlwdHMpIHsgcmV0dXJuIGV4cHIgfVxuICB2YXIgcmVzdWx0ID0gdGhpcy5wYXJzZVN1YnNjcmlwdHMoZXhwciwgc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgcmVzdWx0LnR5cGUgPT09IFwiTWVtYmVyRXhwcmVzc2lvblwiKSB7XG4gICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEFzc2lnbiA+PSByZXN1bHQuc3RhcnQpIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduID0gLTE7IH1cbiAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQmluZCA+PSByZXN1bHQuc3RhcnQpIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQmluZCA9IC0xOyB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFxufTtcblxucHAkMy5wYXJzZVN1YnNjcmlwdHMgPSBmdW5jdGlvbihiYXNlLCBzdGFydFBvcywgc3RhcnRMb2MsIG5vQ2FsbHMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG1heWJlQXN5bmNBcnJvdyA9IHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmIGJhc2UudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgYmFzZS5uYW1lID09PSBcImFzeW5jXCIgJiZcbiAgICAgIHRoaXMubGFzdFRva0VuZCA9PSBiYXNlLmVuZCAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKTtcbiAgZm9yICh2YXIgY29tcHV0ZWQgPSAodm9pZCAwKTs7KSB7XG4gICAgaWYgKChjb21wdXRlZCA9IHRoaXMkMS5lYXQodHlwZXMuYnJhY2tldEwpKSB8fCB0aGlzJDEuZWF0KHR5cGVzLmRvdCkpIHtcbiAgICAgIHZhciBub2RlID0gdGhpcyQxLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBub2RlLm9iamVjdCA9IGJhc2U7XG4gICAgICBub2RlLnByb3BlcnR5ID0gY29tcHV0ZWQgPyB0aGlzJDEucGFyc2VFeHByZXNzaW9uKCkgOiB0aGlzJDEucGFyc2VJZGVudCh0cnVlKTtcbiAgICAgIG5vZGUuY29tcHV0ZWQgPSAhIWNvbXB1dGVkO1xuICAgICAgaWYgKGNvbXB1dGVkKSB7IHRoaXMkMS5leHBlY3QodHlwZXMuYnJhY2tldFIpOyB9XG4gICAgICBiYXNlID0gdGhpcyQxLmZpbmlzaE5vZGUobm9kZSwgXCJNZW1iZXJFeHByZXNzaW9uXCIpO1xuICAgIH0gZWxzZSBpZiAoIW5vQ2FsbHMgJiYgdGhpcyQxLmVhdCh0eXBlcy5wYXJlbkwpKSB7XG4gICAgICB2YXIgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyA9IG5ldyBEZXN0cnVjdHVyaW5nRXJyb3JzLCBvbGRZaWVsZFBvcyA9IHRoaXMkMS55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzJDEuYXdhaXRQb3M7XG4gICAgICB0aGlzJDEueWllbGRQb3MgPSAwO1xuICAgICAgdGhpcyQxLmF3YWl0UG9zID0gMDtcbiAgICAgIHZhciBleHByTGlzdCA9IHRoaXMkMS5wYXJzZUV4cHJMaXN0KHR5cGVzLnBhcmVuUiwgdGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCwgZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgICAgaWYgKG1heWJlQXN5bmNBcnJvdyAmJiAhdGhpcyQxLmNhbkluc2VydFNlbWljb2xvbigpICYmIHRoaXMkMS5lYXQodHlwZXMuYXJyb3cpKSB7XG4gICAgICAgIHRoaXMkMS5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgZmFsc2UpO1xuICAgICAgICB0aGlzJDEuY2hlY2tZaWVsZEF3YWl0SW5EZWZhdWx0UGFyYW1zKCk7XG4gICAgICAgIHRoaXMkMS55aWVsZFBvcyA9IG9sZFlpZWxkUG9zO1xuICAgICAgICB0aGlzJDEuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcbiAgICAgICAgcmV0dXJuIHRoaXMkMS5wYXJzZUFycm93RXhwcmVzc2lvbih0aGlzJDEuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZXhwckxpc3QsIHRydWUpXG4gICAgICB9XG4gICAgICB0aGlzJDEuY2hlY2tFeHByZXNzaW9uRXJyb3JzKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRydWUpO1xuICAgICAgdGhpcyQxLnlpZWxkUG9zID0gb2xkWWllbGRQb3MgfHwgdGhpcyQxLnlpZWxkUG9zO1xuICAgICAgdGhpcyQxLmF3YWl0UG9zID0gb2xkQXdhaXRQb3MgfHwgdGhpcyQxLmF3YWl0UG9zO1xuICAgICAgdmFyIG5vZGUkMSA9IHRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZSQxLmNhbGxlZSA9IGJhc2U7XG4gICAgICBub2RlJDEuYXJndW1lbnRzID0gZXhwckxpc3Q7XG4gICAgICBiYXNlID0gdGhpcyQxLmZpbmlzaE5vZGUobm9kZSQxLCBcIkNhbGxFeHByZXNzaW9uXCIpO1xuICAgIH0gZWxzZSBpZiAodGhpcyQxLnR5cGUgPT09IHR5cGVzLmJhY2tRdW90ZSkge1xuICAgICAgdmFyIG5vZGUkMiA9IHRoaXMkMS5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZSQyLnRhZyA9IGJhc2U7XG4gICAgICBub2RlJDIucXVhc2kgPSB0aGlzJDEucGFyc2VUZW1wbGF0ZSh7aXNUYWdnZWQ6IHRydWV9KTtcbiAgICAgIGJhc2UgPSB0aGlzJDEuZmluaXNoTm9kZShub2RlJDIsIFwiVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYmFzZVxuICAgIH1cbiAgfVxufTtcblxuXG5wcCQzLnBhcnNlRXhwckF0b20gPSBmdW5jdGlvbihyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciBub2RlLCBjYW5CZUFycm93ID0gdGhpcy5wb3RlbnRpYWxBcnJvd0F0ID09IHRoaXMuc3RhcnQ7XG4gIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gIGNhc2UgdHlwZXMuX3N1cGVyOlxuICAgIGlmICghdGhpcy5pbkZ1bmN0aW9uKVxuICAgICAgeyB0aGlzLnJhaXNlKHRoaXMuc3RhcnQsIFwiJ3N1cGVyJyBvdXRzaWRlIG9mIGZ1bmN0aW9uIG9yIGNsYXNzXCIpOyB9XG5cbiAgY2FzZSB0eXBlcy5fdGhpczpcbiAgICB2YXIgdHlwZSA9IHRoaXMudHlwZSA9PT0gdHlwZXMuX3RoaXMgPyBcIlRoaXNFeHByZXNzaW9uXCIgOiBcIlN1cGVyXCI7XG4gICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCB0eXBlKVxuXG4gIGNhc2UgdHlwZXMubmFtZTpcbiAgICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gICAgdmFyIGlkID0gdGhpcy5wYXJzZUlkZW50KHRoaXMudHlwZSAhPT0gdHlwZXMubmFtZSk7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmIGlkLm5hbWUgPT09IFwiYXN5bmNcIiAmJiAhdGhpcy5jYW5JbnNlcnRTZW1pY29sb24oKSAmJiB0aGlzLmVhdCh0eXBlcy5fZnVuY3Rpb24pKVxuICAgICAgeyByZXR1cm4gdGhpcy5wYXJzZUZ1bmN0aW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgZmFsc2UsIGZhbHNlLCB0cnVlKSB9XG4gICAgaWYgKGNhbkJlQXJyb3cgJiYgIXRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkpIHtcbiAgICAgIGlmICh0aGlzLmVhdCh0eXBlcy5hcnJvdykpXG4gICAgICAgIHsgcmV0dXJuIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCBbaWRdLCBmYWxzZSkgfVxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmIGlkLm5hbWUgPT09IFwiYXN5bmNcIiAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLm5hbWUpIHtcbiAgICAgICAgaWQgPSB0aGlzLnBhcnNlSWRlbnQoKTtcbiAgICAgICAgaWYgKHRoaXMuY2FuSW5zZXJ0U2VtaWNvbG9uKCkgfHwgIXRoaXMuZWF0KHR5cGVzLmFycm93KSlcbiAgICAgICAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlQXJyb3dFeHByZXNzaW9uKHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSwgW2lkXSwgdHJ1ZSlcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkXG5cbiAgY2FzZSB0eXBlcy5yZWdleHA6XG4gICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICBub2RlID0gdGhpcy5wYXJzZUxpdGVyYWwodmFsdWUudmFsdWUpO1xuICAgIG5vZGUucmVnZXggPSB7cGF0dGVybjogdmFsdWUucGF0dGVybiwgZmxhZ3M6IHZhbHVlLmZsYWdzfTtcbiAgICByZXR1cm4gbm9kZVxuXG4gIGNhc2UgdHlwZXMubnVtOiBjYXNlIHR5cGVzLnN0cmluZzpcbiAgICByZXR1cm4gdGhpcy5wYXJzZUxpdGVyYWwodGhpcy52YWx1ZSlcblxuICBjYXNlIHR5cGVzLl9udWxsOiBjYXNlIHR5cGVzLl90cnVlOiBjYXNlIHR5cGVzLl9mYWxzZTpcbiAgICBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgICBub2RlLnZhbHVlID0gdGhpcy50eXBlID09PSB0eXBlcy5fbnVsbCA/IG51bGwgOiB0aGlzLnR5cGUgPT09IHR5cGVzLl90cnVlO1xuICAgIG5vZGUucmF3ID0gdGhpcy50eXBlLmtleXdvcmQ7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkxpdGVyYWxcIilcblxuICBjYXNlIHR5cGVzLnBhcmVuTDpcbiAgICB2YXIgc3RhcnQgPSB0aGlzLnN0YXJ0LCBleHByID0gdGhpcy5wYXJzZVBhcmVuQW5kRGlzdGluZ3Vpc2hFeHByZXNzaW9uKGNhbkJlQXJyb3cpO1xuICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gICAgICBpZiAocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5wYXJlbnRoZXNpemVkQXNzaWduIDwgMCAmJiAhdGhpcy5pc1NpbXBsZUFzc2lnblRhcmdldChleHByKSlcbiAgICAgICAgeyByZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnBhcmVudGhlc2l6ZWRBc3NpZ24gPSBzdGFydDsgfVxuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQgPCAwKVxuICAgICAgICB7IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMucGFyZW50aGVzaXplZEJpbmQgPSBzdGFydDsgfVxuICAgIH1cbiAgICByZXR1cm4gZXhwclxuXG4gIGNhc2UgdHlwZXMuYnJhY2tldEw6XG4gICAgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gICAgdGhpcy5uZXh0KCk7XG4gICAgbm9kZS5lbGVtZW50cyA9IHRoaXMucGFyc2VFeHByTGlzdCh0eXBlcy5icmFja2V0UiwgdHJ1ZSwgdHJ1ZSwgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycyk7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkFycmF5RXhwcmVzc2lvblwiKVxuXG4gIGNhc2UgdHlwZXMuYnJhY2VMOlxuICAgIHJldHVybiB0aGlzLnBhcnNlT2JqKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKVxuXG4gIGNhc2UgdHlwZXMuX2Z1bmN0aW9uOlxuICAgIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgIHRoaXMubmV4dCgpO1xuICAgIHJldHVybiB0aGlzLnBhcnNlRnVuY3Rpb24obm9kZSwgZmFsc2UpXG5cbiAgY2FzZSB0eXBlcy5fY2xhc3M6XG4gICAgcmV0dXJuIHRoaXMucGFyc2VDbGFzcyh0aGlzLnN0YXJ0Tm9kZSgpLCBmYWxzZSlcblxuICBjYXNlIHR5cGVzLl9uZXc6XG4gICAgcmV0dXJuIHRoaXMucGFyc2VOZXcoKVxuXG4gIGNhc2UgdHlwZXMuYmFja1F1b3RlOlxuICAgIHJldHVybiB0aGlzLnBhcnNlVGVtcGxhdGUoKVxuXG4gIGRlZmF1bHQ6XG4gICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH1cbn07XG5cbnBwJDMucGFyc2VMaXRlcmFsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICBub2RlLnZhbHVlID0gdmFsdWU7XG4gIG5vZGUucmF3ID0gdGhpcy5pbnB1dC5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZCk7XG4gIHRoaXMubmV4dCgpO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiTGl0ZXJhbFwiKVxufTtcblxucHAkMy5wYXJzZVBhcmVuRXhwcmVzc2lvbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmV4cGVjdCh0eXBlcy5wYXJlbkwpO1xuICB2YXIgdmFsID0gdGhpcy5wYXJzZUV4cHJlc3Npb24oKTtcbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcbiAgcmV0dXJuIHZhbFxufTtcblxucHAkMy5wYXJzZVBhcmVuQW5kRGlzdGluZ3Vpc2hFeHByZXNzaW9uID0gZnVuY3Rpb24oY2FuQmVBcnJvdykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2MsIHZhbCwgYWxsb3dUcmFpbGluZ0NvbW1hID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDg7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIHRoaXMubmV4dCgpO1xuXG4gICAgdmFyIGlubmVyU3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBpbm5lclN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgICB2YXIgZXhwckxpc3QgPSBbXSwgZmlyc3QgPSB0cnVlLCBsYXN0SXNDb21tYSA9IGZhbHNlO1xuICAgIHZhciByZWZEZXN0cnVjdHVyaW5nRXJyb3JzID0gbmV3IERlc3RydWN0dXJpbmdFcnJvcnMsIG9sZFlpZWxkUG9zID0gdGhpcy55aWVsZFBvcywgb2xkQXdhaXRQb3MgPSB0aGlzLmF3YWl0UG9zLCBzcHJlYWRTdGFydCwgaW5uZXJQYXJlblN0YXJ0O1xuICAgIHRoaXMueWllbGRQb3MgPSAwO1xuICAgIHRoaXMuYXdhaXRQb3MgPSAwO1xuICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR5cGVzLnBhcmVuUikge1xuICAgICAgZmlyc3QgPyBmaXJzdCA9IGZhbHNlIDogdGhpcyQxLmV4cGVjdCh0eXBlcy5jb21tYSk7XG4gICAgICBpZiAoYWxsb3dUcmFpbGluZ0NvbW1hICYmIHRoaXMkMS5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMucGFyZW5SLCB0cnVlKSkge1xuICAgICAgICBsYXN0SXNDb21tYSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2UgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5lbGxpcHNpcykge1xuICAgICAgICBzcHJlYWRTdGFydCA9IHRoaXMkMS5zdGFydDtcbiAgICAgICAgZXhwckxpc3QucHVzaCh0aGlzJDEucGFyc2VQYXJlbkl0ZW0odGhpcyQxLnBhcnNlUmVzdEJpbmRpbmcoKSkpO1xuICAgICAgICBpZiAodGhpcyQxLnR5cGUgPT09IHR5cGVzLmNvbW1hKSB7IHRoaXMkMS5yYWlzZSh0aGlzJDEuc3RhcnQsIFwiQ29tbWEgaXMgbm90IHBlcm1pdHRlZCBhZnRlciB0aGUgcmVzdCBlbGVtZW50XCIpOyB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcyQxLnR5cGUgPT09IHR5cGVzLnBhcmVuTCAmJiAhaW5uZXJQYXJlblN0YXJ0KSB7XG4gICAgICAgICAgaW5uZXJQYXJlblN0YXJ0ID0gdGhpcyQxLnN0YXJ0O1xuICAgICAgICB9XG4gICAgICAgIGV4cHJMaXN0LnB1c2godGhpcyQxLnBhcnNlTWF5YmVBc3NpZ24oZmFsc2UsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMsIHRoaXMkMS5wYXJzZVBhcmVuSXRlbSkpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgaW5uZXJFbmRQb3MgPSB0aGlzLnN0YXJ0LCBpbm5lckVuZExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gICAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5SKTtcblxuICAgIGlmIChjYW5CZUFycm93ICYmICF0aGlzLmNhbkluc2VydFNlbWljb2xvbigpICYmIHRoaXMuZWF0KHR5cGVzLmFycm93KSkge1xuICAgICAgdGhpcy5jaGVja1BhdHRlcm5FcnJvcnMocmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycywgZmFsc2UpO1xuICAgICAgdGhpcy5jaGVja1lpZWxkQXdhaXRJbkRlZmF1bHRQYXJhbXMoKTtcbiAgICAgIGlmIChpbm5lclBhcmVuU3RhcnQpIHsgdGhpcy51bmV4cGVjdGVkKGlubmVyUGFyZW5TdGFydCk7IH1cbiAgICAgIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgICAgIHRoaXMuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlUGFyZW5BcnJvd0xpc3Qoc3RhcnRQb3MsIHN0YXJ0TG9jLCBleHByTGlzdClcbiAgICB9XG5cbiAgICBpZiAoIWV4cHJMaXN0Lmxlbmd0aCB8fCBsYXN0SXNDb21tYSkgeyB0aGlzLnVuZXhwZWN0ZWQodGhpcy5sYXN0VG9rU3RhcnQpOyB9XG4gICAgaWYgKHNwcmVhZFN0YXJ0KSB7IHRoaXMudW5leHBlY3RlZChzcHJlYWRTdGFydCk7IH1cbiAgICB0aGlzLmNoZWNrRXhwcmVzc2lvbkVycm9ycyhyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLCB0cnVlKTtcbiAgICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3MgfHwgdGhpcy55aWVsZFBvcztcbiAgICB0aGlzLmF3YWl0UG9zID0gb2xkQXdhaXRQb3MgfHwgdGhpcy5hd2FpdFBvcztcblxuICAgIGlmIChleHByTGlzdC5sZW5ndGggPiAxKSB7XG4gICAgICB2YWwgPSB0aGlzLnN0YXJ0Tm9kZUF0KGlubmVyU3RhcnRQb3MsIGlubmVyU3RhcnRMb2MpO1xuICAgICAgdmFsLmV4cHJlc3Npb25zID0gZXhwckxpc3Q7XG4gICAgICB0aGlzLmZpbmlzaE5vZGVBdCh2YWwsIFwiU2VxdWVuY2VFeHByZXNzaW9uXCIsIGlubmVyRW5kUG9zLCBpbm5lckVuZExvYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbCA9IGV4cHJMaXN0WzBdO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YWwgPSB0aGlzLnBhcnNlUGFyZW5FeHByZXNzaW9uKCk7XG4gIH1cblxuICBpZiAodGhpcy5vcHRpb25zLnByZXNlcnZlUGFyZW5zKSB7XG4gICAgdmFyIHBhciA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICBwYXIuZXhwcmVzc2lvbiA9IHZhbDtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKHBhciwgXCJQYXJlbnRoZXNpemVkRXhwcmVzc2lvblwiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWxcbiAgfVxufTtcblxucHAkMy5wYXJzZVBhcmVuSXRlbSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW1cbn07XG5cbnBwJDMucGFyc2VQYXJlbkFycm93TGlzdCA9IGZ1bmN0aW9uKHN0YXJ0UG9zLCBzdGFydExvYywgZXhwckxpc3QpIHtcbiAgcmV0dXJuIHRoaXMucGFyc2VBcnJvd0V4cHJlc3Npb24odGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpLCBleHByTGlzdClcbn07XG5cblxudmFyIGVtcHR5JDEgPSBbXTtcblxucHAkMy5wYXJzZU5ldyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHZhciBtZXRhID0gdGhpcy5wYXJzZUlkZW50KHRydWUpO1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgdGhpcy5lYXQodHlwZXMuZG90KSkge1xuICAgIG5vZGUubWV0YSA9IG1ldGE7XG4gICAgbm9kZS5wcm9wZXJ0eSA9IHRoaXMucGFyc2VJZGVudCh0cnVlKTtcbiAgICBpZiAobm9kZS5wcm9wZXJ0eS5uYW1lICE9PSBcInRhcmdldFwiKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5wcm9wZXJ0eS5zdGFydCwgXCJUaGUgb25seSB2YWxpZCBtZXRhIHByb3BlcnR5IGZvciBuZXcgaXMgbmV3LnRhcmdldFwiKTsgfVxuICAgIGlmICghdGhpcy5pbkZ1bmN0aW9uKVxuICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJuZXcudGFyZ2V0IGNhbiBvbmx5IGJlIHVzZWQgaW4gZnVuY3Rpb25zXCIpOyB9XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk1ldGFQcm9wZXJ0eVwiKVxuICB9XG4gIHZhciBzdGFydFBvcyA9IHRoaXMuc3RhcnQsIHN0YXJ0TG9jID0gdGhpcy5zdGFydExvYztcbiAgbm9kZS5jYWxsZWUgPSB0aGlzLnBhcnNlU3Vic2NyaXB0cyh0aGlzLnBhcnNlRXhwckF0b20oKSwgc3RhcnRQb3MsIHN0YXJ0TG9jLCB0cnVlKTtcbiAgaWYgKHRoaXMuZWF0KHR5cGVzLnBhcmVuTCkpIHsgbm9kZS5hcmd1bWVudHMgPSB0aGlzLnBhcnNlRXhwckxpc3QodHlwZXMucGFyZW5SLCB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gOCwgZmFsc2UpOyB9XG4gIGVsc2UgeyBub2RlLmFyZ3VtZW50cyA9IGVtcHR5JDE7IH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIk5ld0V4cHJlc3Npb25cIilcbn07XG5cblxucHAkMy5wYXJzZVRlbXBsYXRlRWxlbWVudCA9IGZ1bmN0aW9uKHJlZikge1xuICB2YXIgaXNUYWdnZWQgPSByZWYuaXNUYWdnZWQ7XG5cbiAgdmFyIGVsZW0gPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5pbnZhbGlkVGVtcGxhdGUpIHtcbiAgICBpZiAoIWlzVGFnZ2VkKSB7XG4gICAgICB0aGlzLnJhaXNlUmVjb3ZlcmFibGUodGhpcy5zdGFydCwgXCJCYWQgZXNjYXBlIHNlcXVlbmNlIGluIHVudGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxcIik7XG4gICAgfVxuICAgIGVsZW0udmFsdWUgPSB7XG4gICAgICByYXc6IHRoaXMudmFsdWUsXG4gICAgICBjb29rZWQ6IG51bGxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGVsZW0udmFsdWUgPSB7XG4gICAgICByYXc6IHRoaXMuaW5wdXQuc2xpY2UodGhpcy5zdGFydCwgdGhpcy5lbmQpLnJlcGxhY2UoL1xcclxcbj8vZywgXCJcXG5cIiksXG4gICAgICBjb29rZWQ6IHRoaXMudmFsdWVcbiAgICB9O1xuICB9XG4gIHRoaXMubmV4dCgpO1xuICBlbGVtLnRhaWwgPSB0aGlzLnR5cGUgPT09IHR5cGVzLmJhY2tRdW90ZTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShlbGVtLCBcIlRlbXBsYXRlRWxlbWVudFwiKVxufTtcblxucHAkMy5wYXJzZVRlbXBsYXRlID0gZnVuY3Rpb24ocmVmKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuICBpZiAoIHJlZiA9PT0gdm9pZCAwICkgcmVmID0ge307XG4gIHZhciBpc1RhZ2dlZCA9IHJlZi5pc1RhZ2dlZDsgaWYgKCBpc1RhZ2dlZCA9PT0gdm9pZCAwICkgaXNUYWdnZWQgPSBmYWxzZTtcblxuICB2YXIgbm9kZSA9IHRoaXMuc3RhcnROb2RlKCk7XG4gIHRoaXMubmV4dCgpO1xuICBub2RlLmV4cHJlc3Npb25zID0gW107XG4gIHZhciBjdXJFbHQgPSB0aGlzLnBhcnNlVGVtcGxhdGVFbGVtZW50KHtpc1RhZ2dlZDogaXNUYWdnZWR9KTtcbiAgbm9kZS5xdWFzaXMgPSBbY3VyRWx0XTtcbiAgd2hpbGUgKCFjdXJFbHQudGFpbCkge1xuICAgIHRoaXMkMS5leHBlY3QodHlwZXMuZG9sbGFyQnJhY2VMKTtcbiAgICBub2RlLmV4cHJlc3Npb25zLnB1c2godGhpcyQxLnBhcnNlRXhwcmVzc2lvbigpKTtcbiAgICB0aGlzJDEuZXhwZWN0KHR5cGVzLmJyYWNlUik7XG4gICAgbm9kZS5xdWFzaXMucHVzaChjdXJFbHQgPSB0aGlzJDEucGFyc2VUZW1wbGF0ZUVsZW1lbnQoe2lzVGFnZ2VkOiBpc1RhZ2dlZH0pKTtcbiAgfVxuICB0aGlzLm5leHQoKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIlRlbXBsYXRlTGl0ZXJhbFwiKVxufTtcblxuXG5wcCQzLmlzQXN5bmNQcm9wID0gZnVuY3Rpb24ocHJvcCkge1xuICByZXR1cm4gIXByb3AuY29tcHV0ZWQgJiYgcHJvcC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIgJiYgcHJvcC5rZXkubmFtZSA9PT0gXCJhc3luY1wiICYmXG4gICAgKHRoaXMudHlwZSA9PT0gdHlwZXMubmFtZSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLm51bSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLmJyYWNrZXRMIHx8IHRoaXMudHlwZS5rZXl3b3JkKSAmJlxuICAgICFsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpXG59O1xuXG5wcCQzLnBhcnNlT2JqID0gZnVuY3Rpb24oaXNQYXR0ZXJuLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgZmlyc3QgPSB0cnVlLCBwcm9wSGFzaCA9IHt9O1xuICBub2RlLnByb3BlcnRpZXMgPSBbXTtcbiAgdGhpcy5uZXh0KCk7XG4gIHdoaWxlICghdGhpcy5lYXQodHlwZXMuYnJhY2VSKSkge1xuICAgIGlmICghZmlyc3QpIHtcbiAgICAgIHRoaXMkMS5leHBlY3QodHlwZXMuY29tbWEpO1xuICAgICAgaWYgKHRoaXMkMS5hZnRlclRyYWlsaW5nQ29tbWEodHlwZXMuYnJhY2VSKSkgeyBicmVhayB9XG4gICAgfSBlbHNlIHsgZmlyc3QgPSBmYWxzZTsgfVxuXG4gICAgdmFyIHByb3AgPSB0aGlzJDEuc3RhcnROb2RlKCksIGlzR2VuZXJhdG9yID0gKHZvaWQgMCksIGlzQXN5bmMgPSAodm9pZCAwKSwgc3RhcnRQb3MgPSAodm9pZCAwKSwgc3RhcnRMb2MgPSAodm9pZCAwKTtcbiAgICBpZiAodGhpcyQxLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgICAgcHJvcC5tZXRob2QgPSBmYWxzZTtcbiAgICAgIHByb3Auc2hvcnRoYW5kID0gZmFsc2U7XG4gICAgICBpZiAoaXNQYXR0ZXJuIHx8IHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICAgICAgc3RhcnRQb3MgPSB0aGlzJDEuc3RhcnQ7XG4gICAgICAgIHN0YXJ0TG9jID0gdGhpcyQxLnN0YXJ0TG9jO1xuICAgICAgfVxuICAgICAgaWYgKCFpc1BhdHRlcm4pXG4gICAgICAgIHsgaXNHZW5lcmF0b3IgPSB0aGlzJDEuZWF0KHR5cGVzLnN0YXIpOyB9XG4gICAgfVxuICAgIHRoaXMkMS5wYXJzZVByb3BlcnR5TmFtZShwcm9wKTtcbiAgICBpZiAoIWlzUGF0dGVybiAmJiB0aGlzJDEub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4ICYmICFpc0dlbmVyYXRvciAmJiB0aGlzJDEuaXNBc3luY1Byb3AocHJvcCkpIHtcbiAgICAgIGlzQXN5bmMgPSB0cnVlO1xuICAgICAgdGhpcyQxLnBhcnNlUHJvcGVydHlOYW1lKHByb3AsIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc0FzeW5jID0gZmFsc2U7XG4gICAgfVxuICAgIHRoaXMkMS5wYXJzZVByb3BlcnR5VmFsdWUocHJvcCwgaXNQYXR0ZXJuLCBpc0dlbmVyYXRvciwgaXNBc3luYywgc3RhcnRQb3MsIHN0YXJ0TG9jLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICB0aGlzJDEuY2hlY2tQcm9wQ2xhc2gocHJvcCwgcHJvcEhhc2gpO1xuICAgIG5vZGUucHJvcGVydGllcy5wdXNoKHRoaXMkMS5maW5pc2hOb2RlKHByb3AsIFwiUHJvcGVydHlcIikpO1xuICB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgaXNQYXR0ZXJuID8gXCJPYmplY3RQYXR0ZXJuXCIgOiBcIk9iamVjdEV4cHJlc3Npb25cIilcbn07XG5cbnBwJDMucGFyc2VQcm9wZXJ0eVZhbHVlID0gZnVuY3Rpb24ocHJvcCwgaXNQYXR0ZXJuLCBpc0dlbmVyYXRvciwgaXNBc3luYywgc3RhcnRQb3MsIHN0YXJ0TG9jLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKSB7XG4gIGlmICgoaXNHZW5lcmF0b3IgfHwgaXNBc3luYykgJiYgdGhpcy50eXBlID09PSB0eXBlcy5jb2xvbilcbiAgICB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG5cbiAgaWYgKHRoaXMuZWF0KHR5cGVzLmNvbG9uKSkge1xuICAgIHByb3AudmFsdWUgPSBpc1BhdHRlcm4gPyB0aGlzLnBhcnNlTWF5YmVEZWZhdWx0KHRoaXMuc3RhcnQsIHRoaXMuc3RhcnRMb2MpIDogdGhpcy5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICBwcm9wLmtpbmQgPSBcImluaXRcIjtcbiAgfSBlbHNlIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNiAmJiB0aGlzLnR5cGUgPT09IHR5cGVzLnBhcmVuTCkge1xuICAgIGlmIChpc1BhdHRlcm4pIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICBwcm9wLmtpbmQgPSBcImluaXRcIjtcbiAgICBwcm9wLm1ldGhvZCA9IHRydWU7XG4gICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNZXRob2QoaXNHZW5lcmF0b3IsIGlzQXN5bmMpO1xuICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA1ICYmICFwcm9wLmNvbXB1dGVkICYmIHByb3Aua2V5LnR5cGUgPT09IFwiSWRlbnRpZmllclwiICYmXG4gICAgICAgICAgICAgKHByb3Aua2V5Lm5hbWUgPT09IFwiZ2V0XCIgfHwgcHJvcC5rZXkubmFtZSA9PT0gXCJzZXRcIikgJiZcbiAgICAgICAgICAgICAodGhpcy50eXBlICE9IHR5cGVzLmNvbW1hICYmIHRoaXMudHlwZSAhPSB0eXBlcy5icmFjZVIpKSB7XG4gICAgaWYgKGlzR2VuZXJhdG9yIHx8IGlzQXN5bmMgfHwgaXNQYXR0ZXJuKSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG4gICAgcHJvcC5raW5kID0gcHJvcC5rZXkubmFtZTtcbiAgICB0aGlzLnBhcnNlUHJvcGVydHlOYW1lKHByb3ApO1xuICAgIHByb3AudmFsdWUgPSB0aGlzLnBhcnNlTWV0aG9kKGZhbHNlKTtcbiAgICB2YXIgcGFyYW1Db3VudCA9IHByb3Aua2luZCA9PT0gXCJnZXRcIiA/IDAgOiAxO1xuICAgIGlmIChwcm9wLnZhbHVlLnBhcmFtcy5sZW5ndGggIT09IHBhcmFtQ291bnQpIHtcbiAgICAgIHZhciBzdGFydCA9IHByb3AudmFsdWUuc3RhcnQ7XG4gICAgICBpZiAocHJvcC5raW5kID09PSBcImdldFwiKVxuICAgICAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJnZXR0ZXIgc2hvdWxkIGhhdmUgbm8gcGFyYW1zXCIpOyB9XG4gICAgICBlbHNlXG4gICAgICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCBcInNldHRlciBzaG91bGQgaGF2ZSBleGFjdGx5IG9uZSBwYXJhbVwiKTsgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcC5raW5kID09PSBcInNldFwiICYmIHByb3AudmFsdWUucGFyYW1zWzBdLnR5cGUgPT09IFwiUmVzdEVsZW1lbnRcIilcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUocHJvcC52YWx1ZS5wYXJhbXNbMF0uc3RhcnQsIFwiU2V0dGVyIGNhbm5vdCB1c2UgcmVzdCBwYXJhbXNcIik7IH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYgJiYgIXByb3AuY29tcHV0ZWQgJiYgcHJvcC5rZXkudHlwZSA9PT0gXCJJZGVudGlmaWVyXCIpIHtcbiAgICB0aGlzLmNoZWNrVW5yZXNlcnZlZChwcm9wLmtleSk7XG4gICAgcHJvcC5raW5kID0gXCJpbml0XCI7XG4gICAgaWYgKGlzUGF0dGVybikge1xuICAgICAgcHJvcC52YWx1ZSA9IHRoaXMucGFyc2VNYXliZURlZmF1bHQoc3RhcnRQb3MsIHN0YXJ0TG9jLCBwcm9wLmtleSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHR5cGVzLmVxICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgICAgIGlmIChyZWZEZXN0cnVjdHVyaW5nRXJyb3JzLnNob3J0aGFuZEFzc2lnbiA8IDApXG4gICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy5zaG9ydGhhbmRBc3NpZ24gPSB0aGlzLnN0YXJ0OyB9XG4gICAgICBwcm9wLnZhbHVlID0gdGhpcy5wYXJzZU1heWJlRGVmYXVsdChzdGFydFBvcywgc3RhcnRMb2MsIHByb3Aua2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcC52YWx1ZSA9IHByb3Aua2V5O1xuICAgIH1cbiAgICBwcm9wLnNob3J0aGFuZCA9IHRydWU7XG4gIH0gZWxzZSB7IHRoaXMudW5leHBlY3RlZCgpOyB9XG59O1xuXG5wcCQzLnBhcnNlUHJvcGVydHlOYW1lID0gZnVuY3Rpb24ocHJvcCkge1xuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDYpIHtcbiAgICBpZiAodGhpcy5lYXQodHlwZXMuYnJhY2tldEwpKSB7XG4gICAgICBwcm9wLmNvbXB1dGVkID0gdHJ1ZTtcbiAgICAgIHByb3Aua2V5ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgICB0aGlzLmV4cGVjdCh0eXBlcy5icmFja2V0Uik7XG4gICAgICByZXR1cm4gcHJvcC5rZXlcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcC5jb21wdXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcHJvcC5rZXkgPSB0aGlzLnR5cGUgPT09IHR5cGVzLm51bSB8fCB0aGlzLnR5cGUgPT09IHR5cGVzLnN0cmluZyA/IHRoaXMucGFyc2VFeHByQXRvbSgpIDogdGhpcy5wYXJzZUlkZW50KHRydWUpXG59O1xuXG5cbnBwJDMuaW5pdEZ1bmN0aW9uID0gZnVuY3Rpb24obm9kZSkge1xuICBub2RlLmlkID0gbnVsbDtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgbm9kZS5nZW5lcmF0b3IgPSBmYWxzZTtcbiAgICBub2RlLmV4cHJlc3Npb24gPSBmYWxzZTtcbiAgfVxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgpXG4gICAgeyBub2RlLmFzeW5jID0gZmFsc2U7IH1cbn07XG5cblxucHAkMy5wYXJzZU1ldGhvZCA9IGZ1bmN0aW9uKGlzR2VuZXJhdG9yLCBpc0FzeW5jKSB7XG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKSwgb2xkSW5HZW4gPSB0aGlzLmluR2VuZXJhdG9yLCBvbGRJbkFzeW5jID0gdGhpcy5pbkFzeW5jLFxuICAgICAgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEluRnVuYyA9IHRoaXMuaW5GdW5jdGlvbjtcblxuICB0aGlzLmluaXRGdW5jdGlvbihub2RlKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KVxuICAgIHsgbm9kZS5nZW5lcmF0b3IgPSBpc0dlbmVyYXRvcjsgfVxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgpXG4gICAgeyBub2RlLmFzeW5jID0gISFpc0FzeW5jOyB9XG5cbiAgdGhpcy5pbkdlbmVyYXRvciA9IG5vZGUuZ2VuZXJhdG9yO1xuICB0aGlzLmluQXN5bmMgPSBub2RlLmFzeW5jO1xuICB0aGlzLnlpZWxkUG9zID0gMDtcbiAgdGhpcy5hd2FpdFBvcyA9IDA7XG4gIHRoaXMuaW5GdW5jdGlvbiA9IHRydWU7XG4gIHRoaXMuZW50ZXJGdW5jdGlvblNjb3BlKCk7XG5cbiAgdGhpcy5leHBlY3QodHlwZXMucGFyZW5MKTtcbiAgbm9kZS5wYXJhbXMgPSB0aGlzLnBhcnNlQmluZGluZ0xpc3QodHlwZXMucGFyZW5SLCBmYWxzZSwgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDgpO1xuICB0aGlzLmNoZWNrWWllbGRBd2FpdEluRGVmYXVsdFBhcmFtcygpO1xuICB0aGlzLnBhcnNlRnVuY3Rpb25Cb2R5KG5vZGUsIGZhbHNlKTtcblxuICB0aGlzLmluR2VuZXJhdG9yID0gb2xkSW5HZW47XG4gIHRoaXMuaW5Bc3luYyA9IG9sZEluQXN5bmM7XG4gIHRoaXMueWllbGRQb3MgPSBvbGRZaWVsZFBvcztcbiAgdGhpcy5hd2FpdFBvcyA9IG9sZEF3YWl0UG9zO1xuICB0aGlzLmluRnVuY3Rpb24gPSBvbGRJbkZ1bmM7XG4gIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJGdW5jdGlvbkV4cHJlc3Npb25cIilcbn07XG5cblxucHAkMy5wYXJzZUFycm93RXhwcmVzc2lvbiA9IGZ1bmN0aW9uKG5vZGUsIHBhcmFtcywgaXNBc3luYykge1xuICB2YXIgb2xkSW5HZW4gPSB0aGlzLmluR2VuZXJhdG9yLCBvbGRJbkFzeW5jID0gdGhpcy5pbkFzeW5jLFxuICAgICAgb2xkWWllbGRQb3MgPSB0aGlzLnlpZWxkUG9zLCBvbGRBd2FpdFBvcyA9IHRoaXMuYXdhaXRQb3MsIG9sZEluRnVuYyA9IHRoaXMuaW5GdW5jdGlvbjtcblxuICB0aGlzLmVudGVyRnVuY3Rpb25TY29wZSgpO1xuICB0aGlzLmluaXRGdW5jdGlvbihub2RlKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA4KVxuICAgIHsgbm9kZS5hc3luYyA9ICEhaXNBc3luYzsgfVxuXG4gIHRoaXMuaW5HZW5lcmF0b3IgPSBmYWxzZTtcbiAgdGhpcy5pbkFzeW5jID0gbm9kZS5hc3luYztcbiAgdGhpcy55aWVsZFBvcyA9IDA7XG4gIHRoaXMuYXdhaXRQb3MgPSAwO1xuICB0aGlzLmluRnVuY3Rpb24gPSB0cnVlO1xuXG4gIG5vZGUucGFyYW1zID0gdGhpcy50b0Fzc2lnbmFibGVMaXN0KHBhcmFtcywgdHJ1ZSk7XG4gIHRoaXMucGFyc2VGdW5jdGlvbkJvZHkobm9kZSwgdHJ1ZSk7XG5cbiAgdGhpcy5pbkdlbmVyYXRvciA9IG9sZEluR2VuO1xuICB0aGlzLmluQXN5bmMgPSBvbGRJbkFzeW5jO1xuICB0aGlzLnlpZWxkUG9zID0gb2xkWWllbGRQb3M7XG4gIHRoaXMuYXdhaXRQb3MgPSBvbGRBd2FpdFBvcztcbiAgdGhpcy5pbkZ1bmN0aW9uID0gb2xkSW5GdW5jO1xuICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIFwiQXJyb3dGdW5jdGlvbkV4cHJlc3Npb25cIilcbn07XG5cblxucHAkMy5wYXJzZUZ1bmN0aW9uQm9keSA9IGZ1bmN0aW9uKG5vZGUsIGlzQXJyb3dGdW5jdGlvbikge1xuICB2YXIgaXNFeHByZXNzaW9uID0gaXNBcnJvd0Z1bmN0aW9uICYmIHRoaXMudHlwZSAhPT0gdHlwZXMuYnJhY2VMO1xuICB2YXIgb2xkU3RyaWN0ID0gdGhpcy5zdHJpY3QsIHVzZVN0cmljdCA9IGZhbHNlO1xuXG4gIGlmIChpc0V4cHJlc3Npb24pIHtcbiAgICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlTWF5YmVBc3NpZ24oKTtcbiAgICBub2RlLmV4cHJlc3Npb24gPSB0cnVlO1xuICAgIHRoaXMuY2hlY2tQYXJhbXMobm9kZSwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub25TaW1wbGUgPSB0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNyAmJiAhdGhpcy5pc1NpbXBsZVBhcmFtTGlzdChub2RlLnBhcmFtcyk7XG4gICAgaWYgKCFvbGRTdHJpY3QgfHwgbm9uU2ltcGxlKSB7XG4gICAgICB1c2VTdHJpY3QgPSB0aGlzLnN0cmljdERpcmVjdGl2ZSh0aGlzLmVuZCk7XG4gICAgICBpZiAodXNlU3RyaWN0ICYmIG5vblNpbXBsZSlcbiAgICAgICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUobm9kZS5zdGFydCwgXCJJbGxlZ2FsICd1c2Ugc3RyaWN0JyBkaXJlY3RpdmUgaW4gZnVuY3Rpb24gd2l0aCBub24tc2ltcGxlIHBhcmFtZXRlciBsaXN0XCIpOyB9XG4gICAgfVxuICAgIHZhciBvbGRMYWJlbHMgPSB0aGlzLmxhYmVscztcbiAgICB0aGlzLmxhYmVscyA9IFtdO1xuICAgIGlmICh1c2VTdHJpY3QpIHsgdGhpcy5zdHJpY3QgPSB0cnVlOyB9XG5cbiAgICB0aGlzLmNoZWNrUGFyYW1zKG5vZGUsICFvbGRTdHJpY3QgJiYgIXVzZVN0cmljdCAmJiAhaXNBcnJvd0Z1bmN0aW9uICYmIHRoaXMuaXNTaW1wbGVQYXJhbUxpc3Qobm9kZS5wYXJhbXMpKTtcbiAgICBub2RlLmJvZHkgPSB0aGlzLnBhcnNlQmxvY2soZmFsc2UpO1xuICAgIG5vZGUuZXhwcmVzc2lvbiA9IGZhbHNlO1xuICAgIHRoaXMubGFiZWxzID0gb2xkTGFiZWxzO1xuICB9XG4gIHRoaXMuZXhpdEZ1bmN0aW9uU2NvcGUoKTtcblxuICBpZiAodGhpcy5zdHJpY3QgJiYgbm9kZS5pZCkge1xuICAgIHRoaXMuY2hlY2tMVmFsKG5vZGUuaWQsIFwibm9uZVwiKTtcbiAgfVxuICB0aGlzLnN0cmljdCA9IG9sZFN0cmljdDtcbn07XG5cbnBwJDMuaXNTaW1wbGVQYXJhbUxpc3QgPSBmdW5jdGlvbihwYXJhbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBwYXJhbXM7IGkgPCBsaXN0Lmxlbmd0aDsgaSArPSAxKVxuICAgIHtcbiAgICB2YXIgcGFyYW0gPSBsaXN0W2ldO1xuXG4gICAgaWYgKHBhcmFtLnR5cGUgIT09IFwiSWRlbnRpZmllclwiKSB7IHJldHVybiBmYWxzZVxuICB9IH1cbiAgcmV0dXJuIHRydWVcbn07XG5cblxucHAkMy5jaGVja1BhcmFtcyA9IGZ1bmN0aW9uKG5vZGUsIGFsbG93RHVwbGljYXRlcykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgbmFtZUhhc2ggPSB7fTtcbiAgZm9yICh2YXIgaSA9IDAsIGxpc3QgPSBub2RlLnBhcmFtczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpXG4gICAge1xuICAgIHZhciBwYXJhbSA9IGxpc3RbaV07XG5cbiAgICB0aGlzJDEuY2hlY2tMVmFsKHBhcmFtLCBcInZhclwiLCBhbGxvd0R1cGxpY2F0ZXMgPyBudWxsIDogbmFtZUhhc2gpO1xuICB9XG59O1xuXG5cbnBwJDMucGFyc2VFeHByTGlzdCA9IGZ1bmN0aW9uKGNsb3NlLCBhbGxvd1RyYWlsaW5nQ29tbWEsIGFsbG93RW1wdHksIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGVsdHMgPSBbXSwgZmlyc3QgPSB0cnVlO1xuICB3aGlsZSAoIXRoaXMuZWF0KGNsb3NlKSkge1xuICAgIGlmICghZmlyc3QpIHtcbiAgICAgIHRoaXMkMS5leHBlY3QodHlwZXMuY29tbWEpO1xuICAgICAgaWYgKGFsbG93VHJhaWxpbmdDb21tYSAmJiB0aGlzJDEuYWZ0ZXJUcmFpbGluZ0NvbW1hKGNsb3NlKSkgeyBicmVhayB9XG4gICAgfSBlbHNlIHsgZmlyc3QgPSBmYWxzZTsgfVxuXG4gICAgdmFyIGVsdCA9ICh2b2lkIDApO1xuICAgIGlmIChhbGxvd0VtcHR5ICYmIHRoaXMkMS50eXBlID09PSB0eXBlcy5jb21tYSlcbiAgICAgIHsgZWx0ID0gbnVsbDsgfVxuICAgIGVsc2UgaWYgKHRoaXMkMS50eXBlID09PSB0eXBlcy5lbGxpcHNpcykge1xuICAgICAgZWx0ID0gdGhpcyQxLnBhcnNlU3ByZWFkKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMpO1xuICAgICAgaWYgKHJlZkRlc3RydWN0dXJpbmdFcnJvcnMgJiYgdGhpcyQxLnR5cGUgPT09IHR5cGVzLmNvbW1hICYmIHJlZkRlc3RydWN0dXJpbmdFcnJvcnMudHJhaWxpbmdDb21tYSA8IDApXG4gICAgICAgIHsgcmVmRGVzdHJ1Y3R1cmluZ0Vycm9ycy50cmFpbGluZ0NvbW1hID0gdGhpcyQxLnN0YXJ0OyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsdCA9IHRoaXMkMS5wYXJzZU1heWJlQXNzaWduKGZhbHNlLCByZWZEZXN0cnVjdHVyaW5nRXJyb3JzKTtcbiAgICB9XG4gICAgZWx0cy5wdXNoKGVsdCk7XG4gIH1cbiAgcmV0dXJuIGVsdHNcbn07XG5cblxucHAkMy5jaGVja1VucmVzZXJ2ZWQgPSBmdW5jdGlvbihyZWYpIHtcbiAgdmFyIHN0YXJ0ID0gcmVmLnN0YXJ0O1xuICB2YXIgZW5kID0gcmVmLmVuZDtcbiAgdmFyIG5hbWUgPSByZWYubmFtZTtcblxuICBpZiAodGhpcy5pbkdlbmVyYXRvciAmJiBuYW1lID09PSBcInlpZWxkXCIpXG4gICAgeyB0aGlzLnJhaXNlUmVjb3ZlcmFibGUoc3RhcnQsIFwiQ2FuIG5vdCB1c2UgJ3lpZWxkJyBhcyBpZGVudGlmaWVyIGluc2lkZSBhIGdlbmVyYXRvclwiKTsgfVxuICBpZiAodGhpcy5pbkFzeW5jICYmIG5hbWUgPT09IFwiYXdhaXRcIilcbiAgICB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZShzdGFydCwgXCJDYW4gbm90IHVzZSAnYXdhaXQnIGFzIGlkZW50aWZpZXIgaW5zaWRlIGFuIGFzeW5jIGZ1bmN0aW9uXCIpOyB9XG4gIGlmICh0aGlzLmlzS2V5d29yZChuYW1lKSlcbiAgICB7IHRoaXMucmFpc2Uoc3RhcnQsIChcIlVuZXhwZWN0ZWQga2V5d29yZCAnXCIgKyBuYW1lICsgXCInXCIpKTsgfVxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uIDwgNiAmJlxuICAgIHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQsIGVuZCkuaW5kZXhPZihcIlxcXFxcIikgIT0gLTEpIHsgcmV0dXJuIH1cbiAgdmFyIHJlID0gdGhpcy5zdHJpY3QgPyB0aGlzLnJlc2VydmVkV29yZHNTdHJpY3QgOiB0aGlzLnJlc2VydmVkV29yZHM7XG4gIGlmIChyZS50ZXN0KG5hbWUpKVxuICAgIHsgdGhpcy5yYWlzZVJlY292ZXJhYmxlKHN0YXJ0LCAoXCJUaGUga2V5d29yZCAnXCIgKyBuYW1lICsgXCInIGlzIHJlc2VydmVkXCIpKTsgfVxufTtcblxucHAkMy5wYXJzZUlkZW50ID0gZnVuY3Rpb24obGliZXJhbCwgaXNCaW5kaW5nKSB7XG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgaWYgKGxpYmVyYWwgJiYgdGhpcy5vcHRpb25zLmFsbG93UmVzZXJ2ZWQgPT0gXCJuZXZlclwiKSB7IGxpYmVyYWwgPSBmYWxzZTsgfVxuICBpZiAodGhpcy50eXBlID09PSB0eXBlcy5uYW1lKSB7XG4gICAgbm9kZS5uYW1lID0gdGhpcy52YWx1ZTtcbiAgfSBlbHNlIGlmICh0aGlzLnR5cGUua2V5d29yZCkge1xuICAgIG5vZGUubmFtZSA9IHRoaXMudHlwZS5rZXl3b3JkO1xuICB9IGVsc2Uge1xuICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICB9XG4gIHRoaXMubmV4dCgpO1xuICB0aGlzLmZpbmlzaE5vZGUobm9kZSwgXCJJZGVudGlmaWVyXCIpO1xuICBpZiAoIWxpYmVyYWwpIHsgdGhpcy5jaGVja1VucmVzZXJ2ZWQobm9kZSk7IH1cbiAgcmV0dXJuIG5vZGVcbn07XG5cblxucHAkMy5wYXJzZVlpZWxkID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy55aWVsZFBvcykgeyB0aGlzLnlpZWxkUG9zID0gdGhpcy5zdGFydDsgfVxuXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgdGhpcy5uZXh0KCk7XG4gIGlmICh0aGlzLnR5cGUgPT0gdHlwZXMuc2VtaSB8fCB0aGlzLmNhbkluc2VydFNlbWljb2xvbigpIHx8ICh0aGlzLnR5cGUgIT0gdHlwZXMuc3RhciAmJiAhdGhpcy50eXBlLnN0YXJ0c0V4cHIpKSB7XG4gICAgbm9kZS5kZWxlZ2F0ZSA9IGZhbHNlO1xuICAgIG5vZGUuYXJndW1lbnQgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIG5vZGUuZGVsZWdhdGUgPSB0aGlzLmVhdCh0eXBlcy5zdGFyKTtcbiAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIllpZWxkRXhwcmVzc2lvblwiKVxufTtcblxucHAkMy5wYXJzZUF3YWl0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICghdGhpcy5hd2FpdFBvcykgeyB0aGlzLmF3YWl0UG9zID0gdGhpcy5zdGFydDsgfVxuXG4gIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGUoKTtcbiAgdGhpcy5uZXh0KCk7XG4gIG5vZGUuYXJndW1lbnQgPSB0aGlzLnBhcnNlTWF5YmVVbmFyeShudWxsLCB0cnVlKTtcbiAgcmV0dXJuIHRoaXMuZmluaXNoTm9kZShub2RlLCBcIkF3YWl0RXhwcmVzc2lvblwiKVxufTtcblxudmFyIHBwJDQgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5cbnBwJDQucmFpc2UgPSBmdW5jdGlvbihwb3MsIG1lc3NhZ2UpIHtcbiAgdmFyIGxvYyA9IGdldExpbmVJbmZvKHRoaXMuaW5wdXQsIHBvcyk7XG4gIG1lc3NhZ2UgKz0gXCIgKFwiICsgbG9jLmxpbmUgKyBcIjpcIiArIGxvYy5jb2x1bW4gKyBcIilcIjtcbiAgdmFyIGVyciA9IG5ldyBTeW50YXhFcnJvcihtZXNzYWdlKTtcbiAgZXJyLnBvcyA9IHBvczsgZXJyLmxvYyA9IGxvYzsgZXJyLnJhaXNlZEF0ID0gdGhpcy5wb3M7XG4gIHRocm93IGVyclxufTtcblxucHAkNC5yYWlzZVJlY292ZXJhYmxlID0gcHAkNC5yYWlzZTtcblxucHAkNC5jdXJQb3NpdGlvbiA9IGZ1bmN0aW9uKCkge1xuICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgIHJldHVybiBuZXcgUG9zaXRpb24odGhpcy5jdXJMaW5lLCB0aGlzLnBvcyAtIHRoaXMubGluZVN0YXJ0KVxuICB9XG59O1xuXG52YXIgcHAkNSA9IFBhcnNlci5wcm90b3R5cGU7XG5cbnZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHRhcmdldCkge1xuICB2YXIgc291cmNlcyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBzb3VyY2VzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIGZvciAodmFyIGkgPSAwLCBsaXN0ID0gc291cmNlczsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB2YXIgc291cmNlID0gbGlzdFtpXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgIGlmIChoYXMoc291cmNlLCBrZXkpKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXRcbn07XG5cblxucHAkNS5lbnRlckZ1bmN0aW9uU2NvcGUgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5zY29wZVN0YWNrLnB1c2goe3Zhcjoge30sIGxleGljYWw6IHt9LCBjaGlsZFZhcjoge30sIHBhcmVudExleGljYWw6IHt9fSk7XG59O1xuXG5wcCQ1LmV4aXRGdW5jdGlvblNjb3BlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuc2NvcGVTdGFjay5wb3AoKTtcbn07XG5cbnBwJDUuZW50ZXJMZXhpY2FsU2NvcGUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHBhcmVudFNjb3BlID0gdGhpcy5zY29wZVN0YWNrW3RoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxXTtcbiAgdmFyIGNoaWxkU2NvcGUgPSB7dmFyOiB7fSwgbGV4aWNhbDoge30sIGNoaWxkVmFyOiB7fSwgcGFyZW50TGV4aWNhbDoge319O1xuXG4gIHRoaXMuc2NvcGVTdGFjay5wdXNoKGNoaWxkU2NvcGUpO1xuICBhc3NpZ24oY2hpbGRTY29wZS5wYXJlbnRMZXhpY2FsLCBwYXJlbnRTY29wZS5sZXhpY2FsLCBwYXJlbnRTY29wZS5wYXJlbnRMZXhpY2FsKTtcbn07XG5cbnBwJDUuZXhpdExleGljYWxTY29wZSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2hpbGRTY29wZSA9IHRoaXMuc2NvcGVTdGFjay5wb3AoKTtcbiAgdmFyIHBhcmVudFNjb3BlID0gdGhpcy5zY29wZVN0YWNrW3RoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxXTtcblxuICBhc3NpZ24ocGFyZW50U2NvcGUuY2hpbGRWYXIsIGNoaWxkU2NvcGUudmFyLCBjaGlsZFNjb3BlLmNoaWxkVmFyKTtcbn07XG5cbnBwJDUuY2FuRGVjbGFyZVZhck5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjdXJyZW50U2NvcGUgPSB0aGlzLnNjb3BlU3RhY2tbdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDFdO1xuXG4gIHJldHVybiAhaGFzKGN1cnJlbnRTY29wZS5sZXhpY2FsLCBuYW1lKSAmJiAhaGFzKGN1cnJlbnRTY29wZS5wYXJlbnRMZXhpY2FsLCBuYW1lKVxufTtcblxucHAkNS5jYW5EZWNsYXJlTGV4aWNhbE5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjdXJyZW50U2NvcGUgPSB0aGlzLnNjb3BlU3RhY2tbdGhpcy5zY29wZVN0YWNrLmxlbmd0aCAtIDFdO1xuXG4gIHJldHVybiAhaGFzKGN1cnJlbnRTY29wZS5sZXhpY2FsLCBuYW1lKSAmJiAhaGFzKGN1cnJlbnRTY29wZS52YXIsIG5hbWUpICYmICFoYXMoY3VycmVudFNjb3BlLmNoaWxkVmFyLCBuYW1lKVxufTtcblxucHAkNS5kZWNsYXJlVmFyTmFtZSA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdGhpcy5zY29wZVN0YWNrW3RoaXMuc2NvcGVTdGFjay5sZW5ndGggLSAxXS52YXJbbmFtZV0gPSB0cnVlO1xufTtcblxucHAkNS5kZWNsYXJlTGV4aWNhbE5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHRoaXMuc2NvcGVTdGFja1t0aGlzLnNjb3BlU3RhY2subGVuZ3RoIC0gMV0ubGV4aWNhbFtuYW1lXSA9IHRydWU7XG59O1xuXG52YXIgTm9kZSA9IGZ1bmN0aW9uIE5vZGUocGFyc2VyLCBwb3MsIGxvYykge1xuICB0aGlzLnR5cGUgPSBcIlwiO1xuICB0aGlzLnN0YXJ0ID0gcG9zO1xuICB0aGlzLmVuZCA9IDA7XG4gIGlmIChwYXJzZXIub3B0aW9ucy5sb2NhdGlvbnMpXG4gICAgeyB0aGlzLmxvYyA9IG5ldyBTb3VyY2VMb2NhdGlvbihwYXJzZXIsIGxvYyk7IH1cbiAgaWYgKHBhcnNlci5vcHRpb25zLmRpcmVjdFNvdXJjZUZpbGUpXG4gICAgeyB0aGlzLnNvdXJjZUZpbGUgPSBwYXJzZXIub3B0aW9ucy5kaXJlY3RTb3VyY2VGaWxlOyB9XG4gIGlmIChwYXJzZXIub3B0aW9ucy5yYW5nZXMpXG4gICAgeyB0aGlzLnJhbmdlID0gW3BvcywgMF07IH1cbn07XG5cblxudmFyIHBwJDYgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5wcCQ2LnN0YXJ0Tm9kZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IE5vZGUodGhpcywgdGhpcy5zdGFydCwgdGhpcy5zdGFydExvYylcbn07XG5cbnBwJDYuc3RhcnROb2RlQXQgPSBmdW5jdGlvbihwb3MsIGxvYykge1xuICByZXR1cm4gbmV3IE5vZGUodGhpcywgcG9zLCBsb2MpXG59O1xuXG5cbmZ1bmN0aW9uIGZpbmlzaE5vZGVBdChub2RlLCB0eXBlLCBwb3MsIGxvYykge1xuICBub2RlLnR5cGUgPSB0eXBlO1xuICBub2RlLmVuZCA9IHBvcztcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpXG4gICAgeyBub2RlLmxvYy5lbmQgPSBsb2M7IH1cbiAgaWYgKHRoaXMub3B0aW9ucy5yYW5nZXMpXG4gICAgeyBub2RlLnJhbmdlWzFdID0gcG9zOyB9XG4gIHJldHVybiBub2RlXG59XG5cbnBwJDYuZmluaXNoTm9kZSA9IGZ1bmN0aW9uKG5vZGUsIHR5cGUpIHtcbiAgcmV0dXJuIGZpbmlzaE5vZGVBdC5jYWxsKHRoaXMsIG5vZGUsIHR5cGUsIHRoaXMubGFzdFRva0VuZCwgdGhpcy5sYXN0VG9rRW5kTG9jKVxufTtcblxuXG5wcCQ2LmZpbmlzaE5vZGVBdCA9IGZ1bmN0aW9uKG5vZGUsIHR5cGUsIHBvcywgbG9jKSB7XG4gIHJldHVybiBmaW5pc2hOb2RlQXQuY2FsbCh0aGlzLCBub2RlLCB0eXBlLCBwb3MsIGxvYylcbn07XG5cblxudmFyIFRva0NvbnRleHQgPSBmdW5jdGlvbiBUb2tDb250ZXh0KHRva2VuLCBpc0V4cHIsIHByZXNlcnZlU3BhY2UsIG92ZXJyaWRlLCBnZW5lcmF0b3IpIHtcbiAgdGhpcy50b2tlbiA9IHRva2VuO1xuICB0aGlzLmlzRXhwciA9ICEhaXNFeHByO1xuICB0aGlzLnByZXNlcnZlU3BhY2UgPSAhIXByZXNlcnZlU3BhY2U7XG4gIHRoaXMub3ZlcnJpZGUgPSBvdmVycmlkZTtcbiAgdGhpcy5nZW5lcmF0b3IgPSAhIWdlbmVyYXRvcjtcbn07XG5cbnZhciB0eXBlcyQxID0ge1xuICBiX3N0YXQ6IG5ldyBUb2tDb250ZXh0KFwie1wiLCBmYWxzZSksXG4gIGJfZXhwcjogbmV3IFRva0NvbnRleHQoXCJ7XCIsIHRydWUpLFxuICBiX3RtcGw6IG5ldyBUb2tDb250ZXh0KFwiJHtcIiwgZmFsc2UpLFxuICBwX3N0YXQ6IG5ldyBUb2tDb250ZXh0KFwiKFwiLCBmYWxzZSksXG4gIHBfZXhwcjogbmV3IFRva0NvbnRleHQoXCIoXCIsIHRydWUpLFxuICBxX3RtcGw6IG5ldyBUb2tDb250ZXh0KFwiYFwiLCB0cnVlLCB0cnVlLCBmdW5jdGlvbiAocCkgeyByZXR1cm4gcC50cnlSZWFkVGVtcGxhdGVUb2tlbigpOyB9KSxcbiAgZl9zdGF0OiBuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsIGZhbHNlKSxcbiAgZl9leHByOiBuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsIHRydWUpLFxuICBmX2V4cHJfZ2VuOiBuZXcgVG9rQ29udGV4dChcImZ1bmN0aW9uXCIsIHRydWUsIGZhbHNlLCBudWxsLCB0cnVlKSxcbiAgZl9nZW46IG5ldyBUb2tDb250ZXh0KFwiZnVuY3Rpb25cIiwgZmFsc2UsIGZhbHNlLCBudWxsLCB0cnVlKVxufTtcblxudmFyIHBwJDcgPSBQYXJzZXIucHJvdG90eXBlO1xuXG5wcCQ3LmluaXRpYWxDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBbdHlwZXMkMS5iX3N0YXRdXG59O1xuXG5wcCQ3LmJyYWNlSXNCbG9jayA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmN1ckNvbnRleHQoKTtcbiAgaWYgKHBhcmVudCA9PT0gdHlwZXMkMS5mX2V4cHIgfHwgcGFyZW50ID09PSB0eXBlcyQxLmZfc3RhdClcbiAgICB7IHJldHVybiB0cnVlIH1cbiAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5jb2xvbiAmJiAocGFyZW50ID09PSB0eXBlcyQxLmJfc3RhdCB8fCBwYXJlbnQgPT09IHR5cGVzJDEuYl9leHByKSlcbiAgICB7IHJldHVybiAhcGFyZW50LmlzRXhwciB9XG5cbiAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fcmV0dXJuIHx8IHByZXZUeXBlID09IHR5cGVzLm5hbWUgJiYgdGhpcy5leHByQWxsb3dlZClcbiAgICB7IHJldHVybiBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5zdGFydCkpIH1cbiAgaWYgKHByZXZUeXBlID09PSB0eXBlcy5fZWxzZSB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuc2VtaSB8fCBwcmV2VHlwZSA9PT0gdHlwZXMuZW9mIHx8IHByZXZUeXBlID09PSB0eXBlcy5wYXJlblIgfHwgcHJldlR5cGUgPT0gdHlwZXMuYXJyb3cpXG4gICAgeyByZXR1cm4gdHJ1ZSB9XG4gIGlmIChwcmV2VHlwZSA9PSB0eXBlcy5icmFjZUwpXG4gICAgeyByZXR1cm4gcGFyZW50ID09PSB0eXBlcyQxLmJfc3RhdCB9XG4gIGlmIChwcmV2VHlwZSA9PSB0eXBlcy5fdmFyIHx8IHByZXZUeXBlID09IHR5cGVzLm5hbWUpXG4gICAgeyByZXR1cm4gZmFsc2UgfVxuICByZXR1cm4gIXRoaXMuZXhwckFsbG93ZWRcbn07XG5cbnBwJDcuaW5HZW5lcmF0b3JDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAodmFyIGkgPSB0aGlzLmNvbnRleHQubGVuZ3RoIC0gMTsgaSA+PSAxOyBpLS0pIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMkMS5jb250ZXh0W2ldO1xuICAgIGlmIChjb250ZXh0LnRva2VuID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICB7IHJldHVybiBjb250ZXh0LmdlbmVyYXRvciB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59O1xuXG5wcCQ3LnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbihwcmV2VHlwZSkge1xuICB2YXIgdXBkYXRlLCB0eXBlID0gdGhpcy50eXBlO1xuICBpZiAodHlwZS5rZXl3b3JkICYmIHByZXZUeXBlID09IHR5cGVzLmRvdClcbiAgICB7IHRoaXMuZXhwckFsbG93ZWQgPSBmYWxzZTsgfVxuICBlbHNlIGlmICh1cGRhdGUgPSB0eXBlLnVwZGF0ZUNvbnRleHQpXG4gICAgeyB1cGRhdGUuY2FsbCh0aGlzLCBwcmV2VHlwZSk7IH1cbiAgZWxzZVxuICAgIHsgdGhpcy5leHByQWxsb3dlZCA9IHR5cGUuYmVmb3JlRXhwcjsgfVxufTtcblxuXG50eXBlcy5wYXJlblIudXBkYXRlQ29udGV4dCA9IHR5cGVzLmJyYWNlUi51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0aGlzLmNvbnRleHQubGVuZ3RoID09IDEpIHtcbiAgICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb3V0ID0gdGhpcy5jb250ZXh0LnBvcCgpO1xuICBpZiAob3V0ID09PSB0eXBlcyQxLmJfc3RhdCAmJiB0aGlzLmN1ckNvbnRleHQoKS50b2tlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgb3V0ID0gdGhpcy5jb250ZXh0LnBvcCgpO1xuICB9XG4gIHRoaXMuZXhwckFsbG93ZWQgPSAhb3V0LmlzRXhwcjtcbn07XG5cbnR5cGVzLmJyYWNlTC51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgdGhpcy5jb250ZXh0LnB1c2godGhpcy5icmFjZUlzQmxvY2socHJldlR5cGUpID8gdHlwZXMkMS5iX3N0YXQgOiB0eXBlcyQxLmJfZXhwcik7XG4gIHRoaXMuZXhwckFsbG93ZWQgPSB0cnVlO1xufTtcblxudHlwZXMuZG9sbGFyQnJhY2VMLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5jb250ZXh0LnB1c2godHlwZXMkMS5iX3RtcGwpO1xuICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZTtcbn07XG5cbnR5cGVzLnBhcmVuTC51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgdmFyIHN0YXRlbWVudFBhcmVucyA9IHByZXZUeXBlID09PSB0eXBlcy5faWYgfHwgcHJldlR5cGUgPT09IHR5cGVzLl9mb3IgfHwgcHJldlR5cGUgPT09IHR5cGVzLl93aXRoIHx8IHByZXZUeXBlID09PSB0eXBlcy5fd2hpbGU7XG4gIHRoaXMuY29udGV4dC5wdXNoKHN0YXRlbWVudFBhcmVucyA/IHR5cGVzJDEucF9zdGF0IDogdHlwZXMkMS5wX2V4cHIpO1xuICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZTtcbn07XG5cbnR5cGVzLmluY0RlYy51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24oKSB7XG59O1xuXG50eXBlcy5fZnVuY3Rpb24udXBkYXRlQ29udGV4dCA9IHR5cGVzLl9jbGFzcy51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgaWYgKHByZXZUeXBlLmJlZm9yZUV4cHIgJiYgcHJldlR5cGUgIT09IHR5cGVzLnNlbWkgJiYgcHJldlR5cGUgIT09IHR5cGVzLl9lbHNlICYmXG4gICAgICAhKChwcmV2VHlwZSA9PT0gdHlwZXMuY29sb24gfHwgcHJldlR5cGUgPT09IHR5cGVzLmJyYWNlTCkgJiYgdGhpcy5jdXJDb250ZXh0KCkgPT09IHR5cGVzJDEuYl9zdGF0KSlcbiAgICB7IHRoaXMuY29udGV4dC5wdXNoKHR5cGVzJDEuZl9leHByKTsgfVxuICBlbHNlXG4gICAgeyB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLmZfc3RhdCk7IH1cbiAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xufTtcblxudHlwZXMuYmFja1F1b3RlLnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuY3VyQ29udGV4dCgpID09PSB0eXBlcyQxLnFfdG1wbClcbiAgICB7IHRoaXMuY29udGV4dC5wb3AoKTsgfVxuICBlbHNlXG4gICAgeyB0aGlzLmNvbnRleHQucHVzaCh0eXBlcyQxLnFfdG1wbCk7IH1cbiAgdGhpcy5leHByQWxsb3dlZCA9IGZhbHNlO1xufTtcblxudHlwZXMuc3Rhci51cGRhdGVDb250ZXh0ID0gZnVuY3Rpb24ocHJldlR5cGUpIHtcbiAgaWYgKHByZXZUeXBlID09IHR5cGVzLl9mdW5jdGlvbikge1xuICAgIHZhciBpbmRleCA9IHRoaXMuY29udGV4dC5sZW5ndGggLSAxO1xuICAgIGlmICh0aGlzLmNvbnRleHRbaW5kZXhdID09PSB0eXBlcyQxLmZfZXhwcilcbiAgICAgIHsgdGhpcy5jb250ZXh0W2luZGV4XSA9IHR5cGVzJDEuZl9leHByX2dlbjsgfVxuICAgIGVsc2VcbiAgICAgIHsgdGhpcy5jb250ZXh0W2luZGV4XSA9IHR5cGVzJDEuZl9nZW47IH1cbiAgfVxuICB0aGlzLmV4cHJBbGxvd2VkID0gdHJ1ZTtcbn07XG5cbnR5cGVzLm5hbWUudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gIHZhciBhbGxvd2VkID0gZmFsc2U7XG4gIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgIGlmICh0aGlzLnZhbHVlID09IFwib2ZcIiAmJiAhdGhpcy5leHByQWxsb3dlZCB8fFxuICAgICAgICB0aGlzLnZhbHVlID09IFwieWllbGRcIiAmJiB0aGlzLmluR2VuZXJhdG9yQ29udGV4dCgpKVxuICAgICAgeyBhbGxvd2VkID0gdHJ1ZTsgfVxuICB9XG4gIHRoaXMuZXhwckFsbG93ZWQgPSBhbGxvd2VkO1xufTtcblxuXG52YXIgVG9rZW4gPSBmdW5jdGlvbiBUb2tlbihwKSB7XG4gIHRoaXMudHlwZSA9IHAudHlwZTtcbiAgdGhpcy52YWx1ZSA9IHAudmFsdWU7XG4gIHRoaXMuc3RhcnQgPSBwLnN0YXJ0O1xuICB0aGlzLmVuZCA9IHAuZW5kO1xuICBpZiAocC5vcHRpb25zLmxvY2F0aW9ucylcbiAgICB7IHRoaXMubG9jID0gbmV3IFNvdXJjZUxvY2F0aW9uKHAsIHAuc3RhcnRMb2MsIHAuZW5kTG9jKTsgfVxuICBpZiAocC5vcHRpb25zLnJhbmdlcylcbiAgICB7IHRoaXMucmFuZ2UgPSBbcC5zdGFydCwgcC5lbmRdOyB9XG59O1xuXG5cbnZhciBwcCQ4ID0gUGFyc2VyLnByb3RvdHlwZTtcblxudmFyIGlzUmhpbm8gPSB0eXBlb2YgUGFja2FnZXMgPT0gXCJvYmplY3RcIiAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUGFja2FnZXMpID09IFwiW29iamVjdCBKYXZhUGFja2FnZV1cIjtcblxuXG5wcCQ4Lm5leHQgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMub3B0aW9ucy5vblRva2VuKVxuICAgIHsgdGhpcy5vcHRpb25zLm9uVG9rZW4obmV3IFRva2VuKHRoaXMpKTsgfVxuXG4gIHRoaXMubGFzdFRva0VuZCA9IHRoaXMuZW5kO1xuICB0aGlzLmxhc3RUb2tTdGFydCA9IHRoaXMuc3RhcnQ7XG4gIHRoaXMubGFzdFRva0VuZExvYyA9IHRoaXMuZW5kTG9jO1xuICB0aGlzLmxhc3RUb2tTdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gIHRoaXMubmV4dFRva2VuKCk7XG59O1xuXG5wcCQ4LmdldFRva2VuID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMubmV4dCgpO1xuICByZXR1cm4gbmV3IFRva2VuKHRoaXMpXG59O1xuXG5pZiAodHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIilcbiAgeyBwcCQ4W1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRoaXMkMS5nZXRUb2tlbigpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRvbmU6IHRva2VuLnR5cGUgPT09IHR5cGVzLmVvZixcbiAgICAgICAgICB2YWx1ZTogdG9rZW5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTsgfVxuXG5cbnBwJDguY3VyQ29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5jb250ZXh0W3RoaXMuY29udGV4dC5sZW5ndGggLSAxXVxufTtcblxuXG5wcCQ4Lm5leHRUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY3VyQ29udGV4dCA9IHRoaXMuY3VyQ29udGV4dCgpO1xuICBpZiAoIWN1ckNvbnRleHQgfHwgIWN1ckNvbnRleHQucHJlc2VydmVTcGFjZSkgeyB0aGlzLnNraXBTcGFjZSgpOyB9XG5cbiAgdGhpcy5zdGFydCA9IHRoaXMucG9zO1xuICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgeyB0aGlzLnN0YXJ0TG9jID0gdGhpcy5jdXJQb3NpdGlvbigpOyB9XG4gIGlmICh0aGlzLnBvcyA+PSB0aGlzLmlucHV0Lmxlbmd0aCkgeyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5lb2YpIH1cblxuICBpZiAoY3VyQ29udGV4dC5vdmVycmlkZSkgeyByZXR1cm4gY3VyQ29udGV4dC5vdmVycmlkZSh0aGlzKSB9XG4gIGVsc2UgeyB0aGlzLnJlYWRUb2tlbih0aGlzLmZ1bGxDaGFyQ29kZUF0UG9zKCkpOyB9XG59O1xuXG5wcCQ4LnJlYWRUb2tlbiA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgaWYgKGlzSWRlbnRpZmllclN0YXJ0KGNvZGUsIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB8fCBjb2RlID09PSA5MiApXG4gICAgeyByZXR1cm4gdGhpcy5yZWFkV29yZCgpIH1cblxuICByZXR1cm4gdGhpcy5nZXRUb2tlbkZyb21Db2RlKGNvZGUpXG59O1xuXG5wcCQ4LmZ1bGxDaGFyQ29kZUF0UG9zID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb2RlID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgaWYgKGNvZGUgPD0gMHhkN2ZmIHx8IGNvZGUgPj0gMHhlMDAwKSB7IHJldHVybiBjb2RlIH1cbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgcmV0dXJuIChjb2RlIDw8IDEwKSArIG5leHQgLSAweDM1ZmRjMDBcbn07XG5cbnBwJDguc2tpcEJsb2NrQ29tbWVudCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgc3RhcnRMb2MgPSB0aGlzLm9wdGlvbnMub25Db21tZW50ICYmIHRoaXMuY3VyUG9zaXRpb24oKTtcbiAgdmFyIHN0YXJ0ID0gdGhpcy5wb3MsIGVuZCA9IHRoaXMuaW5wdXQuaW5kZXhPZihcIiovXCIsIHRoaXMucG9zICs9IDIpO1xuICBpZiAoZW5kID09PSAtMSkgeyB0aGlzLnJhaXNlKHRoaXMucG9zIC0gMiwgXCJVbnRlcm1pbmF0ZWQgY29tbWVudFwiKTsgfVxuICB0aGlzLnBvcyA9IGVuZCArIDI7XG4gIGlmICh0aGlzLm9wdGlvbnMubG9jYXRpb25zKSB7XG4gICAgbGluZUJyZWFrRy5sYXN0SW5kZXggPSBzdGFydDtcbiAgICB2YXIgbWF0Y2g7XG4gICAgd2hpbGUgKChtYXRjaCA9IGxpbmVCcmVha0cuZXhlYyh0aGlzLmlucHV0KSkgJiYgbWF0Y2guaW5kZXggPCB0aGlzLnBvcykge1xuICAgICAgKyt0aGlzJDEuY3VyTGluZTtcbiAgICAgIHRoaXMkMS5saW5lU3RhcnQgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgaWYgKHRoaXMub3B0aW9ucy5vbkNvbW1lbnQpXG4gICAgeyB0aGlzLm9wdGlvbnMub25Db21tZW50KHRydWUsIHRoaXMuaW5wdXQuc2xpY2Uoc3RhcnQgKyAyLCBlbmQpLCBzdGFydCwgdGhpcy5wb3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydExvYywgdGhpcy5jdXJQb3NpdGlvbigpKTsgfVxufTtcblxucHAkOC5za2lwTGluZUNvbW1lbnQgPSBmdW5jdGlvbihzdGFydFNraXApIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0ID0gdGhpcy5wb3M7XG4gIHZhciBzdGFydExvYyA9IHRoaXMub3B0aW9ucy5vbkNvbW1lbnQgJiYgdGhpcy5jdXJQb3NpdGlvbigpO1xuICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKz0gc3RhcnRTa2lwKTtcbiAgd2hpbGUgKHRoaXMucG9zIDwgdGhpcy5pbnB1dC5sZW5ndGggJiYgIWlzTmV3TGluZShjaCkpIHtcbiAgICBjaCA9IHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcyQxLnBvcyk7XG4gIH1cbiAgaWYgKHRoaXMub3B0aW9ucy5vbkNvbW1lbnQpXG4gICAgeyB0aGlzLm9wdGlvbnMub25Db21tZW50KGZhbHNlLCB0aGlzLmlucHV0LnNsaWNlKHN0YXJ0ICsgc3RhcnRTa2lwLCB0aGlzLnBvcyksIHN0YXJ0LCB0aGlzLnBvcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0TG9jLCB0aGlzLmN1clBvc2l0aW9uKCkpOyB9XG59O1xuXG5cbnBwJDguc2tpcFNwYWNlID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGxvb3A6IHdoaWxlICh0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoKSB7XG4gICAgdmFyIGNoID0gdGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyk7XG4gICAgc3dpdGNoIChjaCkge1xuICAgIGNhc2UgMzI6IGNhc2UgMTYwOlxuICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgYnJlYWtcbiAgICBjYXNlIDEzOlxuICAgICAgaWYgKHRoaXMkMS5pbnB1dC5jaGFyQ29kZUF0KHRoaXMkMS5wb3MgKyAxKSA9PT0gMTApIHtcbiAgICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgfVxuICAgIGNhc2UgMTA6IGNhc2UgODIzMjogY2FzZSA4MjMzOlxuICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgaWYgKHRoaXMkMS5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgICArK3RoaXMkMS5jdXJMaW5lO1xuICAgICAgICB0aGlzJDEubGluZVN0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgY2FzZSA0NzpcbiAgICAgIHN3aXRjaCAodGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyArIDEpKSB7XG4gICAgICBjYXNlIDQyOlxuICAgICAgICB0aGlzJDEuc2tpcEJsb2NrQ29tbWVudCgpO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSA0NzpcbiAgICAgICAgdGhpcyQxLnNraXBMaW5lQ29tbWVudCgyKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrIGxvb3BcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChjaCA+IDggJiYgY2ggPCAxNCB8fCBjaCA+PSA1NzYwICYmIG5vbkFTQ0lJd2hpdGVzcGFjZS50ZXN0KFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpKSkge1xuICAgICAgICArK3RoaXMkMS5wb3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhayBsb29wXG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5cbnBwJDguZmluaXNoVG9rZW4gPSBmdW5jdGlvbih0eXBlLCB2YWwpIHtcbiAgdGhpcy5lbmQgPSB0aGlzLnBvcztcbiAgaWYgKHRoaXMub3B0aW9ucy5sb2NhdGlvbnMpIHsgdGhpcy5lbmRMb2MgPSB0aGlzLmN1clBvc2l0aW9uKCk7IH1cbiAgdmFyIHByZXZUeXBlID0gdGhpcy50eXBlO1xuICB0aGlzLnR5cGUgPSB0eXBlO1xuICB0aGlzLnZhbHVlID0gdmFsO1xuXG4gIHRoaXMudXBkYXRlQ29udGV4dChwcmV2VHlwZSk7XG59O1xuXG5cbnBwJDgucmVhZFRva2VuX2RvdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDEpO1xuICBpZiAobmV4dCA+PSA0OCAmJiBuZXh0IDw9IDU3KSB7IHJldHVybiB0aGlzLnJlYWROdW1iZXIodHJ1ZSkgfVxuICB2YXIgbmV4dDIgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKTtcbiAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2ICYmIG5leHQgPT09IDQ2ICYmIG5leHQyID09PSA0Nikge1xuICAgIHRoaXMucG9zICs9IDM7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuZWxsaXBzaXMpXG4gIH0gZWxzZSB7XG4gICAgKyt0aGlzLnBvcztcbiAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5kb3QpXG4gIH1cbn07XG5cbnBwJDgucmVhZFRva2VuX3NsYXNoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIGlmICh0aGlzLmV4cHJBbGxvd2VkKSB7ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLnJlYWRSZWdleHAoKSB9XG4gIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5hc3NpZ24sIDIpIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuc2xhc2gsIDEpXG59O1xuXG5wcCQ4LnJlYWRUb2tlbl9tdWx0X21vZHVsb19leHAgPSBmdW5jdGlvbihjb2RlKSB7XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIHZhciBzaXplID0gMTtcbiAgdmFyIHRva2VudHlwZSA9IGNvZGUgPT09IDQyID8gdHlwZXMuc3RhciA6IHR5cGVzLm1vZHVsbztcblxuICBpZiAodGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDcgJiYgbmV4dCA9PT0gNDIpIHtcbiAgICArK3NpemU7XG4gICAgdG9rZW50eXBlID0gdHlwZXMuc3RhcnN0YXI7XG4gICAgbmV4dCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpO1xuICB9XG5cbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgc2l6ZSArIDEpIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AodG9rZW50eXBlLCBzaXplKVxufTtcblxucHAkOC5yZWFkVG9rZW5fcGlwZV9hbXAgPSBmdW5jdGlvbihjb2RlKSB7XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIGlmIChuZXh0ID09PSBjb2RlKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKGNvZGUgPT09IDEyNCA/IHR5cGVzLmxvZ2ljYWxPUiA6IHR5cGVzLmxvZ2ljYWxBTkQsIDIpIH1cbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuICByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSAxMjQgPyB0eXBlcy5iaXR3aXNlT1IgOiB0eXBlcy5iaXR3aXNlQU5ELCAxKVxufTtcblxucHAkOC5yZWFkVG9rZW5fY2FyZXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgaWYgKG5leHQgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgMikgfVxuICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5iaXR3aXNlWE9SLCAxKVxufTtcblxucHAkOC5yZWFkVG9rZW5fcGx1c19taW4gPSBmdW5jdGlvbihjb2RlKSB7XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIGlmIChuZXh0ID09PSBjb2RlKSB7XG4gICAgaWYgKG5leHQgPT0gNDUgJiYgIXRoaXMuaW5Nb2R1bGUgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT0gNjIgJiZcbiAgICAgICAgKHRoaXMubGFzdFRva0VuZCA9PT0gMCB8fCBsaW5lQnJlYWsudGVzdCh0aGlzLmlucHV0LnNsaWNlKHRoaXMubGFzdFRva0VuZCwgdGhpcy5wb3MpKSkpIHtcbiAgICAgIHRoaXMuc2tpcExpbmVDb21tZW50KDMpO1xuICAgICAgdGhpcy5za2lwU3BhY2UoKTtcbiAgICAgIHJldHVybiB0aGlzLm5leHRUb2tlbigpXG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmluY0RlYywgMilcbiAgfVxuICBpZiAobmV4dCA9PT0gNjEpIHsgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMuYXNzaWduLCAyKSB9XG4gIHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLnBsdXNNaW4sIDEpXG59O1xuXG5wcCQ4LnJlYWRUb2tlbl9sdF9ndCA9IGZ1bmN0aW9uKGNvZGUpIHtcbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgdmFyIHNpemUgPSAxO1xuICBpZiAobmV4dCA9PT0gY29kZSkge1xuICAgIHNpemUgPSBjb2RlID09PSA2MiAmJiB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAyKSA9PT0gNjIgPyAzIDogMjtcbiAgICBpZiAodGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgc2l6ZSkgPT09IDYxKSB7IHJldHVybiB0aGlzLmZpbmlzaE9wKHR5cGVzLmFzc2lnbiwgc2l6ZSArIDEpIH1cbiAgICByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5iaXRTaGlmdCwgc2l6ZSlcbiAgfVxuICBpZiAobmV4dCA9PSAzMyAmJiBjb2RlID09IDYwICYmICF0aGlzLmluTW9kdWxlICYmIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcyArIDIpID09IDQ1ICYmXG4gICAgICB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAzKSA9PSA0NSkge1xuICAgIHRoaXMuc2tpcExpbmVDb21tZW50KDQpO1xuICAgIHRoaXMuc2tpcFNwYWNlKCk7XG4gICAgcmV0dXJuIHRoaXMubmV4dFRva2VuKClcbiAgfVxuICBpZiAobmV4dCA9PT0gNjEpIHsgc2l6ZSA9IDI7IH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucmVsYXRpb25hbCwgc2l6ZSlcbn07XG5cbnBwJDgucmVhZFRva2VuX2VxX2V4Y2wgPSBmdW5jdGlvbihjb2RlKSB7XG4gIHZhciBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSk7XG4gIGlmIChuZXh0ID09PSA2MSkgeyByZXR1cm4gdGhpcy5maW5pc2hPcCh0eXBlcy5lcXVhbGl0eSwgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMikgPT09IDYxID8gMyA6IDIpIH1cbiAgaWYgKGNvZGUgPT09IDYxICYmIG5leHQgPT09IDYyICYmIHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA+PSA2KSB7XG4gICAgdGhpcy5wb3MgKz0gMjtcbiAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5hcnJvdylcbiAgfVxuICByZXR1cm4gdGhpcy5maW5pc2hPcChjb2RlID09PSA2MSA/IHR5cGVzLmVxIDogdHlwZXMucHJlZml4LCAxKVxufTtcblxucHAkOC5nZXRUb2tlbkZyb21Db2RlID0gZnVuY3Rpb24oY29kZSkge1xuICBzd2l0Y2ggKGNvZGUpIHtcbiAgY2FzZSA0NjpcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fZG90KClcblxuICBjYXNlIDQwOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5wYXJlbkwpXG4gIGNhc2UgNDE6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnBhcmVuUilcbiAgY2FzZSA1OTogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuc2VtaSlcbiAgY2FzZSA0NDogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuY29tbWEpXG4gIGNhc2UgOTE6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmJyYWNrZXRMKVxuICBjYXNlIDkzOiArK3RoaXMucG9zOyByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlcy5icmFja2V0UilcbiAgY2FzZSAxMjM6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmJyYWNlTClcbiAgY2FzZSAxMjU6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLmJyYWNlUilcbiAgY2FzZSA1ODogKyt0aGlzLnBvczsgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuY29sb24pXG4gIGNhc2UgNjM6ICsrdGhpcy5wb3M7IHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnF1ZXN0aW9uKVxuXG4gIGNhc2UgOTY6XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYpIHsgYnJlYWsgfVxuICAgICsrdGhpcy5wb3M7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMuYmFja1F1b3RlKVxuXG4gIGNhc2UgNDg6XG4gICAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MgKyAxKTtcbiAgICBpZiAobmV4dCA9PT0gMTIwIHx8IG5leHQgPT09IDg4KSB7IHJldHVybiB0aGlzLnJlYWRSYWRpeE51bWJlcigxNikgfVxuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikge1xuICAgICAgaWYgKG5leHQgPT09IDExMSB8fCBuZXh0ID09PSA3OSkgeyByZXR1cm4gdGhpcy5yZWFkUmFkaXhOdW1iZXIoOCkgfVxuICAgICAgaWYgKG5leHQgPT09IDk4IHx8IG5leHQgPT09IDY2KSB7IHJldHVybiB0aGlzLnJlYWRSYWRpeE51bWJlcigyKSB9XG4gICAgfVxuICBjYXNlIDQ5OiBjYXNlIDUwOiBjYXNlIDUxOiBjYXNlIDUyOiBjYXNlIDUzOiBjYXNlIDU0OiBjYXNlIDU1OiBjYXNlIDU2OiBjYXNlIDU3OlxuICAgIHJldHVybiB0aGlzLnJlYWROdW1iZXIoZmFsc2UpXG5cbiAgY2FzZSAzNDogY2FzZSAzOTpcbiAgICByZXR1cm4gdGhpcy5yZWFkU3RyaW5nKGNvZGUpXG5cblxuICBjYXNlIDQ3OlxuICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9zbGFzaCgpXG5cbiAgY2FzZSAzNzogY2FzZSA0MjpcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fbXVsdF9tb2R1bG9fZXhwKGNvZGUpXG5cbiAgY2FzZSAxMjQ6IGNhc2UgMzg6XG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3BpcGVfYW1wKGNvZGUpXG5cbiAgY2FzZSA5NDpcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fY2FyZXQoKVxuXG4gIGNhc2UgNDM6IGNhc2UgNDU6XG4gICAgcmV0dXJuIHRoaXMucmVhZFRva2VuX3BsdXNfbWluKGNvZGUpXG5cbiAgY2FzZSA2MDogY2FzZSA2MjpcbiAgICByZXR1cm4gdGhpcy5yZWFkVG9rZW5fbHRfZ3QoY29kZSlcblxuICBjYXNlIDYxOiBjYXNlIDMzOlxuICAgIHJldHVybiB0aGlzLnJlYWRUb2tlbl9lcV9leGNsKGNvZGUpXG5cbiAgY2FzZSAxMjY6XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoT3AodHlwZXMucHJlZml4LCAxKVxuICB9XG5cbiAgdGhpcy5yYWlzZSh0aGlzLnBvcywgXCJVbmV4cGVjdGVkIGNoYXJhY3RlciAnXCIgKyBjb2RlUG9pbnRUb1N0cmluZyhjb2RlKSArIFwiJ1wiKTtcbn07XG5cbnBwJDguZmluaXNoT3AgPSBmdW5jdGlvbih0eXBlLCBzaXplKSB7XG4gIHZhciBzdHIgPSB0aGlzLmlucHV0LnNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyArIHNpemUpO1xuICB0aGlzLnBvcyArPSBzaXplO1xuICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlLCBzdHIpXG59O1xuXG5cbmZ1bmN0aW9uIHRyeUNyZWF0ZVJlZ2V4cChzcmMsIGZsYWdzLCB0aHJvd0Vycm9yQXQsIHBhcnNlcikge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgUmVnRXhwKHNyYywgZmxhZ3MpXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhyb3dFcnJvckF0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChlIGluc3RhbmNlb2YgU3ludGF4RXJyb3IpIHsgcGFyc2VyLnJhaXNlKHRocm93RXJyb3JBdCwgXCJFcnJvciBwYXJzaW5nIHJlZ3VsYXIgZXhwcmVzc2lvbjogXCIgKyBlLm1lc3NhZ2UpOyB9XG4gICAgICB0aHJvdyBlXG4gICAgfVxuICB9XG59XG5cbnZhciByZWdleHBVbmljb2RlU3VwcG9ydCA9ICEhdHJ5Q3JlYXRlUmVnZXhwKFwiXFx1ZmZmZlwiLCBcInVcIik7XG5cbnBwJDgucmVhZFJlZ2V4cCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgZXNjYXBlZCwgaW5DbGFzcywgc3RhcnQgPSB0aGlzLnBvcztcbiAgZm9yICg7Oykge1xuICAgIGlmICh0aGlzJDEucG9zID49IHRoaXMkMS5pbnB1dC5sZW5ndGgpIHsgdGhpcyQxLnJhaXNlKHN0YXJ0LCBcIlVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIik7IH1cbiAgICB2YXIgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckF0KHRoaXMkMS5wb3MpO1xuICAgIGlmIChsaW5lQnJlYWsudGVzdChjaCkpIHsgdGhpcyQxLnJhaXNlKHN0YXJ0LCBcIlVudGVybWluYXRlZCByZWd1bGFyIGV4cHJlc3Npb25cIik7IH1cbiAgICBpZiAoIWVzY2FwZWQpIHtcbiAgICAgIGlmIChjaCA9PT0gXCJbXCIpIHsgaW5DbGFzcyA9IHRydWU7IH1cbiAgICAgIGVsc2UgaWYgKGNoID09PSBcIl1cIiAmJiBpbkNsYXNzKSB7IGluQ2xhc3MgPSBmYWxzZTsgfVxuICAgICAgZWxzZSBpZiAoY2ggPT09IFwiL1wiICYmICFpbkNsYXNzKSB7IGJyZWFrIH1cbiAgICAgIGVzY2FwZWQgPSBjaCA9PT0gXCJcXFxcXCI7XG4gICAgfSBlbHNlIHsgZXNjYXBlZCA9IGZhbHNlOyB9XG4gICAgKyt0aGlzJDEucG9zO1xuICB9XG4gIHZhciBjb250ZW50ID0gdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5wb3MpO1xuICArK3RoaXMucG9zO1xuICB2YXIgbW9kcyA9IHRoaXMucmVhZFdvcmQxKCk7XG4gIHZhciB0bXAgPSBjb250ZW50LCB0bXBGbGFncyA9IFwiXCI7XG4gIGlmIChtb2RzKSB7XG4gICAgdmFyIHZhbGlkRmxhZ3MgPSAvXltnaW1dKiQvO1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZWNtYVZlcnNpb24gPj0gNikgeyB2YWxpZEZsYWdzID0gL15bZ2ltdXldKiQvOyB9XG4gICAgaWYgKCF2YWxpZEZsYWdzLnRlc3QobW9kcykpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIHJlZ3VsYXIgZXhwcmVzc2lvbiBmbGFnXCIpOyB9XG4gICAgaWYgKG1vZHMuaW5kZXhPZihcInVcIikgPj0gMCkge1xuICAgICAgaWYgKHJlZ2V4cFVuaWNvZGVTdXBwb3J0KSB7XG4gICAgICAgIHRtcEZsYWdzID0gXCJ1XCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0bXAgPSB0bXAucmVwbGFjZSgvXFxcXHVcXHsoWzAtOWEtZkEtRl0rKVxcfS9nLCBmdW5jdGlvbiAoX21hdGNoLCBjb2RlLCBvZmZzZXQpIHtcbiAgICAgICAgICBjb2RlID0gTnVtYmVyKFwiMHhcIiArIGNvZGUpO1xuICAgICAgICAgIGlmIChjb2RlID4gMHgxMEZGRkYpIHsgdGhpcyQxLnJhaXNlKHN0YXJ0ICsgb2Zmc2V0ICsgMywgXCJDb2RlIHBvaW50IG91dCBvZiBib3VuZHNcIik7IH1cbiAgICAgICAgICByZXR1cm4gXCJ4XCJcbiAgICAgICAgfSk7XG4gICAgICAgIHRtcCA9IHRtcC5yZXBsYWNlKC9cXFxcdShbYS1mQS1GMC05XXs0fSl8W1xcdUQ4MDAtXFx1REJGRl1bXFx1REMwMC1cXHVERkZGXS9nLCBcInhcIik7XG4gICAgICAgIHRtcEZsYWdzID0gdG1wRmxhZ3MucmVwbGFjZShcInVcIiwgXCJcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHZhciB2YWx1ZSA9IG51bGw7XG4gIGlmICghaXNSaGlubykge1xuICAgIHRyeUNyZWF0ZVJlZ2V4cCh0bXAsIHRtcEZsYWdzLCBzdGFydCwgdGhpcyk7XG4gICAgdmFsdWUgPSB0cnlDcmVhdGVSZWdleHAoY29udGVudCwgbW9kcyk7XG4gIH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMucmVnZXhwLCB7cGF0dGVybjogY29udGVudCwgZmxhZ3M6IG1vZHMsIHZhbHVlOiB2YWx1ZX0pXG59O1xuXG5cbnBwJDgucmVhZEludCA9IGZ1bmN0aW9uKHJhZGl4LCBsZW4pIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHN0YXJ0ID0gdGhpcy5wb3MsIHRvdGFsID0gMDtcbiAgZm9yICh2YXIgaSA9IDAsIGUgPSBsZW4gPT0gbnVsbCA/IEluZmluaXR5IDogbGVuOyBpIDwgZTsgKytpKSB7XG4gICAgdmFyIGNvZGUgPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKSwgdmFsID0gKHZvaWQgMCk7XG4gICAgaWYgKGNvZGUgPj0gOTcpIHsgdmFsID0gY29kZSAtIDk3ICsgMTA7IH1cbiAgICBlbHNlIGlmIChjb2RlID49IDY1KSB7IHZhbCA9IGNvZGUgLSA2NSArIDEwOyB9XG4gICAgZWxzZSBpZiAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB7IHZhbCA9IGNvZGUgLSA0ODsgfVxuICAgIGVsc2UgeyB2YWwgPSBJbmZpbml0eTsgfVxuICAgIGlmICh2YWwgPj0gcmFkaXgpIHsgYnJlYWsgfVxuICAgICsrdGhpcyQxLnBvcztcbiAgICB0b3RhbCA9IHRvdGFsICogcmFkaXggKyB2YWw7XG4gIH1cbiAgaWYgKHRoaXMucG9zID09PSBzdGFydCB8fCBsZW4gIT0gbnVsbCAmJiB0aGlzLnBvcyAtIHN0YXJ0ICE9PSBsZW4pIHsgcmV0dXJuIG51bGwgfVxuXG4gIHJldHVybiB0b3RhbFxufTtcblxucHAkOC5yZWFkUmFkaXhOdW1iZXIgPSBmdW5jdGlvbihyYWRpeCkge1xuICB0aGlzLnBvcyArPSAyO1xuICB2YXIgdmFsID0gdGhpcy5yZWFkSW50KHJhZGl4KTtcbiAgaWYgKHZhbCA9PSBudWxsKSB7IHRoaXMucmFpc2UodGhpcy5zdGFydCArIDIsIFwiRXhwZWN0ZWQgbnVtYmVyIGluIHJhZGl4IFwiICsgcmFkaXgpOyB9XG4gIGlmIChpc0lkZW50aWZpZXJTdGFydCh0aGlzLmZ1bGxDaGFyQ29kZUF0UG9zKCkpKSB7IHRoaXMucmFpc2UodGhpcy5wb3MsIFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIik7IH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMubnVtLCB2YWwpXG59O1xuXG5cbnBwJDgucmVhZE51bWJlciA9IGZ1bmN0aW9uKHN0YXJ0c1dpdGhEb3QpIHtcbiAgdmFyIHN0YXJ0ID0gdGhpcy5wb3MsIGlzRmxvYXQgPSBmYWxzZSwgb2N0YWwgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpID09PSA0ODtcbiAgaWYgKCFzdGFydHNXaXRoRG90ICYmIHRoaXMucmVhZEludCgxMCkgPT09IG51bGwpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTsgfVxuICBpZiAob2N0YWwgJiYgdGhpcy5wb3MgPT0gc3RhcnQgKyAxKSB7IG9jdGFsID0gZmFsc2U7IH1cbiAgdmFyIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICBpZiAobmV4dCA9PT0gNDYgJiYgIW9jdGFsKSB7XG4gICAgKyt0aGlzLnBvcztcbiAgICB0aGlzLnJlYWRJbnQoMTApO1xuICAgIGlzRmxvYXQgPSB0cnVlO1xuICAgIG5leHQgPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICB9XG4gIGlmICgobmV4dCA9PT0gNjkgfHwgbmV4dCA9PT0gMTAxKSAmJiAhb2N0YWwpIHtcbiAgICBuZXh0ID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5wb3MpO1xuICAgIGlmIChuZXh0ID09PSA0MyB8fCBuZXh0ID09PSA0NSkgeyArK3RoaXMucG9zOyB9XG4gICAgaWYgKHRoaXMucmVhZEludCgxMCkgPT09IG51bGwpIHsgdGhpcy5yYWlzZShzdGFydCwgXCJJbnZhbGlkIG51bWJlclwiKTsgfVxuICAgIGlzRmxvYXQgPSB0cnVlO1xuICB9XG4gIGlmIChpc0lkZW50aWZpZXJTdGFydCh0aGlzLmZ1bGxDaGFyQ29kZUF0UG9zKCkpKSB7IHRoaXMucmFpc2UodGhpcy5wb3MsIFwiSWRlbnRpZmllciBkaXJlY3RseSBhZnRlciBudW1iZXJcIik7IH1cblxuICB2YXIgc3RyID0gdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5wb3MpLCB2YWw7XG4gIGlmIChpc0Zsb2F0KSB7IHZhbCA9IHBhcnNlRmxvYXQoc3RyKTsgfVxuICBlbHNlIGlmICghb2N0YWwgfHwgc3RyLmxlbmd0aCA9PT0gMSkgeyB2YWwgPSBwYXJzZUludChzdHIsIDEwKTsgfVxuICBlbHNlIGlmICh0aGlzLnN0cmljdCkgeyB0aGlzLnJhaXNlKHN0YXJ0LCBcIkludmFsaWQgbnVtYmVyXCIpOyB9XG4gIGVsc2UgaWYgKC9bODldLy50ZXN0KHN0cikpIHsgdmFsID0gcGFyc2VJbnQoc3RyLCAxMCk7IH1cbiAgZWxzZSB7IHZhbCA9IHBhcnNlSW50KHN0ciwgOCk7IH1cbiAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odHlwZXMubnVtLCB2YWwpXG59O1xuXG5cbnBwJDgucmVhZENvZGVQb2ludCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpLCBjb2RlO1xuXG4gIGlmIChjaCA9PT0gMTIzKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5lY21hVmVyc2lvbiA8IDYpIHsgdGhpcy51bmV4cGVjdGVkKCk7IH1cbiAgICB2YXIgY29kZVBvcyA9ICsrdGhpcy5wb3M7XG4gICAgY29kZSA9IHRoaXMucmVhZEhleENoYXIodGhpcy5pbnB1dC5pbmRleE9mKFwifVwiLCB0aGlzLnBvcykgLSB0aGlzLnBvcyk7XG4gICAgKyt0aGlzLnBvcztcbiAgICBpZiAoY29kZSA+IDB4MTBGRkZGKSB7IHRoaXMuaW52YWxpZFN0cmluZ1Rva2VuKGNvZGVQb3MsIFwiQ29kZSBwb2ludCBvdXQgb2YgYm91bmRzXCIpOyB9XG4gIH0gZWxzZSB7XG4gICAgY29kZSA9IHRoaXMucmVhZEhleENoYXIoNCk7XG4gIH1cbiAgcmV0dXJuIGNvZGVcbn07XG5cbmZ1bmN0aW9uIGNvZGVQb2ludFRvU3RyaW5nKGNvZGUpIHtcbiAgaWYgKGNvZGUgPD0gMHhGRkZGKSB7IHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpIH1cbiAgY29kZSAtPSAweDEwMDAwO1xuICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgoY29kZSA+PiAxMCkgKyAweEQ4MDAsIChjb2RlICYgMTAyMykgKyAweERDMDApXG59XG5cbnBwJDgucmVhZFN0cmluZyA9IGZ1bmN0aW9uKHF1b3RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvdXQgPSBcIlwiLCBjaHVua1N0YXJ0ID0gKyt0aGlzLnBvcztcbiAgZm9yICg7Oykge1xuICAgIGlmICh0aGlzJDEucG9zID49IHRoaXMkMS5pbnB1dC5sZW5ndGgpIHsgdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgc3RyaW5nIGNvbnN0YW50XCIpOyB9XG4gICAgdmFyIGNoID0gdGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcyk7XG4gICAgaWYgKGNoID09PSBxdW90ZSkgeyBicmVhayB9XG4gICAgaWYgKGNoID09PSA5Mikge1xuICAgICAgb3V0ICs9IHRoaXMkMS5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzJDEucG9zKTtcbiAgICAgIG91dCArPSB0aGlzJDEucmVhZEVzY2FwZWRDaGFyKGZhbHNlKTtcbiAgICAgIGNodW5rU3RhcnQgPSB0aGlzJDEucG9zO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNOZXdMaW5lKGNoKSkgeyB0aGlzJDEucmFpc2UodGhpcyQxLnN0YXJ0LCBcIlVudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnRcIik7IH1cbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICB9XG4gIH1cbiAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MrKyk7XG4gIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHR5cGVzLnN0cmluZywgb3V0KVxufTtcblxuXG52YXIgSU5WQUxJRF9URU1QTEFURV9FU0NBUEVfRVJST1IgPSB7fTtcblxucHAkOC50cnlSZWFkVGVtcGxhdGVUb2tlbiA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmluVGVtcGxhdGVFbGVtZW50ID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICB0aGlzLnJlYWRUbXBsVG9rZW4oKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgaWYgKGVyciA9PT0gSU5WQUxJRF9URU1QTEFURV9FU0NBUEVfRVJST1IpIHtcbiAgICAgIHRoaXMucmVhZEludmFsaWRUZW1wbGF0ZVRva2VuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVyclxuICAgIH1cbiAgfVxuXG4gIHRoaXMuaW5UZW1wbGF0ZUVsZW1lbnQgPSBmYWxzZTtcbn07XG5cbnBwJDguaW52YWxpZFN0cmluZ1Rva2VuID0gZnVuY3Rpb24ocG9zaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKHRoaXMuaW5UZW1wbGF0ZUVsZW1lbnQgJiYgdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDkpIHtcbiAgICB0aHJvdyBJTlZBTElEX1RFTVBMQVRFX0VTQ0FQRV9FUlJPUlxuICB9IGVsc2Uge1xuICAgIHRoaXMucmFpc2UocG9zaXRpb24sIG1lc3NhZ2UpO1xuICB9XG59O1xuXG5wcCQ4LnJlYWRUbXBsVG9rZW4gPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIG91dCA9IFwiXCIsIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgZm9yICg7Oykge1xuICAgIGlmICh0aGlzJDEucG9zID49IHRoaXMkMS5pbnB1dC5sZW5ndGgpIHsgdGhpcyQxLnJhaXNlKHRoaXMkMS5zdGFydCwgXCJVbnRlcm1pbmF0ZWQgdGVtcGxhdGVcIik7IH1cbiAgICB2YXIgY2ggPSB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zKTtcbiAgICBpZiAoY2ggPT09IDk2IHx8IGNoID09PSAzNiAmJiB0aGlzJDEuaW5wdXQuY2hhckNvZGVBdCh0aGlzJDEucG9zICsgMSkgPT09IDEyMykge1xuICAgICAgaWYgKHRoaXMkMS5wb3MgPT09IHRoaXMkMS5zdGFydCAmJiAodGhpcyQxLnR5cGUgPT09IHR5cGVzLnRlbXBsYXRlIHx8IHRoaXMkMS50eXBlID09PSB0eXBlcy5pbnZhbGlkVGVtcGxhdGUpKSB7XG4gICAgICAgIGlmIChjaCA9PT0gMzYpIHtcbiAgICAgICAgICB0aGlzJDEucG9zICs9IDI7XG4gICAgICAgICAgcmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0eXBlcy5kb2xsYXJCcmFjZUwpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgICAgIHJldHVybiB0aGlzJDEuZmluaXNoVG9rZW4odHlwZXMuYmFja1F1b3RlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXQgKz0gdGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMkMS5wb3MpO1xuICAgICAgcmV0dXJuIHRoaXMkMS5maW5pc2hUb2tlbih0eXBlcy50ZW1wbGF0ZSwgb3V0KVxuICAgIH1cbiAgICBpZiAoY2ggPT09IDkyKSB7XG4gICAgICBvdXQgKz0gdGhpcyQxLmlucHV0LnNsaWNlKGNodW5rU3RhcnQsIHRoaXMkMS5wb3MpO1xuICAgICAgb3V0ICs9IHRoaXMkMS5yZWFkRXNjYXBlZENoYXIodHJ1ZSk7XG4gICAgICBjaHVua1N0YXJ0ID0gdGhpcyQxLnBvcztcbiAgICB9IGVsc2UgaWYgKGlzTmV3TGluZShjaCkpIHtcbiAgICAgIG91dCArPSB0aGlzJDEuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcyQxLnBvcyk7XG4gICAgICArK3RoaXMkMS5wb3M7XG4gICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICBpZiAodGhpcyQxLmlucHV0LmNoYXJDb2RlQXQodGhpcyQxLnBvcykgPT09IDEwKSB7ICsrdGhpcyQxLnBvczsgfVxuICAgICAgY2FzZSAxMDpcbiAgICAgICAgb3V0ICs9IFwiXFxuXCI7XG4gICAgICAgIGJyZWFrXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBvdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAodGhpcyQxLm9wdGlvbnMubG9jYXRpb25zKSB7XG4gICAgICAgICsrdGhpcyQxLmN1ckxpbmU7XG4gICAgICAgIHRoaXMkMS5saW5lU3RhcnQgPSB0aGlzJDEucG9zO1xuICAgICAgfVxuICAgICAgY2h1bmtTdGFydCA9IHRoaXMkMS5wb3M7XG4gICAgfSBlbHNlIHtcbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICB9XG4gIH1cbn07XG5cbnBwJDgucmVhZEludmFsaWRUZW1wbGF0ZVRva2VuID0gZnVuY3Rpb24oKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGZvciAoOyB0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoOyB0aGlzLnBvcysrKSB7XG4gICAgc3dpdGNoICh0aGlzJDEuaW5wdXRbdGhpcyQxLnBvc10pIHtcbiAgICBjYXNlIFwiXFxcXFwiOlxuICAgICAgKyt0aGlzJDEucG9zO1xuICAgICAgYnJlYWtcblxuICAgIGNhc2UgXCIkXCI6XG4gICAgICBpZiAodGhpcyQxLmlucHV0W3RoaXMkMS5wb3MgKyAxXSAhPT0gXCJ7XCIpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgIGNhc2UgXCJgXCI6XG4gICAgICByZXR1cm4gdGhpcyQxLmZpbmlzaFRva2VuKHR5cGVzLmludmFsaWRUZW1wbGF0ZSwgdGhpcyQxLmlucHV0LnNsaWNlKHRoaXMkMS5zdGFydCwgdGhpcyQxLnBvcykpXG5cbiAgICB9XG4gIH1cbiAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCBcIlVudGVybWluYXRlZCB0ZW1wbGF0ZVwiKTtcbn07XG5cblxucHAkOC5yZWFkRXNjYXBlZENoYXIgPSBmdW5jdGlvbihpblRlbXBsYXRlKSB7XG4gIHZhciBjaCA9IHRoaXMuaW5wdXQuY2hhckNvZGVBdCgrK3RoaXMucG9zKTtcbiAgKyt0aGlzLnBvcztcbiAgc3dpdGNoIChjaCkge1xuICBjYXNlIDExMDogcmV0dXJuIFwiXFxuXCJcbiAgY2FzZSAxMTQ6IHJldHVybiBcIlxcclwiXG4gIGNhc2UgMTIwOiByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh0aGlzLnJlYWRIZXhDaGFyKDIpKVxuICBjYXNlIDExNzogcmV0dXJuIGNvZGVQb2ludFRvU3RyaW5nKHRoaXMucmVhZENvZGVQb2ludCgpKVxuICBjYXNlIDExNjogcmV0dXJuIFwiXFx0XCJcbiAgY2FzZSA5ODogcmV0dXJuIFwiXFxiXCJcbiAgY2FzZSAxMTg6IHJldHVybiBcIlxcdTAwMGJcIlxuICBjYXNlIDEwMjogcmV0dXJuIFwiXFxmXCJcbiAgY2FzZSAxMzogaWYgKHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcykgPT09IDEwKSB7ICsrdGhpcy5wb3M7IH1cbiAgY2FzZSAxMDpcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykgeyB0aGlzLmxpbmVTdGFydCA9IHRoaXMucG9zOyArK3RoaXMuY3VyTGluZTsgfVxuICAgIHJldHVybiBcIlwiXG4gIGRlZmF1bHQ6XG4gICAgaWYgKGNoID49IDQ4ICYmIGNoIDw9IDU1KSB7XG4gICAgICB2YXIgb2N0YWxTdHIgPSB0aGlzLmlucHV0LnN1YnN0cih0aGlzLnBvcyAtIDEsIDMpLm1hdGNoKC9eWzAtN10rLylbMF07XG4gICAgICB2YXIgb2N0YWwgPSBwYXJzZUludChvY3RhbFN0ciwgOCk7XG4gICAgICBpZiAob2N0YWwgPiAyNTUpIHtcbiAgICAgICAgb2N0YWxTdHIgPSBvY3RhbFN0ci5zbGljZSgwLCAtMSk7XG4gICAgICAgIG9jdGFsID0gcGFyc2VJbnQob2N0YWxTdHIsIDgpO1xuICAgICAgfVxuICAgICAgaWYgKG9jdGFsU3RyICE9PSBcIjBcIiAmJiAodGhpcy5zdHJpY3QgfHwgaW5UZW1wbGF0ZSkpIHtcbiAgICAgICAgdGhpcy5pbnZhbGlkU3RyaW5nVG9rZW4odGhpcy5wb3MgLSAyLCBcIk9jdGFsIGxpdGVyYWwgaW4gc3RyaWN0IG1vZGVcIik7XG4gICAgICB9XG4gICAgICB0aGlzLnBvcyArPSBvY3RhbFN0ci5sZW5ndGggLSAxO1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUob2N0YWwpXG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoKVxuICB9XG59O1xuXG5cbnBwJDgucmVhZEhleENoYXIgPSBmdW5jdGlvbihsZW4pIHtcbiAgdmFyIGNvZGVQb3MgPSB0aGlzLnBvcztcbiAgdmFyIG4gPSB0aGlzLnJlYWRJbnQoMTYsIGxlbik7XG4gIGlmIChuID09PSBudWxsKSB7IHRoaXMuaW52YWxpZFN0cmluZ1Rva2VuKGNvZGVQb3MsIFwiQmFkIGNoYXJhY3RlciBlc2NhcGUgc2VxdWVuY2VcIik7IH1cbiAgcmV0dXJuIG5cbn07XG5cblxucHAkOC5yZWFkV29yZDEgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdGhpcy5jb250YWluc0VzYyA9IGZhbHNlO1xuICB2YXIgd29yZCA9IFwiXCIsIGZpcnN0ID0gdHJ1ZSwgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuICB2YXIgYXN0cmFsID0gdGhpcy5vcHRpb25zLmVjbWFWZXJzaW9uID49IDY7XG4gIHdoaWxlICh0aGlzLnBvcyA8IHRoaXMuaW5wdXQubGVuZ3RoKSB7XG4gICAgdmFyIGNoID0gdGhpcyQxLmZ1bGxDaGFyQ29kZUF0UG9zKCk7XG4gICAgaWYgKGlzSWRlbnRpZmllckNoYXIoY2gsIGFzdHJhbCkpIHtcbiAgICAgIHRoaXMkMS5wb3MgKz0gY2ggPD0gMHhmZmZmID8gMSA6IDI7XG4gICAgfSBlbHNlIGlmIChjaCA9PT0gOTIpIHtcbiAgICAgIHRoaXMkMS5jb250YWluc0VzYyA9IHRydWU7XG4gICAgICB3b3JkICs9IHRoaXMkMS5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzJDEucG9zKTtcbiAgICAgIHZhciBlc2NTdGFydCA9IHRoaXMkMS5wb3M7XG4gICAgICBpZiAodGhpcyQxLmlucHV0LmNoYXJDb2RlQXQoKyt0aGlzJDEucG9zKSAhPSAxMTcpXG4gICAgICAgIHsgdGhpcyQxLmludmFsaWRTdHJpbmdUb2tlbih0aGlzJDEucG9zLCBcIkV4cGVjdGluZyBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZSBcXFxcdVhYWFhcIik7IH1cbiAgICAgICsrdGhpcyQxLnBvcztcbiAgICAgIHZhciBlc2MgPSB0aGlzJDEucmVhZENvZGVQb2ludCgpO1xuICAgICAgaWYgKCEoZmlyc3QgPyBpc0lkZW50aWZpZXJTdGFydCA6IGlzSWRlbnRpZmllckNoYXIpKGVzYywgYXN0cmFsKSlcbiAgICAgICAgeyB0aGlzJDEuaW52YWxpZFN0cmluZ1Rva2VuKGVzY1N0YXJ0LCBcIkludmFsaWQgVW5pY29kZSBlc2NhcGVcIik7IH1cbiAgICAgIHdvcmQgKz0gY29kZVBvaW50VG9TdHJpbmcoZXNjKTtcbiAgICAgIGNodW5rU3RhcnQgPSB0aGlzJDEucG9zO1xuICAgIH0gZWxzZSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBmaXJzdCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB3b3JkICsgdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcylcbn07XG5cblxucHAkOC5yZWFkV29yZCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd29yZCA9IHRoaXMucmVhZFdvcmQxKCk7XG4gIHZhciB0eXBlID0gdHlwZXMubmFtZTtcbiAgaWYgKHRoaXMua2V5d29yZHMudGVzdCh3b3JkKSkge1xuICAgIGlmICh0aGlzLmNvbnRhaW5zRXNjKSB7IHRoaXMucmFpc2VSZWNvdmVyYWJsZSh0aGlzLnN0YXJ0LCBcIkVzY2FwZSBzZXF1ZW5jZSBpbiBrZXl3b3JkIFwiICsgd29yZCk7IH1cbiAgICB0eXBlID0ga2V5d29yZHMkMVt3b3JkXTtcbiAgfVxuICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0eXBlLCB3b3JkKVxufTtcblxuXG52YXIgdmVyc2lvbiA9IFwiNS4xLjJcIjtcblxuXG5mdW5jdGlvbiBwYXJzZShpbnB1dCwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFBhcnNlcihvcHRpb25zLCBpbnB1dCkucGFyc2UoKVxufVxuXG5cbmZ1bmN0aW9uIHBhcnNlRXhwcmVzc2lvbkF0KGlucHV0LCBwb3MsIG9wdGlvbnMpIHtcbiAgdmFyIHAgPSBuZXcgUGFyc2VyKG9wdGlvbnMsIGlucHV0LCBwb3MpO1xuICBwLm5leHRUb2tlbigpO1xuICByZXR1cm4gcC5wYXJzZUV4cHJlc3Npb24oKVxufVxuXG5cbmZ1bmN0aW9uIHRva2VuaXplcihpbnB1dCwgb3B0aW9ucykge1xuICByZXR1cm4gbmV3IFBhcnNlcihvcHRpb25zLCBpbnB1dClcbn1cblxuZnVuY3Rpb24gYWRkTG9vc2VFeHBvcnRzKHBhcnNlLCBQYXJzZXIkJDEsIHBsdWdpbnMkJDEpIHtcbiAgZXhwb3J0cy5wYXJzZV9kYW1taXQgPSBwYXJzZTtcbiAgZXhwb3J0cy5Mb29zZVBhcnNlciA9IFBhcnNlciQkMTtcbiAgZXhwb3J0cy5wbHVnaW5zTG9vc2UgPSBwbHVnaW5zJCQxO1xufVxuXG5leHBvcnRzLnZlcnNpb24gPSB2ZXJzaW9uO1xuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xuZXhwb3J0cy5wYXJzZUV4cHJlc3Npb25BdCA9IHBhcnNlRXhwcmVzc2lvbkF0O1xuZXhwb3J0cy50b2tlbml6ZXIgPSB0b2tlbml6ZXI7XG5leHBvcnRzLmFkZExvb3NlRXhwb3J0cyA9IGFkZExvb3NlRXhwb3J0cztcbmV4cG9ydHMuUGFyc2VyID0gUGFyc2VyO1xuZXhwb3J0cy5wbHVnaW5zID0gcGx1Z2lucztcbmV4cG9ydHMuZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucztcbmV4cG9ydHMuUG9zaXRpb24gPSBQb3NpdGlvbjtcbmV4cG9ydHMuU291cmNlTG9jYXRpb24gPSBTb3VyY2VMb2NhdGlvbjtcbmV4cG9ydHMuZ2V0TGluZUluZm8gPSBnZXRMaW5lSW5mbztcbmV4cG9ydHMuTm9kZSA9IE5vZGU7XG5leHBvcnRzLlRva2VuVHlwZSA9IFRva2VuVHlwZTtcbmV4cG9ydHMudG9rVHlwZXMgPSB0eXBlcztcbmV4cG9ydHMua2V5d29yZFR5cGVzID0ga2V5d29yZHMkMTtcbmV4cG9ydHMuVG9rQ29udGV4dCA9IFRva0NvbnRleHQ7XG5leHBvcnRzLnRva0NvbnRleHRzID0gdHlwZXMkMTtcbmV4cG9ydHMuaXNJZGVudGlmaWVyQ2hhciA9IGlzSWRlbnRpZmllckNoYXI7XG5leHBvcnRzLmlzSWRlbnRpZmllclN0YXJ0ID0gaXNJZGVudGlmaWVyU3RhcnQ7XG5leHBvcnRzLlRva2VuID0gVG9rZW47XG5leHBvcnRzLmlzTmV3TGluZSA9IGlzTmV3TGluZTtcbmV4cG9ydHMubGluZUJyZWFrID0gbGluZUJyZWFrO1xuZXhwb3J0cy5saW5lQnJlYWtHID0gbGluZUJyZWFrRztcbmV4cG9ydHMubm9uQVNDSUl3aGl0ZXNwYWNlID0gbm9uQVNDSUl3aGl0ZXNwYWNlO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuXG59LHt9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG5cbn0se31dfSx7fSxbMjVdKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ3B1ID0gbmV3IEdQVSgpO1xuXG5jb25zdCBEYXRhID0ge307XG5cbnZhciBQYXJ0aWVzLCBSaWRpbmdzLCBQYXJ0aWVzSSwgUmlkaW5nc0k7XG52YXIgU2xvcGVzQSwgSW50ZXJjZXB0c0E7XG52YXIgUmVzO1xuXG52YXIgZGF0YVJlYWR5ID0gZmFsc2U7XG5cbmNvbnN0IFBvcHVsYXJWb3RlcyA9IHtcbiAgXCJMaWJlcmFsXCI6IDQwLjAsXG4gIFwiQ29uc2VydmF0aXZlXCI6IDMwLjAsXG4gIFwiTmV3IERlbW9jcmF0aWNcIjogMjAuMCxcbiAgXCJHcmVlblwiOiA1LjAsXG4gIFwiQmxvYyBRdcOpYsOpY29pc1wiOiA1LjAsXG59O1xuXG5jb25zdCBQYXJ0eUtleXMgPSB7XG4gIFwiTGliZXJhbFwiOiBcIkxJQlwiLFxuICBcIkNvbnNlcnZhdGl2ZVwiOiBcIkNPTlwiLFxuICBcIk5ldyBEZW1vY3JhdGljXCI6IFwiTkRQXCIsXG4gIFwiR3JlZW5cIjogXCJHUk5cIixcbiAgXCJCbG9jIFF1w6liw6ljb2lzXCI6IFwiQlFcIlxufTtcblxuY29uc3QgZmlsZXMgPSBbXCJtb2RlbHNcIiwgXCJwZVwiLCBcImNyZVwiXTtcblxuZnVuY3Rpb24gUEkoaSwgeCkgeyByZXR1cm4gUGFydGllc1tpXTsgfVxuXG5mdW5jdGlvbiBSSShpLCB4KSB7IHJldHVybiBSaWRpbmdzW2ldOyB9XG5cbmZ1bmN0aW9uIG9ial9mcm9tX2FycihrZXlzLCBhcnIpIHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzW2tleXNbaV1dID0gYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbmZ1bmN0aW9uIERLUih4cykgeyByZXR1cm4gb2JqX2Zyb21fYXJyKFJpZGluZ3MsIHhzKTsgfVxuZnVuY3Rpb24gREtQKHhzKSB7IHJldHVybiBvYmpfZnJvbV9hcnIoUGFydGllcywgeHMpOyB9XG5mdW5jdGlvbiBEVlAoeHMpIHsgcmV0dXJuIHhzLm1hcChQSSk7IH1cblxuZnVuY3Rpb24gRUtQKFBWKSB7IHJldHVybiBhcnJfZnJvbV9vYmooUGFydGllc0ksIFBWKTsgfVxuXG5mdW5jdGlvbiBhcnJfZnJvbV9vYmooaW5kaWNlcywgb2JqKSB7XG4gIGNvbnN0IGFyciA9IFtdO1xuICBmb3IgKHZhciBrIGluIG9iaikge1xuICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgIGFycltpbmRpY2VzW2tdXSA9IG9ialtrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBpbnZlcnQoeHMpIHtcbiAgY29uc3QgcmVzID0ge307XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXNbeHNbaV1dID0gaTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBieV9yaWRpbmdfcGFydHkocmlkaW5nX2lkcywgcGFydHlfbmFtZXMsIHhzKSB7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBjb25zdCBOID0geHMubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgIGNvbnN0IHIgPSByaWRpbmdfaWRzW2ldO1xuICAgIGlmICghKHIgaW4gbWFwKSkge1xuICAgICAgbWFwW3JdID0ge307XG4gICAgfVxuXG4gICAgbWFwW3JdW3BhcnR5X25hbWVzW2ldXSA9IHhzW2ldO1xuICB9XG5cbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcnBfdG9fYXJyYXkyZChtYXAsIHYwKSB7XG4gIGNvbnN0IGFyciA9IFtdO1xuICBjb25zdCBSID0gT2JqZWN0LmtleXMoUmlkaW5ncykubGVuZ3RoO1xuICBjb25zdCBQID0gT2JqZWN0LmtleXMoUGFydGllcykubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IFI7IGkrKykge1xuICAgIGFycltpXSA9IFtdO1xuICAgIHZhciBtID0gbWFwW1JpZGluZ3NbaV1dIHx8IHt9O1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgUDsgaisrKSB7XG4gICAgICBjb25zdCB2YWwgPSBtW1BhcnRpZXNbal1dO1xuICAgICAgYXJyW2ldLnB1c2godmFsID09PSB1bmRlZmluZWQgPyB2MCA6IHZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8vIGV2YWx1YXRlIGF0IHN3aW5nIG1vZGVsIGF0IFBWPVBWK2kqZFBWMStqKmRQVjIgYW5kIGdldCBzZWF0XG4vLyBjb3VudCBmb3IgcGFydHkga1xuZnVuY3Rpb24gZXZhbHVhdGVNYXAoXG4gIC8qIFAgKi8gcHZzLFxuICAvKiBQICovIGRwdngsXG4gIC8qIFAgKi8gZHB2eSxcbiAgLyogUipQICovIHNsb3BlcyxcbiAgLyogUipQICovIGludGVyY2VwdHMsXG4gIHApIHtcbiAgLy9jb25zdCBwID0gdGhpcy50aHJlYWQuejtcbiAgdmFyIGNvdW50ID0gMDtcbiAgZm9yICh2YXIgciA9IDA7IHIgPCB0aGlzLmNvbnN0YW50cy5SOyByKyspIHtcbiAgICB2YXIgYmVzdEkgPSAwO1xuICAgIHZhciBiZXN0RSA9IC0xMDAuMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29uc3RhbnRzLlA7IGkrKykge1xuICAgICAgdmFyIHB2ID0gKHRoaXMuY29uc3RhbnRzLngwICsgdGhpcy50aHJlYWQueCAqIHRoaXMuY29uc3RhbnRzLmR4KSAqIGRwdnhbaV0gK1xuICAgICAgICAodGhpcy5jb25zdGFudHMueTAgKyB0aGlzLnRocmVhZC55ICogdGhpcy5jb25zdGFudHMuZHkpICogZHB2eVtpXSArXG4gICAgICAgIHB2c1tpXTtcblxuICAgICAgdmFyIGV2ID0gcHYgKiBzbG9wZXNbcl1baV0gKyBpbnRlcmNlcHRzW3JdW2ldO1xuICAgICAgY29uc3QgcyA9IHN0ZXAoYmVzdEUsIGV2KTtcbiAgICAgIGNvbnN0IHMxID0gc3RlcChldiwgYmVzdEUpO1xuICAgICAgYmVzdEkgPSBzMSAqIGJlc3RJICsgcyAqIGk7XG4gICAgICBiZXN0RSA9IHMxICogYmVzdEUgKyBzICogZXY7XG4gICAgICAvL2lmIChzID4gMCAvKmV2ID4gYmVzdEUqLykge1xuICAgICAgLy8gIGJlc3RJID0gaTtcbiAgICAgIC8vICBiZXN0RSA9IGV2O1xuICAgICAgLy99XG4gICAgfVxuXG4gICAgaWYgKGJlc3RJID09PSBwKSBjb3VudCsrO1xuICB9XG4gIHJldHVybiBjb3VudDtcbn1cblxudmFyIEsgPSB7XG4gIGV2YWx1YXRlTWFwOiBncHUuY3JlYXRlS2VybmVsKGV2YWx1YXRlTWFwKSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKE5YLCBOWSwgY29uc3RhbnRzKSB7XG4gICAgY29uc3Qga2VybmVsID0gZ3B1LmNyZWF0ZUtlcm5lbChmdW5jdGlvbihcbiAgICAgICAgLyogUCAqLyBwdnMsXG4gICAgICAgIC8qIFAgKi8gZHB2eCxcbiAgICAgICAgLyogUCAqLyBkcHZ5LFxuICAgICAgICAvKiBSKlAgKi8gc2xvcGVzLFxuICAgICAgICAvKiBSKlAgKi8gaW50ZXJjZXB0cykge1xuICAgICAgY29uc3QgTCA9ICgxLjAgKiBldmFsdWF0ZU1hcChwdnMsIGRwdngsIGRwdnksIHNsb3BlcywgaW50ZXJjZXB0cywgMykpIC8gMzM4LjA7XG4gICAgICBjb25zdCBOID0gKDEuMCAqIGV2YWx1YXRlTWFwKHB2cywgZHB2eCwgZHB2eSwgc2xvcGVzLCBpbnRlcmNlcHRzLCA0KSkgLyAzMzguMDtcbiAgICAgIGNvbnN0IEMgPSAoMS4wICogZXZhbHVhdGVNYXAocHZzLCBkcHZ4LCBkcHZ5LCBzbG9wZXMsIGludGVyY2VwdHMsIDEpKSAvIDMzOC4wO1xuXG4gICAgICB2YXIgayA9IDAuMDtcbiAgICAgIGlmIChMID4gTiAmJiBMID4gQykge1xuICAgICAgICBpZiAoTCA8IDAuNSkgayA9IDAuMjtcbiAgICAgICAgdGhpcy5jb2xvcigxLCBrLCBrKTtcbiAgICAgIH0gZWxzZSBpZiAoTiA+IEwgJiYgTiA+IEMpIHtcbiAgICAgICAgaWYgKE4gPCAwLjUpIGsgPSAwLjI7XG4gICAgICAgIHRoaXMuY29sb3IoMSwgMC41ICsgaywgayk7XG4gICAgICB9IGVsc2UgaWYgKEMgPiBMICYmIEMgPiBOKSB7XG4gICAgICAgIGlmIChDIDwgMC41KSBrID0gMC4yO1xuICAgICAgICB0aGlzLmNvbG9yKGssIGssIDAuNzUpO1xuICAgICAgfSBlbHNlIGlmIChMID09PSBOICYmIEwgPT09IEMpIHtcbiAgICAgICAgdGhpcy5jb2xvcigxLCAxLCAxKTtcbiAgICAgIH0gZWxzZSBpZiAoTCA9PT0gTiAmJiBMICE9PSBDKSB7XG4gICAgICAgIHRoaXMuY29sb3IoMC41LCAwLjUsIDApO1xuICAgICAgfSBlbHNlIGlmIChMID09PSBDICYmIEwgIT09IE4pIHtcbiAgICAgICAgdGhpcy5jb2xvcigwLjUsIDAsIDAuNSk7XG4gICAgICB9IGVsc2UgaWYgKE4gPT09IEMgJiYgTiAhPT0gTCkge1xuICAgICAgICB0aGlzLmNvbG9yKDAuMiwgMC41LCAwLjUpO1xuICAgICAgfVxuICAgICAgLy90aGlzLmNvbG9yKEwsIE4sIEMpO1xuICAgIH0sXG4gICAge1xuICAgICAgY29uc3RhbnRzOiBjb25zdGFudHMsXG4gICAgICBvdXRwdXQ6IFtOWCwgTlldLFxuICAgICAgZGltZW5zaW9uczogW05YLCBOWV0sXG4gICAgICBncmFwaGljYWw6IHRydWUsXG4gICAgICBkZWJ1ZzogZmFsc2UsXG4gICAgICBvdXRwdXRUb1RleHR1cmU6IHRydWUsXG4gICAgICBmdW5jdGlvbnM6IFtldmFsdWF0ZU1hcF1cbiAgICB9XG5cbiAgICApO1xuICAgIC8va2VybmVsLnNldEdyYXBoaWNhbCh0cnVlKTtcblxuICAgIHJldHVybiBrZXJuZWw7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICBpZiAoIWRhdGFSZWFkeSkgcmV0dXJuO1xuXG4gIGNvbnNvbGUubG9nKFBvcHVsYXJWb3Rlcyk7XG5cbiAgY29uc3QgcGUgPSBEYXRhLnBlLCBtb2RlbHMgPSBEYXRhLm1vZGVscywgY3JlID0gRGF0YS5jcmU7XG5cbiAgUGFydGllc0kgPSBpbnZlcnQoUGFydGllcyA9IF8udW5pcShwZS5wYXJ0eV9uYW1lKSk7XG4gIFJpZGluZ3NJID0gaW52ZXJ0KFJpZGluZ3MgPSBfLnVuaXEobW9kZWxzLnJpZGluZ19pZCkpO1xuXG4gIGNvbnN0IE4gPSBtb2RlbHMuc2xvcGUubGVuZ3RoO1xuXG4gIFNsb3Blc0EgPSBycF90b19hcnJheTJkKGJ5X3JpZGluZ19wYXJ0eShcbiAgICBtb2RlbHMucmlkaW5nX2lkLCBtb2RlbHMucGFydHlfbmFtZSwgbW9kZWxzLnNsb3BlKSwgMC4wKTtcbiAgSW50ZXJjZXB0c0EgPSBycF90b19hcnJheTJkKGJ5X3JpZGluZ19wYXJ0eShcbiAgICBtb2RlbHMucmlkaW5nX2lkLCBtb2RlbHMucGFydHlfbmFtZSwgbW9kZWxzLmludGVyY2VwdCksIC0xMDAuMCk7XG5cbiAgY29uc3QgTlggPSA2MDAsIE5ZID0gNjAwO1xuICBjb25zdCBjb25zdGFudHMgPSB7XG4gICAgeDA6IC0zMC4wLCBkeDogNjAuMCAvIE5YLFxuICAgIHkwOiAtMzAuMCwgZHk6IDYwLjAgLyBOWSxcbiAgICBOWDogTlgsXG4gICAgTlk6IE5ZLFxuICAgIFA6IFBhcnRpZXMubGVuZ3RoLFxuICAgIFI6IFJpZGluZ3MubGVuZ3RoLFxuICAgIE46IE5cbiAgfTtcbiAgLy9jb25zdCBlbSA9IEsuZXZhbHVhdGVNYXA7XG4gIC8vZW0uc2V0Q29uc3RhbnRzKGNvbnN0YW50cyk7XG4gIC8vZW0uc2V0T3V0cHV0KFtOWCwgTlksIFBhcnRpZXMubGVuZ3RoXSk7XG4gIC8vY29uc3QgUFYgPSBFS1AoUG9wdWxhclZvdGVzKTtcbiAgLy8oUmVzID0gREtQKEsuZXZhbHVhdGVNYXAoXG4gIC8vICAvL1s1LjAsIDMwLjAsIDUuMCwgNDAuMCwgMjAuMF0sXG4gIC8vICBbNS4wLCAzMC4wLCA1LjAsIDMwLjAsIDMwLjBdLFxuICAvLyAgWzAuMCwgMC4wLCAwLjAsIC0xLjAsIDEuMF0sXG4gIC8vICBbMC4wLCAtMS4wLCAwLjAsIDEuMCwgMC4wXSxcbiAgLy8gIFNsb3Blc0EsXG4gIC8vICBJbnRlcmNlcHRzQVxuICAvLykpKTtcblxuICBjb25zdCByZW5kZXIgPSBLLnJlbmRlcihOWCwgTlksIGNvbnN0YW50cyk7XG4gIC8vcmVuZGVyLnNldE91dHB1dChbTlgsIE5ZXSkuc2V0R3JhcGhpY2FsKHRydWUpO1xuICBjb25zdCBjYW52YXMgPSByZW5kZXIuZ2V0Q2FudmFzKCk7XG4gICQoXCIjcGxvdHRpbmdfYXJlYVwiKVswXS5hcHBlbmRDaGlsZChjYW52YXMpO1xuXG4gIGZ1bmN0aW9uIGRyYXcoKSB7XG4gICAgY29uc3QgdDAgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAocmVuZGVyKFxuICAgICAgLy9bNS4wLCAzMC4wLCA1LjAsIDMwLjAsIDMwLjBdLFxuICAgICAgRUtQKFBvcHVsYXJWb3RlcyksXG4gICAgICBbMC4wLCAwLjAsIDAuMCwgLTEuMCwgMS4wXSxcbiAgICAgIFswLjAsIC0xLjAsIDAuMCwgMS4wLCAwLjBdLFxuICAgICAgU2xvcGVzQSxcbiAgICAgIEludGVyY2VwdHNBXG4gICAgKSk7XG4gICAgY29uc3QgdDEgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICBjb25zb2xlLmxvZyhcImFmdGVyXCIsIHQxIC0gdDApO1xuICAgIC8vcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXcpO1xuICB9XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShkcmF3KTtcblxuICBpZiAoZmFsc2UpIHtcbiAgICBjb25zdCBldmFsdWF0ZSA9IGdwdS5jcmVhdGVLZXJuZWwoZnVuY3Rpb24gZXZhbHVhdGUocHZzLCBzbG9wZXMsIGludGVyY2VwdHMpIHtcbiAgICAgIHZhciBiZXN0SSA9IDA7XG4gICAgICB2YXIgYmVzdEUgPSAtMTAwLjA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuY29uc3RhbnRzLlA7IGkrKykge1xuICAgICAgICB2YXIgZXYgPSBwdnNbaV0gKiBzbG9wZXNbdGhpcy50aHJlYWQueF1baV0gKyBpbnRlcmNlcHRzW3RoaXMudGhyZWFkLnhdW2ldO1xuICAgICAgICBpZiAoZXYgPiBiZXN0RSkge1xuICAgICAgICAgIGJlc3RJID0gaTtcbiAgICAgICAgICBiZXN0RSA9IGV2O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYmVzdEk7XG4gICAgfSwge1xuICAgICAgY29uc3RhbnRzOiB7IFA6IFBhcnRpZXMubGVuZ3RoLCBOOiBOIH0sXG4gICAgICBvdXRwdXQ6IFtOXVxuICAgIH0pO1xuXG4gICAgY29uc3QgYyA9IGV2YWx1YXRlKFBWLCBTbG9wZXNBLCBJbnRlcmNlcHRzQSk7XG4gICAgLy9jb25zdCByZXN1bHRzID0gREtSKERWUChBcnJheS5mcm9tKGMpKSk7XG4gICAgLy9SZXMgPSByZXN1bHRzO1xuICAgIC8vY29uc29sZS5sb2cocmVzdWx0cyk7XG4gICAgY29uc29sZS5sb2coXy5tYXBWYWx1ZXMoXCJsZW5ndGhcIiwgXy5ncm91cEJ5KF8uaWRlbnRpdHksIF8udmFsdWVzKFJlcykpKSk7XG4gIH1cbn1cblxuJC53aGVuLmFwcGx5KHRoaXMsIGZpbGVzLm1hcCgobmFtZSkgPT4ge1xuICByZXR1cm4gJC5nZXRKU09OKFwiZGF0YS9cIituYW1lK1wiLmpzb25cIiwgKHJlcykgPT4geyBEYXRhW25hbWVdID0gcmVzOyB9KTtcbn0pKS50aGVuKCgpID0+IHsgZGF0YVJlYWR5ID0gdHJ1ZTsgfSk7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KCgpID0+IHtcbiAgbGV0IHB2X3NsaWRlcnMgPSAkKFwiI3B2X3NsaWRlcnNcIik7XG5cbiAgXy5rZXlzKFBvcHVsYXJWb3RlcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgbGV0IHBhcnR5ID0gUGFydHlLZXlzW2tleV07XG4gICAgbGV0IHB2SWQgPSBcInB2X1wiICsgcGFydHk7XG4gICAgbGV0IGRpdiA9ICQoXCI8ZGl2PlwiLCB7ICdjbGFzcyc6ICdzbGlkZXJfY29udGFpbmVyJyB9KTtcbiAgICBkaXYuYXBwZW5kKCQoXCI8ZGl2IGNsYXNzPSdzbGlkZXJfbGFiZWwnPlwiICsga2V5ICsgXCI6IDwvZGl2PlwiKSk7XG4gICAgbGV0IHNsaWRlckVsZW0gPSAkKFwiPGRpdj5cIiwgeyBpZDogcHZJZCwgJ2NsYXNzJzogJ3NsaWRlcicgfSk7XG4gICAgZGl2LmFwcGVuZChzbGlkZXJFbGVtKTtcbiAgICBwdl9zbGlkZXJzLmFwcGVuZChkaXYpO1xuXG4gICAgbGV0IHNsaWRlciA9IHNsaWRlckVsZW1bMF07XG4gICAgbm9VaVNsaWRlci5jcmVhdGUoc2xpZGVyLCB7XG4gICAgICBzdGFydDogUG9wdWxhclZvdGVzW2tleV0sXG4gICAgICB0b29sdGlwczogdHJ1ZSxcbiAgICAgIHJhbmdlOiB7bWluOiAwLCBtYXg6MTAwfSxcbiAgICAgICdjbGFzcyc6ICdzbGlkZXInLFxuICAgICAgcGlwczoge1xuICAgICAgICBtb2RlOiAncG9zaXRpb25zJyxcbiAgICAgICAgdmFsdWVzOiBbMCw1LDEwLDE1LDIwLDI1LDMwLDM1LDQwLDQ1LDUwLDYwLDcwLDgwLDkwLDEwMF0sXG4gICAgICAgIGRlbnNpdHk6IDFcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzbGlkZXIubm9VaVNsaWRlci5vbignY2hhbmdlJywgKHZhbHVlKSA9PiB7IFBvcHVsYXJWb3Rlc1trZXldID0gcGFyc2VGbG9hdCh2YWx1ZVswXSk7IH0pO1xuICB9KTtcbn0pO1xuXG4iXX0=
